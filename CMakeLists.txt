cmake_minimum_required(VERSION 3.21 FATAL_ERROR)

project(GeodeBindings VERSION 1.0.0)

if (NOT DEFINED GEODE_TARGET_PLATFORM)
	message(FATAL_ERROR "GEODE_TARGET_PLATFORM is not defined.")
endif()
if (NOT DEFINED GEODE_GD_VERSION)
	message(FATAL_ERROR "GEODE_GD_VERSION is not defined.")
endif()
if (NOT DEFINED GEODE_LOADER_PATH)
	message(FATAL_ERROR "GEODE_LOADER_PATH is not defined.")
endif()

if (NOT GEODE_BINDINGS_PATH)
	set(GEODE_BINDINGS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bindings/${GEODE_GD_VERSION})
endif()

set(GEODE_CODEGEN_BINARY_OUT ${CMAKE_CURRENT_BINARY_DIR}/codegen)
set(GEODE_CODEGEN_PATH ${CMAKE_CURRENT_BINARY_DIR}/bindings)

set(GEODE_CODEGEN_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/codegen)
set(GEODE_CODEGEN_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/codegen-build)
file(MAKE_DIRECTORY ${GEODE_CODEGEN_BINARY_DIR})

if (NOT SKIP_BUILDING_CODEGEN)
	if (DEFINED CROSS_TOOLCHAIN_FLAGS_NATIVE)
		message(STATUS "Passing CROSS_TOOLCHAIN_FLAGS_NATIVE to Codegen")
		set(GEODE_CODEGEN_CROSS_TOOLCHAIN_FLAGS_NATIVE -DCROSS_TOOLCHAIN_FLAGS_NATIVE=${CROSS_TOOLCHAIN_FLAGS_NATIVE})
	endif()

	message(STATUS "Configuring Codegen")
	execute_process(
		COMMAND ${CMAKE_COMMAND} ${GEODE_CODEGEN_CMAKE_ARGS}
			-DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}
			-DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
			${GEODE_CODEGEN_CROSS_TOOLCHAIN_FLAGS_NATIVE}
			-DCMAKE_BUILD_TYPE=Release
			-DCMAKE_INSTALL_PREFIX:STRING=${GEODE_CODEGEN_BINARY_OUT}
			-S ${GEODE_CODEGEN_SOURCE_DIR} -B ${GEODE_CODEGEN_BINARY_DIR}
		WORKING_DIRECTORY ${GEODE_CODEGEN_SOURCE_DIR}
		COMMAND_ECHO STDOUT
		COMMAND_ERROR_IS_FATAL ANY
	)
	message(STATUS "Building Codegen")
	execute_process(
		COMMAND ${CMAKE_COMMAND} --build ${GEODE_CODEGEN_BINARY_DIR} --config Release
		WORKING_DIRECTORY ${GEODE_CODEGEN_SOURCE_DIR}
		COMMAND_ECHO STDOUT
		COMMAND_ERROR_IS_FATAL ANY
	)
	execute_process(
		COMMAND ${CMAKE_COMMAND} --install ${GEODE_CODEGEN_BINARY_DIR} --config Release
			--prefix ${GEODE_CODEGEN_BINARY_OUT}
		WORKING_DIRECTORY ${GEODE_CODEGEN_SOURCE_DIR}
		COMMAND_ECHO STDOUT
		COMMAND_ERROR_IS_FATAL ANY
	)

	include(ExternalProject)
	ExternalProject_Add(GeodeCodegen
		BUILD_ALWAYS ON
		SOURCE_DIR ${GEODE_CODEGEN_SOURCE_DIR}
		BINARY_DIR ${GEODE_CODEGEN_BINARY_DIR}
		CONFIGURE_COMMAND ${CMAKE_COMMAND} ${GEODE_CODEGEN_CMAKE_ARGS}
			-DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}
			-DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
			${GEODE_CODEGEN_CROSS_TOOLCHAIN_FLAGS_NATIVE}
			-DCMAKE_BUILD_TYPE=Release
			-DCMAKE_INSTALL_PREFIX:STRING=${GEODE_CODEGEN_BINARY_OUT}
			-S <SOURCE_DIR> -B <BINARY_DIR>
		BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config Release
		INSTALL_COMMAND ${CMAKE_COMMAND} --install <BINARY_DIR> --config Release
			--prefix ${GEODE_CODEGEN_BINARY_OUT}
	)
else()
	# does nothing
	add_custom_target(CodegenProject)
endif()

message(STATUS "Running Codegen")
execute_process(
	COMMAND ./Codegen ${GEODE_TARGET_PLATFORM} ${GEODE_BINDINGS_PATH} ${GEODE_CODEGEN_PATH}
	WORKING_DIRECTORY ${GEODE_CODEGEN_BINARY_OUT}
	COMMAND_ECHO STDOUT
	COMMAND_ERROR_IS_FATAL ANY
)
add_custom_target(GeodeCodegenRun
	DEPENDS GeodeCodegen
	COMMENT "Running Codegen"
	COMMAND ./Codegen ${GEODE_TARGET_PLATFORM} ${GEODE_BINDINGS_PATH} ${GEODE_CODEGEN_PATH}
	WORKING_DIRECTORY ${GEODE_CODEGEN_BINARY_OUT}
)

if (GEODE_IS_MEMBER_TEST)
	set(GEODE_MEMBER_TEST_CODEGEN_PATH ${GEODE_CODEGEN_PATH} PARENT_SCOPE)
	return()
endif()

add_library(${PROJECT_NAME} ${GEODE_CODEGEN_PATH}/Geode/GeneratedSource.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${GEODE_CODEGEN_PATH})

set_target_properties(${PROJECT_NAME} PROPERTIES CXX_VISIBILITY_PRESET hidden)
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_20)

if (APPLE)
	target_compile_options(${PROJECT_NAME} PUBLIC -ffunction-sections -fdata-sections)
	target_link_options(${PROJECT_NAME} PUBLIC -dead_strip)
elseif (ANDROID)
	target_compile_options(${PROJECT_NAME} PUBLIC -ffunction-sections -fdata-sections)
	target_link_options(${PROJECT_NAME} PUBLIC -Wl,--gc-sections)
endif()
