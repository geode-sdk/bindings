name: 'Verify bindings syntax'

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Restore cache
      id: codegen-cache
      uses: actions/cache@v3
      with:
        path: bin
        key: codegen-${{ hashFiles('codegen/**') }}

    - name: Build Codegen binary
      if: steps.codegen-cache.outputs.cache-hit != 'true'
      run: |
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=./bin -B build
        cmake --build build --config RelWithDebInfo
        cmake --install build
      
    - name: Upload Codegen binary
      uses: actions/upload-artifact@v3
      with:
        name: Codegen
        path: bin/Codegen

  verify:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Download Codegen binary
      uses: actions/download-artifact@v3
      with:
        name: Codegen

    - name: Include extras files
      run: |
        echo "#include <GeometryDash-extras.bro>" >> bindings/2.200/Entry.bro
        # echo "#include <Cocos2d-extras.bro>" >> bindings/2.200/Entry.bro

    - name: Verify
      run: 'chmod +x ./Codegen && ./Codegen Win32 bindings/2.200 out'

  test-members:
    # dont bother running member test if broma isnt even valid
    needs: verify

    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Windows
          target_platform: Win32
          os: windows-2019
          prefixes: ''
          extra_flags: -A win32

        - name: Android32
          target_platform: Android32
          os: ubuntu-latest
          prefixes: ''
          extra_flags: >
            -DCMAKE_TOOLCHAIN_FILE=$NDK_HOME/build/cmake/android.toolchain.cmake
            -DANDROID_ABI=armeabi-v7a
            -DANDROID_PLATFORM=android-23
            -G Ninja

        - name: Android64
          target_platform: Android64
          os: ubuntu-latest
          prefixes: ''
          extra_flags: >
            -DCMAKE_TOOLCHAIN_FILE=$NDK_HOME/build/cmake/android.toolchain.cmake
            -DANDROID_ABI=arm64-v8a
            -DANDROID_PLATFORM=android-23
            -G Ninja
        
        # - name: macOS
        #   os_identifier: mac
        #   os: macos-latest
        #   prefixes: PATH="/usr/local/opt/ccache/libexec:$PATH"
        #   extra_flags: >
        #     -DCMAKE_C_COMPILER=clang
        #     -DCMAKE_CXX_COMPILER=clang++
        #     -DCMAKE_BUILD_TYPE=Debug
          
    name: Test Offsets ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/checkout@v4
      with:
        repository: geode-sdk/geode
        path: geode
    
    - name: Set up codegen binary cache
      id: codegen-cache
      uses: actions/cache@v3
      with:
        path: build/codegen
        # cache by os since for android32 and 64 the codegen binary is the same
        key: codegen-${{ hashFiles('codegen/**') }}-${{ matrix.config.os }}

    - name: Set CPM_SOURCE_CACHE
      shell: bash
      run: echo "CPM_SOURCE_CACHE=${{ github.workspace }}/cpm-cache" >> $GITHUB_ENV
    
    - name: Set up CPM cache
      id: cache-cpm
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/cpm-cache
        key: cpm-cache-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          cpm-cache-
    
    - name: Set up NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r26b
        add-to-path: false
      if: matrix.config.os == 'ubuntu-latest'

    - name: Set up android env
      run: |
        echo "NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> "$GITHUB_ENV"
        sudo apt install ninja-build
      if: matrix.config.os == 'ubuntu-latest'

    - name: Configure CMake
      run: >
        ${{ matrix.config.prefixes }} cmake -B build -S test/members
        -D GEODE_LOADER_PATH=${{ github.workspace }}/geode/loader
        -D GEODE_BINDINGS_REPO_PATH=${{ github.workspace }}
        -D GEODE_TARGET_PLATFORM=${{ matrix.config.target_platform }}
        -D GEODE_CODEGEN_BINARY_OUT=${{ github.workspace }}/build/codegen
        -D SKIP_BUILDING_CODEGEN=${{ steps.codegen-cache.outputs.cache-hit }}
        ${{ matrix.config.extra_flags }}  

    - name: Build member test
      run: |
        cmake --build build --config RelWithDebInfo --parallel --target TestMembers
