[[link(android)]]
class AccountHelpLayer : GJDropDownLayer, GJAccountDelegate, FLAlertLayerProtocol {
    AccountHelpLayer() {
        m_unk290 = false;
    }
    ~AccountHelpLayer() = win inline, m1 0xb74b8, imac 0xce740, ios 0x16a580 {
        auto gjam = GJAccountManager::sharedState();
        if (gjam->m_accountDelegate == this) gjam->m_accountDelegate = nullptr;
    }

    static AccountHelpLayer* create() = win inline, m1 0xb7368, imac 0xce580, ios 0x16a4bc {
        auto ret = new AccountHelpLayer();
        if (ret->init("Account Help")) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void customSetup() = win 0x7f5c0, m1 0xb77d4, imac 0xceb60, ios 0x16a644;
    virtual void layerHidden() = win 0x80320, imac 0xcf810, m1 0xb844c, ios 0x16b0cc;
    virtual void accountStatusChanged() = win 0x7fcc0, imac 0xcf6d0, m1 0xb8300, ios 0x16b018;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x7ffa0, imac 0xcf700, m1 0xb830c, ios 0x16b024;

    void doUnlink();
    void exitLayer();
    void onAccountManagement(cocos2d::CCObject* sender) = m1 0xb7bf0, imac 0xcefa0, win 0x7fa10, ios 0x16aa60;
    void onReLogin(cocos2d::CCObject* sender) = win 0x7f9d0, imac 0xcef40, m1 0xb7b80, ios 0x16a9e8;
    void onUnlink(cocos2d::CCObject* sender) = m1 0xb7cc4, imac 0xcf070, win 0x7fb20, ios 0x16ab14;
    void updatePage() = m1 0xb7e88, imac 0xcf230, win 0x7fcd0, ios 0x16ac58;
    void verifyUnlink() = m1 0xb81d4, imac 0xcf580, ios 0x16af54;

    cocos2d::CCLabelBMFont* m_loginStatusLabel;
    TextArea* m_textArea;
    CCMenuItemSpriteExtra* m_refreshLoginButton;
    CCMenuItemSpriteExtra* m_unlinkAccountButton;
    bool m_unk290;
}

[[link(android)]]
class AccountLayer : GJDropDownLayer, GJAccountDelegate, GJAccountBackupDelegate, GJAccountSyncDelegate, FLAlertLayerProtocol {
    // virtual ~AccountLayer();
    // AccountLayer();

    static AccountLayer* create() = win 0x7d560, m1 0xb507c, imac 0xcc0d0, ios 0x168bb8;

    virtual void customSetup() = win 0x7d6c0, m1 0xb530c, imac 0xcc490, ios 0x168d38;
    virtual void layerHidden() = win 0x7f450, imac 0xce520, m1 0xb72fc, ios 0x16a450;
    virtual void backupAccountFinished() = win 0x7eb30, imac 0xcda30, m1 0xb6888, ios 0x169d60;
    virtual void backupAccountFailed(BackupAccountError, int) = win 0x7ece0, imac 0xcdbf0, m1 0xb6a48, ios 0x169e94;
    virtual void syncAccountFinished() = win 0x7eff0, imac 0xcdfd0, m1 0xb6dd8, ios 0x16a100;
    virtual void syncAccountFailed(BackupAccountError, int) = win 0x7f1b0, imac 0xce150, m1 0xb6f40, ios 0x16a234;
    virtual void accountStatusChanged() = win 0x7e750, imac 0xcda00, m1 0xb6874, ios 0x169d4c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x7f340, imac 0xce400, m1 0xb71cc, ios 0x16a3b4;

    TodoReturn createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint);
    void doBackup() = ios 0x169c3c, win inline, m1 0xb6708, imac 0xcd8a0 {
        this->updatePage(false);
        if (!GJAccountManager::sharedState()->getAccountBackupURL()) this->backupAccountFailed((BackupAccountError)-1, 0);
        else this->showLoadingUI();
    }
    void doSync() = ios 0x169cc4, win inline, m1 0xb67e4, imac 0xcd970 {
        this->updatePage(false);
        if (!GJAccountManager::sharedState()->getAccountSyncURL()) this->syncAccountFailed((BackupAccountError)-1, 0);
        else this->showLoadingUI();
    }
    void exitLayer() {
        this->setKeypadEnabled(false);
        this->disableUI();
        this->hideLayer(m_fastMenu);
    }
    void hideLoadingUI() {
        this->toggleUI(true);
        m_loadingCircle->setVisible(false);
    }
    void onBackup(cocos2d::CCObject* sender) = win 0x7dfd0, m1 0xb5a14, imac 0xccbf0, ios 0x169434;
    void onHelp(cocos2d::CCObject* sender) = win 0x7e5e0, m1 0xb5f34, imac 0xcd130, ios 0x169770;
    void onLogin(cocos2d::CCObject* sender) = win 0x7de10, imac 0xccb40, m1 0xb5960, ios 0x169380;
    void onMore(cocos2d::CCObject* sender) = win 0x7e700, imac 0xcd1f0, m1 0xb600c, ios 0x169824;
    void onRegister(cocos2d::CCObject* sender) = win 0x7de50, imac 0xccbd0, m1 0xb59f8, ios 0x169418;
    void onSync(cocos2d::CCObject* sender) = win 0x7e360, m1 0xb5d2c, imac 0xccf40, ios 0x169620;
    void showLoadingUI() {
        this->toggleUI(false);
        m_loadingCircle->setVisible(true);
    }
    void toggleUI(bool enable) {
        m_buttonMenu->setEnabled(enable);
        this->setKeypadEnabled(enable);
    }
    void updatePage(bool) = ios 0x169834, win 0x7e760, m1 0xb601c, imac 0xcd210;

    cocos2d::CCLabelBMFont* m_linkedAccountTitle;
    TextArea* m_textArea;
    CCMenuItemSpriteExtra* m_loginButton;
    CCMenuItemSpriteExtra* m_registerButton;
    CCMenuItemSpriteExtra* m_backupButton;
    CCMenuItemSpriteExtra* m_syncButton;
    CCMenuItemSpriteExtra* m_helpButton;
    CCMenuItemSpriteExtra* m_moreButton;
    LoadingCircle* m_loadingCircle;
    int m_accountHelpRelated;
    bool m_isLoggedIn;
}

[[link(android)]]
class AccountLoginLayer : FLAlertLayer, TextInputDelegate, GJAccountLoginDelegate, FLAlertLayerProtocol {
    // virtual ~AccountLoginLayer();

    static AccountLoginLayer* create(gd::string) = win 0x7b730, m1 0x3f313c, imac 0x485b00, ios 0x87068;

    virtual void registerWithTouchDispatcher() = win 0x425d0, imac 0x487a60, m1 0x3f4ff4, ios 0x88580;
    virtual void keyBackClicked() = win 0x7cfa0, m1 0x3f4ea4, imac 0x487920, ios 0x88494;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x7cb50, imac 0x487760, m1 0x3f4c90, ios 0x8839c;
    virtual void textInputOpened(CCTextInputNode*) = m1 0x3f51c4, imac 0x487c10, ios 0x886e8 {}
    virtual void textInputClosed(CCTextInputNode*) = win 0x7d070, m1 0x3f502c, imac 0x487aa0, ios 0x885b8;
    virtual void textChanged(CCTextInputNode*) = m1 0x3f51cc, imac 0x487c30, ios 0x886f0 {}
    virtual void loginAccountFinished(int, int) = win 0x7c740, m1 0x3f45bc, imac 0x4870a0, ios 0x87ee8;
    virtual void loginAccountFailed(AccountError) = win 0x7c990, imac 0x487430, m1 0x3f493c, ios 0x880f8;

    TodoReturn createTextBackground(cocos2d::CCPoint, char const*, cocos2d::CCSize);
    TodoReturn createTextInput(cocos2d::CCPoint, cocos2d::CCSize, char const*, int);
    TodoReturn createTextLabel(cocos2d::CCPoint, char const*, cocos2d::CCSize);
    void disableNodes();
    void hideLoadingUI();
    bool init(gd::string) = win 0x7b8d0, m1 0x3f32c0, imac 0x485ce0, ios 0x871a0;
    void onClose(cocos2d::CCObject* sender) = win 0x7cf50, imac 0x486990, m1 0x3f3e60, ios 0x878e4;
    void onForgotPassword(cocos2d::CCObject* sender) = imac 0x487080, win 0x7c490, ios 0x87ec4, m1 0x3f4598;
    void onForgotUser(cocos2d::CCObject* sender) = imac 0x487060, win 0x7c470, ios 0x87ea0, m1 0x3f4574;
    void onSubmit(cocos2d::CCObject* sender) = win 0x7cbc0, imac 0x4869f0, m1 0x3f3ec8, ios 0x8794c;
    void resetLabel(int);
    void resetLabels();
    void showLoadingUI();
    void toggleUI(bool) = win 0x7d000;
    void updateLabel(AccountError) = m1 0x3f49d0, imac 0x4874c0, ios 0x88134, win 0x7c9d0;

    CCTextInputNode* m_usernameInput;
    CCTextInputNode* m_passwordInput;
    cocos2d::CCLabelBMFont* m_usernameLabel;
    cocos2d::CCLabelBMFont* m_passwordLabel;
    LoadingCircle* m_loadingCircle;
    gd::string m_username;
    gd::string m_password;
}

[[link(android)]]
class AccountRegisterLayer : FLAlertLayer, TextInputDelegate, GJAccountRegisterDelegate, FLAlertLayerProtocol {
    // virtual ~AccountRegisterLayer();

    static AccountRegisterLayer* create();

    virtual bool init() = win 0x78a70, imac 0x482340, m1 0x3eff58, ios 0x84fd8;
    virtual void registerWithTouchDispatcher() = win 0x425d0, imac 0x484e70, m1 0x3f2690, ios 0x868d0;
    virtual void keyBackClicked() = win 0x7abf0, m1 0x3f248c, imac 0x484ca0, ios 0x8678c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x7a200, imac 0x4847f0, m1 0x3f2048, ios 0x8665c;
    virtual void textInputOpened(CCTextInputNode*) = m1 0x3f2e68, imac 0x485780, ios 0x86e74 {}
    virtual void textInputClosed(CCTextInputNode*) = win 0x7ad50, imac 0x484eb0, m1 0x3f26c8, ios 0x86908;
    virtual void textChanged(CCTextInputNode*) = m1 0x3f2e70, imac 0x4857a0, ios 0x86e7c {}
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, m1 0x3f2e78, imac 0x4857c0, ios 0x86e84;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, m1 0x3f2f48, imac 0x485880, ios 0x86ef0;
    virtual bool allowTextInput(CCTextInputNode*) = win 0x7b670, imac 0x485930, m1 0x3f3000, ios 0x86f50;
    virtual void registerAccountFinished() = win 0x79c90, imac 0x484040, m1 0x3f1894, ios 0x86168;
    virtual void registerAccountFailed(AccountError) = win 0x79eb0, m1 0x3f1a3c, imac 0x4841f0, ios 0x86298;

    cocos2d::extension::CCScale9Sprite* createTextBackground(cocos2d::CCPoint, cocos2d::CCSize);
    CCTextInputNode* createTextInput(cocos2d::CCPoint, cocos2d::CCSize, gd::string, int);
    cocos2d::CCLabelBMFont* createTextLabel(cocos2d::CCPoint, gd::string, cocos2d::CCSize);
    void disableNodes();
    void hideLoadingUI();
    void onClose(cocos2d::CCObject* sender);
    void onSubmit(cocos2d::CCObject* sender);
    void resetLabel(int) = imac 0x484700, m1 0x3f1f50;
    void resetLabels() = imac 0x4845e0, m1 0x3f1e20;
    void showLoadingUI();
    void toggleUI(bool);
    void updateLabel(AccountError) = win 0x79ef0, m1 0x3f1b0c, imac 0x4842c0, ios 0x862d4;
    bool validEmail(gd::string);
    bool validPassword(gd::string);
    bool validUser(gd::string);

    CCTextInputNode* m_usernameField;
    CCTextInputNode* m_passwordField;
    CCTextInputNode* m_confirmPasswordField;
    CCTextInputNode* m_emailField;
    CCTextInputNode* m_verifyEmailField;
    cocos2d::CCLabelBMFont* m_usernameLabel;
    cocos2d::CCLabelBMFont* m_passwordLabel;
    cocos2d::CCLabelBMFont* m_confirmPasswordLabel;
    cocos2d::CCLabelBMFont* m_emailLabel;
    cocos2d::CCLabelBMFont* m_verifyEmailLabel;
    LoadingCircle* m_loadingCircle;
    bool m_lockInput;
}

[[link(android)]]
class AchievementBar : cocos2d::CCNodeRGBA {
    // virtual ~AchievementBar();
    AchievementBar() {
        m_layerColor = nullptr;
        m_unkUnused = 0;
        m_nextScene = nullptr;
    }

    static AchievementBar* create(char const* title, char const* desc, char const* icon, bool quest) = win inline, m1 0x52f02c, imac 0x601520, ios 0x269870 {
        auto ret = new AchievementBar();
        if (ret->init(title, desc, icon, quest)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void setOpacity(unsigned char) = win 0x81ea0, imac 0x602ea0, m1 0x53086c, ios 0x26ab9c;

    bool init(char const* title, char const* desc, char const* icon, bool quest) = win 0x80670, m1 0x52f0fc, imac 0x6015e0, ios 0x26992c;
    void show() = win 0x81c20, m1 0x53062c, ios 0x26a97c, imac 0x602c50;

    cocos2d::CCLayerColor* m_layerColor;
    int m_unkUnused;
    cocos2d::CCScene* m_nextScene;
    cocos2d::extension::CCScale9Sprite* m_bg;
    cocos2d::extension::CCScale9Sprite* m_bg2;
    cocos2d::CCSprite* m_achievementGlowSprite;
    cocos2d::CCSprite* m_achievementSprite;
    cocos2d::CCLabelBMFont* m_titleLabel;
    TextArea* m_achievementDescription;
}

[[link(android)]]
class AchievementCell : TableViewCell {
    // virtual ~AchievementCell();
    AchievementCell(char const*, float, float);

    virtual bool init() = m1 0x1ec614, imac 0x23c930, ios 0x10ebb4 { return true; }
    virtual void draw() = win 0xad710, imac 0x23c940, m1 0x1ec61c, ios 0x10ebbc;

    void loadFromDict(cocos2d::CCDictionary*) = ios 0x1042ec, win 0xac150, imac 0x230eb0, m1 0x1e0ec4;
    void updateBGColor(int index) = win inline, m1 0x1e22b4, imac 0x232350, ios 0x1051c8 {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        m_backgroundLayer->setOpacity(255);
    }
}

[[link(android)]]
class AchievementManager : cocos2d::CCNode {
    // virtual ~AchievementManager();

    static AchievementManager* sharedState() = ios 0xb9e4c, win 0x7da0, imac 0x715690, m1 0x633e04;

    virtual bool init() = win 0x7e60, m1 0x633ef4, imac 0x7157a0, ios 0xb9ecc;

    gd::string achievementForUnlock(int id, UnlockType type) = win 0x3a1c0, imac 0x76ef60, m1 0x682554, ios 0xeb6d8;
    void addAchievement(gd::string identifier, gd::string title, gd::string achievedDescription, gd::string unachievedDescription, gd::string icon, int limits) = win 0x7ef0, m1 0x681c8c, imac 0x76e740, ios 0xeb16c;
    void addManualAchievements() = win 0x8410, m1 0x633f7c, imac 0x715830, ios 0xb9f54;
    bool areAchievementsEarned(cocos2d::CCArray* achievements) = win inline, m1 0x68210c, imac 0x76eb90, ios inline {
        for (int i = 0; i < achievements->count(); i++) {
            if (!this->isAchievementEarned(static_cast<cocos2d::CCString*>(achievements->objectAtIndex(i))->getCString())) {
                return false;
            }
        }
        return true;
    }
    void checkAchFromUnlock(char const* id) = win inline, m1 0x68207c, imac 0x76eac0, ios inline {}
    void dataLoaded(DS_Dictionary* dict) = win inline, m1 0x681ff4, imac 0x76ea20, ios 0xeb448 {
        auto reportedAchievements = dict->getDictForKey("reportedAchievements", false);
        if (m_reportedAchievements) {
            GameToolbox::mergeDictsSaveLargestInt(m_reportedAchievements, reportedAchievements);
        }
        else if (reportedAchievements) {
            CC_SAFE_RETAIN(reportedAchievements);
            CC_SAFE_RELEASE(m_reportedAchievements);
            m_reportedAchievements = reportedAchievements;
        }
    }
    void encodeDataTo(DS_Dictionary* dict) = win inline, m1 0x682060, imac 0x76ea90, ios 0xeb498 {
        dict->setDictForKey("reportedAchievements", m_reportedAchievements);
    }
    void firstSetup() = win inline, m1 0x681fa8, imac 0x76e9d0, ios 0xeb420 {
        auto reportedAchievements = cocos2d::CCDictionary::create();
        if (m_reportedAchievements != reportedAchievements) {
            CC_SAFE_RETAIN(reportedAchievements);
            CC_SAFE_RELEASE(m_reportedAchievements);
            m_reportedAchievements = reportedAchievements;
        }
    }
    cocos2d::CCDictionary* getAchievementRewardDict();
    cocos2d::CCDictionary* getAchievementsWithID(char const* id) = win 0x39d70, m1 0x6822dc, imac 0x76ed50, ios 0xeb5d0;
    cocos2d::CCArray* getAllAchievements() = win inline, m1 0x6822d4, imac 0x76ed40, ios 0xeb5c8 {
        return m_allAchievements;
    }
    cocos2d::CCArray* getAllAchievementsSorted(bool available) = win 0x39b50, m1 0x681678, imac 0x76e0b0, ios 0xeae18;
    bool isAchievementAvailable(gd::string id) = win inline, m1 0x6823d0, imac 0x76ee40, ios inline {
        if (auto achievements = getAchievementsWithID(id.c_str())) {
            return achievements->objectForKey("un") == nullptr;
        }
        return false;
    }
    bool isAchievementEarned(char const* ach) = ios 0xeb53c, win 0x39a70, imac 0x76ec00, m1 0x682198;
    int limitForAchievement(gd::string id) = win inline, imac 0x76eec0, m1 0x68248c, ios 0xeb63c {
        if (auto achievements = getAchievementsWithID(id.c_str())) {
            if (auto limits = static_cast<cocos2d::CCString*>(achievements->objectForKey("limits"))) return limits->intValue();
        }
        return 0;
    }
    void notifyAchievement(char const* title, char const* description, char const* icon) = win inline, m1 0x682bcc, imac 0x76f700, ios 0xeba9c {
        if (!m_dontNotify) AchievementNotifier::sharedState()->notifyAchievement(title, description, icon, true);
    }
    void notifyAchievementWithID(char const* id) = win 0x3a470, m1 0x6829cc, imac 0x76f530, ios 0xeb958;
    int percentageForCount(int count, int total) = win inline, m1 0x6822ac, imac 0x76ed10, ios inline {
        return std::min<int>(100, ((float)count / (float)total) * 100.f);
    }
    int percentForAchievement(char const* id) = win 0x39a90, m1 0x6821b4, imac 0x76ec20, ios 0xeb558;
    void reportAchievementWithID(char const* id, int percent, bool dontNotify) = m1 0x682d28, imac 0x76f830, ios 0xebb58;
    void reportPlatformAchievementWithID(char const* id, int percent) = m1 0x682e90, imac 0x76f9b0, ios inline {
        PlatformToolbox::reportAchievementWithID(id, percent);
    }
    void resetAchievement(char const* id) = win inline, m1 0x682c24, imac 0x76f750, ios 0xebaf4 {
        m_reportedAchievements->removeObjectForKey(id);
    }
    void resetAchievements() = win inline, m1 0x682e9c, imac 0x76f9c0, ios inline {
        m_reportedAchievements->removeAllObjects();
    }
    void setup() = win inline, m1 0x682078, imac 0x76eab0, ios inline {}
    void storeAchievementUnlocks() = win 0x39e20, m1 0x681858, imac 0x76e2a0, ios 0xeaf78;

    cocos2d::CCArray* m_allAchievements;
    cocos2d::CCDictionary* m_platformAchievements;
    cocos2d::CCDictionary* m_achievementUnlocks;
    void* m_unkPtrUnused;
    cocos2d::CCDictionary* m_reportedAchievements;
    bool m_dontNotify;
    cocos2d::CCArray* m_allAchievementsSorted;
    int m_order;
    cocos2d::CCDictionary* m_unAchieved;
}

[[link(android)]]
class AchievementNotifier : cocos2d::CCNode {
    // virtual ~AchievementNotifier();

    static AchievementNotifier* sharedState() = ios 0x21720c, win 0x3ab20, m1 0x6beb0c, imac 0x7ad380;

    virtual bool init() = win 0x3abd0, m1 0x6beb88, imac 0x7ad410, ios 0x21727c;

    void achievementDisplayFinished() = win 0x3ae40, m1 0x6bed20, ios 0x2173fc, imac 0x7ad5a0;
    void notifyAchievement(char const* title, char const* desc, char const* icon, bool quest) = ios 0x2172a8, win 0x3ac00, imac 0x7ad440, m1 0x6bebb4;
    void showNextAchievement() = ios 0x2172fc, win 0x3ace0, m1 0x6bec08, imac 0x7ad490;
    void willSwitchToScene(cocos2d::CCScene* scene) = ios 0x217440, win inline, imac 0x7ad5f0, m1 0x6bed64 {
        this->m_nextScene = scene;

        if (this->m_activeAchievementBar && this->m_activeAchievementBar->getParent() != this->m_nextScene)
        {
            this->m_activeAchievementBar->retain();
            this->m_activeAchievementBar->removeFromParentAndCleanup(false);
            this->m_nextScene->addChild(this->m_activeAchievementBar, 105);
            this->m_activeAchievementBar->release();
            this->m_activeAchievementBar->resumeSchedulerAndActions();
        }
    }

    cocos2d::CCScene* m_nextScene;
    cocos2d::CCArray* m_achievementBarArray;
    AchievementBar* m_activeAchievementBar;
}

[[link(android)]]
class AchievementsLayer : GJDropDownLayer {
    // virtual ~AchievementsLayer();
    AchievementsLayer() = m1 0x2f3300, imac 0x360260, ios 0x41a414 {
        m_currentPage = 0;
        m_nextPageButton = nullptr;
        m_prevPageButton = nullptr;
        m_pageLabel = nullptr;
    }

    static AchievementsLayer* create() = win inline, m1 0x2f2b5c, imac 0x35fa80, ios 0x419b94 {
        auto ret = new AchievementsLayer();
        if (ret->init("Achievements")) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x82260, imac 0x360030, m1 0x2f3078, ios 0x41a244;
    virtual void customSetup() = win 0x81fb0, m1 0x2f2c18, imac 0x35fb70, ios 0x419c40;

    void loadPage(int) = win 0x82300, imac 0x35fe50, m1 0x2f2ea8, ios 0x419efc;
    void onNextPage(cocos2d::CCObject* sender) = win 0x824e0, imac 0x35fe30, m1 0x2f2e9c, ios 0x419ef0;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x824f0, imac 0x35fe10, m1 0x2f2e90, ios 0x419ee4;
    void setupLevelBrowser(cocos2d::CCArray* arr) = win inline {
        m_listLayer->removeChildByTag(9, true);
        auto* listView = CustomListView::create(arr, BoomListType::Default, 220.f, 356.f);
        listView->setTag(9);
        m_listLayer->addChild(listView, 6);
    }
    void setupPageInfo(int, int, int);

    int m_currentPage;
    CCMenuItemSpriteExtra* m_nextPageButton;
    CCMenuItemSpriteExtra* m_prevPageButton;
    cocos2d::CCLabelBMFont* m_pageLabel;
    cocos2d::CCPoint m_unkPoint;
}

[[link(android)]]
class AdToolbox {
    TodoReturn cacheInterstitial();
    TodoReturn cacheRewardedVideo();
    TodoReturn disableBanner();
    TodoReturn enableBanner();
    TodoReturn enableBannerNoRefresh();
    TodoReturn hasCachedInterstitial();
    TodoReturn hasCachedRewardedVideo();
    bool isShowingAd();
    void queueRefreshBanner();
    void setupAds();
    void showDebug();
    void showInterstitial();
    void showRewardedVideo();
}

[[link(android)]]
class AdvancedFollowEditObject : AdvancedFollowTriggerObject {
    // virtual ~AdvancedFollowEditObject();

    static AdvancedFollowEditObject* create(char const*);

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x486470, imac 0x19d870, m1 0x160b78, ios 0x378a1c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x486080, imac 0x19c8a0, m1 0x15fef0, ios 0x37865c;

    bool init(char const*);

    // property 566
    float m_modX;
    // property 567
    float m_modXVariance;
    // property 568
    float m_modY;
    // property 569
    float m_modYVariance;
    // property 570
    bool m_redirectDirection;
}

[[link(android)]]
class AdvancedFollowTriggerObject : EffectGameObject {
    // virtual ~AdvancedFollowTriggerObject();
    // AdvancedFollowTriggerObject();

    static AdvancedFollowTriggerObject* create(char const*);

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x485150, imac 0x19b5d0, m1 0x15ee0c, ios 0x377698;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x482f50, imac 0x192350, m1 0x157e00, ios 0x375858;

    int getAdvancedFollowID();
    bool init(char const*);

    // property 292
    float m_delay;
    // property 293
    float m_delayVariance;
    // property 300
    float m_startSpeed;
    // property 301
    float m_startSpeedVariance;
    // property 560
    int m_startSpeedReference;
    // property 563
    float m_startDirection;
    // property 564
    float m_startDirectionVariance;
    // property 565
    int m_startDirectionReference;
    // property 298
    float m_maxSpeed;
    // property 299
    float m_maxSpeedVariance;
    // property 306
    bool m_xOnly;
    // property 307
    bool m_yOnly;
    // property 308
    float m_maxRange;
    // property 309
    float m_maxRangeVariance;
    // property 310
    float m_property310;
    // property 311
    float m_property311;
    // property 334
    float m_acceleration;
    // property 335
    float m_accelerationVariance;
    // property 312
    float m_property312;
    // property 313
    float m_property313;
    // property 314
    float m_property314;
    // property 315
    float m_property315;
    // property 316
    float m_steerForce;
    // property 317
    float m_steerForceVariance;
    // property 337
    bool m_steerForceLowEnabled;
    // property 318
    float m_steerForceLow;
    // property 319
    float m_steerForceLowVariance;
    // property 338
    bool m_steerForceHighEnabled;
    // property 320
    float m_steerForceHigh;
    // property 321
    float m_steerFroceHighVariance;
    // property 322
    float m_speedRangeLow;
    // property 323
    float m_speedRangeLowVariance;
    // property 324
    float m_speedRangeHigh;
    // property 325
    float m_speedRangeHighVariance;
    // property 326
    float m_breakForce;
    // property 327
    float m_breakForceVariance;
    // property 328
    float m_breakAngle;
    // property 329
    float m_breakAngleVariance;
    // property 330
    float m_breakSteerForce;
    // property 331
    float m_breakSteerForceVariance;
    // property 332
    float m_breakSteerSpeedLimit;
    // property 333
    float m_breakSteerSpeedLimitVariance;
    // property 305
    bool m_targetDirection;
    // property 336
    bool m_ignoreDisabled;
    // property 339
    bool m_rotateDirection;
    // property 340
    float m_rotationOffset;
    // property 357
    float m_nearAcceleration;
    // property 358
    float m_nearAccelerationVariance;
    // property 359
    float m_nearDistance;
    // property 360
    float m_nearDistanceVariance;
    // property 561
    float m_nearFriction;
    // property 562
    float m_nearFrictionVariance;
    // property 558
    float m_friction;
    // property 559
    float m_frictionVariance;
    // property 361
    float m_easing;
    // property 362
    float m_easingVariance;
    // property 363
    float m_rotateEasing;
    // property 364
    float m_rotateDeadZ;
    // property 365
    int m_priority;
    int m_unk7fc;
    // property 366
    int m_maxRangeReference;
    // property 367
    int m_followMode;
    // property 571
    bool m_exclusive;
    // property 572
    int m_startMode;
}

[[link(android)]]
class AdvFollowSetup {
    // ~AdvFollowSetup();

    gd::unordered_set<int> m_centerIDs;
    gd::unordered_set<int> m_groupIDs;
    gd::unordered_set<int> m_controlIDs;
    int m_delay;
}

[[link(android)]]
class AnimatedGameObject : EnhancedGameObject, AnimatedSpriteDelegate, SpritePartDelegate {
    AnimatedGameObject() {
        m_animatedSprite = nullptr;
        m_childSprite = nullptr;
        m_eyeSpritePart = nullptr;
        m_finishedAnimating = false;
        m_playingAnimation = false;
        m_notGrounded = false;
        m_animationID = 0;
    }
    ~AnimatedGameObject() = win inline, m1 0x16749c, imac 0x1a5260, ios 0x37bf5c {
        CC_SAFE_RELEASE(m_eyeSpritePart);
    }

    static AnimatedGameObject* create(int id) = win inline, m1 0x167618, imac 0x1a5410, ios 0x37bfe0 {
        auto ret = new AnimatedGameObject();
        if (ret->init(id)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void setOpacity(unsigned char) = win 0x48b5e0, m1 0x168658, imac 0x1a64b0, ios 0x37cdc0;
    virtual void setChildColor(cocos2d::ccColor3B const&) = win 0x48d150, m1 0x16a064, imac 0x1a80d0, ios 0x37de10;
    virtual void resetObject() = win 0x48cc50, imac 0x1a8060, m1 0x16a004, ios 0x37ddb8;
    virtual void activateObject() = win 0x48b430, m1 0x16855c, imac 0x1a63a0, ios 0x37cce0;
    virtual void deactivateObject(bool) = win 0x48b500, imac 0x1a63e0, m1 0x1685a0, ios 0x37cd24;
    virtual void setObjectColor(cocos2d::ccColor3B const&) = win 0x48b6b0, imac 0x1a6590, m1 0x168724, ios 0x37ce8c;
    virtual void animationFinished(char const*) = win 0x48b6f0, imac 0x1a65c0, m1 0x168758, ios 0x37cec0;
    virtual void displayFrameChanged(cocos2d::CCObject*, gd::string) = win 0x48c9d0, imac 0x1a7930, m1 0x169858, ios 0x37d924;

    static gd::string animationForID(int, int) = win 0x48cca0, m1 0x169d08, imac 0x1a7df0, ios 0x37dd48;
    static float getTweenTime(int, int) = win inline, m1 0x169ff4, imac 0x1a8050, ios inline { return .05f; }
    bool init(int) = win 0x48a360, m1 0x16773c, imac 0x1a5560, ios 0x37c0a4;
    void playAnimation(int) = win 0x48cb20, m1 0x169b90, imac 0x1a7c90, ios 0x37dbe8;
    void setupAnimatedSize(int) = m1 0x1678d8, imac 0x1a5700, ios 0x37c240;
    void setupChildSprites() = win 0x48a8f0, m1 0x167a68, imac 0x1a58c0, ios 0x37c3e4;
    void updateChildSpriteColor(cocos2d::ccColor3B color) = win inline, m1 0x16834c, imac 0x1a6160, ios 0x37cadc {
        if (!m_childSprite) return;
        auto spriteChildren = m_childSprite->getChildren();
        for (int i = 0; i < spriteChildren->count(); i++) {
            static_cast<cocos2d::CCSprite*>(spriteChildren->objectAtIndex(i))->setColor(color);
        }
    }
    void updateObjectAnimation() = win 0x48b1c0, m1 0x1683cc, imac 0x1a61e0, ios 0x37cb5c;

    CCAnimatedSprite* m_animatedSprite;
    cocos2d::CCSprite* m_childSprite;
    CCSpritePart* m_eyeSpritePart;
    bool m_finishedAnimating;
    bool m_playingAnimation;
    gd::string m_currentAnimation;
    bool m_notGrounded;
    int m_animationID;
}

[[link(android)]]
class AnimatedShopKeeper : CCAnimatedSprite {
    // virtual ~AnimatedShopKeeper();
    AnimatedShopKeeper() {
        m_type = ShopType::Normal;
        m_idleInt1 = 0;
        m_idleInt2 = 0;
        m_looking = false;
        m_reacting = false;
        m_reactCount = 0;
        m_gruntIndex = 0;
    }

    static AnimatedShopKeeper* create(ShopType type) = win inline, imac 0x3101f0, m1 0x2a6b1c, ios 0x14f124 {
        auto ret = new AnimatedShopKeeper();
        if (ret->init(type)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void animationFinished(char const*) = win 0x2a8840, imac 0x314230, m1 0x2aa490, ios 0x151d58;

    bool init(ShopType type) = win inline, imac 0x314180, m1 0x2aa3c4, ios 0x151ca4 {
        m_type = type;
        auto shopkeeper = "GJShopKeeper";
        switch (type) {
            case ShopType::Secret: shopkeeper = "GJShopKeeper2"; break;
            case ShopType::Community: shopkeeper = "GJShopKeeper3"; break;
            case ShopType::Mechanic: shopkeeper = "GJShopKeeper4"; break;
            case ShopType::Diamond: shopkeeper = "GJShopKeeper5"; break;
            default: shopkeeper = "GJShopKeeper"; break;
        }
        if (!CCAnimatedSprite::initWithType(shopkeeper, nullptr, false)) return false;
        m_idleInt2 = (rand() / 32767.f) * 5.f + 10.f;
        m_idleInt1 = (rand() / 32767.f) * 2.f + 1.f;
        m_animationManager->stopAnimations();
        return true;
    }
    void playReactAnimation() = win 0x2a8520, m1 0x2a936c, imac 0x312ec0, ios 0x150fc4;
    void startAnimating() = win 0x2a87b0, imac 0x310360, m1 0x2a6c78, ios 0x14f1e0;

    ShopType m_type;
    int m_idleInt1;
    int m_idleInt2;
    bool m_looking;
    bool m_reacting;
    int m_reactCount;
    int m_gruntIndex;
}

[[link(android)]]
class AnimatedSpriteDelegate {
    virtual void animationFinished(char const*) {}
}

[[link(android)]]
class AppDelegate : cocos2d::CCApplication, cocos2d::CCSceneDelegate {
    // virtual ~AppDelegate() = ios 0x1b7c90;
    static AppDelegate* get() = win inline, ios 0x268568, imac 0x645fb0, m1 0x56e744 {
        return static_cast<AppDelegate*>(cocos2d::CCApplication::sharedApplication());
    }

    virtual bool applicationDidFinishLaunching() = win 0x829f0, imac 0x645e30, m1 0x56e5c0, ios 0x268414;
    virtual void applicationDidEnterBackground() = win 0x82da0, m1 0x56e838, imac 0x6460d0, ios 0x2685f8;
    virtual void applicationWillEnterForeground() = win 0x82e20, m1 0x56e978, imac 0x646230, ios 0x2686b4;
    virtual void applicationWillBecomeActive() = win 0x82d40, m1 0x56e754, imac 0x645fd0, ios 0x268578;
    virtual void applicationWillResignActive() = win 0x82d90, m1 0x56e768, imac 0x645ff0, ios 0x26858c;
    virtual void trySaveGame(bool) = win 0x834b0, imac 0x6464c0, m1 0x56ebfc, ios 0x268884;
    virtual void willSwitchToScene(cocos2d::CCScene*) = win 0x83590, m1 0x56ecd4, imac 0x6465a0, ios 0x268954;

    float bgScale() = win inline, m1 0x56e730, imac 0x645f90, ios 0x268554 {
        return cocos2d::CCDirector::sharedDirector()->getScreenScaleFactorMax();
    }
    void checkSound();
    void hideLoadingCircle();
    void loadingIsFinished();
    bool musicTest() = win 0x83370, m1 0x56eb00, imac 0x6463d0, ios 0x2687e8;
    void pauseGame() = win 0x82ff0;
    void pauseSound() = win 0x830d0;
    void platformShutdown() = win 0x82560;
    void resumeSound() = win 0x83270, m1 0x56ea64, imac 0x646320, ios 0x26879c;
    void setIdleTimerDisabled(bool);
    void setupGLView() = win 0x82580;
    void showLoadingCircle(bool, bool, bool);

    bool m_glViewSetup;
    bool m_gamePaused;
    cocos2d::CCScene* m_runningScene;
    bool m_loadingFinished;
    bool m_unk0e9;
    bool m_ios;
    bool m_unk0eb;
    bool m_unk0ec;
    bool m_unk0ed;
    float m_saveTime;
}

[[link(android)]]
class ArtistCell : TableViewCell {
    // virtual ~ArtistCell();
    ArtistCell(char const*, float, float);

    virtual bool init() = win 0x3c7f0, m1 0x1f1b40, imac 0x242700, ios 0x113428;
    virtual void draw() = win 0xad710, imac 0x2428c0, m1 0x1f1d04, ios 0x1135cc;

    void loadFromObject(SongInfoObject*) = win 0xb4e90, m1 0x1e58f0, imac 0x235770, ios 0x1086ac;
    void onNewgrounds(cocos2d::CCObject* sender);
    void onYouTube(cocos2d::CCObject* sender);
    void updateBGColor(int);

    SongInfoObject* m_songInfo;
}

[[link(android)]]
class ArtTriggerGameObject : EffectGameObject {
    // virtual ~ArtTriggerGameObject();

    static ArtTriggerGameObject* create(char const*);

    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a98a0, imac 0x1db7e0, m1 0x194614, ios 0x390034;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a9820, imac 0x1db780, m1 0x19459c, ios 0x38ffcc;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a96b0, imac 0x1db260, m1 0x194120, ios 0x38fe3c;

    bool init(char const*);

    // property 533
    int m_artIndex;
}

[[link(android)]]
class AudioAssetsBrowser : FLAlertLayer, TableViewCellDelegate, MusicDownloadDelegate {
    AudioAssetsBrowser() {
        m_songInfoObjects = nullptr;
        m_songList = nullptr;
        m_pageIndicatorLabel = nullptr;
        m_songsIds = {};
        m_sfxIds = {};
        m_loadingCircle = nullptr;
    }
    // virtual ~AudioAssetsBrowser();

    static AudioAssetsBrowser* create(gd::vector<int>& songIds, gd::vector<int>& sfxIds) = win inline, m1 0x6b0df0, imac 0x79e830, ios 0x1d225c {
        auto ret = new AudioAssetsBrowser();
        if (ret->init(songIds, sfxIds)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x6b1dd4, imac 0x79fa30, ios 0x1d30fc;
    virtual void keyBackClicked() = win 0x84650, m1 0x6b1d58, imac 0x79f9c0, ios 0x1d3080;
    virtual void musicActionFinished(GJMusicAction) = win 0x83cd0, m1 0x6b1d04, imac 0x79f8e0, ios 0x1d3034;
    virtual void musicActionFailed(GJMusicAction) = win 0x83d50, m1 0x6b1d10, imac 0x79f910, ios 0x1d3040;
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) = m1 0x6b1d24, imac 0x79f950, ios 0x1d3050 { return false; }
    virtual int getSelectedCellIdx() = m1 0x6b1d34, imac 0x79f970, ios 0x1d3060 { return 0; }
    virtual int getCellDelegateType() = m1 0x6b1d44, imac 0x79f990, ios 0x1d3070 { return 1; }

    bool init(gd::vector<int>& songIds, gd::vector<int>& sfxIds) = win 0x83760, m1 0x6b0f20, imac 0x79e9b0, ios 0x1d2340;
    void onClose(cocos2d::CCObject* sender);
    void onInfo(cocos2d::CCObject* sender) = win 0x83f70, m1 0x6b1494, imac 0x79ef60, ios 0x1d289c;
    void onPage(cocos2d::CCObject* sender);
    TodoReturn setupList();
    TodoReturn trySetupAudioBrowser();
    TodoReturn updatePageLabel();

    cocos2d::CCArray* m_songInfoObjects;
    GJCommentListLayer* m_songList;
    cocos2d::CCLabelBMFont* m_pageIndicatorLabel;
    gd::vector<int> m_songsIds;
    gd::vector<int> m_sfxIds;
    LoadingCircleSprite* m_loadingCircle;
}

[[link(android)]]
class AudioEffectsLayer : cocos2d::CCLayerColor {
    // virtual ~AudioEffectsLayer();
    AudioEffectsLayer() {
        m_batchNode = nullptr;
        m_unk1bc = nullptr;
        m_unk1c0 = nullptr;
        m_timeElapsed = 0;
        m_audioPulseMod = 0;
        m_goingDown = false;
        m_audioScale = 0;
        m_unk1d4 = false;
    }

    static AudioEffectsLayer* create(gd::string audioString) = win inline, imac 0x49c150, m1 0x407314, ios 0x3bc848 {
        auto ret = new AudioEffectsLayer();
        if (ret->init(audioString)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void draw() = m1 0x407cdc, imac 0x49cba0, ios 0x3bcf70 {}
    virtual void updateTweenAction(float, char const*) = win 0x84fb0, imac 0x49ca70, m1 0x407ba0, ios 0x3bce70;

    void audioStep(float) = win 0x84d80, imac 0x49c860, m1 0x407970, ios 0x3bcc5c;
    TodoReturn getBGSquare();
    TodoReturn goingDown();
    bool init(gd::string) = win 0x84b90;
    void resetAudioVars() = imac 0x49c800, m1 0x407928, win 0x84d20, ios 0x3bcc14;
    void triggerEffect(float) = m1 0x407a2c, imac 0x49c930;

    cocos2d::CCSpriteBatchNode* m_batchNode;
    cocos2d::CCArray* m_unk1bc;
    cocos2d::CCArray* m_unk1c0;
    float m_timeElapsed;
    float m_audioPulseMod;
    bool m_goingDown;
    float m_audioScale;
    bool m_unk1d4;
}

[[link(android)]]
class AudioLineGuideGameObject : EffectGameObject {
    // virtual ~AudioLineGuideGameObject();

    static AudioLineGuideGameObject* create();

    virtual bool init() = win 0x4a8900, m1 0x19221c, imac 0x1d8d50, ios 0x38f09c;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a8cc0, imac 0x1d9ac0, m1 0x192cf8, ios 0x38f408;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a8970, imac 0x1d8da0, m1 0x19226c, ios 0x38f0ec;

    // property 498
    int m_beatsPerMinute;
    // property 501
    int m_beatsPerBar;
    // property 499
    Speed m_speed;
    // property 500
    bool m_disabled;
}

[[link(android)]]
class BitmapFontCache : cocos2d::CCObject {
    BitmapFontCache() {
        m_cache = nullptr;
    }
    ~BitmapFontCache() = win inline, m1 0x1c2c18, imac 0x20e4e0, ios 0x2f3740 {
        CC_SAFE_RELEASE(m_cache);
    }

    static void purgeSharedFontCache() = win inline {
        auto** instancePtr = reinterpret_cast<BitmapFontCache**>(geode::base::get() + 0x6a4e08);
        if (*instancePtr) {
            (*instancePtr)->release();
            *instancePtr = nullptr;
        }
    }

    static BitmapFontCache* sharedFontCache() = win inline, m1 0x1c2b48, imac 0x20e400, ios 0x2f36a8 {
        auto** instancePtr = reinterpret_cast<BitmapFontCache**>(geode::base::get() + 0x6a4e08);
        if (!*instancePtr) {
            *instancePtr = new BitmapFontCache();
            (*instancePtr)->init();
        }
        return *instancePtr;
    }

    FontObject* fontWithConfigFile(char const*, float) = win 0x3b380, m1 0x1c2cd0, imac 0x20e5a0, ios 0x2f3794;
    bool init() = win inline {
        m_cache = cocos2d::CCDictionary::create();
        m_cache->retain();
        return true;
    }

    cocos2d::CCDictionary* m_cache;
}

[[link(android)]]
class BonusDropdown : cocos2d::CCNode {
    // virtual ~BonusDropdown();

    static BonusDropdown* create(gd::string, int);

    bool init(gd::string, int) = m1 0x3ee364, imac 0x480290;
    void show();

    cocos2d::CCLayerColor* m_layerColor;
    float m_yPosition;
    cocos2d::CCScene* m_scene;
}

[[link(android)]]
class BoomListLayer : cocos2d::CCLayerColor {
    // virtual ~BoomListLayer();

    static BoomListLayer* create(BoomListView*, char const*);

    bool init(BoomListView*, char const*) = m1 0x3cc55c, imac 0x45b5a0;
}

[[link(android)]]
class BoomListView : cocos2d::CCLayer, TableViewDelegate, TableViewDataSource {
    BoomListView() {
        m_tableView = nullptr;
        m_entries = nullptr;
        m_type = BoomListType::Default;
        m_height = 0.f;
        m_width = 0.f;
        m_itemSeparation = 0.f;
        m_currentPage = 0;
        m_locked = false;
    }
    ~BoomListView() = win 0x3bf40, m1 0x290f3c, imac 0x2f83b0, ios 0x1d0b60;

    static BoomListView* create(cocos2d::CCArray*, TableViewCellDelegate*, float, float, int, BoomListType, float) = imac 0x2f86d0, m1 0x29114c;

    virtual void draw() = m1 0x291c44, imac 0x2f9360, ios 0x1d1398 {}
    virtual void setupList(float) = win 0x3c350, imac 0x2f8a30, m1 0x29145c, ios 0x1d0df4;
    virtual void TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) = m1 0x2914dc, imac 0x2f8ad0, ios 0x1d0e74 {}
    virtual float cellHeightForRowAtIndexPath(CCIndexPath&, TableView*) = win 0x3c3e0, m1 0x2914ec, imac 0x2f8b10, ios 0x1d0e84;
    virtual void didSelectRowAtIndexPath(CCIndexPath&, TableView*) = m1 0x2914fc, imac 0x2f8b30, ios 0x1d0e94 {}
    virtual int numberOfRowsInSection(unsigned int, TableView*) = win 0x3c3f0, m1 0x291504, imac 0x2f8b50, ios 0x1d0e9c;
    virtual unsigned int numberOfSectionsInTableView(TableView*) = m1 0x291514, imac 0x2f8b80, ios 0x1d0eac { return 1; }
    virtual TableViewCell* cellForRowAtIndexPath(CCIndexPath&, TableView*) = win 0x3c410, imac 0x2f8ba0, m1 0x291524, ios 0x1d0ebc;
    virtual void TableViewCommitCellEditingStyleForRowAtIndexPath(TableView*, TableViewCellEditingStyle, CCIndexPath&) = m1 0x291c3c, imac 0x2f9340, ios 0x1d1390 {}
    virtual void TableViewWillReloadCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) = m1 0x2914e4, imac 0x2f8af0, ios 0x1d0e7c {}
    virtual TableViewCell* getListCell(char const*) = win 0x3c4a0, imac 0x2f8cb0, m1 0x291640, ios 0x1d0f50;
    virtual void loadCell(TableViewCell*, int) = win 0x3c610, imac 0x2f8ef0, m1 0x2917e4, ios 0x1d1048;

    TodoReturn addObjectToList(cocos2d::CCNode*);
    bool init(cocos2d::CCArray*, TableViewCellDelegate*, float, float, int, BoomListType, float) = win 0x3bfe0, imac 0x2f8800, m1 0x291258, ios 0x1d0c00;

    bool init(cocos2d::CCArray* entries, BoomListType type, float width, float height) {
        return this->init(entries, nullptr, height, width, 0, type, 0.0f);
    }
    void lockList(bool) = imac 0x2f89b0, m1 0x2913f0;

    TableView* m_tableView;
    cocos2d::CCArray* m_entries;
    BoomListType m_type;
    float m_height;
    float m_width;
    float m_itemSeparation;
    int m_currentPage;
    bool m_locked;
}

[[link(android)]]
class BoomScrollLayer : cocos2d::CCLayer {
    BoomScrollLayer() = m1 0x322c3c, imac 0x394470, ios 0x12fca0 {
        m_dots = nullptr;
        m_slowPage = 0;
        m_touchX = 0.f;
        m_touchQuotient = 0.f;
        m_looped = false;
        m_dynamicDelegate = nullptr;
        m_dynamicObjects = nullptr;
        m_dynamic = false;
        m_touchType = 0;
        m_ignoreTouchCancel = false;
        m_touch = nullptr;
        m_pages = nullptr;
        m_touchTime = 0.0;
        m_extendedLayer = nullptr;
        m_unkFloat1 = 0.f;
        m_maxSpeed = 0.f;
        m_minSpeed = 0.f;
        m_unkFloat2 = 0.f;
        m_delegate = nullptr;
        m_pageMoving = false;
        m_pagesInvisible = false;
        m_minimumTouchLengthToSlide = 0.f;
        m_minimumTouchLengthToChangePage = 0.f;
        m_width = 0.f;
        m_cancelAndStealTouch = false;
        m_dotsVisible = false;
        m_page = 0;
        m_pageOffset = 0.f;
        m_unkPtr = nullptr;
        m_doVisit = false;
    }
    ~BoomScrollLayer() = win inline, m1 0x321734, imac 0x392d80, ios 0x12ef80 {
        CC_SAFE_RELEASE(m_dynamicObjects);
        CC_SAFE_RELEASE(m_pages);
        CC_SAFE_RELEASE(m_dots);
    }

    static BoomScrollLayer* create(cocos2d::CCArray* pages, int unk1, bool unk2, cocos2d::CCArray* unk3, DynamicScrollDelegate* delegate) = win 0x3d060, imac 0x391a10, m1 0x3204b4, ios 0x12e27c;
    static BoomScrollLayer* create(cocos2d::CCArray* pages, int unk1, bool unk2) = win inline, imac 0x391e00, m1 0x320880, ios 0x12e5b4 {
        return BoomScrollLayer::create(pages, unk1, unk2, nullptr, nullptr);
    }

    virtual void visit() = win 0x3dbd0, imac 0x393220, m1 0x321ae4, ios 0x12f1dc;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x3e710, imac 0x393d50, m1 0x3225ec, ios 0x12f7d0;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x3e7c0, imac 0x393e40, m1 0x3226b8, ios 0x12f88c;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x3eaf0, imac 0x394160, m1 0x322974, ios 0x12faa4;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x3e630, imac 0x393b90, m1 0x32241c, ios 0x12f780;
    virtual void registerWithTouchDispatcher() = win 0x3e5a0, imac 0x393a00, m1 0x3222a4, ios 0x12f648;

    void addPage(cocos2d::CCLayer*, int) = m1 0x3220e0, imac 0x393840;
    void addPage(cocos2d::CCLayer*) = m1 0x322070, imac 0x3937c0;
    void cancelAndStoleTouch(cocos2d::CCTouch*, cocos2d::CCEvent*) = imac 0x393ab0, m1 0x322340;
    void claimTouch(cocos2d::CCTouch*);
    cocos2d::CCLayer* getPage(int) = win inline, imac 0x392d00, m1 0x3216c0, ios 0x12ef14 {
        auto index = m_page;
        if (m_dynamic) index = index % m_pages->count();
        return static_cast<cocos2d::CCLayer*>(m_pages->objectAtIndex(index));
    }
    int getRelativePageForNum(int page) = win inline, imac 0x393150, m1 0x321a10 {
        return page < 1 ? page : page % getTotalPages();
    }
    cocos2d::CCPoint getRelativePosForPage(int page) = win inline, imac 0x392cb0, m1 0x321670 {
        return { this->getContentSize().width - m_pageOffset * page, 0.f };
    }
    int getTotalPages() = win inline, m1 0x32136c, imac 0x392960, ios inline {
        return m_dynamic ? m_dynamicObjects->count() : m_pages->count();
    }
    bool init(cocos2d::CCArray*, int, bool, cocos2d::CCArray*, DynamicScrollDelegate*) = ios 0x12e320, win 0x3d230, imac 0x391aa0, m1 0x32056c;
    void instantMoveToPage(int) = ios 0x12f2c0, win 0x3ddc0, m1 0x321ccc, imac 0x393410;
    void moveToPage(int) = ios 0x12f398, win 0x3dea0, imac 0x3934f0, m1 0x321da4;
    void moveToPageEnded() = ios 0x12f234, win 0x3dc30, imac 0x393280, m1 0x321b3c;
    int pageNumberForPosition(cocos2d::CCPoint) = win 0x3dcc0, imac 0x393070, m1 0x321924, ios 0x12f030;
    cocos2d::CCPoint positionForPageWithNumber(int page) = win inline, imac 0x3933c0, m1 0x321c78 {
        return { this->getContentSize().width + m_pageOffset * page, 0.f };
    }
    void quickUpdate() = ios 0x12f5f0, win inline, imac 0x393760, m1 0x322018 {
        if (m_pageMoving) {
            m_pageMoving = false;
            m_extendedLayer->stopActionByTag(2);
            m_extendedLayer->setPosition(m_position);
            this->moveToPageEnded();
        }
    }
    void removePage(cocos2d::CCLayer*) = imac 0x3938b0, m1 0x322148;
    void removePageWithNumber(int) = imac 0x393940, m1 0x3221dc;
    void repositionPagesLooped() = ios 0x12e79c, win 0x3e060, imac 0x392090, m1 0x320b14;
    void selectPage(int);
    void setDotScale(float scale) = win inline, m1 0x321608, imac 0x392c40 {
        for (int i = 0; i < m_dots->count(); i++) {
            static_cast<cocos2d::CCSprite*>(m_dots->objectAtIndex(i))->setScale(scale);
        }
    }
    void setPagesIndicatorPosition(cocos2d::CCPoint pos) = ios 0x12e65c, win inline, imac 0x391f40, m1 0x3209cc {
        m_dotPosition = pos;
        this->updateDots(0.f);
    }
    void setupDynamicScrolling(cocos2d::CCArray*, DynamicScrollDelegate*) = ios 0x12eaac, win 0x3d5a0, imac 0x392710, m1 0x321124;
    void togglePageIndicators(bool) = ios 0x12f170, win 0x3db60, imac 0x3931b0, m1 0x321a78;
    void updateDots(float) = ios 0x12ed10, win 0x3d960, imac 0x392990, m1 0x321388;
    void updatePages() = ios 0x12e684, win 0x3d840, m1 0x3209f4, imac 0x391f70;

    cocos2d::CCArray* m_dots;
    int m_slowPage;
    float m_touchX;
    float m_touchQuotient;
    bool m_looped;
    DynamicScrollDelegate* m_dynamicDelegate;
    cocos2d::CCArray* m_dynamicObjects;
    bool m_dynamic;
    int m_touchType;
    bool m_ignoreTouchCancel;
    cocos2d::CCTouch* m_touch;
    cocos2d::CCArray* m_pages;
    double m_touchTime;
    cocos2d::CCPoint m_position;
    ExtendedLayer* m_extendedLayer;
    cocos2d::CCRect m_rect;

    // these 4 floats are likely wrong, they're min, touchSpeedFast, touchSpeedMid in 2.0 but it only has 3 of them
    float m_unkFloat1;
    float m_maxSpeed;
    float m_minSpeed;
    float m_unkFloat2;

    BoomScrollLayerDelegate* m_delegate;
    bool m_pageMoving;
    bool m_pagesInvisible;
    float m_minimumTouchLengthToSlide;
    float m_minimumTouchLengthToChangePage;
    float m_width; //marginOffset in Rob terms
    bool m_cancelAndStealTouch;
    bool m_dotsVisible;
    cocos2d::CCPoint m_dotPosition;
    cocos2d::ccColor4B m_selectedPageColor;
    cocos2d::ccColor4B m_normalPageColor;
    int m_page;
    float m_pageOffset;
    void* m_unkPtr;
    bool m_doVisit;
    cocos2d::CCRect m_clippingRect;
}

[[link(android)]]
class BoomScrollLayerDelegate {
    virtual void scrollLayerScrollingStarted(BoomScrollLayer*) {}
    virtual void scrollLayerScrolledToPage(BoomScrollLayer*, int) {}
    virtual void scrollLayerMoved(cocos2d::CCPoint) {}
    virtual void scrollLayerWillScrollToPage(BoomScrollLayer*, int) {}
}

[[link(android)]]
class BrowseSmartKeyLayer : BrowseSmartTemplateLayer {
    // virtual ~BrowseSmartKeyLayer();
    BrowseSmartKeyLayer() {
        m_templatePage = 0;
    }

    static BrowseSmartKeyLayer* create(GJSmartTemplate*, gd::string) = win inline {
        auto ret = new BrowseSmartKeyLayer();
        if (ret->init(p0, p1)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void onBack(cocos2d::CCObject* sender) = win 0x4441b0, m1 0x43c764, imac 0x4d9020, ios 0x779e0;

    void addChanceToSelected(int, bool);
    void createTemplateObjects();
    void deletedSelectedItems();
    cocos2d::CCArray* getAllSelectedBlocks() = win 0x443ed0;
    bool init(GJSmartTemplate*, gd::string) = win 0x4430d0, m1 0x43b4bc, imac 0x4d7c90;
    void onButton(cocos2d::CCObject* sender) = win 0x443ab0;
    void onPrefabObject(cocos2d::CCObject* sender) = win 0x4440d0;
    void updateChanceValues() = win 0x443fa0;

    gd::string m_prefabKey;
    int m_templatePage;
}

[[link(android), depends(SmartPrefabResult)]]
class BrowseSmartTemplateLayer : FLAlertLayer {
    BrowseSmartTemplateLayer() = win 0x43e390 {
        m_template = nullptr;
        m_pages = nullptr;
        m_page = 0;
        m_nextPageBtn = nullptr;
        m_prevPageBtn = nullptr;
        m_dotsArray = nullptr;
    }
    ~BrowseSmartTemplateLayer() = win 0x441980, m1 0x439728, imac 0x4d5be0, ios 0x7523c;

    static BrowseSmartTemplateLayer* create(GJSmartTemplate*, SmartBrowseFilter) = win inline {
        auto ret = new BrowseSmartTemplateLayer();
        if (ret->init(p0, p1)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x443040, m1 0x43b324, imac 0x4d7a20, ios 0x76884;
    virtual void onBack(cocos2d::CCObject* sender) = win 0x443060, imac 0x4d7a60, m1 0x43b348, ios 0x768a8;

    void addObjectToPage(cocos2d::CCObject*, int) = win 0x4424b0;
    void addPrefabMenuItem(SmartPrefabResult, int) = win 0x4420b0;
    void baseSetup() = win 0x442540;
    void createDots();
    void createPrefab(gd::string, int) = win 0x442c60;
    void goToPage(int) = win 0x442af0;
    bool init(GJSmartTemplate*, SmartBrowseFilter) = win 0x441a40, m1 0x439948, imac 0x4d5f10;
    void onClick(cocos2d::CCObject* sender) = win 0x442ff0;
    void onClose(cocos2d::CCObject* sender);
    void onTemplateObject(cocos2d::CCObject* sender) = win 0x442d30;
    void updateDots();

    GJSmartTemplate* m_template;
    cocos2d::CCArray* m_pages;
    int m_page;
    cocos2d::CCNode* m_nextPageBtn;
    cocos2d::CCNode* m_prevPageBtn;
    cocos2d::CCArray* m_dotsArray;
}

[[link(android)]]
class ButtonPage : cocos2d::CCLayer {
    // virtual ~ButtonPage();
    ButtonPage() {}

    static ButtonPage* create(cocos2d::CCArray*, cocos2d::CCPoint, int, float) = win inline, m1 0x4fe9b4, imac 0x5ca160, ios 0x419250 {
        auto ret = new ButtonPage();
        if (ret->init(p0, p1, p2, p3)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(cocos2d::CCArray*, cocos2d::CCPoint, int, float) = win inline, m1 0x4feb6c, imac 0x5ca350, ios 0x419398 {
        if (!cocos2d::CCLayer::init()) return false;

        auto menu = cocos2d::CCMenu::create();
        this->addChild(menu);

        auto x = p1.x;
        auto y = p1.y;
        for (int i = 0; i < p0->count(); i++) {
            auto row = p2 != 0 ? (int)(i / p2) : 0;
            auto node = static_cast<cocos2d::CCNode*>(p0->objectAtIndex(i));
            menu->addChild(node);
            node->setPosition(menu->convertToNodeSpace({
                (i % p2) + (p3 + 4.f) * (p3 * .5f + x - p2 * p3 * .5f - (p2 - 1) * 2.f),
                (y - p3 * .5f) - row * (p3 + 4.f)
            }));
        }

        return true;
    }
}

[[link(android)]]
class ButtonSprite : cocos2d::CCSprite {
    // virtual ~ButtonSprite();
    ButtonSprite() = win 0x3ed20, ios 0x63804 {
        m_mode = 0;
        m_width = 0.f;
        m_unkFloat = 0.f;
        m_scale = 0.f;
        m_height = 0.f;
        m_absolute = false;
        m_label = nullptr;
        m_subSprite = nullptr;
        m_subBGSprite = nullptr;
        m_BGSprite = nullptr;
    }

    static ButtonSprite* create(char const* caption, int width, int p2, float scale, bool absolute, char const* font, char const* bg, float height) = win 0x3f150, imac 0x92640, m1 0x8579c, ios 0x62f8c;
    static ButtonSprite* create(cocos2d::CCSprite* topSprite, int width, int unused, float height, float scale, bool absolute, char const* bgSprite, bool noScaleSpriteForBG) = win 0x3ee40, imac 0x91db0, m1 0x84fe0, ios 0x62878;

    /// Create a ButtonSprite with a top sprite and a texture.
    /// @param topSprite The top sprite to add on top of the sprite
    /// @param width Sprite width; ignored if `absolute` is false
    /// @param absolute Whether to use absolute width or not
    /// @param texture The name of the background sprite file (can't be in a spritesheet)
    /// @param height The height of the button, leave 0 for automatic
    /// @param scale Scale of top sprite
    static ButtonSprite* create(cocos2d::CCSprite* topSprite, int width, bool absolute, float height, const char* texture, float scale) {
        return create(topSprite, width, 0, height, scale, absolute, texture, true);
    }

    /// Create a ButtonSprite with text, a font and a texture.
    /// @param caption The text of the ButtonSprite
    /// @param width Sprite width; ignored if `absolute` is false
    /// @param absolute Whether to use absolute width or not
    /// @param font The name of the BM font file to use
    /// @param texture The name of the background sprite file (can't be in a spritesheet)
    /// @param height The height of the button, leave 0 for automatic
    /// @param scale Scale of text
    /// @returns Pointer to the created ButtonSprite, or nullptr on error
    static ButtonSprite* create(const char* caption, int width, bool absolute, const char* font, const char* texture, float height, float scale) {
        return create(caption, width, 0, scale, absolute, font, texture, height);
    }

    static ButtonSprite* create(char const* caption) {
        return ButtonSprite::create(caption, 0, false, "goldFont.fnt", "GJ_button_01.png", .0f, 1.f);
    }
    static ButtonSprite* create(char const* caption, const char* font, const char* texture) {
        return ButtonSprite::create(caption, 0, false, font, texture, .0f, 1.f);
    }
    static ButtonSprite* create(char const* caption, const char* font, const char* texture, float scale) {
        return ButtonSprite::create(caption, 0, false, font, texture, .0f, scale);
    }

    static ButtonSprite* create(char const* caption, float scale) {
        return ButtonSprite::create(caption, 0, false, "goldFont.fnt", "GJ_button_01.png", .0f, scale);
    }
    static ButtonSprite* create(char const* caption, int width, int p2, float scale, bool absolute, char const* font, char const* bg) {
        return ButtonSprite::create(caption, width, p2, scale, absolute, font, bg, .0f);
    }
    static ButtonSprite* create(char const* caption, int width, int p2, float scale, bool absolute) = ios 0x62f74 {
        return ButtonSprite::create(caption, width, p2, scale, absolute, "goldFont.fnt", "GJ_button_01.png", .0f);
    }
    static ButtonSprite* create(cocos2d::CCSprite* topSprite, int width, int unused, float height, float scale, bool absolute) {
        return ButtonSprite::create(topSprite, width, unused, height, scale, absolute, "GJ_button_01.png", false);
    }
    static ButtonSprite* create(cocos2d::CCSprite* topSprite) {
        return ButtonSprite::create(topSprite, 0, 0, .0f, 1.f, false, "GJ_button_01.png", false);
    }

    bool init(char const* caption, int width, int p2, float scale, bool absolute, char const* font, char const* bg, float height) = ios 0x63060, win 0x3f220, imac 0x92790, m1 0x858d8;
    bool init(cocos2d::CCSprite* topSprite, int width, int unused, float height, float scale, bool absolute, char const* bgSprite, bool noScaleSpriteForBG) = win 0x3eef0, imac 0x91f00, m1 0x85114;
    void setColor(cocos2d::ccColor3B color) {
        // i love inlined funcs
        if (m_label) m_label->setColor(color);
        if (m_subSprite) m_subSprite->setColor(color);
        if (m_subBGSprite) m_subBGSprite->setColor(color);
        if (m_BGSprite) m_BGSprite->setColor(color);
    }
    void setString(char const*) = win 0x3fae0, imac 0x92a40, m1 0x85b60, ios 0x632ac;
    void updateBGImage(char const*) = win 0x3f520, imac 0x92e20, m1 0x85f00, ios 0x6364c;
    void updateSpriteBGSize() = win 0x3f660, imac 0x92190, m1 0x85368;
    void updateSpriteOffset(cocos2d::CCPoint offset) = win inline, imac 0x92f40, m1 0x8601c, ios 0x6375c {
        m_spritePosition = offset;
        this->updateSpriteBGSize();
    }

    int m_mode;
    float m_width;
    float m_unkFloat;
    float m_scale;
    float m_height;
    bool m_absolute;
    cocos2d::CCLabelBMFont* m_label;
    cocos2d::CCSprite* m_subSprite;
    cocos2d::CCSprite* m_subBGSprite;
    cocos2d::extension::CCScale9Sprite* m_BGSprite;
    cocos2d::CCPoint m_textOffset;
    cocos2d::CCPoint m_spritePosition;
    gd::string m_caption;
}

[[link(android)]]
class CameraTriggerGameObject : EffectGameObject {
    // virtual ~CameraTriggerGameObject();

    CameraTriggerGameObject() {
        m_exitStatic = false;
        m_followObject = false;
        m_followEasing = 1.f;
        m_edgeDirection = 0;
        m_smoothVelocity = false;
        m_velocityModifier = 0.f;
        m_exitInstant = false;
        m_previewOpacity = 1.f;
    }

    static CameraTriggerGameObject* create(char const*);

    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a4cd0, imac 0x1cc3f0, m1 0x18823c, ios 0x38b8e8;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a5f70, imac 0x1d0760, m1 0x18b600, ios 0x38c820;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a5030, imac 0x1cc650, m1 0x1883f8, ios 0x38baa4;

    bool init(char const*);

    // property 110
    bool m_exitStatic;
    // property 212
    bool m_followObject;
    // property 213
    float m_followEasing;
    // property 164
    int m_edgeDirection;
    // property 453
    bool m_smoothVelocity;
    // property 454
    float m_velocityModifier;
    // property 465
    bool m_exitInstant;
    // property 506
    float m_previewOpacity;
}

[[link(android)]]
class CCAlertCircle : cocos2d::CCNode {
    // virtual ~CCAlertCircle();

    static CCAlertCircle* create();

    virtual bool init() = imac 0x1686a0, m1 0x135718;
    virtual void draw() = imac 0x168730, m1 0x1357c4;

    CCCircleAlert* m_circleAlert;
}

[[link(android)]]
class CCAnimatedSprite : cocos2d::CCSprite {
    CCAnimatedSprite() = win 0x3feb0 {
        m_animationManager = nullptr;
        m_sprite = nullptr;
        m_fbfSprite = nullptr;
        m_paSprite = nullptr;
        m_spriteMode = (spriteMode)0;
        m_delegate = nullptr;
    }
    ~CCAnimatedSprite() = win 0x41140, m1 0x2d3784, imac 0x33d360, ios 0x2fe214;

    static CCAnimatedSprite* createWithType(char const* definition, cocos2d::CCTexture2D* texture, bool useTexture) = win inline, imac 0x33c020, m1 0x2d24c0, ios 0x2fd4b8 {
        auto ret = new CCAnimatedSprite();
        if (ret->initWithType(definition, texture, useTexture)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void setOpacity(unsigned char) = win 0x41070, imac 0x33d1f0, m1 0x2d3624, ios 0x2fe154;
    virtual void setColor(cocos2d::ccColor3B const&) = win 0x410d0, imac 0x33d2a0, m1 0x2d36d4, ios 0x2fe1b4;
    virtual void animationFinished(char const*) = win 0x41050, imac 0x33d1d0, m1 0x2d360c, ios 0x2fe13c;
    virtual void animationFinishedO(cocos2d::CCObject*) = win 0x41010, m1 0x2d35d8, imac 0x33d1a0, ios 0x2fe108;

    void cleanupSprite() = win inline, imac 0x33ca60, m1 0x2d2ebc, ios 0x2fdb54 {
        if (m_paSprite) m_paSprite->cleanup();
        if (m_fbfSprite) m_fbfSprite->cleanup();
        if (m_animationManager) m_animationManager->doCleanup();
        if (m_fbfSprite) m_fbfSprite->removeFromParentAndCleanup(true);
        if (m_paSprite) m_paSprite->removeFromParentAndCleanup(true);
        m_animationManager = nullptr;
        m_sprite = nullptr;
        m_fbfSprite = nullptr;
        m_paSprite = nullptr;
        m_spriteMode = (spriteMode)0;
    }
    bool initWithType(char const* definition, cocos2d::CCTexture2D* texture, bool useTexture) = win 0x3ffc0, imac 0x33c100, m1 0x2d2594, ios 0x2fd57c;
    void loadType(char const* definition, cocos2d::CCTexture2D* texture, bool useTexture) = win 0x401e0, m1 0x2d2790, imac 0x33c2f0, ios 0x2fd6e0;
    void runAnimation(gd::string animation) = win 0x40c80, m1 0x2d3058, imac 0x33cc20, ios 0x2fdcf0;
    void runAnimationForced(gd::string animation) = win inline, m1 0x2d30f0, imac 0x33cca0, ios 0x2fdd78 {
        m_animationManager->overridePrio();
        m_animationManager->runAnimation(animation);
    }
    void stopTween() = win inline, m1 0x2d359c, imac 0x33d160, ios 0x2fe0cc {
        m_paSprite->stopAllActions();
        this->stopActionByTag(1);
        m_activeTween = "";
    }
    void switchToMode(spriteMode mode) = win 0x40b10, imac 0x33cb00, m1 0x2d2f4c, ios 0x2fdbe4;
    void tweenToAnimation(gd::string animation, float duration) = win 0x40cf0, imac 0x33cd60, m1 0x2d31c4, ios 0x2fde3c;
    void tweenToAnimationFinished() = win 0x40fc0, m1 0x2d3480, imac 0x33d050, ios 0x2fe030;
    void willPlayAnimation() = win inline, m1 0x2d3194, imac 0x33cd30, ios 0x2fde0c {
        this->stopActionByTag(1);
        m_activeTween = "";
    }

    gd::string m_unkString1;
    gd::string m_activeTween;
    SpriteAnimationManager* m_animationManager;
    cocos2d::CCSprite* m_sprite;
    cocos2d::CCSprite* m_fbfSprite;
    CCPartAnimSprite* m_paSprite;
    spriteMode m_spriteMode;
    gd::string m_currentAnim;
    AnimatedSpriteDelegate* m_delegate;
}

[[link(android)]]
class CCAnimateFrameCache : cocos2d::CCObject {
    // virtual ~CCAnimateFrameCache();

    static CCAnimateFrameCache* get() {
        return CCAnimateFrameCache::sharedSpriteFrameCache();
    }
    static CCAnimateFrameCache* sharedSpriteFrameCache() = win 0x41450, m1 0x4ab09c, imac 0x5542d0, ios 0x1b44d8;

    void addCustomSpriteFramesWithFile(char const*) = m1 0x4ab2a0, imac 0x554510;
    cocos2d::CCDictionary* addDict(cocos2d::CCDictionary*, char const*) = m1 0x4abdb0, imac 0x5551e0, ios 0x1b45f4;
    cocos2d::CCDictionary* addDict(DS_Dictionary*, char const*) = win 0x41670, m1 0x4ac488, imac 0x5558b0;
    cocos2d::CCDictionary* addSpriteFramesWithFile(char const*) = win 0x414e0, m1 0x4ac224, imac 0x555650, ios 0x1b47ec;
    bool init() = win inline, m1 0x4ab130, imac 0x554370, ios 0x1b4544 {
        m_animateFrames = cocos2d::CCDictionary::create();
        m_animateFrames->retain();
        m_unk040 = cocos2d::CCDictionary::create();
        m_unk040->retain();
        m_animateDescriptions = cocos2d::CCDictionary::create();
        m_animateDescriptions->retain();
        return true;
    }
    void purgeSharedSpriteFrameCache() = win inline, m1 0x4ab174, imac 0x5543c0, ios inline {
        auto** instancePtr = reinterpret_cast<CCAnimateFrameCache**>(geode::base::get() + GEODE_WINDOWS(0x6a4e10) GEODE_IOS(0x85f2d0));
        if (*instancePtr) {
            (*instancePtr)->release();
            *instancePtr = nullptr;
        }
    }
    void removeSpriteFrames() = win inline, m1 0x4acbf4, imac 0x556030, ios 0x1b491c {
        m_animateFrames->removeAllObjects();
        m_unk040->removeAllObjects();
        m_animateDescriptions->removeAllObjects();
    }
    cocos2d::CCArray* spriteFrameByName(char const*) = win 0x41c40, m1 0x4acc24, imac 0x556060, ios 0x1b494c;

    cocos2d::CCDictionary* m_animateFrames;
    cocos2d::CCDictionary* m_unk040;
    cocos2d::CCDictionary* m_animateDescriptions;
}

[[link(android)]]
class CCBlockLayer : cocos2d::CCLayerColor {
    CCBlockLayer() = win 0x42360 {
        m_closeOnHide = false;
        m_forcePrioRegistered = false;
    }
    ~CCBlockLayer() = win 0x42430, m1 0x4612fc, imac 0x5019a0, ios 0x8a228;

    static CCBlockLayer* create() = win inline, m1 0x461584, imac 0x501d20, ios inline {
        auto ret = new CCBlockLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x424e0, imac 0x501df0, m1 0x46163c, ios 0x8a2e0;
    virtual void draw() = win 0x426f0, m1 0x4618c0, imac 0x5020a0, ios 0x8a540;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x4618fc, imac 0x5020d0, ios 0x8a57c { return true; }
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x46191c, imac 0x502130, ios 0x8a59c {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x46190c, imac 0x5020f0, ios 0x8a58c {}
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x461914, imac 0x502110, ios 0x8a594 {}
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x4617a4, imac 0x501f60, ios 0x8a424;
    virtual void keyBackClicked() = win 0x42620, m1 0x4617dc, imac 0x501fa0, ios 0x8a45c;
    virtual void customSetup() = m1 0x461760, imac 0x501f00, ios 0x8a3e0 {}
    virtual void enterLayer() = win 0x425a0, m1 0x46176c, imac 0x501f30, ios 0x8a3ec;
    virtual void exitLayer() = win 0x42640, imac 0x501fd0, m1 0x4617f8, ios 0x8a478;
    virtual void showLayer(bool) = win 0x42680, m1 0x461844, imac 0x502010, ios 0x8a4c4;
    virtual void hideLayer(bool) = win 0x42690, m1 0x461850, imac 0x502020, ios 0x8a4d0;
    virtual void layerVisible() = win 0x426a0, m1 0x461860, imac 0x502040, ios 0x8a4e0;
    virtual void layerHidden() = win 0x426b0, m1 0x461870, imac 0x502060, ios 0x8a4f0;
    virtual void enterAnimFinished() = m1 0x46185c, imac 0x502030, ios 0x8a4dc {}
    virtual void disableUI() = m1 0x461764, imac 0x501f10, ios 0x8a3e4 {}
    virtual void enableUI() = m1 0x461768, imac 0x501f20, ios 0x8a3e8 {}

    void decrementForcePrio() = win inline, ios 0x8a5a4, m1 0x461924, imac 0x502150 {
        if (m_forcePrioRegistered) {
            m_forcePrioRegistered = false;
            cocos2d::CCDirector::sharedDirector()->getTouchDispatcher()->unregisterForcePrio(this);
        }
    }
    void incrementForcePrio() = win inline, m1 0x461710, imac 0x501eb0, ios 0x8a390 {
        if (!m_forcePrioRegistered) {
            m_forcePrioRegistered = true;
            cocos2d::CCDirector::sharedDirector()->getTouchDispatcher()->registerForcePrio(this, 2);
        }
    }

    bool m_closeOnHide;
    bool m_forcePrioRegistered;
}

[[link(android)]]
class CCCircleAlert : CCCircleWave {
    // virtual ~CCCircleAlert();

    static CCCircleAlert* create(float, float, float);

    bool init(float, float, float);
}

[[link(android)]]
class CCCircleWave : cocos2d::CCNode {
    // virtual ~CCCircleWave();
    // CCCircleWave() = win 0x418b0;

    static CCCircleWave* create(float startRadius, float endRadius, float duration, bool fadeIn, bool easeOut) = win 0x42800, imac 0x167ae0, m1 0x134bb4, ios 0x16f678;
    static CCCircleWave* create(float startRadius, float endRadius, float duration, bool fadeIn) = win inline, ios 0x16f670, m1 0x134bac, imac 0x167ad0 {
        return CCCircleWave::create(startRadius, endRadius, duration, fadeIn, true);
    }

    virtual void setPosition(cocos2d::CCPoint const&) = win 0x42af0, imac 0x167e30, m1 0x134e8c, ios 0x16f8d0;
    virtual void removeMeAndCleanup() = win 0x42f00, imac 0x1682f0, m1 0x135348, ios 0x16fc40;
    virtual void draw() = win 0x42dd0, imac 0x1681b0, m1 0x135210, ios 0x16fb18;
    virtual void updateTweenAction(float, char const*) = win 0x42b70, imac 0x167f30, m1 0x134f9c, ios 0x16f9e0;

    TodoReturn baseSetup(float);
    void followObject(cocos2d::CCNode* newTarget, bool staticPosition) = win inline, imac 0x167ea0, m1 0x134f0c, ios 0x16f950 {
        if (m_target) m_target->release();

        m_target = newTarget;
        newTarget->retain();

        this->unschedule(schedule_selector(CCCircleWave::updatePosition));
        if (!staticPosition) this->schedule(schedule_selector(CCCircleWave::updatePosition));

        this->setPosition(newTarget->getPosition());
    }
    bool init(float startRadius, float endRadius, float duration, bool fadeIn, bool easeOut) = win 0x428b0, imac 0x167bd0, m1 0x134c88, ios 0x16f708;
    void updatePosition(float dt) = win 0x42b30, imac 0x167e60, m1 0x134ec0, ios 0x16f904;

    cocos2d::CCNode* m_target;
    float m_width;
    float m_radius;
    float m_opacity;
    cocos2d::ccColor3B m_color;
    cocos2d::CCPoint m_position;
    CircleMode m_circleMode;
    int m_lineWidth;
    float m_opacityMod;
    bool m_blendAdditive;
    CCCircleWaveDelegate* m_delegate;
}

[[link(android)]]
class CCCircleWaveDelegate {
    virtual void circleWaveWillBeRemoved(CCCircleWave*) {}
}

[[link(android)]]
class CCContentLayer : cocos2d::CCLayerColor {
    CCContentLayer() {}

    static CCContentLayer* create(cocos2d::ccColor4B const&, float, float);

    virtual void setPosition(cocos2d::CCPoint const&) = win 0x42f70, m1 0x6bea40, imac 0x7ad2b0, ios 0x1921c4;
}

[[link(android)]]
class CCCountdown : cocos2d::CCSprite {
    // virtual ~CCCountdown();

    static CCCountdown* create();

    virtual bool init() = imac 0x7b0e20, m1 0x6c2084;
    virtual void setOpacity(unsigned char) = m1 0x6c2434, imac 0x7b11e0;

    void lapFinished();
    void startTimerWithSeconds(float, cocos2d::SEL_CallFunc, cocos2d::CCNode*);

    cocos2d::CCProgressTimer* m_progressTimer;
    float m_unk260;
    int m_seconds;
    cocos2d::CCLabelBMFont* m_countdownLabel;
    cocos2d::SEL_CallFunc m_callbackSelector;
    cocos2d::CCNode* m_targetNode;
}

[[link(android)]]
class CCCounterLabel : cocos2d::CCLabelBMFont {
    // virtual ~CCCounterLabel();
    CCCounterLabel() {
        m_stepSize = 0;
        m_targetCount = 0;
        m_currentCount = 0;
        m_counterEnabled = false;
        m_stepCount = 10;
        m_dontSchedule = false;
        m_formatterType = FormatterType::Integer;
    }

    static CCCounterLabel* create(int count, char const* font, FormatterType type) = win inline, ios 0x3ec2c, m1 0x45b328, imac 0x4fb550 {
        auto ret = new CCCounterLabel();
        if (ret->init(count, font, type)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    void calculateStepSize(int);
    void disableCounter();
    void enableCounter();
    void fastUpdateCounter() = win inline {
        m_currentCount = m_targetCount;
        this->updateString();
    }
    int getTargetCount() = win inline {
        return m_targetCount;
    }
    bool init(int count, char const* font, FormatterType type) = win inline {
        if (!cocos2d::CCLabelBMFont::initWithString(" ", font)) return false;
        m_formatterType = type;
        m_targetCount = count;
        this->fastUpdateCounter();
        return true;
    }
    void setTargetCount(int) = win 0x43130;
    void updateCounter(float) = win 0x431c0;
    void updateString() = win 0x43240;

    int m_stepSize;
    int m_targetCount;
    int m_currentCount;
    bool m_counterEnabled;
    int m_stepCount;
    bool m_dontSchedule;
    FormatterType m_formatterType;
}

[[link(android)]]
class CCExtenderNode : cocos2d::CCNode {
    void setOpacity(unsigned int opacity);
}

[[link(android)]]
class CCIndexPath : cocos2d::CCObject {
    CCIndexPath() {
        m_row = 0;
        m_section = 0;
    }
    // virtual ~CCIndexPath();

    static CCIndexPath* CCIndexPathWithSectionRow(int section, int row) {
        auto ret = new CCIndexPath();
        ret->m_row = row;
        ret->m_section = section;
        return ret;
    }

    int m_row;
    int m_section;
}

[[link(android)]]
class CCLightFlash : cocos2d::CCNode {
    CCLightFlash() = win inline {
        m_lightStripArray = nullptr;
        m_layerColor = nullptr;
        m_dontFadeOut = false;
        m_mainLayer = nullptr;
        m_layerColorZOrder = 0;
    }
    ~CCLightFlash() = win inline, m1 0x451e38, imac 0x4f0e90, ios 0x35738 {
        CC_SAFE_RELEASE(m_lightStripArray);
    }

    static CCLightFlash* create() = ios 0x34fb8, win inline, imac 0x4f0560, m1 0x451614 {
        auto ret = new CCLightFlash();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        CC_SAFE_DELETE(ret);
        return nullptr;
    }

    virtual bool init() = win inline, m1 0x451678, imac 0x4f05d0, ios 0x3501c {
        return true;
    }

    void cleanupFlash() = win 0x43c80, m1 0x451df8, imac 0x4f0e50;
    void fadeAndRemove() = m1 0x451c20, imac 0x4f0c70;
    // param names from https://github.com/gd-hyperdash/Cocos2Dx/blob/master/cocos2dx/extensions/RobTop/CCLightFlash.h and confirmed to be correct
    void playEffect(cocos2d::CCPoint pos, cocos2d::ccColor3B col, float startWidth, float startWidthVariation, float endWidth, float endWidthVariation, float endHeight, float stripDuration, float stripDurationVariance, float stripInterval, float stripStartDelay, float stripStartDelayVariation, float stripRotation, float stripRotationVariation, float stripOpacity, float stripOpacityVariation, int stripCount, bool circleRotation, bool fadeIn, float delay) = ios 0x35024, win 0x433a0, imac 0x4f05e0, m1 0x451680;
    void removeLights() = win 0x43c20, m1 0x451d9c, imac 0x4f0df0;
    void showFlash() = win 0x438e0, imac 0x4f0b30, m1 0x451af4;

    cocos2d::CCArray* m_lightStripArray;
    cocos2d::CCLayerColor* m_layerColor;
    bool m_dontFadeOut;
    cocos2d::CCNode* m_mainLayer;
    int m_layerColorZOrder;
}

[[link(android)]]
class CCLightStrip : cocos2d::CCNode {
    CCLightStrip() = win inline {
        m_objectWidth = .0f;
        m_toWidth = .0f;
        m_toHeight = .0f;
        m_duration = .0f;
        m_opacity = .0f;
        m_width = .0f;
        m_height = .0f;
    }
    // virtual ~CCLightStrip();

    static CCLightStrip* create(float width, float toWidth, float toHeight, float duration, float delay) = win inline, imac 0x4f0a80, m1 0x451a40 {
        auto ret = new CCLightStrip();
        if (ret->init(width, toWidth, toHeight, duration, delay)) {
            ret->autorelease();
            return ret;
        }
        CC_SAFE_DELETE(ret);
        return nullptr;
    }

    virtual void draw() = win 0x43cb0, imac 0x4f10a0, m1 0x452008, ios 0x358a4;
    virtual void updateTweenAction(float value, char const* keyword) = win 0x43e70, imac 0x4f1230, m1 0x452160, ios 0x359fc;

    bool init(float width, float toWidth, float toHeight, float duration, float delay) = win inline, imac 0x4f0f60, m1 0x451ef0 {
        this->m_toWidth = toWidth;
        this->m_toHeight = toHeight;
        this->m_objectWidth = width;
        this->m_duration = duration;
        this->m_width = width;
        this->m_opacity = 255.f;
        this->m_height = 1.f;

        this->setVisible(false);

        auto* delayAction = cocos2d::CCDelayTime::create(delay);
        auto* heightActionTween = cocos2d::CCActionTween::create(this->m_duration, "height", this->m_height, this->m_toHeight);
        auto* widthActionTween = cocos2d::CCActionTween::create(this->m_duration, "width", this->m_width, this->m_toWidth);
        auto* heightEaseOutAction = cocos2d::CCEaseOut::create(heightActionTween, 2.f);
        auto* widthEaseOutAction = cocos2d::CCEaseOut::create(widthActionTween, 2.f);
        auto* spawnEaseOutActions = cocos2d::CCSpawn::create(heightEaseOutAction, widthEaseOutAction, nullptr);
        auto* lightStripSequence = cocos2d::CCSequence::create(delayAction, cocos2d::CCShow::create(), spawnEaseOutActions, nullptr);

        cocos2d::CCDirector::sharedDirector()->getActionManager()->addAction(lightStripSequence, this, false);

        return true;
    }

    float m_objectWidth;
    float m_toWidth;
    float m_toHeight;
    float m_duration;
    cocos2d::ccColor4B m_color;
    float m_opacity;
    float m_width;
    float m_height;
}

[[link(android)]]
class CCMenuItemSpriteExtra : cocos2d::CCMenuItemSprite {
    CCMenuItemSpriteExtra() = win 0x449f0, m1 0x4bbf4, imac 0x54e80, ios 0x16ecb8 {
        m_animationEnabled = false; //this is changed to true in init
        m_colorEnabled = false;
        m_colorDip = 0.78431374f;
        m_scaleMultiplier = 1.f; //this is changed to 1.26f in init
        m_volume = 1.f;
        m_duration = 0.3f;
        m_unselectedDuration = 0.4f;
        m_animationType = MenuAnimationType::Scale;
        m_iconType = IconType::Cube;
        m_baseScale = 0.f; //this is changed to 1.f in init
    }

    static CCMenuItemSpriteExtra* create(cocos2d::CCNode* sprite, cocos2d::CCNode* disabledSprite, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler callback) = ios 0x214364, win 0x44b40, imac 0x264b80, m1 0x2105c0;

    static CCMenuItemSpriteExtra* create(cocos2d::CCNode* sprite, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler callback) {
        return CCMenuItemSpriteExtra::create(sprite, nullptr, target, callback);
    }

    virtual void activate() = win 0x44d40, imac 0x264d90, m1 0x210804, ios 0x214594;
    virtual void selected() = win 0x44e50, imac 0x264f10, m1 0x210964, ios 0x214674;
    virtual void unselected() = win 0x45070, imac 0x265190, m1 0x210bb4, ios 0x21484c;

    bool init(cocos2d::CCNode* sprite, cocos2d::CCNode* disabledSprite, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler callback) = ios 0x214408, win 0x44be0, imac 0x264c10, m1 0x210678;
    void setSizeMult(float mult) = ios 0x21458c, win inline, m1 0x2107fc, imac 0x264d80 {
        //inlined on windows, member is in CCMenuItemSprite
        m_fSizeMult = mult;
    }

    /// Set a new image for this button
    /// Prefer using this over `setNormalImage` as the latter does not actually
    /// handle any of the special sizing operations `CCMenuItemSpriteExtra` has
    /// @param sprite The sprite to replace this button's sprite with
    /// @note Geode addition
    void setSprite(cocos2d::CCSprite* sprite) {
        this->setNormalImage(sprite);
        this->updateSprite();
    }
    /// Update the sizing of this button's image
    /// If you for example have a `ButtonSprite` on this button and change the
    /// text, you need to call `updateSprite` afterwards to fix the button's
    /// content size
    /// @note Geode addition
    void updateSprite() {
        auto sprite = this->getNormalImage();
        auto size = sprite->getScaledContentSize();
        sprite->setPosition(size / 2);
        sprite->setAnchorPoint({ .5f, .5f });
        this->setContentSize(size);
    }
    void useAnimationType(MenuAnimationType);

    float m_scaleMultiplier;
    float m_baseScale;
    bool m_animationEnabled;
    bool m_colorEnabled;
    float m_volume;
    gd::string m_activateSound;
    gd::string m_selectSound;
    float m_colorDip;
    cocos2d::CCPoint m_offset;
    float m_duration;
    float m_unselectedDuration;
    MenuAnimationType m_animationType;
    cocos2d::CCPoint m_startPosition;
    IconType m_iconType;
}

[[link(android)]]
class CCMenuItemToggler : cocos2d::CCMenuItem {
    CCMenuItemToggler() {
        m_offButton = nullptr;
        m_onButton = nullptr;
        m_toggled = false;
        m_notClickable = false;
    }
    // virtual ~CCMenuItemToggler();

    static CCMenuItemToggler* create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) = ios 0x19452c, win 0x451e0, imac 0x59c70, m1 0x4f880;
    static CCMenuItemToggler* createWithSize(const char* spr1, const char* spr2, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler callback, float scale) {
        auto sprOff = cocos2d::CCSprite::createWithSpriteFrameName(spr1);
        auto sprOn = cocos2d::CCSprite::createWithSpriteFrameName(spr2);

        sprOff->setScale(scale);
        sprOn->setScale(scale);

        return create(sprOff, sprOn, target, callback);
    }
    static CCMenuItemToggler* createWithStandardSprites(cocos2d::CCObject* target, cocos2d::SEL_MenuHandler callback, float scale) {
        auto sprOff = cocos2d::CCSprite::createWithSpriteFrameName("GJ_checkOff_001.png");
        auto sprOn = cocos2d::CCSprite::createWithSpriteFrameName("GJ_checkOn_001.png");

        float maxWidth = (std::max)(sprOff->getContentSize().width, sprOn->getContentSize().width);
        float maxHeight = (std::max)(sprOff->getContentSize().height, sprOn->getContentSize().height);

        sprOff->setScale(scale);
        sprOn->setScale(scale);

        auto ret = create(sprOff, sprOn, target, callback);

        ret->setContentSize({maxWidth, maxHeight});

        ret->m_offButton->setContentSize({maxWidth, maxHeight});
        ret->m_onButton->setContentSize({maxWidth, maxHeight});

        ret->m_offButton->setPosition({maxWidth/2, maxHeight/2});
        ret->m_onButton->setPosition({maxWidth/2, maxHeight/2});

        sprOff->setPosition({maxWidth/2, maxHeight/2});
        sprOn->setPosition({maxWidth/2, maxHeight/2});

        return ret;
    }

    virtual void activate() = win 0x45490, m1 0x4ffc4, imac 0x5a330, ios 0x19494c;
    virtual void selected() = win 0x45440, m1 0x4ff84, imac 0x5a300, ios 0x19490c;
    virtual void unselected() = win 0x454e0, m1 0x50004, imac 0x5a360, ios 0x19498c;
    virtual void setEnabled(bool) = win 0x45530, m1 0x50044, imac 0x5a390, ios 0x1949cc;

    CCMenuItemSpriteExtra* activeItem() = win inline, m1 0x4ff68, imac 0x5a2e0, ios 0x1948f0 {
        return m_toggled ? m_onButton : m_offButton;
    }
    bool init(cocos2d::CCNode* off, cocos2d::CCNode* on, cocos2d::CCObject* target, cocos2d::SEL_MenuHandler callback) = ios 0x1945fc, win inline, imac 0x59d40, m1 0x4f964 {
        if (!CCMenuItem::initWithTarget(target, callback)) return false;

        m_offButton = CCMenuItemSpriteExtra::create(off, nullptr, this, menu_selector(CCMenuItemToggler::normalTouch));
        m_onButton = CCMenuItemSpriteExtra::create(on, nullptr, this, menu_selector(CCMenuItemToggler::selectedTouch));

        this->addChild(m_offButton);
        this->addChild(m_onButton);

        m_offButton->getNormalImage()->setAnchorPoint({0.5f, 0.5f});
        m_onButton->getNormalImage()->setAnchorPoint({0.5f, 0.5f});

        auto imgoff = m_offButton->getNormalImage();
        auto imgon = m_onButton->getNormalImage();

        imgoff->setPosition(m_offButton->convertToNodeSpace({0.f, 0.f}));
        imgon->setPosition(m_onButton->convertToNodeSpace({0.f, 0.f}));
        m_notClickable = false;
        this->toggle(false);

        return true;
    }
    bool isOn() {
        return m_toggled;
    }

    bool isToggled() {
        return m_toggled;
    }
    void normalTouch(cocos2d::CCObject*) = win 0x45580, m1 0x4fbbc, imac 0x59f80, ios 0x1947ac;
    void selectedTouch(cocos2d::CCObject*) = win 0x455a0, m1 0x4fcac, imac 0x5a050, ios 0x1947c0;
    void setClickable(bool on) {
        m_notClickable = !on;
    }
    void setSizeMult(float mult) = ios 0x1948ac, win inline, m1 0x4fe70, imac 0x5a1f0 {
        m_offButton->setSizeMult(mult);
        m_onButton->setSizeMult(mult);

        this->toggle(this->m_toggled);
    }
    void toggle(bool) = ios 0x1947d4, win 0x455c0, imac 0x5a120, m1 0x4fd98;
    void toggleWithCallback(bool on) {
        this->activate();
        this->toggle(on);
    }

    /// Update the sizing of this toggle's image
    /// If you for example have a `ButtonSprite` on this toggle and change the
    /// text, you need to call `updateSprite` afterwards to fix the toggle's
    /// content size
    /// @note Geode addition
    void updateSprite() {
        m_offButton->updateSprite();
        m_onButton->updateSprite();
        auto size = m_offButton->getScaledContentSize();
        m_offButton->setPosition(size / 2);
        m_offButton->setAnchorPoint({ .5f, .5f });
        m_onButton->setPosition(size / 2);
        m_onButton->setAnchorPoint({ .5f, .5f });
        this->setContentSize(size);
    }

    CCMenuItemSpriteExtra* m_offButton;
    CCMenuItemSpriteExtra* m_onButton;
    bool m_toggled;
    bool m_notClickable;
}

[[link(android)]]
class CCMoveCNode : cocos2d::CCObject {
    // virtual ~CCMoveCNode();
    CCMoveCNode() = win inline {
        m_unk038 = 0.0;
        m_unk040 = 0.0;
        m_unk048 = 0.0;
        m_unk058 = 0.0;
        m_unk060 = 0.0;
        m_unk068 = 0.0;
        m_unk070 = false;
        m_unk071 = false;
        m_unk074 = 0;
        m_unk078 = false;
        m_unk07c = 0;
        m_unk080 = 1.0;
        m_unk088 = 1.0;
        m_unk090 = 0.0;
        m_unk098 = 0.0;
        m_unk0a0 = 0.0;
        m_unk0a8 = 0.0;
        m_unk0b0 = 0.0;
        m_unk0b8 = 0;
        m_unk0c0 = 0.0;
        m_groupObject = nullptr;
        m_unk0d0 = false;
        m_unk0d1 = false;
    }

    static CCMoveCNode* create() = win inline {
        auto ret = new CCMoveCNode();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init() { return true; }
    void reset();

    double m_unk038;
    double m_unk040;
    double m_unk048;
    void* m_unk050;
    double m_unk058;
    double m_unk060;
    double m_unk068;
    bool m_unk070;
    bool m_unk071;
    int m_unk074;
    bool m_unk078;
    int m_unk07c;
    double m_unk080;
    double m_unk088;
    double m_unk090;
    double m_unk098;
    double m_unk0a0;
    double m_unk0a8;
    double m_unk0b0;
    int m_unk0b8;
    double m_unk0c0;
    GroupCommandObject2* m_groupObject;
    bool m_unk0d0;
    bool m_unk0d1;
    gd::vector<GroupCommandObject2*> m_groupObjects;
}

[[link(android)]]
class CCNodeContainer : cocos2d::CCNode {
    // virtual ~CCNodeContainer();

    static CCNodeContainer* create() = win 0x242710, m1 0xe4920, imac 0x102b20, ios 0x1de584;

    virtual bool init() = win 0x77db0, imac 0x154510, m1 0x128138, ios 0x20b410;
    virtual void visit() = win 0x2427e0, imac 0x154520, m1 0x12813c, ios 0x20b414;
}

[[link(android)]]
class CCPartAnimSprite : cocos2d::CCSprite {
    CCPartAnimSprite() = ios 0x83808 {
        m_spritePartIDs = nullptr;
        m_spriteFrame = nullptr;
        m_hasChanged = false;
        m_spriteParts = nullptr;
    }
    ~CCPartAnimSprite() = win inline, m1 0x2f50a0, imac 0x362190, ios 0x836e0 {
        CC_SAFE_RELEASE(m_spritePartIDs);
        CC_SAFE_RELEASE(m_spriteFrame);
        CC_SAFE_RELEASE(m_spriteParts);
    }

    static CCPartAnimSprite* createWithAnimDesc(char const* definition, cocos2d::CCTexture2D* texture, bool useTexture) = win inline, m1 0x2f346c, imac 0x360430, ios 0x8255c {
        auto ret = new CCPartAnimSprite();
        if (ret->initWithAnimDesc(definition, texture, useTexture)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void setScaleX(float) = win 0x466b0, imac 0x361ca0, m1 0x2f4b18, ios 0x833f0;
    virtual void setScaleY(float) = win 0x466d0, imac 0x361cc0, m1 0x2f4b40, ios 0x83418;
    virtual void setScale(float) = win 0x46690, imac 0x361c80, m1 0x2f4af0, ios 0x833c8;
    virtual void setOpacity(unsigned char) = win 0x468a0, imac 0x361f30, m1 0x2f4e04, ios 0x83604;
    virtual void setBlendFunc(cocos2d::_ccBlendFunc) = win 0x466f0, imac 0x361ce0, m1 0x2f4b68, ios 0x83440;
    virtual void setDisplayFrame(cocos2d::CCSpriteFrame*) = win 0x460c0, imac 0x361840, m1 0x2f46bc, ios 0x83094;
    virtual bool isFrameDisplayed(cocos2d::CCSpriteFrame*) = win 0x46330, imac 0x3619b0, m1 0x2f4814, ios 0x831c0;
    virtual cocos2d::CCSpriteFrame* displayFrame() = win 0x46350, m1 0x2f482c, imac 0x3619d0, ios 0x831d8;

    void changeTextureOfID(char const* key, char const* frame) = win inline, m1 0x02f431c, imac 0x3614b0, ios inline {
        if (auto spritePart = static_cast<CCSpritePart*>(m_spritePartIDs->objectForKey(key))) {
            if (frame) spritePart->updateDisplayFrame(frame);
            else spritePart->resetTextureRect();
        }
    }
    int countParts() = win inline, m1 0x2f4fb8, imac 0x3620c0, ios inline {
        return this->getChildren()->count();
    }
    void dirtify() = win inline, m1 0x2f4fd4, imac 0x3620e0, ios inline {
        CCObject* obj;
        CCARRAY_FOREACH(this->getChildren(), obj) {
            static_cast<cocos2d::CCSprite*>(obj)->setDirty(true);
        }
    }
    CCSpritePart* getSpriteForKey(char const* key) = win inline, m1 0x2f45c8, imac 0x361750, ios 0x83028 {
        return static_cast<CCSpritePart*>(m_spritePartIDs->objectForKey(key));
    }
    bool initWithAnimDesc(char const* definition, cocos2d::CCTexture2D* texture, bool useTexture) = win 0x45910, m1 0x2f3558, imac 0x360510, ios 0x825e8;
    void setColor(cocos2d::ccColor3B color) = win 0x467c0, m1 0x2f4d18, imac 0x361e60, ios 0x8351c;
    void setFlipX(bool flipX) = win inline, m1 0x2f4a48, imac 0x361bf0, ios 0x83370 {
        auto currentFlipX = this->isFlipX();
        if (currentFlipX != flipX) this->setScaleX(currentFlipX ? 0.f : 1.f);
        CCSprite::setFlipX(flipX);
        m_hasChanged = true;
    }
    void setFlipY(bool flipY) = win inline, m1 0x2f4aa0, imac 0x361c40, ios inline {
        this->setScaleY(this->isFlipY() ? 0.f : 1.f);
        CCSprite::setFlipY(flipY);
        m_hasChanged = true;
    }
    void transformSprite(SpriteDescription* description) = win inline, m1 0x2f3ee0, imac 0x361050, ios 0x82c44 {
        auto spritePart = static_cast<CCSpritePart*>(m_spriteParts->objectAtIndex(description->m_tag));
        spritePart->stopAllActions();
        spritePart->setPosition(description->m_position);
        auto scaleX = description->m_scale.x;
        if (description->m_flipped.x) scaleX = -scaleX;
        auto scaleY = description->m_scale.y;
        if (description->m_flipped.y) scaleY = -scaleY;
        spritePart->setScaleX(scaleX);
        spritePart->setScaleY(scaleY);
        spritePart->setRotation(description->m_rotation);
        if (description->m_usesCustomTag) {
            spritePart->setDisplayFrame(description->m_texture);
            spritePart->frameChanged(description->m_texture->getFrameName());
        }
    }
    void tweenSpriteTo(SpriteDescription* description, float duration) = win inline, m1 0x2f4178, imac 0x361300, ios 0x82e84 {
        auto spritePart = static_cast<CCSpritePart*>(m_spriteParts->objectAtIndex(description->m_tag));
        spritePart->stopAllActions();
        auto scaleX = description->m_scale.x;
        if (description->m_flipped.x) scaleX = -scaleX;
        auto scaleY = description->m_scale.y;
        if (description->m_flipped.y) scaleY = -scaleY;
        spritePart->runAction(cocos2d::CCMoveTo::create(duration, description->m_position));
        spritePart->runAction(cocos2d::CCScaleTo::create(duration, scaleX, scaleY));
        spritePart->runAction(cocos2d::CCRotateTo::create(duration, description->m_rotation));
        if (description->m_usesCustomTag) {
            spritePart->setDisplayFrame(description->m_texture);
            spritePart->frameChanged(description->m_texture->getFrameName());
        }
        auto zValue = description->m_zValue;
        if (spritePart->getZOrder() != zValue) {
            this->reorderChild(spritePart, zValue);
        }
    }
    void tweenToFrame(cocos2d::CCSpriteFrame* frame, float duration) = win 0x46360, m1 0x2f4834, imac 0x3619e0, ios 0x831e0;

    cocos2d::CCDictionary* m_spritePartIDs;
    cocos2d::CCSpriteFrame* m_spriteFrame;
    bool m_hasChanged;
    cocos2d::CCSize m_unkSize;
    cocos2d::CCArray* m_spriteParts;
}

[[link(android), depends(CCContentLayer)]]
class CCScrollLayerExt : cocos2d::CCLayer {
    // virtual ~CCScrollLayerExt() = win 0x46210, ios 0x311ab8;
    CCScrollLayerExt(cocos2d::CCRect) = win 0x46a50, imac 0x41b380, m1 0x396eb8, ios 0x300a10;

    virtual void visit() = win 0x47ad0, imac 0x41c710, m1 0x3980f4, ios 0x3019ec;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x47580, imac 0x41c0b0, m1 0x397afc, ios 0x301428;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x47950, imac 0x41c4d0, m1 0x397eb8, ios 0x3017c4;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x476a0, imac 0x41c1d0, m1 0x397c18, ios 0x301534;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x47920, imac 0x41c470, m1 0x397e54, ios 0x301760;
    virtual void registerWithTouchDispatcher() = win 0x47530, imac 0x41c070, m1 0x397ac4, ios 0x3013f0;
    virtual void preVisitWithClippingRect(cocos2d::CCRect) = win 0x47c00, imac 0x41c810, m1 0x3981e8, ios 0x301ae0;
    virtual void postVisit() = win 0x47ca0, m1 0x39827c, imac 0x41c890, ios 0x301b74;

    TodoReturn constraintContent();
    void doConstraintContent(bool) = win 0x47110;
    inline float getMaxY() {
        return m_scrollLimitBottom;
    }
    inline float getMinY() {
        return this->getContentSize().height - m_contentLayer->getContentSize().height - m_scrollLimitTop;
    }
    void moveToTop() = ios 0x301054, win 0x47000, imac 0x41baa0, m1 0x3975d4;
    void moveToTopWithOffset(float) = ios 0x300fac, win 0x46f60, imac 0x41ba00, m1 0x39752c;
    void scrollingEnd() = win 0x472c0;
    void scrollLayer(float offset) = ios 0x301924, win inline, imac 0x41c650, m1 0x39802c {
        float y = m_contentLayer->getPositionY() + offset;
        float minY = getMinY();
        float maxY = getMaxY();
        m_contentLayer->setPositionY(y < minY ? minY : y > maxY ? maxY : y);
    }
    void setContentLayerSize(cocos2d::CCSize);
    void setContentOffset(cocos2d::CCPoint, bool);
    TodoReturn updateIndicators(float);

    cocos2d::CCTouch* m_touch;
    cocos2d::CCPoint m_touchPosition;
    cocos2d::CCPoint m_touchStartPosition;
    cocos2d::cc_timeval m_timeValue;
    bool m_touchDown;
    bool m_notAtEndOfScroll;
    cocos2d::CCLayerColor* m_verticalScrollbar;
    cocos2d::CCLayerColor* m_horizontalScrollbar;
    CCScrollLayerExtDelegate* m_delegate;
    CCContentLayer* m_contentLayer;
    bool m_cutContent;
    bool m_vScrollbarVisible;
    bool m_hScrollbarVisible;
    bool m_disableHorizontal;
    bool m_disableVertical;
    bool m_disableMovement;
    float m_scrollLimitTop;
    float m_scrollLimitBottom;
    float m_peekLimitTop;
    float m_peekLimitBottom;
}

[[link(android)]]
class CCScrollLayerExtDelegate {
    virtual void scrllViewWillBeginDecelerating(CCScrollLayerExt*) {}
    virtual void scrollViewDidEndDecelerating(CCScrollLayerExt*) {}
    virtual void scrollViewTouchMoving(CCScrollLayerExt*) {}
    virtual void scrollViewDidEndMoving(CCScrollLayerExt*) {}
    virtual void scrollViewTouchBegin(CCScrollLayerExt*) {}
    virtual void scrollViewTouchEnd(CCScrollLayerExt*) {}
}

[[link(android)]]
class CCSpriteCOpacity : cocos2d::CCSprite {
    // virtual ~CCSpriteCOpacity();

    virtual void setOpacity(unsigned char) = win 0x483c0, m1 0x3de600, imac 0x46f410;

    static CCSpriteCOpacity* createWithSpriteFrame(cocos2d::CCSpriteFrame*);
    static CCSpriteCOpacity* createWithSpriteFrameName(char const*);
}

[[link(android)]]
class CCSpriteGrayscale : CCSpriteWithHue {
    // virtual ~CCSpriteGrayscale();
    CCSpriteGrayscale() {}

    static CCSpriteGrayscale* create(gd::string const& file, cocos2d::CCRect const& rect) = win inline, m1 0x50cabc, imac 0x5d95c0, ios inline {
        auto ret = new CCSpriteGrayscale();
        if (ret->initWithFile(file.c_str(), rect)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static CCSpriteGrayscale* create(gd::string const& file) = win inline, m1 0x50c9f0, imac 0x5d9500, ios inline {
        auto ret = new CCSpriteGrayscale();
        if (ret->initWithFile(file.c_str())) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static CCSpriteGrayscale* createWithSpriteFrame(cocos2d::CCSpriteFrame* frame) = ios 0x1a7110, win inline, m1 0x50cda8, imac 0x5d9860 {
        auto ret = new CCSpriteGrayscale();
        if (ret->initWithSpriteFrame(frame)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static CCSpriteGrayscale* createWithSpriteFrameName(gd::string const& frameName) = win 0x49020, m1 0x50cea4, imac 0x5d9940, ios 0x1a71fc;
    static CCSpriteGrayscale* createWithTexture(cocos2d::CCTexture2D* texture, cocos2d::CCRect const& rect, bool rotated) = win inline, m1 0x50ccb4, imac 0x5d9790 {
        auto ret = new CCSpriteGrayscale();
        if (ret->initWithTexture(texture, rect, rotated)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static CCSpriteGrayscale* createWithTexture(cocos2d::CCTexture2D* texture) = win inline, m1 0x50cb9c, imac 0x5d9690, ios inline {
        auto ret = new CCSpriteGrayscale();
        if (ret->initWithTexture(texture)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual gd::string getShaderName() = win 0x48fc0, imac 0x5d94e0, m1 0x50c9cc, ios 0x1a7100;
    virtual const char* shaderBody() = win 0x48e00, m1 0x50c890, imac 0x5d92d0, ios 0x1a702c;
}

[[link(android)]]
class CCSpritePart : CCSpritePlus {
    // virtual ~CCSpritePart();
    CCSpritePart() = win 0x45820 {
        m_isBeingUsed = false;
        m_delegate = nullptr;
    }

    static CCSpritePart* create(cocos2d::CCTexture2D* texture) = win inline, m1 0x2f3e2c, imac 0x360fa0, ios 0x82b9c {
        auto ret = new CCSpritePart();
        if (ret->initWithTexture(texture)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void setVisible(bool) = win 0x46a30, imac 0x362320, m1 0x2f51d8, ios 0x8375c;

    static CCSpritePart* createWithSpriteFrameName(char const* frame) = win inline, m1 0x2f3cbc, imac 0x360e20, ios 0x82aa4 {
        auto ret = new CCSpritePart();
        if (ret->initWithSpriteFrameName(frame)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    void frameChanged(gd::string frame) = win 0x46980, m1 0x2f4060, imac 0x3611d0, ios 0x82dc4;
    bool getBeingUsed() = win inline, m1 0x2f51d0, imac 0x362310, ios inline {
        return m_isBeingUsed;
    }
    void hideInactive() = win inline, m1 0x2f47f8, imac 0x361990, ios inline {
        if (!m_isBeingUsed) this->setVisible(false);
    }
    void markAsNotBeingUsed() = win inline, m1 0x2f47f0, imac 0x361980, ios inline {
        m_isBeingUsed = false;
    }
    void resetTextureRect() = win inline, m1 0x2f44f0, imac 0x361680, ios inline {
        this->setTextureRect({ 0.f, 0.f, 0.f, 0.f });
    }
    void setBeingUsed(bool beingUsed) = win inline, m1 0x2f4170, imac 0x3612f0, ios inline {
        m_isBeingUsed = beingUsed;
    }
    void updateDisplayFrame(gd::string frame) = win inline, m1 0x2f4504, imac 0x3616a0, ios inline {
        this->frameChanged(frame);
        this->setDisplayFrame(cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(frame.c_str()));
    }

    bool m_isBeingUsed;
    gd::string m_spriteFrameName;
    SpritePartDelegate* m_delegate;
}

[[link(android)]]
class CCSpritePlus : cocos2d::CCSprite {
    // virtual ~CCSpritePlus();
    CCSpritePlus() = win 0x456a0 {
        m_followers = nullptr;
        m_followingSprite = nullptr;
        m_hasFollower = false;
        m_propagateScaleChanges = false;
        m_propagateFlipChanges = false;
    }
    ~CCSpritePlus() = win 0x47cc0, m1 0x3ddc34, imac 0x46e9b0, ios 0x1b9b34;

    /// Creates a sprite by a given sprite frame
    /// @param frame the frame to give to the specific sprite
    /// @return CCSpritePlus object and returns null if initialization fails
    static CCSpritePlus* createWithSpriteFrame(cocos2d::CCSpriteFrame* frame) = win inline, m1 0x3ddd1c, imac 0x46ead0, ios 0x1b9b98 {
        auto ret = new CCSpritePlus();
        if (ret->initWithSpriteFrame(frame)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    /// Creates a sprite by a given sprite's frame name
    /// @param frame the frame or filename to give to the specific sprite
    /// @return CCSpritePlus object and returns null if initialization fails
    static CCSpritePlus* createWithSpriteFrameName(char const* frame) = win 0x47d10, m1 0x3dddcc, imac 0x46eb70, ios 0x1b9c3c;

    /// Sets X's scale on itself and it's followers
    /// @param fScaleX the scale of X to set
    virtual void setScaleX(float fScaleX) = win 0x481d0, m1 0x3de1dc, imac 0x46f000, ios 0x1b9fb4;

    /// Sets Y's scale on itself and it's followers
    /// @param fScaleY the scale of Y to set
    virtual void setScaleY(float fScaleY) = win 0x48250, m1 0x3de258, imac 0x46f080, ios 0x1ba030;

    /// Sets the Scale of itself and it's followers
    /// @param fScale the scale value to set
    virtual void setScale(float fScale) = win 0x482e0, m1 0x3de2d4, imac 0x46f100, ios 0x1ba0ac;

    /// Sets the position where the sprite will be at and it's followers
    /// @param pos the position to place to the sprite and it's followers
    virtual void setPosition(cocos2d::CCPoint const& pos) = win 0x47dd0, m1 0x3ddeac, imac 0x46ec60, ios 0x1b9c84;

    /// Sets the sprite's given rotation and it's followers
    /// @param fRotation the rotation value to set
    virtual void setRotation(float fRotation) = win 0x47e60, m1 0x3ddf20, imac 0x46ece0, ios 0x1b9cf8;

    /// Sets the sprite's given rotation of X and it's followers
    /// @param fRotationX the rotation of X to set.
    virtual void setRotationX(float fRotationX) = win 0x47ef0, m1 0x3ddf94, imac 0x46ed60, ios 0x1b9d6c;

    /// Sets the sprite's given rotation of Y and it's followers
    /// @param fRotationY the roation of Y to set
    virtual void setRotationY(float) = win 0x47f80, m1 0x3de008, imac 0x46ede0, ios 0x1b9de0;

    /// Initalizes the sprite using a texture
    /// @param texture the texture to initalize the sprite with
    /// @return true if initalization succeeded.
    virtual bool initWithTexture(cocos2d::CCTexture2D* texture) = win 0x47db0, imac 0x46ec40, m1 0x3dde98, ios 0x1b9c70;

    /// Initalizes the sprite with a frame name
    /// @param frame the frame to initalize the sprite with
    /// @return true if initalization succeeded
    virtual bool initWithSpriteFrameName(char const*) = win 0x47da0, imac 0x46ec20, m1 0x3dde8c, ios 0x1b9c64;

    /// Sets flipX to itself and it's followers
    /// @param flipX the direction that the sprite should be flipped to
    virtual void setFlipX(bool flipX) = win 0x48010, m1 0x3de07c, imac 0x46ee60, ios 0x1b9e54;

    /// Sets flipY to itself and it's followers
    /// @param flipY the direction that the sprite should be flipped to
    virtual void setFlipY(bool flipY) = win 0x480f0, m1 0x3de12c, imac 0x46ef30, ios 0x1b9f04;

    /// Adds a follower to the sprite
    /// @param follower Something that will follow this sprite
    void addFollower(cocos2d::CCNode* follower) = win inline, m1 0x3de350, imac 0x46f180, ios 0x1ba128 {
        m_hasFollower = true;
        if (!m_followers) {
            m_followers = cocos2d::CCArray::create();
            m_followers->retain();
        }
        m_followers->addObject(follower);
    }

    /// Attaches a sprite to the sprite. and other way around
    /// you can think of this as attaching 2 lego blocks together and letting
    /// it drag along.
    /// @param sprite the sprite to attach to the main sprite and vice versa
    void followSprite(CCSpritePlus* sprite) = win inline, m1 0x3de3ec, imac 0x46f220, ios 0x1ba1a8 {
        m_followingSprite = sprite;
        sprite->addFollower(this);
    }

    /// Obtains the first following sprite if it has a follower on hand
    /// @return nullptr if there is no follower avalible
    CCSpritePlus* getFollower() = win inline, m1 0x3de494, imac 0x46f2c0, ios 0x1ba1d0 {
        return m_hasFollower ? static_cast<CCSpritePlus*>(m_followers->objectAtIndex(0)) : nullptr;
    }

    /// Removes a specific following sprite from this sprite.
    /// @param sprite follower sprite that will be removed.
    void removeFollower(cocos2d::CCNode* sprite) = win 0x48370, m1 0x3de3a4, imac 0x46f1d0, ios 0x1ba16c;

    /// Stops this child sprite from following it's given parent
    void stopFollow() = win inline, m1 0x3de444, imac 0x46f270, ios 0x1ba1bc {
        if (m_followingSprite) m_followingSprite->removeFollower(this);
    }

    cocos2d::CCArray* m_followers;
    CCSpritePlus* m_followingSprite;
    bool m_hasFollower;
    bool m_propagateScaleChanges;
    bool m_propagateFlipChanges;
}

[[link(android)]]
class CCSpriteWithHue : cocos2d::CCSprite {
    // virtual ~CCSpriteWithHue();
    CCSpriteWithHue() {}

    static CCSpriteWithHue* create(gd::string const& file, cocos2d::CCRect const& rect) = win inline {
        auto ret = new CCSpriteWithHue();
        if (ret->initWithFile(file.c_str(), rect)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static CCSpriteWithHue* create(gd::string const& file) = win inline, m1 0x50b960, imac 0x5d8330 {
        auto ret = new CCSpriteWithHue();
        if (ret->initWithFile(file.c_str())) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static CCSpriteWithHue* createWithSpriteFrame(cocos2d::CCSpriteFrame* frame) = win inline, imac 0x5d8690, m1 0x50bd18 {
        auto ret = new CCSpriteWithHue();
        if (ret->initWithSpriteFrame(frame)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static CCSpriteWithHue* createWithSpriteFrameName(gd::string const& frameName) = win inline, imac 0x5d8770, m1 0x50be14 {
        return CCSpriteWithHue::createWithSpriteFrame(cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(frameName.c_str()));
    }
    static CCSpriteWithHue* createWithTexture(cocos2d::CCTexture2D* texture, cocos2d::CCRect const& rect, bool rotated) = win inline {
        auto ret = new CCSpriteWithHue();
        if (ret->initWithTexture(texture, rect, rotated)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static CCSpriteWithHue* createWithTexture(cocos2d::CCTexture2D* texture) = win inline {
        auto ret = new CCSpriteWithHue();
        if (ret->initWithTexture(texture)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void draw() = win 0x48c20, m1 0x50c708, imac 0x5d9120, ios 0x1a6eb0;
    virtual bool initWithTexture(cocos2d::CCTexture2D*) = win 0x485f0, m1 0x50c0bc, imac 0x5d89f0, ios 0x1a6ac4;
    virtual bool initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&) = win 0x48650, m1 0x50c138, imac 0x5d8a60, ios 0x1a6b40;
    virtual bool initWithTexture(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool) = win 0x48590, m1 0x50be48, imac 0x5d87b0, ios 0x1a68c8;
    virtual bool initWithSpriteFrame(cocos2d::CCSpriteFrame*) = win 0x48660, m1 0x50c148, imac 0x5d8a80, ios 0x1a6b50;
    virtual gd::string getShaderName() = win 0x48400, imac 0x5d8300, m1 0x50b934, ios 0x1a6798;
    virtual const char* shaderBody() = win 0x48900, m1 0x50c28c, imac 0x5d8bc0, ios 0x1a6c5c;
    virtual void updateColor() = win 0x48910, m1 0x50c2a4, imac 0x5d8be0, ios 0x1a6c68;

    float getAlpha() = win inline, imac 0x5d9050, m1 0x50c668 {
        return _displayedOpacity / 255.f;
    }
    float getHue() = win inline {
        return m_hue;
    }
    void getUniformLocations() = win inline, imac 0x5d8b50, m1 0x50c208 {
        m_uHueLoc = glGetUniformLocation(m_pShaderProgram->getProgram(), "u_hue");
        m_uAlphaLoc = glGetUniformLocation(m_pShaderProgram->getProgram(), "u_alpha");
        m_uLumLoc = glGetUniformLocation(m_pShaderProgram->getProgram(), "u_lum");
    }
    void initShader() = win 0x486d0, m1 0x50bea0, imac 0x5d8810;
    void setCustomLuminance(float r, float g, float b) = win inline, m1 0x50c6f8, imac 0x5d9100 {
        m_luminance[0] = r;
        m_luminance[1] = g;
        m_luminance[2] = b;
    }
    void setEvenLuminance(float luminance) = ios 0x1a6e94, win inline, imac 0x5d90d0, m1 0x50c6d8 {
        m_luminance[0] = luminance * 0.33f;
        m_luminance[1] = luminance * 0.33f;
        m_luminance[2] = luminance * 0.33f;
    }
    void setHue(float hue) = win inline {
        m_hue = hue;
        this->updateColorMatrix();
    }
    void setHueDegrees(float degrees) = win inline, imac 0x5d9080, m1 0x50c688 {
        auto deg = degrees;
        while (deg < 0.f) deg += 360.f;
        this->setHue(deg / 360.f * 6.28318548f);
    }
    void setLuminance(float luminance) = win inline, imac 0x5d8b20, m1 0x50c1e0 {
        m_luminance[0] = luminance * 0.21f;
        m_luminance[1] = luminance * 0.72f;
        m_luminance[2] = luminance * 0.07f;
    }
    void setupDefaultSettings() = win inline, imac 0x5d87f0, m1 0x50be8c {
        m_hue = 0.f;
        this->setLuminance(1.f);
    }
    void updateColorMatrix() = win 0x48930, m1 0x50c2c8, imac 0x5d8c00;
    void updateHue(float) = win inline, imac 0x5d8ad0, m1 0x50c1ac {
        this->setHue(m_hue + 0.05235988f);
    }

    float m_hue;
    std::array<float, 3> m_luminance;
    std::array<std::array<float, 3>, 3> m_colorMatrix;
    int m_uHueLoc;
    int m_uAlphaLoc;
    int m_uLumLoc;
}

[[link(android)]]
class CCTextInputNode : cocos2d::CCLayer, cocos2d::CCIMEDelegate, cocos2d::CCTextFieldDelegate {
    CCTextInputNode() {
        m_numberInput = false;
        m_unknown1 = 0;
        m_selected = false;
        m_unknown2 = false;
        m_fontValue1 = -0.5f;
        m_fontValue2 = 8.0f;
        m_isChatFont = false;
        m_maxLabelWidth = 0.0f;
        m_maxLabelScale = 0.0f;
        m_placeholderScale = 0.0f;
        m_cursor = nullptr;
        m_textField = nullptr;
        m_delegate = nullptr;
        m_maxLabelLength = 0;
        m_textLabel = nullptr;
        m_filterSwearWords = false;
        m_usePasswordChar = false;
        m_forceOffset = false;
        m_textArea = nullptr;
        m_valueType = (InputValueType)0;
        m_kerningAmount = 0;
    }
    ~CCTextInputNode() = win inline, m1 0x904f8, imac 0x9da20, ios 0x16fd40 {
        if (m_selected) CCTextInputNode::onClickTrackNode(false);
    }

    static CCTextInputNode* create(float, float, char const*, char const*, int, char const*) = ios 0x16fe38, win 0x4f0f0, imac 0x9dbd0, m1 0x90610;

    static CCTextInputNode* create(float width, float height, char const* placeholder, char const* fontPath) {
        return CCTextInputNode::create(width, height, placeholder, 0x18, fontPath);
    }
    static CCTextInputNode* create(float width, float height, char const* placeholder, int fontSize, char const* fontPath) {
        return CCTextInputNode::create(width, height, placeholder, "Thonburi", fontSize, fontPath);
    }

    virtual void visit() = win 0x4f730, imac 0x9e670, m1 0x90fec, ios 0x1704bc;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x512c0, imac 0xa0a80, m1 0x92fac, ios 0x171dbc;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x931a8, imac 0xa0ca0, ios 0x171f64 {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x93198, imac 0xa0c60, ios 0x171f54 {}
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x931a0, imac 0xa0c80, ios 0x171f5c {}
    virtual void registerWithTouchDispatcher() = win 0x514d0, m1 0x931b0, imac 0xa0cc0, ios 0x171f6c;
    virtual void textChanged() = win 0x50410, imac 0x9f220, m1 0x91a6c, ios 0x170d68;
    virtual void onClickTrackNode(bool) = win 0x503f0, imac 0x9f200, m1 0x91a4c, ios 0x170d48;
    virtual void keyboardWillShow(cocos2d::CCIMEKeyboardNotificationInfo&) = win 0x50210, imac 0x9efa0, m1 0x91808, ios 0x170b64;
    virtual void keyboardWillHide(cocos2d::CCIMEKeyboardNotificationInfo&) = win 0x50370, imac 0x9f0f0, m1 0x91940, ios 0x170cb8;
    virtual bool onTextFieldInsertText(cocos2d::CCTextFieldTTF* pSender, char const* text, int nLen, cocos2d::enumKeyCodes keyCodes) = win 0x504a0, imac 0x9f340, m1 0x91b84, ios 0x170e00;
    virtual bool onTextFieldAttachWithIME(cocos2d::CCTextFieldTTF* tField) = win 0x50880, imac 0x9fa00, m1 0x92124, ios 0x1711fc;
    virtual bool onTextFieldDetachWithIME(cocos2d::CCTextFieldTTF* tField) = win 0x50bb0, imac 0x9fd40, m1 0x92420, ios 0x171468;

    void addTextArea(TextArea*) = ios 0x170150, win 0x4f540, imac 0x9e100, m1 0x90ac8;
    void forceOffset();
    cocos2d::CCLabelBMFont* getTextLabel() {
        return m_textLabel;
    }
    gd::string getString() = win inline, imac 0x9e790, m1 0x91118, ios 0x1705d4 {
        return m_textField->getString();
    }
    bool init(float, float, char const*, char const*, int, char const*) = win 0x4f300, imac 0x9dd90, m1 0x90770, ios 0x16feec;
    void refreshLabel() = ios 0x170608, win 0x4fb40, imac 0x9e850, m1 0x911d4;
    void setAllowedChars(gd::string filter) = win inline, imac 0x9e650, m1 0x90fe4, ios 0x1704b4 {
        m_allowedChars = filter;
    }

    void setDelegate(TextInputDelegate* delegate) {
        m_delegate = delegate;
    }
    void setLabelNormalColor(cocos2d::ccColor3B color) = win inline, m1 0x91408, imac 0x9eb20, ios inline {
        m_textColor = color;
        this->refreshLabel();
    }
    void setLabelPlaceholderColor(cocos2d::ccColor3B color) = ios 0x1707b0, win inline, imac 0x9eb00, m1 0x913f8 {
        m_placeholderColor = color;
        this->refreshLabel();
    }
    void setLabelPlaceholderScale(float v) = ios 0x1707a8, win inline, imac 0x9eae0, m1 0x913f0 {
        m_placeholderScale = v;
        this->refreshLabel();
    }
    void setMaxLabelLength(int v) {
        m_maxLabelLength = v;
        this->refreshLabel();
    }
    void setMaxLabelScale(float v) = ios 0x170798, win inline, imac 0x9eaa0, m1 0x913e0 {
        m_maxLabelScale = v;
        this->refreshLabel();
    }
    void setMaxLabelWidth(float v) = ios 0x1707a0, win inline, imac 0x9eac0, m1 0x913e8 {
        m_maxLabelWidth = v;
        this->refreshLabel();
    }
    void setString(gd::string) = win 0x4f7a0, imac 0x9e6d0, m1 0x91048, ios 0x170518;
    void updateBlinkLabel() = win inline, m1 0x913d4, imac 0x9ea80 {
        this->updateBlinkLabelToChar(this->m_textField->m_uCursorPos);
    }
    void updateBlinkLabelToChar(int) = ios 0x1707c0, win 0x4fe20, imac 0x9eb40, m1 0x9141c;
    void updateCursorPosition(cocos2d::CCPoint, cocos2d::CCRect) = ios 0x17197c, win 0x50d60, imac 0xa0500, m1 0x92afc;
    void updateDefaultFontValues(gd::string) = win 0x4f630, m1 0x90a20, imac 0x9e060;
    void updateLabel(gd::string) = win 0x4f840, imac 0x9e320, m1 0x90d00, ios 0x170284;

    bool m_numberInput;
    gd::string m_caption;
    int m_unknown1;
    bool m_selected;
    bool m_unknown2;
    float m_fontValue1;
    float m_fontValue2;
    bool m_isChatFont;
    gd::string m_allowedChars;
    float m_maxLabelWidth;
    float m_maxLabelScale;
    float m_placeholderScale;
    cocos2d::ccColor3B m_placeholderColor;
    cocos2d::ccColor3B m_textColor;
    cocos2d::CCLabelBMFont* m_cursor;
    cocos2d::CCTextFieldTTF* m_textField;
    TextInputDelegate* m_delegate;
    int m_maxLabelLength;
    cocos2d::CCLabelBMFont* m_textLabel;
    bool m_filterSwearWords;
    bool m_usePasswordChar;
    bool m_forceOffset;
    TextArea* m_textArea;
    InputValueType m_valueType;
    int m_decimalPlaces;
    int m_kerningAmount;
}

[[link(android)]]
class CCURLObject : cocos2d::CCObject {
    // virtual ~CCURLObject();

    static CCURLObject* create(gd::string name, gd::string url) = win 0x1782a0;

    bool init(gd::string name, gd::string url);

    gd::string m_name;
    gd::string m_url;
}

[[link(android), depends(ChallengesPage), depends(GJChallengeItem)]]
class ChallengeNode : cocos2d::CCNode {
    ChallengeNode() = ios 0x37dc8 {
        m_challengeItem = nullptr;
        m_countdownLabel = nullptr;
        m_unloaded = false;
    }
    ~ChallengeNode() = win inline, m1 0x31ac4c, imac 0x38b790, ios 0x37040 {
        CC_SAFE_RELEASE(m_challengeItem);
    }

    static ChallengeNode* create(GJChallengeItem* challengeItem, ChallengesPage* challengesPage, bool isNew) = ios 0x36c94, win inline, imac 0x38b290, m1 0x31a788 {
        auto ret = new ChallengeNode();
        if (ret->init(challengeItem, challengesPage, isNew)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(GJChallengeItem* challengeItem, ChallengesPage* challengesPage, bool isNew) = ios 0x37094, win 0x86ce0, imac 0x38b860, m1 0x31ad04;
    void onClaimReward(cocos2d::CCObject* sender) = imac 0x38c470, m1 0x31b9cc, win 0x87d30, ios 0x37cf4;
    void updateTimeLabel(gd::string);

    ChallengesPage* m_challengesPage;
    GJChallengeItem* m_challengeItem;
    cocos2d::CCPoint m_unkPoint;
    cocos2d::CCLabelBMFont* m_countdownLabel;
    bool m_unloaded;
}

[[link(android)]]
class ChallengesPage : FLAlertLayer, FLAlertLayerProtocol, GJChallengeDelegate, CurrencyRewardDelegate {
    ChallengesPage() {
        m_dots = nullptr;
        m_countdownLabel = nullptr;
        m_circle = nullptr;
        m_triedToLoad = false;
        m_unkBool = false;
        m_currencyRewardLayer = nullptr;
        m_challengeNodes = nullptr;
    }
    ~ChallengesPage() = win inline, m1 0x3192fc, imac 0x389c00, ios 0x35c28 {
        auto glm = GameLevelManager::sharedState();
        if (glm->m_GJChallengeDelegate == this) glm->m_GJChallengeDelegate = nullptr;
        if (m_currencyRewardLayer) m_currencyRewardLayer->m_delegate = nullptr;
        CC_SAFE_RELEASE(m_challengeNodes);
        CC_SAFE_RELEASE(m_dots);
    }

    static ChallengesPage* create() = ios 0x35d18, win inline, imac 0x389da0, m1 0x3193ec {
        auto ret = new ChallengesPage();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x85300, imac 0x389f10, m1 0x319508, ios 0x35df0;
    virtual void registerWithTouchDispatcher() = win 0x425d0, imac 0x38b5d0, m1 0x31aab4, ios 0x36ea8;
    virtual void keyBackClicked() = win 0x86980, m1 0x31aa18, imac 0x38b540, ios 0x36e9c;
    virtual void show() = win 0x867a0, imac 0x38b3a0, m1 0x31a88c, ios 0x36d20;

    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = m1 0x31aa10, imac 0x38b520, ios 0x36e94 {}

    virtual void challengeStatusFinished() = win 0x85db0, imac 0x38aea0, m1 0x31a3ec, ios 0x369ac;
    virtual void challengeStatusFailed() = win 0x85f40, m1 0x31a6a4, imac 0x38b1a0, ios 0x36bb0;
    virtual void currencyWillExit(CurrencyRewardLayer*) = win 0x86cc0, imac 0x38b740, m1 0x31ac1c, ios 0x37010;

    void claimItem(ChallengeNode*, GJChallengeItem*, cocos2d::CCPoint) = win 0x869d0, imac 0x38b610, m1 0x31aaec, ios 0x36ee0;
    ChallengeNode* createChallengeNode(int number, bool skipAnimation, float animLength, bool isNew) = ios 0x36770, win 0x86090, imac 0x38abe0, m1 0x31a168;
    void exitNodeAtSlot(int, float) = win 0x863c0, imac 0x38b0a0, m1 0x31a5bc, ios 0x36acc;
    void onClose(cocos2d::CCObject* sender) = win 0x86940, m1 0x319edc, imac 0x38a930, ios 0x36530;
    TodoReturn tryGetChallenges();
    void updateDots() = m1 0x31a344, imac 0x38add0;
    callback void updateTimers(float) = ios 0x3657c, win 0x864b0, m1 0x319f28, imac 0x38a970;

    cocos2d::CCArray* m_dots;
    cocos2d::CCLabelBMFont* m_countdownLabel;
    LoadingCircle* m_circle;
    bool m_triedToLoad;
    bool m_unkBool;
    CurrencyRewardLayer* m_currencyRewardLayer;
    cocos2d::CCDictionary* m_challengeNodes;
}

[[link(android), depends(ChanceObject)]]
class ChanceTriggerGameObject : EffectGameObject {
    // virtual ~ChanceTriggerGameObject();

    void editChanceObject(int, int);
    bool init(char const*);
    void remapChanceObjects(gd::unordered_map<int, int> const*) = win 0x49b580;
    void revertChanceRemap();

    // property 435
    gd::vector<ChanceObject> m_chanceObjects;
}

[[link(android)]]
class CharacterColorDelegate {
    virtual void playerColorChanged() {}
    virtual void showUnlockPopup(int, UnlockType) {}
}

[[link(android)]]
class CharacterColorPage : FLAlertLayer {
    CharacterColorPage() {
        m_colorMode = 0;
        m_playerObjects = nullptr;
        m_modeButtons = nullptr;
        m_colorButtons = nullptr;
        m_cursors = nullptr;
        m_delegate = nullptr;
        m_glowToggler = nullptr;
        m_glowLabel = nullptr;
    }
    ~CharacterColorPage() = win inline, m1 0x56ed88, imac 0x646660, ios 0x12bda4 {
        CC_SAFE_RELEASE(m_playerObjects);
        CC_SAFE_RELEASE(m_modeButtons);
        CC_SAFE_RELEASE(m_colorButtons);
        CC_SAFE_RELEASE(m_cursors);
    }

    static CharacterColorPage* create() = win inline, m1 0x56ee50, imac 0x6467b0, ios 0x12be6c {
        auto ret = new CharacterColorPage();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x87f30, imac 0x646910, m1 0x56ef58, ios 0x12bf2c;
    virtual void registerWithTouchDispatcher() = m1 0x570eb4, imac 0x6488c0, ios 0x12d844, win 0x425d0;
    virtual void keyBackClicked() = win 0x8a7a0, m1 0x570e08, imac 0x648820, ios 0x12d7e8;
    virtual void show() = win 0x867a0, m1 0x570c80, imac 0x648690, ios 0x12d674;

    int activeColorForMode(int mode) = win 0x89440, m1 0x570bac, imac 0x6485e0, ios 0x12d5b4;
    TodoReturn checkColor(int, UnlockType);
    int colorForIndex(int) = imac 0x648300, m1 0x5708e4, win 0x8a050;
    void createColorMenu() = ios 0x12cc88, win 0x88e50, m1 0x56ffac, imac 0x6479b0;
    void FLAlert_Clicked(FLAlertLayer*, bool);
    cocos2d::CCPoint offsetForIndex(int) = m1 0x570b58, imac 0x648570;
    void onClose(cocos2d::CCObject* sender) = win 0x8a760, m1 0x56fb64, imac 0x647590, ios 0x12c8b0;
    void onMode(cocos2d::CCObject* sender) = ios 0x12c9c8, win 0x89550, imac 0x647690, m1 0x56fc80;
    void onPlayerColor(cocos2d::CCObject* sender) = ios 0x12d378, win 0x89d60, m1 0x570904, imac 0x648320;
    void toggleGlow(cocos2d::CCObject*) = ios 0x12cfe8, win 0x88da0, imac 0x647d80, m1 0x570384;
    TodoReturn toggleGlowItems(bool);
    void toggleShip(cocos2d::CCObject*) = ios 0x12c904, win 0x88c80, imac 0x6475e0, m1 0x56fbb8;
    void updateColorMode(int) = win 0x897f0, m1 0x5703bc, imac 0x647dc0, ios 0x12d020;
    void updateIconColors() = ios 0x12cb4c, win 0x8a540, m1 0x56fe6c, imac 0x647850;

    int m_colorMode;
    float m_height;
    float m_width;
    cocos2d::CCArray* m_playerObjects;
    cocos2d::CCArray* m_modeButtons;
    cocos2d::CCDictionary* m_colorButtons;
    cocos2d::CCArray* m_cursors;
    CharacterColorDelegate* m_delegate;
    CCMenuItemToggler* m_glowToggler;
    cocos2d::CCLabelBMFont* m_glowLabel;
}

[[link(android)]]
class CheckpointGameObject : EffectGameObject {
    // virtual ~CheckpointGameObject();

    static CheckpointGameObject* create();

    virtual bool init() = win 0x4a1240, m1 0x180db0, imac 0x1c36c0, ios 0x388610;
    virtual void setupCustomSprites(gd::string) = win 0x4a1680, imac 0x1c3b10, m1 0x1811f0, ios 0x3889e4;
    virtual void resetObject() = win 0x4a2470, m1 0x18256c, imac 0x1c5120, ios 0x389524;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a12c0, imac 0x1c3720, m1 0x180e0c, ios 0x38866c;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a2340, imac 0x1c4fe0, m1 0x182434, ios 0x38941c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a2070, imac 0x1c44f0, m1 0x181b0c, ios 0x389178;
    virtual void triggerActivated(float) = win 0x4a12e0, imac 0x1c3740, m1 0x180e24, ios 0x388684;
    virtual void restoreObject() = win 0x4a2680, imac 0x1c5190, m1 0x1825c4, ios 0x389574;
    virtual void updateSyncedAnimation(float, int) = win 0x4a1d20, imac 0x1c40f0, m1 0x181770, ios 0x388de8;

    void resetCheckpoint() = win 0x4a24f0;
    void updateCheckpointSpriteVisibility();

    bool m_checkpointActivated;
    // property 448
    int m_respawnID;
}

[[link(android), depends(GJGameState), depends(GJShaderState), depends(FMODAudioState), depends(EffectManagerState), depends(SavedObjectStateRef), depends(SavedActiveObjectState), depends(SavedSpecialObjectState), depends(SequenceTriggerState)]]
class CheckpointObject : cocos2d::CCNode {
    CheckpointObject() = win 0x38e330, m1 0xb4190, imac 0xcaa60, ios 0x12aa1c;
    ~CheckpointObject() = win inline, m1 0xae218, imac 0xbf860, ios 0x126034 {
        CC_SAFE_RELEASE(m_physicalCheckpointObject);
        CC_SAFE_RELEASE(m_player1Checkpoint);
        CC_SAFE_RELEASE(m_player2Checkpoint);
        CC_SAFE_RELEASE(m_gradientTriggerObjectArray);
    }

    static CheckpointObject* create() = win inline, m1 0xab538, imac 0xbc3a0, ios 0x123900 {
        auto ret = new CheckpointObject();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x77db0, imac 0xbfa20, m1 0xae344, ios 0x126110;

    TodoReturn getObject();
    void setObject(GameObject*);

    GJGameState m_gameState;
    GJShaderState m_shaderState;
    FMODAudioState m_audioState;
    GameObject* m_physicalCheckpointObject;
    PlayerCheckpoint* m_player1Checkpoint;
    PlayerCheckpoint* m_player2Checkpoint;
    int m_unke78;
    int m_unke7c;
    float m_unke80;
    bool m_ground2Invisible;
    bool m_streakBlend;
    int m_uniqueID;
    int m_respawnID;
    gd::vector<SavedObjectStateRef> m_vectorSavedObjectStateRef;
    gd::vector<SavedActiveObjectState> m_vectorActiveSaveObjectState;
    gd::vector<SavedSpecialObjectState> m_vectorSpecialSaveObjectState;
    EffectManagerState m_effectManagerState;
    cocos2d::CCArray* m_gradientTriggerObjectArray;
    bool m_unk11e8;
    gd::unordered_map<int,SequenceTriggerState> m_sequenceTriggerStateUnorderedMap;
    int m_commandIndex;
}

[[link(android)]]
class CollisionBlockPopup : FLAlertLayer, TextInputDelegate {
    // virtual ~CollisionBlockPopup();

    static CollisionBlockPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x8a8d0;

    virtual void keyBackClicked() = win 0x8bb20, imac 0x2753b0, m1 0x220028, ios 0x89a70;
    virtual void show() = win 0x8ba30, m1 0x21ffdc, imac 0x275350, ios 0x89a24;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x21fe7c, imac 0x275190, ios 0x89988;
    virtual void textChanged(CCTextInputNode*) = win 0x8b7a0, imac 0x2751d0, m1 0x21fe98, ios 0x899a4;
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, imac 0x2753e0, m1 0x220034, ios 0x89a7c;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, imac 0x2754a0, m1 0x220104, ios 0x89ae8;

    CCMenuItemToggler* createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint);
    void determineStartValues();
    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x8a9f0, m1 0x21ec48, imac 0x273e80, ios 0x88cd0;
    void onClose(cocos2d::CCObject* sender) = win 0x8ba80, m1 0x21f6a4, imac 0x274950, ios 0x8967c;
    void onDynamicBlock(cocos2d::CCObject* sender) = win 0x8b550;
    void onItemIDArrow(cocos2d::CCObject* sender) = win 0x8b600, m1 0x21f87c, imac 0x274b60, ios 0x89734;
    void onNextItemID(cocos2d::CCObject* sender) = win 0x8b650;
    void updateEditorLabel() = win 0x8b890;
    void updateItemID() = win 0x8b990;
    void updateTextInputLabel() = win 0x8b910;

    EffectGameObject* m_gameObject;
    cocos2d::CCArray* m_gameObjects;
    CCTextInputNode* m_blockIDInput;
    int m_blockID;
    bool m_dynamicBlock;
    bool m_disableDelegate;
}

[[link(android)]]
class CollisionTriggerAction {
    bool m_disabled;
    int m_blockAID;
    int m_blockBID;
    int m_targetGroupID;
    int m_triggerOnExit;
    bool m_activateGroup;
    int m_triggerUniqueID;
    int m_controlID;
    gd::vector<int> m_remapKeys;
}

[[link(android)]]
class ColorAction : cocos2d::CCObject {
    // virtual ~ColorAction();

    static ColorAction* create() = win 0x251b40, m1 0x268edc, imac 0x2c5030, ios 0x10ea4;
    static ColorAction* create(cocos2d::ccColor3B, bool, int);
    static ColorAction* create(cocos2d::ccColor3B, cocos2d::ccColor3B, float, double, bool, int, float, float);
    static ColorAction* create(cocos2d::ccColor3B, cocos2d::ccColor3B, float, double, bool);

    TodoReturn getCopy();
    bool init(cocos2d::ccColor3B, cocos2d::ccColor3B, float, double, bool, int, float, float);
    bool isInUse();
    void loadFromState(CAState& state) {
        m_fromColor = state.m_fromColor;
        m_toColor = state.m_toColor;
        m_color = state.m_color;
        m_paused = state.m_paused;
        m_blending = state.m_blending;
        m_copyOpacity = state.m_copyOpacity;
        m_legacyHSV = state.m_legacyHSV;
        m_playerColor = state.m_playerColor;
        m_colorID = state.m_colorID;
        m_copyID = state.m_copyID;
        m_uniqueID = state.m_uniqueID;
        m_duration = state.m_duration;
        m_fromOpacity = state.m_fromOpacity;
        m_toOpacity = state.m_toOpacity;
        m_deltaTime = state.m_deltaTime;
        m_currentOpacity = state.m_currentOpacity;
        m_copyHSV = state.m_copyHSV;
    }
    TodoReturn resetAction();
    void saveToState(CAState& state) {
        state.m_fromColor = m_fromColor;
        state.m_toColor = m_toColor;
        state.m_color = m_color;
        state.m_paused = m_paused;
        state.m_blending = m_blending;
        state.m_copyOpacity = m_copyOpacity;
        state.m_legacyHSV = m_legacyHSV;
        state.m_playerColor = m_playerColor;
        state.m_colorID = m_colorID;
        state.m_copyID = m_copyID;
        state.m_uniqueID = m_uniqueID;
        state.m_duration = m_duration;
        state.m_fromOpacity = m_fromOpacity;
        state.m_toOpacity = m_toOpacity;
        state.m_deltaTime = m_deltaTime;
        state.m_currentOpacity = m_currentOpacity;
        state.m_copyHSV = m_copyHSV;
    }
    void setupFromMap(gd::map<gd::string, gd::string>&) = win 0x252800;
    void setupFromString(gd::string) = win 0x252720, m1 0x26b258, imac 0x2c7390, ios 0x1196c;
    void step(float) = win 0x251c30;
    void updateCustomColor(cocos2d::ccColor3B, cocos2d::ccColor3B);
    // TodoReturn writeSaveString(fmt::BasicWriter<char>&);

    bool m_stepFinished;
    bool m_paused;
    cocos2d::ccColor3B m_color;
    float m_currentOpacity;
    float m_deltaTime;
    cocos2d::ccColor3B m_fromColor;
    cocos2d::ccColor3B m_toColor;
    float m_duration;
    bool m_blending;
    int m_playerColor;
    int m_colorID;
    float m_fromOpacity;
    float m_toOpacity;
    cocos2d::ccHSVValue m_copyHSV;
    int m_copyID;
    bool m_copyColorCalculated;
    bool m_copyOpacity;
    bool m_copyColorLoop;
    int m_uniqueID;
    int m_controlID;
    bool m_legacyHSV;
    ColorActionSprite* m_colorSprite;
    InheritanceNode* m_inheritanceNode;
    float m_actionDelay;
    float m_stepInterval;
}

[[link(android)]]
class ColorAction2 {
    ColorAction2(cocos2d::ccColor3B, cocos2d::ccColor3B, float, double, bool, int, float, float);

    TodoReturn resetAction();
    TodoReturn step(float);
    TodoReturn updateCustomColor(cocos2d::ccColor3B, cocos2d::ccColor3B);

    bool m_stepFinished;
    bool m_paused;
    cocos2d::ccColor3B m_color;
    float m_currentOpacity;
    float m_deltaTime;
    cocos2d::ccColor3B m_fromColor;
    cocos2d::ccColor3B m_toColor;
    float m_duration;
    bool m_blending;
    int m_playerColor;
    int m_colorID;
    float m_fromOpacity;
    float m_toOpacity;
    cocos2d::ccHSVValue m_copyHSV;
    int m_copyID;
    bool m_copyColorCalculated;
    bool m_copyOpacity;
    bool m_copyColorLoop;
    int m_uniqueID;
    bool m_legacyHSV;
    ColorActionSprite* m_colorSprite;
    float m_actionDelay;
    float m_stepInterval;
}

[[link(android)]]
class ColorActionSprite : cocos2d::CCNode {
    // virtual ~ColorActionSprite();
    ColorActionSprite() {
        m_opacity = 255.f;
        m_colorID = 0;
        m_colorAction = nullptr;
    }

    static ColorActionSprite* create() = win inline {
        auto ret = new ColorActionSprite();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x251ad0, imac 0x2c4e30, m1 0x268d18, ios 0x10d8c;

    float m_opacity;
    cocos2d::ccColor3B m_color;
    cocos2d::ccColor3B m_copyColor;
    int m_colorID;
    cocos2d::ccColor3B m_pulseColor;
    ColorAction* m_colorAction;
}

[[link(android)]]
class ColorChannelSprite : cocos2d::CCSprite {
    // virtual ~ColorChannelSprite();

    static ColorChannelSprite* create() = ios 0x106c8, win 0x2515d0, m1 0x2685c0, imac 0x2c46d0;

    virtual bool init() = win 0x251690, imac 0x2c4770, m1 0x268668, ios 0x10764;

    void updateBlending(bool enabled) = win 0x2519c0, m1 0x26897c, imac 0x2c4aa0, ios 0x10a6c;
    void updateCopyLabel(int channelID, bool copyColorLoop) = win 0x2516b0, m1 0x268674, imac 0x2c4790, ios 0x10770;
    void updateOpacity(float alpha) = ios 0x10910, win 0x251870, imac 0x2c4950, m1 0x26881c;
    void updateValues(ColorAction* action) = win inline, imac 0x2c4bb0, m1 0x268a84, ios 0x10b74 {
        if (!action) {
            this->setColor(cocos2d::ccWHITE);
            this->updateCopyLabel(0, false);
            this->updateOpacity(1.f);
            this->updateBlending(false);
            return;
        }
        this->updateCopyLabel(action->m_copyID, action->m_copyColorLoop);
        this->updateOpacity(action->m_fromOpacity);
        this->updateBlending(action->m_blending);
        if (action->m_copyID != 0 && !action->m_copyOpacity) {
            this->setColor(cocos2d::ccGRAY);
        }
        else {
            this->setColor(action->m_fromColor);
        }
    }

    cocos2d::CCLabelBMFont* m_copyLabel;
    cocos2d::CCLabelBMFont* m_opacityLabel;
    cocos2d::CCLabelBMFont* m_blendingLabel;
}

[[link(android)]]
class ColorSelectDelegate {
    virtual void colorSelectClosed(cocos2d::CCNode*) {}
}

[[link(android)]]
class ColorSelectLiveOverlay : FLAlertLayer {
    // virtual ~ColorSelectLiveOverlay();

    static ColorSelectLiveOverlay* create(ColorAction*, ColorAction*, EffectGameObject*) = win 0x8bc50, m1 0x4a8f24, imac 0x551c50, ios 0xf81a4;
    static ColorSelectLiveOverlay* createWithActions(ColorAction*, ColorAction*);
    static ColorSelectLiveOverlay* createWithObject(EffectGameObject*);

    virtual void keyBackClicked() = win 0x8d1b0, m1 0x4aa894, imac 0x553950, ios 0xf9668;
    virtual void show() = win 0x8ba30, m1 0x4aa94c, imac 0x553a00, ios 0xf967c;

    void closeColorSelect(cocos2d::CCObject* sender) = win 0x8d020;
    void colorValueChanged(cocos2d::ccColor3B);
    CCMenuItemToggler* createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint);
    void determineStartValues();
    cocos2d::ccColor3B getColorValue();
    bool init(ColorAction*, ColorAction*, EffectGameObject*) = win 0x8bda0, m1 0x4a9080, imac 0x551e20, ios 0xf8238;
    void onSelectTab(cocos2d::CCObject* sender) = win 0x8d070;
    void selectColor(cocos2d::ccColor3B) = win 0x8d200;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x8cd30;
    void textChanged(CCTextInputNode*) {}
    void textInputClosed(CCTextInputNode*) {}
    void toggleControls(bool) = win 0x8d640;
    void updateColorLabel() = win 0x8d480;
    void updateColorValue();
    void updateOpacity();

    EffectGameObject* m_effectGameObject;
    cocos2d::CCArray* m_barSprites;
    cocos2d::CCArray* m_12buttons;
    ColorAction* m_baseColorAction;
    ColorAction* m_detailColorAction;
    cocos2d::ccColor3B m_mainColor;
    cocos2d::ccColor3B m_detailColor;
    cocos2d::ccColor3B m_targetColor;
    float m_unk2ac;
    int m_unk2b0;
    int m_unk2b4;
    float m_opacity;
    ColorSelectDelegate* m_delegate;
    bool m_disableTextDelegate;
    bool m_unk2c9;
    bool m_updateColor;
    Slider* m_hueSlider;
    Slider* m_saturationSlider;
    Slider* m_valueSlider;
    Slider* m_opacitySlider;
    cocos2d::CCSprite* m_colorSprite;
    cocos2d::CCSprite* m_oldColorSprite;
    cocos2d::CCSprite* m_saturationSprite;
    cocos2d::CCSprite* m_valueSprite;
    cocos2d::CCSprite* m_opacitySprite;
    double m_hue;
    double m_saturation;
    double m_value;
    cocos2d::CCLabelBMFont* m_colorLabel;
    bool m_detailColorSelected;
    bool m_closeButtonPressed;
}

[[link(android)]]
class ColorSelectPopup : SetupTriggerPopup, cocos2d::extension::ColorPickerDelegate, GJSpecialColorSelectDelegate {
    ColorSelectPopup() = ios 0x41893c {
        m_colorPicker = nullptr;
        m_unk3c0 = false;
        m_opacityLabel = nullptr;
        m_fadeTimeSlider = nullptr;
        m_opacitySlider = nullptr;
        m_currentColorSprite = nullptr;
        m_originalColorSprite = nullptr;
        m_delegate = nullptr;
        m_fadeTime = 0.f;
        m_playerColor = 0;
        m_blending = 0;
        m_opacity = 1.f;
        m_colorAction = nullptr;
        m_colorInput = nullptr;
        m_backgroundTrigger = false;
        m_tintGround = false;
        m_legacyHSV = false;
        m_colorTrigger = false;
        m_noChannel = false;
        m_newColorTrigger = false;
        m_colorID = 0;
        m_initializing = false;
        m_copyColorID = 0;
        m_copyOpacity = false;
        m_hsv = { 0.f, 1.f, 1.f, false, false };
        m_fadeTimeInput = nullptr;
        m_showCopyObjects = false;
    }
    ~ColorSelectPopup() = win inline, m1 0x62d5b4, imac 0x70e670, ios 0x414160 {
        CC_SAFE_RELEASE(m_colorAction);
        CC_SAFE_RELEASE(m_colorObjects);
        CC_SAFE_RELEASE(m_copyObjects);
    }

    static gd::string colorToHex(cocos2d::ccColor3B) = win 0x926d0;
    static ColorSelectPopup* create(EffectGameObject* effect, cocos2d::CCArray* array, ColorAction* action) = win 0x8da30, m1 0x62d6a0, imac 0x70e810, ios 0x41424c;

    static ColorSelectPopup* create(cocos2d::ccColor3B color) = win inline, m1 0x62d8a8, imac 0x70eb10, ios 0x4142e8 {
        auto action = ColorAction::create();
        action->m_color = color;
        return ColorSelectPopup::create(action);
    }
    static ColorSelectPopup* create(ColorAction* action) = win inline, m1 0x62d898, imac 0x70eaf0, ios 0x4142d8 {
        return ColorSelectPopup::create(nullptr, nullptr, action);
    }
    static ColorSelectPopup* create(EffectGameObject* effect, cocos2d::CCArray* array) = win inline, m1 0x62d698, imac 0x70e800, ios 0x414244 {
        return ColorSelectPopup::create(effect, array, nullptr);
    }
    static cocos2d::ccColor3B hexToColor(gd::string) = win 0x91a60;

    virtual void show() = win 0x92ba0, m1 0x6332dc, imac 0x714aa0, ios 0x418298;
    virtual void determineStartValues() = win 0x90390, m1 0x631010, imac 0x712800, ios 0x417284;
    virtual void textChanged(CCTextInputNode*) = win 0x92cd0, imac 0x714b90, m1 0x6333a8, ios 0x418364;
    virtual void colorValueChanged(cocos2d::ccColor3B) = win 0x91750, imac 0x712ff0, m1 0x6316b0, ios 0x417894;
    virtual void colorSelectClosed(GJSpecialColorSelect*, int) = win 0x93690, imac 0x715130, m1 0x633898, ios 0x418764;
    virtual void keyBackClicked() = win 0x91740, m1 0x6316a4, imac 0x712fc0, ios 0x417888;

    void closeColorSelect(cocos2d::CCObject*) = win 0x914a0, m1 0x62fc94, imac 0x711290, ios 0x4164b0;
    cocos2d::ccColor3B getColorValue();
    bool init(EffectGameObject*, cocos2d::CCArray*, ColorAction*) = ios 0x414324, win 0x8dc20, imac 0x70eb40, m1 0x62d8e4;
    void onCopy(cocos2d::CCObject* sender) = win 0x90d60, m1 0x630200, imac 0x7118b0, ios 0x416828;
    void onCopyOpacity(cocos2d::CCObject* sender) = win 0x90b00;
    void onDefault(cocos2d::CCObject* sender) = win 0x90e60, m1 0x630280, imac 0x711930, ios 0x4168a8;
    void onHSVLegacyMode(cocos2d::CCObject* sender);
    void onPaste(cocos2d::CCObject* sender) = win 0x90de0, m1 0x630234, imac 0x7118f0, ios 0x41685c;
    void onPlayerColor1(cocos2d::CCObject* sender);
    void onPlayerColor2(cocos2d::CCObject* sender);
    void onSelectSpecialColor(cocos2d::CCObject* sender);
    void onTintGround(cocos2d::CCObject* sender);
    void onToggleHSVMode(cocos2d::CCObject* sender) = win 0x93500, m1 0x630820, imac 0x711fb0, ios 0x416d00;
    void onToggleTintMode(cocos2d::CCObject* sender) = win 0x909b0;
    void onUpdateCopyColor(cocos2d::CCObject* sender) = ios 0x416e98, win 0x93420, m1 0x6309c0, imac 0x712170;
    void onUpdateCustomColor(cocos2d::CCObject* sender) = win 0x92c50, m1 0x630c80, imac 0x712450, ios 0x417000;
    void selectColor(cocos2d::ccColor3B);
    void sliderChanged(cocos2d::CCObject* sender) = win 0x91130, m1 0x62fe2c, imac 0x7114a0, ios 0x4165ec;
    void updateColorLabels();
    void updateColorValue();
    void updateCopyColor() = win 0x93830;
    void updateCopyColorTextInputLabel();
    void updateCustomColorIdx() = win 0x93270;
    void updateDuration() = win 0x91220, m1 0x6315a8, imac 0x712e60, ios 0x417794;
    void updateDurLabel() = imac 0x7116c0, m1 0x630004;
    void updateHSVMode() = win 0x93540;
    void updateHSVValue();
    void updateOpacity() = win 0x912b0, m1 0x631520, imac 0x712db0, ios 0x417714;
    void updateOpacityLabel() = win 0x91430, m1 0x63019c, imac 0x711850, ios 0x4167c4;
    void updateTextInputLabel();

    cocos2d::extension::CCControlColourPicker* m_colorPicker;
    bool m_unk3c0;
    cocos2d::CCLabelBMFont* m_opacityLabel;
    Slider* m_fadeTimeSlider;
    Slider* m_opacitySlider;
    CCMenuItemToggler* m_playerColor1Toggle;
    CCMenuItemToggler* m_playerColor2Toggle;
    cocos2d::ccColor3B m_originalColor;
    cocos2d::CCSprite* m_currentColorSprite;
    cocos2d::CCSprite* m_originalColorSprite;
    cocos2d::ccColor3B m_currentColor;
    ColorSelectDelegate* m_delegate;
    float m_fadeTime;
    int m_playerColor;
    int m_blending;
    float m_opacity;
    ColorAction* m_colorAction;
    CCTextInputNode* m_colorInput;
    bool m_backgroundTrigger;
    bool m_tintGround;
    bool m_legacyHSV;
    bool m_colorTrigger;
    bool m_noChannel;
    bool m_newColorTrigger;
    int m_colorID;
    bool m_initializing;
    int m_copyColorID;
    bool m_copyOpacity;
    ConfigureHSVWidget* m_hsvWidget;
    cocos2d::ccHSVValue m_hsv;
    cocos2d::CCArray* m_colorObjects;
    cocos2d::CCArray* m_copyObjects;
    CCTextInputNode* m_copyColorInput;
    CCTextInputNode* m_fadeTimeInput;
    void* m_unk488;
    void* m_unk490;
    bool m_showCopyObjects;
    CCTextInputNode* m_rInput;
    CCTextInputNode* m_gInput;
    CCTextInputNode* m_bInput;
    CCTextInputNode* m_hexInput;
}

[[link(android)]]
class ColorSetupDelegate {
    virtual void colorSetupClosed(int) {}
}

[[link(android)]]
class CommentCell : TableViewCell, LikeItemDelegate, FLAlertLayerProtocol {
    // virtual ~CommentCell();
    CommentCell(char const*, float, float) = win 0xb53c0;

    virtual bool init() = win 0xb5460, imac 0x242d60, m1 0x1f202c, ios 0x11371c;
    virtual void draw() = win 0xad710, imac 0x243070, m1 0x1f22f4, ios 0x1139b8;
    virtual void likedItem(LikeItemType, int, bool) = win 0xb7750, imac 0x243140, m1 0x1f23a0, ios 0x113a64;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xb79c0, imac 0x2434e0, m1 0x1f271c, ios 0x113bdc;

    TodoReturn incrementDislikes();
    TodoReturn incrementLikes();
    void loadFromComment(GJComment*) = ios 0x108cb0, win 0xb5480, m1 0x1e5f14, imac 0x235d50;
    void onConfirmDelete(cocos2d::CCObject* sender) = ios 0x1138fc, win 0xb7850, imac 0x242f80, m1 0x1f220c;
    void onDelete() = m1 0x1f26a0, imac 0x243450;
    void onGoToLevel(cocos2d::CCObject* sender) = win 0xb7b20, imac 0x242dc0, m1 0x1f2078, ios 0x113768;
    void onLike(cocos2d::CCObject* sender) = ios 0x11381c, win 0xb75f0, imac 0x242e90, m1 0x1f212c;
    TodoReturn onUndelete();

    void onUnhide(cocos2d::CCObject* sender) = win 0xb7b00, m1 0x1f2120, imac 0x242e70;
    void onViewProfile(cocos2d::CCObject* sender) = imac 0x242d90, m1 0x1f2044;
    void updateBGColor(int index) = win inline, m1 0x1e7a08, imac 0x237ac0, ios 0x10a674 {
        if (m_compactMode) {
            m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 156, 85, 42 } : cocos2d::ccColor3B { 144, 79, 39 });
        }
        else {
            m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        }
    }
    void updateLabelValues();

    cocos2d::CCSprite* m_iconSprite;
    cocos2d::CCLabelBMFont* m_likeLabel;
    GJComment* m_comment;
    bool m_accountComment;
    bool m_unk259;
    bool m_compactMode;
}

[[link(android)]]
class CommentUploadDelegate {
    virtual void commentUploadFinished(int) {}
    virtual void commentUploadFailed(int, CommentError) {}
    virtual void commentDeleteFailed(int, int) {}
}

[[link(android)]]
class CommunityCreditNode : cocos2d::CCNode {
    // virtual ~CommunityCreditNode();

    static CommunityCreditNode* create(int unlockType, int iconID, int unknown, gd::string author) = win 0x93ec0, m1 0x2a1050, imac 0x309ef0, ios 0x1a3508;

    bool init(int unlockType, int iconID, int unknown, gd::string author) = win inline, imac 0x30a010, m1 0x2a1170, ios inline {
        if (!CCNode::init()) return false;
        m_unlockType = unlockType;
        m_iconID = iconID;
        m_unknown = unknown;
        m_author = author;
        return true;
    }

    int m_unlockType;
    int m_iconID;
    int m_unknown;
    gd::string m_author;
}

[[link(android)]]
class CommunityCreditsPage : FLAlertLayer {
    CommunityCreditsPage() {
        m_pageObjects = nullptr;
        m_prevButton = nullptr;
        m_nextButton = nullptr;
        m_page = -1;
    }
    ~CommunityCreditsPage() = win inline, m1 0x2a11d4, imac 0x30a080, ios 0x1a3628 {
        CC_SAFE_RELEASE(m_pageObjects);
    }

    static CommunityCreditsPage* create() = win inline, m1 0x2a13f8, imac 0x30a3b0, ios 0x1a36cc {
        auto ret = new CommunityCreditsPage();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x94000, imac 0x30a500, m1 0x2a14fc, ios 0x1a3788;
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x2a37e4, imac 0x30ca60, ios 0x1a5d64;
    virtual void keyBackClicked() = win 0x84650, m1 0x2a3768, imac 0x30c9f0, ios 0x1a5ce8;
    virtual void show() = win 0x96160, m1 0x2a35e0, imac 0x30c860, ios 0x1a5b74;

    void FLAlert_Clicked(FLAlertLayer*, bool);
    void goToPage(int) = win 0x96040, m1 0x2a34cc, imac 0x30c750;
    void onClose(cocos2d::CCObject* sender);
    void onSwitchPage(cocos2d::CCObject* sender);

    cocos2d::CCDictionary* m_pageObjects;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
    int m_page;
}

[[link(android)]]
class ConfigureHSVWidget : cocos2d::CCNode, TextInputDelegate {
    // virtual ~ConfigureHSVWidget();

    static ConfigureHSVWidget* create(cocos2d::ccHSVValue, bool, bool) = win 0x96950, m1 0x39886c, imac 0x41cf70;
    static cocos2d::ccHSVValue getHSV(GameObject*, cocos2d::CCArray*, int) = win 0x980a0, imac 0x41ead0, m1 0x39a274, ios 0x1033fc;

    virtual void textInputOpened(CCTextInputNode*) = m1 0x39a008, imac 0x41e810, ios 0x10323c {}
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x39a010, imac 0x41e830, ios 0x103244;
    virtual void textChanged(CCTextInputNode*) = win 0x97560, imac 0x41e870, m1 0x39a02c, ios 0x103260;

    void createTextInputNode(cocos2d::CCPoint, int) = win 0x97300, imac 0x41dcd0, m1 0x3994ec;
    bool init(cocos2d::ccHSVValue hsv, bool unused, bool addInputs) = win 0x96a20, imac 0x41d320, m1 0x398bbc, ios 0x102110;
    void onClose() = imac 0x41d040, m1 0x398940;
    void onResetHSV(cocos2d::CCObject* sender) = win 0x97b10, imac 0x41e0f0, m1 0x399978, ios 0x102d7c;
    void onToggleSConst(cocos2d::CCObject* sender);
    void onToggleVConst(cocos2d::CCObject* sender);
    void sliderChanged(cocos2d::CCObject* sender) = m1 0x399748, imac 0x41df00, win 0x978f0, ios 0x102b68;
    void updateLabels() = ios 0x102df4, win 0x97b90, imac 0x41e170, m1 0x3999f0;
    void updateSliders() = ios 0x103180, win 0x97820, imac 0x41e750, m1 0x399f4c;

    cocos2d::CCLabelBMFont* m_hueLabel;
    cocos2d::CCLabelBMFont* m_saturationLabel;
    cocos2d::CCLabelBMFont* m_brightnessLabel;
    Slider* m_hueSlider;
    Slider* m_saturationSlider;
    Slider* m_brightnessSlider;
    cocos2d::ccHSVValue m_hsv;
    bool m_mixed;
    HSVWidgetDelegate* m_delegate;
    bool m_addInputs;
    bool m_updating;
    cocos2d::CCDictionary* m_inputs;
}

[[link(android)]]
class ConfigureValuePopup : FLAlertLayer, TextInputDelegate {
    // virtual ~ConfigureValuePopup();

    static ConfigureValuePopup* create(ConfigureValuePopupDelegate*, float, float, float, gd::string, gd::string) = win 0x983a0;

    virtual void keyBackClicked() = win 0x98fb0, m1 0x53a3ec, imac 0x60d720, ios 0x153e9c;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x53a2d4, imac 0x60d5d0, ios 0x153d98;
    virtual void textChanged(CCTextInputNode*) = win 0x98de0, imac 0x60d610, m1 0x53a2f0, ios 0x153db4;

    bool init(ConfigureValuePopupDelegate*, float, float, float, gd::string, gd::string) = win 0x98550, m1 0x5399a8, imac 0x60cbd0;
    void onClose(cocos2d::CCObject* sender) = win 0x98f30;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x98d00, imac 0x60d460, m1 0x53a17c, ios 0x153cc0;
    void updateTextInputLabel() = win 0x98d50, imac 0x60d4b0, m1 0x53a1c0, ios 0x153d04;

    float m_value;
    float m_minimum;
    float m_maximum;
    bool m_enableDelegate;
    bool m_disableTextDelegate;
    ConfigureValuePopupDelegate* m_delegate;
    CCTextInputNode* m_input;
    Slider* m_slider;
}

[[link(android)]]
class ConfigureValuePopupDelegate {
    virtual void valuePopupClosed(ConfigureValuePopup*, float) {}
}

[[link(android)]]
class CountTriggerAction {
    // CountTriggerAction(CountTriggerAction&&);

    bool m_disabled;
    int m_previousCount;
    int m_targetCount;
    int m_targetGroupID;
    bool m_activateGroup;
    int m_triggerUniqueID;
    int m_controlID;
    int m_itemID;
    bool m_multiActivate;
    gd::vector<int> m_remapKeys;
}

[[link(android)]]
class CountTriggerGameObject : EffectGameObject {
    // virtual ~CountTriggerGameObject();

    static CountTriggerGameObject* create(char const*);

    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a26c0, imac 0x1c52f0, m1 0x182718, ios 0x389674;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a2b30, imac 0x1c5570, m1 0x182950, ios 0x38981c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a2e90, imac 0x1c59a0, m1 0x182cdc, ios 0x389b1c;

    bool init(char const*);

    // property 77
    int m_pickupCount;
    // property 88
    int m_pickupTriggerMode;
    // property 104
    bool m_multiActivate;
    // property 139
    bool m_isOverride;
    // property 449
    float m_pickupTriggerMultiplier;
}

[[link(android)]]
class CreateGuidelinesLayer : FLAlertLayer, FLAlertLayerProtocol {
    CreateGuidelinesLayer() = win 0x98fd0;
    ~CreateGuidelinesLayer() = win 0x99120, m1 0x4558b0, imac 0x4f4e30, ios 0x801a8;

    static CreateGuidelinesLayer* create(CustomSongDelegate*, AudioGuidelinesType) = win inline {
        auto ret = new CreateGuidelinesLayer();
        if (ret->init(p0, p1)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void update(float) = win 0x9adf0, imac 0x4f6f90, m1 0x457810, ios 0x81c38;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x9b0c0, imac 0x4f7200, m1 0x457a68, ios 0x81e38;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x457b90, imac 0x4f72f0, ios 0x81ee4 {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x9b140, m1 0x457b98, imac 0x4f7310, ios 0x81eec;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x457c68, imac 0x4f73b0, ios 0x81fb4;
    virtual void registerWithTouchDispatcher() = win 0x9b1a0, m1 0x457c84, imac 0x4f73f0, ios 0x81fd0;
    virtual void keyBackClicked() = win 0x9b040, m1 0x4579e4, imac 0x4f7160, ios 0x81db4;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x9b1f0, imac 0x4f7430, m1 0x457cbc, ios 0x82008;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x9af60, imac 0x4f7060, m1 0x4578d8, ios 0x81ce0;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x84620, m1 0x4579a8, imac 0x4f7130, ios 0x81d78;
    virtual void keyUp(cocos2d::enumKeyCodes) = m1 0x457d00, imac 0x4f7480, ios 0x8204c {}
    virtual void playMusic() = win 0x9a6a0, m1 0x456ea4, imac 0x4f6610, ios 0x814f4;
    virtual void registerTouch() = win 0x9b060, imac 0x4f71b0, m1 0x457a20, ios 0x81df0;
    virtual void onInfo(cocos2d::CCObject* sender) = win 0x9ae10, imac 0x4f6fb0, m1 0x457820, ios 0x81c48;
    virtual void onRecord(cocos2d::CCObject* sender) = win 0x9a510, imac 0x4f6500, m1 0x456d90, ios 0x813e4;
    virtual void recordingDidStop() = win 0x9a800, imac 0x4f66a0, m1 0x456f44, ios 0x81584;

    void doClearGuidelines() = m1 0x456ce8, imac 0x4f6470;
    gd::string getMergedRecordString(gd::string, gd::string) = win 0x9aa90;
    bool init(CustomSongDelegate*, AudioGuidelinesType) = win 0x991e0, m1 0x455c70, imac 0x4f5320;
    void onClearGuidelines(cocos2d::CCObject* sender) = win 0x9a3e0, m1 0x456b0c, imac 0x4f6280;
    void onStop(cocos2d::CCObject* sender) = win 0x9a730;
    void toggleItems(bool) = win 0x9ad10;

    CustomSongDelegate* m_delegate;
    CCTextInputNode* m_offsetInput;
    cocos2d::CCArray* m_nonRecordingObjects;
    cocos2d::CCArray* m_recordingObjects;
    cocos2d::CCLabelBMFont* m_infoLabel;
    cocos2d::CCSprite* m_circleSprite;
    float m_elapsed;
    bool m_recording;
    bool m_unk2b5;
    int m_guidelines;
    gd::string m_guidelineString;
}

[[link(android)]]
class CreateMenuItem : CCMenuItemSpriteExtra {
    // virtual ~CreateMenuItem();

    static CreateMenuItem* create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) = ios 0x3df644, win 0x127700, imac 0x2f300, m1 0x2ed0c;

    bool init(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);

    gd::string m_spriteFileName;
    int m_objectID;
    int m_pageIndex;
    int m_tabIndex;
}

[[link(android)]]
class CreateParticlePopup : FLAlertLayer, TextInputDelegate, ColorSelectDelegate, SliderDelegate {
    // virtual ~CreateParticlePopup();

    static CreateParticlePopup* create(gd::string) = win inline, m1 0x3ccc68, imac 0x45bde0, ios inline {
        return CreateParticlePopup::create(nullptr, nullptr, p0);
    }
    static CreateParticlePopup* create(ParticleGameObject*, cocos2d::CCArray*, gd::string) = win 0x414180, m1 0x3cca7c, imac 0x45bb70, ios 0x2cae0c;
    static CreateParticlePopup* create(ParticleGameObject*, cocos2d::CCArray*) = win inline, m1 0x3cca54, imac 0x45bb50, ios 0x2cad90 {
        return CreateParticlePopup::create(p0, p1, "");
    }

    virtual void update(float) = win 0x41a520, imac 0x463940, m1 0x3d3a48, ios 0x2d0d74;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x41d070, imac 0x4644c0, m1 0x3d4520, ios 0x2d15dc;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x41d170, imac 0x4645d0, m1 0x3d4614, ios 0x2d16d0;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x41d5a0, imac 0x4649a0, m1 0x3d49b0, ios 0x2d1a68;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x3d49ec, imac 0x4649f0, ios 0x2d1aa4;
    virtual void keyBackClicked() = win 0x41d060, imac 0x464320, m1 0x3d438c, ios 0x2d1504;
    virtual void sliderBegan(Slider*) = win 0x41c7a0, imac 0x4641e0, m1 0x3d423c, ios 0x2d13d4;
    virtual void sliderEnded(Slider*) = win 0x41c860, imac 0x4642c0, m1 0x3d4354, ios 0x2d14ec;
    virtual void colorSelectClosed(cocos2d::CCNode*) = win 0x419e10, imac 0x4636b0, m1 0x3d37d4, ios 0x2d0b10;
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, m1 0x3d4398, imac 0x464350, ios 0x2d1510;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, m1 0x3d4468, imac 0x464410, ios 0x2d157c;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x3d3b8c, imac 0x463ab0, ios 0x2d0ea8;
    virtual void textChanged(CCTextInputNode*) = win 0x41a6b0, imac 0x463af0, m1 0x3d3ba8, ios 0x2d0ec4;

    TodoReturn centerAlignParticle(cocos2d::CCObject*);
    void createParticleSlider(gjParticleValue value, int page, bool centerLabel, cocos2d::CCPoint position, cocos2d::CCArray* displayNodes) = win 0x4188d0;
    TodoReturn getPage(int);
    TodoReturn getPageButton(int);
    TodoReturn getPageContainer(int);
    TodoReturn getPageInputNodes(int);
    TodoReturn getPageMenu(int);
    TodoReturn getPageSliders(int);
    bool init(ParticleGameObject*, cocos2d::CCArray*, gd::string) = win 0x414370, m1 0x3ccd08, imac 0x45be60, ios 0x2caef4;
    TodoReturn maxSliderValueForType(gjParticleValue);
    TodoReturn minSliderValueForType(gjParticleValue);
    void onAnimateActiveOnly(cocos2d::CCObject* sender);
    void onAnimateOnTrigger(cocos2d::CCObject* sender);
    void onCalcEmission(cocos2d::CCObject* sender);
    void onClose(cocos2d::CCObject* sender) = ios 0x2ce250, win 0x41cf20, imac 0x460450, m1 0x3d0ad8;
    void onCopySettings(cocos2d::CCObject* sender);
    void onDuplicateColor(cocos2d::CCObject* sender);
    void onDurationForever(cocos2d::CCObject* sender);
    void onDynamicColor(cocos2d::CCObject* sender);
    void onDynamicRotation(cocos2d::CCObject* sender);
    void onEmitterMode(cocos2d::CCObject* sender);
    void onEndRGBVarSync(cocos2d::CCObject* sender);
    void onMaxEmission(cocos2d::CCObject* sender);
    void onMode(cocos2d::CCObject* sender) = win 0x41a0c0;
    void onOrderSensitive(cocos2d::CCObject* sender);
    void onPage(cocos2d::CCObject* sender) = win 0x41a320;
    void onPasteSettings(cocos2d::CCObject* sender);
    void onPosType(cocos2d::CCObject* sender);
    void onQuickStart(cocos2d::CCObject* sender);
    void onSelectColor(cocos2d::CCObject* sender);
    void onSelectParticleTexture(cocos2d::CCObject* sender);
    void onStartRGBVarSync(cocos2d::CCObject* sender);
    void onToggleBlending(cocos2d::CCObject* sender);
    void onToggleStartRadiusEqualToEnd(cocos2d::CCObject* sender);
    void onToggleStartRotationIsDir(cocos2d::CCObject* sender);
    void onToggleStartSizeEqualToEnd(cocos2d::CCObject* sender);
    void onToggleStartSpinEqualToEnd(cocos2d::CCObject* sender);
    void onUniformColor(cocos2d::CCObject* sender);
    bool particleValueIsInt(gjParticleValue) = win 0x41c920;
    void sliderChanged(cocos2d::CCObject* sender);
    gd::string titleForParticleValue(gjParticleValue) = m1 0x3d2930, imac 0x462430;
    void toggleGravityMode(bool) = win 0x41cc40;
    TodoReturn updateColorSprite(int);
    void updateInputNodeStringForType(gjParticleValue) = win 0x41c990, m1 0x3d295c, imac 0x462470, ios 0x2cfd58;
    void updateParticleValueForType(float, gjParticleValue, cocos2d::CCParticleSystemQuad*) = win 0x41ba90, m1 0x3d2e28, imac 0x462960, ios 0x2d0168;
    void updateSliderForType(gjParticleValue) = win 0x41c700, m1 0x3d2c3c, imac 0x462740, ios 0x2cff7c;
    float valueForParticleValue(gjParticleValue) = win 0x41b210;
    void willClose();

    ParticleGameObject* m_targetObject;
    cocos2d::CCArray* m_targetObjects;
    cocos2d::CCArray* m_particles;
    bool m_disableTextDelegate;
    cocos2d::CCParticleSystemQuad* m_particle;
    cocos2d::CCParticleSystemQuad* m_standaloneParticle;
    int m_touchID;
    cocos2d::CCPoint m_touchDelta;
    cocos2d::CCArray* m_inputDicts;
    cocos2d::CCArray* m_sliderDicts;
    cocos2d::CCArray* m_pageNodes;
    cocos2d::CCArray* m_pageButtons;
    cocos2d::CCArray* m_pageMenus;
    cocos2d::CCArray* m_pageObjectArrays;
    ParticlePreviewLayer* m_previewLayer;
    CCMenuItemSpriteExtra* m_mode1Button;
    CCMenuItemSpriteExtra* m_mode2Button;
    CCMenuItemSpriteExtra* m_mode3Button;
    float m_elapsed;
    int m_selectedMode;
    CCMenuItemToggler* m_freeToggler;
    CCMenuItemToggler* m_relativeToggler;
    CCMenuItemToggler* m_groupedToggler;
    CCMenuItemToggler* m_objColorToggler;
    CCMenuItemToggler* m_uniformColorToggler;
    CCMenuItemToggler* m_gravityToggler;
    CCMenuItemToggler* m_radiusToggler;
    cocos2d::CCSprite* m_selectSprite;
    cocos2d::CCSprite* m_particleColorSprite;
    cocos2d::CCSprite* m_startColorSprite;
    cocos2d::CCSprite* m_endColorSprite;
    cocos2d::CCArray* m_gravityObjects;
    cocos2d::CCArray* m_radiusObjects;
    int m_particleIndex;
    int m_page;
    bool m_useObjectColor;
    bool m_animateOnTrigger;
    bool m_onlyAnimateActive;
    bool m_quickStart;
    float m_respawnResult;
}

[[link(android)]]
class CreatorLayer : cocos2d::CCLayer, cocos2d::CCSceneTransitionDelegate, DialogDelegate {
    // virtual ~CreatorLayer();
    CreatorLayer() {
        m_secretDoorSprite = nullptr;
        m_questsSprite = nullptr;
        m_vaultDialogIndex = -1;
        m_versusDialogIndex = 0;
    }

    static CreatorLayer* create() = ios 0xb813c, win inline, imac 0x285610, m1 0x22ec24 {
        auto ret = new CreatorLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene() = ios 0xb80e4, win 0x9b9a0, m1 0x22eb40, imac 0x2854f0;

    virtual bool init() = win 0x9bb10, m1 0x22ece0, imac 0x2856f0, ios 0xb81ec;
    virtual void keyBackClicked() = win 0x9f2b0, m1 0x230ea4, imac 0x287a70, ios 0xb9d0c;
    virtual void sceneWillResume() = win 0x9f1f0, imac 0x2879f0, m1 0x230e34, ios 0xb9ccc;
    virtual void dialogClosed(DialogLayer*) = win 0x9f0d0, imac 0x2878f0, m1 0x230d34, ios 0xb9c3c;

    bool canPlayOnlineLevels();
    void checkQuestsStatus() = imac 0x286f00, m1 0x23039c, win 0x9efb0;
    void onAdventureMap(cocos2d::CCObject* sender) = ios 0xb91a4, win 0x9dbe0, imac 0x286950, m1 0x22fdf4;
    void onBack(cocos2d::CCObject* sender) = ios 0xb9bdc, win 0x9f190, m1 0x230c80, imac 0x287820;
    void onChallenge(cocos2d::CCObject* sender) = ios 0xb921c, win 0x9ddb0, imac 0x2869c0, m1 0x22fe84;
    void onDailyLevel(cocos2d::CCObject* sender) = ios 0xb9254, win 0x9dd50, m1 0x22febc, imac 0x2869f0;
    void onEventLevel(cocos2d::CCObject* sender) = ios 0xb9294, win 0x9dd90, m1 0x22fefc, imac 0x286a30;
    void onFameLevels(cocos2d::CCObject* sender);
    void onFeaturedLevels(cocos2d::CCObject* sender) = ios 0xb92fc, win 0x9d2a0, m1 0x22ff64, imac 0x286aa0;
    void onGauntlets(cocos2d::CCObject* sender) = ios 0xb92b4, win 0x9d590, m1 0x22ff1c, imac 0x286a50;
    void onLeaderboards(cocos2d::CCObject* sender) = ios 0xb8e90, win 0x9d0f0, m1 0x22fa48, imac 0x2865a0;
    void onMapPacks(cocos2d::CCObject* sender) = ios 0xb93c4, win 0x9d4d0, imac 0x286b80, m1 0x23002c;
    void onMultiplayer(cocos2d::CCObject* sender) = ios 0xb8ecc, win 0x9d610, m1 0x22fa84, imac 0x2865e0;
    void onMyLevels(cocos2d::CCObject* sender) = ios 0xb944c, win 0x9cce0, m1 0x2300b4, imac 0x286c20;
    void onOnlineLevels(cocos2d::CCObject* sender) = ios 0xb9410, win 0x9d450, m1 0x230078, imac 0x286be0;
    void onOnlyFullVersion(cocos2d::CCObject* sender) = m1 0x23017c, imac 0x286d00;
    void onPaths(cocos2d::CCObject* sender) = ios 0xb9348, win 0x9d360, imac 0x286b00, m1 0x22ffb0;
    void onSavedLevels(cocos2d::CCObject* sender) = ios 0xb8dd0, win 0x9cef0, m1 0x22f988, imac 0x2864d0;
    void onSecretVault(cocos2d::CCObject* sender) = ios 0xb95f0, win 0x9df20, m1 0x230498, imac 0x287000;
    void onTopLists(cocos2d::CCObject* sender) = ios 0xb9364, win 0x9d380, imac 0x286b20, m1 0x22ffcc;
    void onTreasureRoom(cocos2d::CCObject* sender) = ios 0xb97c8, win 0x9e730, m1 0x2306ec, imac 0x287220;
    void onWeeklyLevel(cocos2d::CCObject* sender) = ios 0xb9274, win 0x9dd70, m1 0x22fedc, imac 0x286a10;

    cocos2d::CCSprite* m_secretDoorSprite;
    cocos2d::CCSprite* m_questsSprite;
    int m_vaultDialogIndex;
    int m_versusDialogIndex;
}

[[link(android)]]
class CurrencyRewardDelegate {
    virtual void currencyWillExit(CurrencyRewardLayer*) {}
}

[[link(android)]]
class CurrencyRewardLayer : cocos2d::CCLayer {
    // virtual ~CurrencyRewardLayer();
    // CurrencyRewardLayer();

    static CurrencyRewardLayer* create(int orbs, int stars, int moons, int diamonds, CurrencySpriteType demonKey, int keyCount, CurrencySpriteType shardType, int shardsCount, cocos2d::CCPoint position, CurrencyRewardType rewardType, float, float time) = win 0x9f500, imac 0x78ff00, m1 0x6a36f8, ios 0x31e9b4;

    virtual void update(float) = win 0xa2230, imac 0x792fd0, m1 0x6a64a8, ios 0x3212a4;

    void createObjects(CurrencySpriteType type, int count, cocos2d::CCPoint position, float time) = win inline, imac 0x792130, m1 0x6a57c0 {
        this->createObjectsFull(type, count, nullptr, position, time);
    }
    void createObjectsFull(CurrencySpriteType, int, cocos2d::CCSprite*, cocos2d::CCPoint, float) = win 0xa1520, imac 0x7921d0, m1 0x6a5884, ios 0x320790;
    void createUnlockObject(cocos2d::CCSprite* sprite, cocos2d::CCPoint position, float time) = win inline, imac 0x792180, m1 0x6a5828, ios 0x320734 {
        this->createObjectsFull(CurrencySpriteType::Icon, 1, sprite, position, time);
    }
    void incrementCount(int count) = win inline, m1 0x6a6b18, imac 0x793700 {
        if (m_orbsLabel == nullptr) return;
        m_orbs += count;
        this->pulseSprite(m_orbsSprite);
        m_orbsLabel->setString(cocos2d::CCString::createWithFormat("%i", count)->getCString());
    }
    void incrementDiamondsCount(int count) = win inline, m1 0x6a6f08, imac 0x793b50 {
        if (m_diamondsLabel == nullptr) return;
        m_diamonds += count;
        this->pulseSprite(m_diamondsSprite);
        m_diamondsLabel->setString(cocos2d::CCString::createWithFormat("%i", count)->getCString());
    }
    void incrementMoonsCount(int count) = win inline, m1 0x6a6db8, imac 0x7939e0 {
        if (m_moonsLabel == nullptr) return;
        m_moons += count;
        this->pulseSprite(m_moonsSprite);
        m_moonsLabel->setString(cocos2d::CCString::createWithFormat("%i", count)->getCString());
    }
    void incrementSpecialCount1(int count) = win inline, m1 0x6a71a8, imac 0x793e30 {
        if (m_keysLabel == nullptr) return;
        m_keys += count;
        this->pulseSprite(m_keysSprite);
        m_keysLabel->setString(cocos2d::CCString::createWithFormat("%i", count)->getCString());
    }
    void incrementSpecialCount2(int count) = win inline, m1 0x6a7058, imac 0x793cc0 {
        if (m_shardsLabel == nullptr) return;
        m_shards += count;
        this->pulseSprite(m_shardsSprite);
        m_shardsLabel->setString(cocos2d::CCString::createWithFormat("%i", count)->getCString());
    }
    void incrementStarsCount(int count) = win inline, m1 0x6a6c68, imac 0x793870 {
        if (m_starsLabel == nullptr) return;
        m_stars += count;
        this->pulseSprite(m_starsSprite);
        m_starsLabel->setString(cocos2d::CCString::createWithFormat("%i", count)->getCString());
    }
    bool init(int orbs, int stars, int moons, int diamonds, CurrencySpriteType demonKey, int keyCount, CurrencySpriteType shardType, int shardsCount, cocos2d::CCPoint position, CurrencyRewardType rewardType, float, float time) = win 0x9f750, imac 0x78ffe0, m1 0x6a3800, ios 0x31eabc;
    void pulseSprite(cocos2d::CCSprite*) = win 0xa2c00, imac 0x793fa0, m1 0x6a72f8;

    CurrencyRewardDelegate* m_delegate;
    cocos2d::CCArray* m_objects;
    cocos2d::CCLabelBMFont* m_orbsLabel;
    cocos2d::CCLabelBMFont* m_starsLabel;
    cocos2d::CCLabelBMFont* m_moonsLabel;
    cocos2d::CCLabelBMFont* m_diamondsLabel;
    cocos2d::CCLabelBMFont* m_keysLabel;
    cocos2d::CCLabelBMFont* m_shardsLabel;
    cocos2d::CCSprite* m_orbsSprite;
    cocos2d::CCSprite* m_starsSprite;
    cocos2d::CCSprite* m_moonsSprite;
    cocos2d::CCSprite* m_diamondsSprite;
    CurrencySprite* m_keysSprite;
    CurrencySprite* m_shardsSprite;
    cocos2d::CCSpriteBatchNode* m_currencyBatchNode;
    cocos2d::CCSpriteBatchNode* m_orbBatchNode;
    int m_orbs;
    int m_stars;
    int m_moons;
    int m_diamonds;
    int m_keys;
    int m_shards;
    float m_elapsed;
    float m_unknown;
    float m_time;
    cocos2d::CCPoint m_orbsPosition;
    cocos2d::CCPoint m_starsPosition;
    cocos2d::CCPoint m_moonsPosition;
    cocos2d::CCPoint m_diamondsPosition;
    cocos2d::CCPoint m_keysPosition;
    cocos2d::CCPoint m_shardsPosition;
    bool m_particlesAdded;
    bool m_objectsAdded;
    cocos2d::CCNode* m_mainNode;
    int m_rewardCount;
    CurrencyRewardType m_rewardType;
}

[[link(android)]]
class CurrencySprite : CCSpritePlus {
    CurrencySprite() = win 0x9f3c0, ios 0x322b4c {
        m_unkFloat1 = 0.f;
        m_unkFloat2 = 0.f;
        m_unkFloat3 = 0.f;
        m_remaining = 0.f;
        m_count = 1;
        m_particleSystem = nullptr;
        m_spriteType = CurrencySpriteType::Orb;
        m_burstSprite = nullptr;
    }
    ~CurrencySprite() = win inline, m1 0x6a73d8, imac 0x794060, ios 0x321f80 {
        CC_SAFE_RELEASE(m_burstSprite);
    }

    static CurrencySprite* create(CurrencySpriteType type, bool burst) = win inline, imac 0x792020, m1 0x6a56c4 {
        auto ret = new CurrencySprite();
        if (ret->init(type, burst)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    static CurrencySprite* createWithSprite(cocos2d::CCSprite*) = win 0xa44b0, m1 0x6a63c0, imac 0x792ed0;
    static CurrencySpriteType rewardToSpriteType(int);
    static gd::string spriteTypeToStat(CurrencySpriteType) = win 0xa4780, m1 0x6a5574, imac 0x791f20;
    bool init(CurrencySpriteType, bool) = win 0xa2cd0, m1 0x6a74c0, imac 0x794180;
    bool initWithSprite(cocos2d::CCSprite*) = m1 0x6a7dc8, imac 0x794ad0;

    float m_unkFloat1;
    float m_unkFloat2;
    float m_unkFloat3;
    float m_remaining;
    int m_count;
    cocos2d::CCParticleSystemQuad* m_particleSystem;
    CurrencySpriteType m_spriteType;
    cocos2d::CCPoint m_position;
    cocos2d::CCSprite* m_burstSprite;
}

[[link(android)]]
class CustomizeObjectLayer : FLAlertLayer, TextInputDelegate, HSVWidgetDelegate, ColorSelectDelegate, ColorSetupDelegate {
    // virtual ~CustomizeObjectLayer();
    //CustomizeObjectLayer() = ios 0x577b8;

    static CustomizeObjectLayer* create(GameObject*, cocos2d::CCArray*) = win 0xa4b60;

    virtual void keyBackClicked() = win 0xa99e0, imac 0x1e7730, m1 0x19eb58, ios 0x546e4;
    virtual void textInputOpened(CCTextInputNode*) = win 0xa8f70, imac 0x1e7380, m1 0x19e79c, ios 0x543f4;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x19e8c4, imac 0x1e7490, ios 0x54554;
    virtual void textChanged(CCTextInputNode*) = win 0xa9100, imac 0x1e74d0, m1 0x19e8e0, ios 0x54570;
    virtual void hsvPopupClosed(HSVWidgetPopup*, cocos2d::ccHSVValue) = win 0xa86a0, imac 0x1e7130, m1 0x19e5a8, ios 0x54208;
    virtual void colorSelectClosed(cocos2d::CCNode*) = win 0xa8030, imac 0x1e6ed0, m1 0x19e36c, ios 0x541fc;
    virtual void colorSetupClosed(int) = win 0xa7c90, imac 0x1e6a60, m1 0x19df5c, ios 0x53ed8;

    TodoReturn createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint);
    TodoReturn determineStartValues();
    int getActiveMode(bool) = ios 0x53ad0, win 0xa8cb0, imac 0x1e63e0, m1 0x19d9c0;
    ButtonSprite* getButtonByTag(int) = win 0xa9520, m1 0x19e2d4, imac 0x1e6e30, ios 0x5417c;
    TodoReturn getHSV();
    void highlightSelected(ButtonSprite*) = ios 0x54060, win 0xa97d0, m1 0x19e1b8, imac 0x1e6d00;
    bool init(GameObject*, cocos2d::CCArray*) = ios 0x50fa4, win 0xa4d00, imac 0x1e3120, m1 0x19a9d0;
    void onBreakApart(cocos2d::CCObject* sender) = win 0xa9410, m1 0x19d61c, imac 0x1e6010, ios 0x53868;
    void onBrowse(cocos2d::CCObject* sender);
    void onClear(cocos2d::CCObject* sender) = win 0xa9380, m1 0x19d6d4, imac 0x1e60e0, ios 0x538a8;
    void onClose(cocos2d::CCObject* sender) = ios 0x52e0c, win 0xa9900, m1 0x19c978, imac 0x1e5320;
    void onCopy(cocos2d::CCObject* sender) = win 0xa7900;
    void onEditColor(cocos2d::CCObject* sender) = win 0xa7d70, imac 0x1e5d20, m1 0x19d354, ios 0x53640;
    void onHSV(cocos2d::CCObject* sender) = ios 0x53190, win 0xa8470, m1 0x19cd5c, imac 0x1e5740;
    void onLiveEdit(cocos2d::CCObject* sender) = m1 0x19d3a8, imac 0x1e5d80;
    void onNextColorChannel(cocos2d::CCObject* sender) = win 0xa87d0, m1 0x19d788, imac 0x1e6190, ios 0x53974;
    void onPaste(cocos2d::CCObject* sender) = win 0xa7960;
    void onSelectColor(cocos2d::CCObject* sender) = ios 0x534a4, win 0xa95a0, imac 0x1e5a90, m1 0x19d08c;
    void onSelectMode(cocos2d::CCObject* sender) = win 0xa88e0, imac 0x1e5500, m1 0x19cb14, ios 0x52f90;
    void onSettings(cocos2d::CCObject* sender) = win 0xa7ab0;
    void onUpdateCustomColor(cocos2d::CCObject* sender) = ios 0x53524, win 0xa8ea0, imac 0x1e5b40, m1 0x19d154;
    TodoReturn recreateLayer();
    void sliderChanged(cocos2d::CCObject*) = win 0xa77b0, imac 0x1e5e50, m1 0x19d45c, ios 0x536d4;
    void toggleVisible() = ios 0x542c0, win 0xa8af0, imac 0x1e7220, m1 0x19e668;
    void updateChannelLabel(int channel) = ios 0x53ce0, win inline, imac 0x1e6680, m1 0x19dc40 {
        if (channel > 999) {
            m_selectedColorLabel->setString(GJSpecialColorSelect::textForColorIdx(channel));
        }
        else if (channel > 0) {
            // Technically not identical to RobTop impl which uses `CCString::createWithFormat`
            m_selectedColorLabel->setString(std::to_string(channel).c_str());
        }
        else {
            m_selectedColorLabel->setString(" ");
        }
    }
    void updateColorSprite() = ios 0x53c10, win 0xa7e20, imac 0x1e65b0, m1 0x19db70;
    void updateCurrentSelection();
    void updateCustomColorLabels() = ios 0x535ac, win 0xa9490, imac 0x1e5c10, m1 0x19d228;
    void updateHSVButtons() = win 0xa8270, imac 0x1e58e0, m1 0x19cf30, ios 0x53348;
    void updateKerningLabel() = win 0xa7600, m1 0x19d4a8, imac 0x1e5ec0, ios 0x53720;
    void updateSelected(int) = ios 0x53f4c, win 0xa9660, imac 0x1e6b70, m1 0x19e070;

    GameObject* m_targetObject;
    cocos2d::CCArray* m_targetObjects;
    cocos2d::CCArray* m_colorButtons;
    cocos2d::CCArray* m_colorTabNodes;
    cocos2d::CCArray* m_textTabNodes;
    cocos2d::CCArray* m_unkArray;
    cocos2d::CCArray* m_detailTabNodes;
    int m_selectedMode;
    int m_customColorChannel;
    bool m_unk0x200;
    bool m_unk0x201;
    bool m_glowDisabled;
    CCMenuItemSpriteExtra* m_baseButton;
    CCMenuItemSpriteExtra* m_detailButton;
    CCMenuItemSpriteExtra* m_textButton;
    CCMenuItemSpriteExtra* m_baseColorHSV;
    CCMenuItemSpriteExtra* m_detailColorHSV;
    cocos2d::CCLabelBMFont* m_titleLabel;
    cocos2d::CCLabelBMFont* m_selectedColorLabel;
    CCTextInputNode* m_customColorInput;
    CCTextInputNode* m_textInput;
    int m_kerningAmount;
    cocos2d::CCLabelBMFont* m_kerningLabel;
    Slider* m_kerningSlider;
    ButtonSprite* m_customColorButtonSprite;
    CCMenuItemSpriteExtra* m_customColorButton;
    CCMenuItemSpriteExtra* m_arrowDown;
    CCMenuItemSpriteExtra* m_arrowUp;
    cocos2d::extension::CCScale9Sprite* m_customColorInputBG;
    ColorChannelSprite* m_colorSprite;
    CCMenuItemSpriteExtra* m_colorSpriteButton;
    CCMenuItemSpriteExtra* m_liveSelectButton;
    bool m_showTextInput;
    bool m_customColorSelected;
    bool m_disableTextDelegate;
}

[[link(android)]]
class CustomizeObjectSettingsPopup : SetupTriggerPopup {
    // virtual ~CustomizeObjectSettingsPopup();
    CustomizeObjectSettingsPopup() = win inline {
        m_customizeLayer = nullptr;
        m_settingsChanged = false;
    }

    static CustomizeObjectSettingsPopup* create(GameObject*, cocos2d::CCArray*, CustomizeObjectLayer*) = win inline {
        auto ret = new CustomizeObjectSettingsPopup();
        if (ret->init(p0, p1, p2)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void onClose(cocos2d::CCObject* sender) = win 0xa9e50, imac 0x1e7d20, m1 0x19f0d4, ios 0x54abc;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0xa9da0, imac 0x1e7cb0, m1 0x19f054, ios 0x54a3c;

    bool init(GameObject*, cocos2d::CCArray*, CustomizeObjectLayer*) = win 0xa99f0, m1 0x19ec84, imac 0x1e7880;
    
    CustomizeObjectLayer* m_customizeLayer;
    bool m_settingsChanged;
}

[[link(android)]]
class CustomListView : BoomListView {
    CustomListView() {
        m_cellMode = 0;
    }

    static CustomListView* create(cocos2d::CCArray*, TableViewCellDelegate*, float, float, int, BoomListType, float) = ios 0x10364c, win 0xaa010, imac 0x22eb50, m1 0x1df724;

    static CustomListView* create(cocos2d::CCArray* entries, BoomListType type, float width, float height) {
        return CustomListView::create(entries, nullptr, width, height, 0, type, 0.0f);
    }

    virtual void setupList(float) = win 0xab5c0, imac 0x23b7f0, m1 0x1eb7bc, ios 0x10e1ec;
    virtual TableViewCell* getListCell(char const*) = win 0xaa140, imac 0x22ec90, m1 0x1df834, ios 0x10375c;
    virtual void loadCell(TableViewCell*, int) = win 0xaaf00, imac 0x230830, m1 0x1e0870, ios 0x103ec4;

    static float getCellHeight(BoomListType) = ios 0x103e9c, imac 0x22fd60, m1 0x1e01b0, win 0xaadf0;
    void reloadAll() = ios 0x10e7b0, win 0xabc90, imac 0x23bfe0, m1 0x1ebe10;

    int m_cellMode;
}

[[link(android)]]
class CustomMusicCell : CustomSongCell {
    // virtual ~CustomMusicCell();
    CustomMusicCell(char const*, float, float);

    void loadFromObject(SongInfoObject*) = ios 0x10544c, win 0xb46f0, imac 0x2325a0, m1 0x1e2548;
    void updateBGColor(int);
}

[[link(android)]]
class CustomSFXCell : TableViewCell, CustomSFXDelegate {
    // virtual ~CustomSFXCell();
    CustomSFXCell(char const*, float, float) = win 0xb4380;

    virtual bool init() = win 0xb4410, imac 0x2421a0, m1 0x1f17e8, ios 0x11316c;
    virtual void draw() = win 0xad710, imac 0x2422a0, m1 0x1f188c, ios 0x113210;
    virtual void sfxObjectSelected(SFXInfoObject*) = win 0xb4520, imac 0x2421c0, m1 0x1f17f8, ios 0x11317c;
    virtual int getActiveSFXID() = win 0xb4110, m1 0x1f1854, imac 0x242240, ios 0x1131d8;

    void loadFromObject(SFXInfoObject*) = win 0xb4430;
    bool shouldReload();
    void updateBGColor(int) = win 0xb4560;

    SFXInfoObject* m_sfxObject;
    bool m_selected;
    bool m_compactMode;
}

[[link(android)]]
class CustomSFXDelegate {
    virtual void sfxObjectSelected(SFXInfoObject*) {}
    virtual int getActiveSFXID() { return 0; }
    virtual bool overridePlaySFX(SFXInfoObject*) { return false; }
}

[[link(android)]]
class CustomSFXWidget : cocos2d::CCNode, MusicDownloadDelegate, FLAlertLayerProtocol {
    // virtual ~CustomSFXWidget();

    static CustomSFXWidget* create(SFXInfoObject*, CustomSFXDelegate*, bool, bool, bool, bool, bool) = win 0xbf920, m1 0x4fee38, imac 0x5ca6b0, ios 0x2ef85c;

    virtual void downloadSFXFinished(int) = win 0xc18e0, m1 0x500fac, imac 0x5cc910, ios 0x2f13bc;
    virtual void downloadSFXFailed(int, GJSongError) = win 0xc1960, imac 0x5cc9b0, m1 0x50104c, ios 0x2f1414;
    virtual void songStateChanged() = win 0xc1230, imac 0x5cc8a0, m1 0x500f84, ios 0x2f13a8;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xc1a60, imac 0x5ccb90, m1 0x50125c, ios 0x2f1554;

    void deleteSFX() = m1 0x500ad8, imac 0x5cc3f0;
    void downloadFailed();
    void hideLoadingArt() = win 0xc0bf0;
    bool init(SFXInfoObject*, CustomSFXDelegate*, bool, bool, bool, bool, bool) = win 0xbfa60, imac 0x5ca7d0, m1 0x4fef30, ios 0x2ef954;
    void onCancelDownload(cocos2d::CCObject* sender) = win 0xc0c80, m1 0x4fff30, imac 0x5cb850, ios 0x2f070c;
    void onDelete(cocos2d::CCObject* sender) = win 0xc0950, m1 0x4fff6c, imac 0x5cb890, ios 0x2f0748;
    void onDownload(cocos2d::CCObject* sender) = win 0xc0d10, m1 0x4ffdec, imac 0x5cb6f0, ios 0x2f0658;
    void onPlayback(cocos2d::CCObject* sender) = win 0xc0ee0, m1 0x50006c, imac 0x5cb9a0, ios 0x2f0824;
    void onSelect(cocos2d::CCObject* sender) = win 0xc0ec0, m1 0x50004c, imac 0x5cb970, ios 0x2f0804;
    void showLoadingArt() = win 0xc0a90;
    void startDownload();
    void startMonitorDownload() = win 0xc0e10;
    void updateDownloadProgress(float) = win 0xc1100;
    void updateError(GJSongError) = m1 0x50115c, imac 0x5ccaa0;
    void updateLengthMod(float mod) = win inline {
        m_lengthMod = mod;
        this->updateSFXInfo();
    }
    void updatePlaybackBtn() {}
    void updateProgressBar(int) = win 0xc11b0;
    void updateSFXInfo() = win 0xc1240, imac 0x5cbcc0, m1 0x5003a4;
    void updateSFXObject(SFXInfoObject* object) = win inline {
        m_errorLabel->setVisible(false);
        if (m_sfxObject != object) {
            CC_SAFE_RETAIN(object);
            CC_SAFE_RELEASE(m_sfxObject);
            m_sfxObject = object;
        }
        if (m_sfxObject) m_sfxID = m_sfxObject->m_sfxID;
        else m_sfxID = 0;
        this->updateSFXInfo();
    }
    bool verifySFXID(int id) = win inline {
        return m_sfxID == id && m_sfxID != 0;
    }

    SFXInfoObject* m_sfxObject;
    cocos2d::CCMenu* m_buttonMenu;
    cocos2d::CCLabelBMFont* m_titleLabel;
    cocos2d::CCLabelBMFont* m_idLabel;
    cocos2d::CCLabelBMFont* m_errorLabel;
    CCMenuItemSpriteExtra* m_downloadButton;
    CCMenuItemSpriteExtra* m_cancelButton;
    CCMenuItemSpriteExtra* m_selectButton;
    CCMenuItemSpriteExtra* m_playButton;
    CCMenuItemSpriteExtra* m_deleteButton;
    cocos2d::CCSprite* m_progressOutlineSprite;
    cocos2d::CCSprite* m_progressBarSprite;
    cocos2d::CCSprite* m_clockSprite;
    CustomSFXDelegate* m_delegate;
    bool m_showDelete;
    bool m_showPlay;
    bool m_showDownload;
    bool m_showCancel;
    bool m_compactMode;
    int m_sfxID;
    float m_lengthMod;
}

[[link(android)]]
class CustomSongCell : TableViewCell, CustomSongDelegate {
    // virtual ~CustomSongCell();
    CustomSongCell(char const*, float, float) = win 0xb3e80;

    virtual bool init() = win 0xb3f00, m1 0x1f152c, imac 0x241da0, ios 0x112efc;
    virtual void draw() = win 0xad710, imac 0x241fb0, m1 0x1f16b0, ios 0x113088;
    virtual void songIDChanged(int) = win 0xb40d0, imac 0x241e90, m1 0x1f15f4, ios 0x112fc4;
    virtual int getActiveSongID() = win 0xb4110, m1 0x1f1650, imac 0x241f10, ios 0x113020;
    virtual gd::string getSongFileName() = win 0xb4130, m1 0x1f1688, imac 0x241f70, ios 0x113058;
    virtual LevelSettingsObject* getLevelSettings() = m1 0x1f16a0, imac 0x241f90, ios 0x113078 { return nullptr; }

    void loadFromObject(SongInfoObject*) = ios 0x105228, win 0xb3f10, imac 0x2323a0, m1 0x1e2320;
    void onDelete(cocos2d::CCObject* sender) = win 0xb4160;
    TodoReturn shouldReload();
    void updateBGColor(int index) = win inline, m1 0x1e24c8, imac 0x232540, ios 0x1053cc {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 50, 50, 50 } : cocos2d::ccColor3B { 75, 75, 75 });
        m_backgroundLayer->setOpacity(255);
    }

    SongInfoObject* m_songInfoObject;
    bool m_selected;
}

[[link(android)]]
class CustomSongDelegate {
    virtual void songIDChanged(int) {}
    virtual int getActiveSongID() { return 0; }
    virtual gd::string getSongFileName() { return ""; }
    virtual LevelSettingsObject* getLevelSettings() { return nullptr; }
}

[[link(android)]]
class CustomSongLayer : FLAlertLayer, TextInputDelegate, GJDropDownLayerDelegate, MusicBrowserDelegate {
    // virtual ~CustomSongLayer();
    CustomSongLayer() {
        m_songDelegate = nullptr;
        m_songIDInput = nullptr;
        m_delegate = nullptr;
    }

    static CustomSongLayer* create(CustomSongDelegate* delegate) = ios 0x14703c, win inline, m1 0x1b82a4, imac 0x202fb0 {
        auto ret = new CustomSongLayer();
        if (ret->init(delegate)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0xc3760, m1 0x1b9a48, imac 0x2048b0, ios 0x1483d8;
    virtual void show() = win 0xc3770, imac 0x2049a0, m1 0x1b9b34, ios 0x1483e4;
    virtual void textChanged(CCTextInputNode*) = win 0xc3110, m1 0x1b9518, imac 0x204340, ios 0x1480ac;
    virtual void textInputOpened(CCTextInputNode*) = win 0xc3060, imac 0x2042e0, m1 0x1b9498, ios 0x148074;
    virtual void textInputClosed(CCTextInputNode*) = win 0xc3060, imac 0x204280, m1 0x1b9418, ios 0x14803c;
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, imac 0x204360, m1 0x1b9538, ios 0x1480cc;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, imac 0x204420, m1 0x1b9608, ios 0x148138;
    virtual void dropDownLayerWillClose(GJDropDownLayer*) = win 0xc34f0, m1 0x1b98b8, imac 0x204750, ios 0x148300;
    virtual void musicBrowserClosed(MusicBrowser*) = win 0xc35c0, m1 0x1b9980, imac 0x204800, ios 0x14836c;

    bool init(CustomSongDelegate*) = ios 0x147110, win 0xc1f00, m1 0x1b83c0, imac 0x203120;
    void onClose(cocos2d::CCObject* sender) = win 0xc3690;
    void onCreateLines(cocos2d::CCObject* sender);
    void onMusicBrowser(cocos2d::CCObject* sender) = win 0xc31a0, imac 0x203e50, m1 0x1b902c;
    void onNCSBrowser(cocos2d::CCObject* sender) = m1 0x1b9010, imac 0x203e30;
    void onNewgroundsBrowser(cocos2d::CCObject* sender) = win 0xc3300;
    void onOptions(cocos2d::CCObject* sender) = win 0xc2b80, imac 0x203f00, m1 0x1b90cc, ios 0x147de8;
    void onSearch(cocos2d::CCObject* sender) = win 0xc2c80, m1 0x1b90ec, imac 0x203f20;
    void onSongBrowser(cocos2d::CCObject* sender) = ios 0x147cc8, win 0xc3120, m1 0x1b8fac, imac 0x203dd0;
    void showNewgroundsMessage() = m1 0x1b9264, imac 0x204090;

    CustomSongDelegate* m_songDelegate;
    CCTextInputNode* m_songIDInput;
    CustomSongWidget* m_songWidget;
    CustomSongLayerDelegate* m_delegate;
}

[[link(android)]]
class CustomSongLayerDelegate {
    virtual void customSongLayerClosed() {}
}

[[link(android), depends(GJAssetDownloadAction)]]
class CustomSongWidget : cocos2d::CCNode, MusicDownloadDelegate, FLAlertLayerProtocol {
    CustomSongWidget() = ios 0x101734 {
        m_songInfoObject = nullptr;
        m_songLabel = nullptr;
        m_artistLabel = nullptr;
        m_songIDLabel = nullptr;
        m_downloadBtn = nullptr;
        m_selectSongBtn = nullptr;
        m_playbackBtn = nullptr;
        m_deleteBtn = nullptr;
        m_sliderGroove = nullptr;
        m_sliderBar = nullptr;
        m_ncsLogo = nullptr;
        m_bgSpr = nullptr;
        m_songDelegate = nullptr;
        m_showSelectSongBtn = false;
        m_showPlayMusicBtn = false;
        m_showDownloadBtn = false;
        m_isNotDownloading = false;
        m_isRobtopSong = false;
        m_isMusicLibrary = false;
        m_customSongID = 0;
        m_lengthMod = 0.f;
        m_isInCell = false;
        m_playbackDelegate = nullptr;
        m_hasLibrarySongs = false;
        m_hasSFX = false;
        m_unkBool2 = false;
        m_totalBytes = 0;
        m_nextSongID = 0;
    }
    ~CustomSongWidget() = win inline, m1 0x5309a0, imac 0x602fb0, ios 0xfc894 {
        MusicDownloadManager::sharedState()->removeMusicDownloadDelegate(this);
        CC_SAFE_RELEASE(m_songInfoObject);
    }

    static CustomSongWidget* create(SongInfoObject* songInfo, CustomSongDelegate* songDelegate, bool showSongSelect, bool showPlayMusic, bool showDownload, bool isRobtopSong, bool unkBool, bool isMusicLibrary, int unk) = win 0xc74f0, imac 0x603090, m1 0x530a34, ios 0xfc928;

    virtual void loadSongInfoFinished(SongInfoObject*) = win 0xcbd40, imac 0x608a80, m1 0x535d24, ios 0x100f84;
    virtual void loadSongInfoFailed(int, GJSongError) = win 0xcbe90, imac 0x608c60, m1 0x535ed0, ios 0x101050;
    virtual void downloadSongFinished(int) = win 0xcbf20, imac 0x608eb0, m1 0x536144, ios 0x1011d0;
    virtual void downloadSongFailed(int, GJSongError) = win 0xcbfe0, imac 0x609190, m1 0x536414, ios 0x101394;
    virtual void downloadSFXFinished(int) = win 0xcc060, imac 0x609320, m1 0x536580, ios 0x101480;
    virtual void downloadSFXFailed(int, GJSongError) = win 0xcc080, imac 0x609350, m1 0x536594, ios 0x101494;
    virtual void musicActionFinished(GJMusicAction) = win 0xcc5c0, imac 0x609650, m1 0x53685c, ios 0x101664;
    virtual void musicActionFailed(GJMusicAction) = win 0xcc5f0, m1 0x53689c, imac 0x6096b0, ios 0x1016a4;
    virtual void songStateChanged() = win 0xca5d0, imac 0x607bd0, m1 0x534fcc, ios 0x10057c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xcc960, imac 0x609750, m1 0x536938, ios 0x1016b0;
    void addExtraVisuals(bool, bool) = m1 0x5344f0, imac 0x607020;

    void deleteSong() = ios 0xffe0c, win 0xc9160, m1 0x534634, imac 0x607140;
    void downloadAssetFailed(int, GJAssetType, GJSongError) = win 0xcc4a0;
    void downloadAssetFinished(int, GJAssetType) = win 0xcc3e0, imac 0x608f70, m1 0x53620c;
    void downloadFailed() = imac 0x608e20, m1 0x5360a4;
    void getSongInfoIfUnloaded() = win 0xc9af0, imac 0x6074c0, m1 0x534978, ios 0x100140;
    bool init(SongInfoObject* songInfo, CustomSongDelegate* songDelegate, bool showSongSelect, bool showPlayMusic, bool showDownload, bool isRobtopSong, bool unkBool, bool isMusicLibrary, int unk) = ios 0xfca04, win 0xc7700, m1 0x530b8c, imac 0x603240;
    void onCancelDownload(cocos2d::CCObject* sender) = win 0xc9bb0, m1 0x531e7c, imac 0x604640, ios 0xfdb70;
    void onDelete(cocos2d::CCObject* sender) = ios 0xfdbac, win 0xc9040, m1 0x531eb8, imac 0x604680;
    void onDownload(cocos2d::CCObject* sender) = ios 0xfd9c0, win 0xc9cd0, imac 0x6043b0, m1 0x531c24;
    void onGetSongInfo(cocos2d::CCObject* sender) = win 0xc9c40, imac 0x6047c0, m1 0x531ff4, ios 0xfdcc4;
    void onInfo(cocos2d::CCObject* sender) = ios 0xfe5e8, win 0xc8d50, m1 0x532aec, imac 0x605410;
    void onMore(cocos2d::CCObject* sender) = win 0xc9360, m1 0x532324, imac 0x604af0, ios 0xfdf48;
    void onPlayback(cocos2d::CCObject* sender) = win 0xc9fd0, imac 0x604850, m1 0x532088, ios 0xfdd58;
    void onSelect(cocos2d::CCObject* sender) = win 0xc9f70, imac 0x604760, m1 0x531f98, ios 0xfdc68;
    void positionInfoObjects() = win 0xc88c0, m1 0x532fec, imac 0x6059f0, ios 0xfe8c8;
    void processNextMultiAsset() = win 0xcc240, imac 0x6094a0, m1 0x536698, ios 0x1014a8;
    void showError(bool) = win 0xcc710, m1 0x53476c, imac 0x607280, ios 0xfff40;
    void startDownload() = win 0xc9eb0;
    TodoReturn startMonitorDownload();
    void startMultiAssetDownload() = win 0xcc0a0, m1 0x534ad8, imac 0x607610, ios 0x1001cc;
    TodoReturn toggleUpdateButton(bool);
    void updateDownloadProgress(float) = win 0xca4a0, imac 0x607ab0, m1 0x534ebc;
    void updateError(GJSongError) = win 0xcc640, imac 0x608cf0, m1 0x535f6c;
    void updateLengthMod(float lengthMod) = win inline, imac 0x607c20, m1 0x535018 {
        this->m_lengthMod = lengthMod;
        this->updateSongInfo();
    }
    void updateMultiAssetInfo(bool) = ios 0x100a6c, win 0xcb760, imac 0x608410, m1 0x535734;
    void updatePlaybackBtn() = win 0xca3b0, imac 0x606f50, m1 0x534418;
    void updateProgressBar(int) = win 0xca550;
    void updateSongInfo() = ios 0xfee04, win 0xca600, m1 0x533504, imac 0x605f20;
    void updateSongObject(SongInfoObject* songInfo) = win inline, m1 0x533468, imac 0x605e90, ios 0xfed98 {
        m_errorLabel->setVisible(false);
        if (m_bgSpr) m_bgSpr->setVisible(false);
        if (m_songInfoObject != songInfo) {
            CC_SAFE_RETAIN(songInfo);
            CC_SAFE_RELEASE(m_songInfoObject);
            m_songInfoObject = songInfo;
        }
        m_customSongID = songInfo ? songInfo->m_songID : 0;
        this->updateSongInfo();
    }
    void updateWithMultiAssets(gd::string songList, gd::string sfxList, int) = win 0xcb410, m1 0x535020, imac 0x607c40, ios 0x1005d0;
    TodoReturn verifySongID(int);

    SongInfoObject* m_songInfoObject;
    cocos2d::CCMenu* m_buttonMenu;
    cocos2d::CCLabelBMFont* m_songLabel;
    cocos2d::CCLabelBMFont* m_artistLabel;
    cocos2d::CCLabelBMFont* m_songIDLabel;
    cocos2d::CCLabelBMFont* m_errorLabel;
    CCMenuItemSpriteExtra* m_downloadBtn;
    CCMenuItemSpriteExtra* m_cancelDownloadBtn;
    CCMenuItemSpriteExtra* m_selectSongBtn;
    CCMenuItemSpriteExtra* m_getSongInfoBtn;
    CCMenuItemSpriteExtra* m_playbackBtn;
    CCMenuItemSpriteExtra* m_moreBtn;
    CCMenuItemSpriteExtra* m_deleteBtn;
    CCMenuItemSpriteExtra* m_infoBtn;
    cocos2d::CCSprite* m_sliderGroove;
    cocos2d::CCSprite* m_sliderBar;
    cocos2d::CCSprite* m_ncsLogo;
    cocos2d::extension::CCScale9Sprite* m_bgSpr;
    CustomSongDelegate* m_songDelegate;
    bool m_showSelectSongBtn;
    bool m_showPlayMusicBtn;
    bool m_showDownloadBtn;
    bool m_isNotDownloading;
    bool m_isRobtopSong;
    bool m_isMusicLibrary;
    int m_customSongID;
    float m_lengthMod;
    bool m_isInCell;
    SongPlaybackDelegate* m_playbackDelegate;
    bool m_hasLibrarySongs;
    bool m_hasSFX;
    bool m_unkBool2;
    gd::map<int, bool> m_songs;
    gd::map<int, bool> m_sfx;
    gd::vector<GJAssetDownloadAction> m_undownloadedAssets;
    int m_totalBytes;
    int m_nextSongID;
}

[[link(android)]]
class DailyLevelNode : cocos2d::CCNode, FLAlertLayerProtocol {
    DailyLevelNode() = ios 0x1bdb20 {
        m_level = nullptr;
        m_page = nullptr;
        m_timeLabel = nullptr;
        m_unkBool = false;
        m_needsDownloading = false;
    }
    ~DailyLevelNode() = win inline, m1 0x1d376c, imac 0x220850, ios 0x1bcd28 {
        cocos2d::CCDirector::sharedDirector()->getTouchDispatcher()->unregisterForcePrio(this);
        CC_SAFE_RELEASE(m_level);
    }

    static DailyLevelNode* create(GJGameLevel*, DailyLevelPage*, bool) = win inline, imac 0x2201c0, m1 0x1d30c0, ios 0x1bc7c8 {
        auto ret = new DailyLevelNode();
        if (ret->init(p0, p1, p2)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xd1c30, imac 0x2216d0, m1 0x1d4660, ios 0x1bda58;

    bool init(GJGameLevel*, DailyLevelPage*, bool) = ios 0x1bcd9c, win 0xd0c90, imac 0x2209a0, m1 0x1d3884;
    void onClaimReward(cocos2d::CCObject* sender) = win 0xd18f0, imac 0x221400, m1 0x1d4358, ios 0x1bd830;
    void onSkipLevel(cocos2d::CCObject* sender) = win 0xd1a10, m1 0x1d4470, imac 0x221500, ios 0x1bd928;
    void showSkipButton() = win 0xd1890;
    void updateTimeLabel(gd::string);

    GJGameLevel* m_level;
    DailyLevelPage* m_page;
    cocos2d::CCLabelBMFont* m_timeLabel;
    cocos2d::CCPoint m_unkPoint;
    CCMenuItemSpriteExtra* m_skipButton;
    bool m_unkBool;
    bool m_needsDownloading;
}

[[link(android)]]
class DailyLevelPage : FLAlertLayer, FLAlertLayerProtocol, GJDailyLevelDelegate, LevelDownloadDelegate {
    // virtual ~DailyLevelPage();
    //DailyLevelPage() = ios 0x1c66c0;

    static DailyLevelPage* create(GJTimedLevelType) = ios 0x1baec4, win 0xccfd0, m1 0x1d0d8c, imac 0x21e2b0;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x1d3438, imac 0x220540, ios 0x1bca50;
    virtual void keyBackClicked() = win 0x86980, imac 0x2204b0, m1 0x1d339c, ios 0x1bca44;
    virtual void show() = win 0x867a0, m1 0x1d3210, imac 0x220310, ios 0x1bc8c8;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = m1 0x1d3394, imac 0x220490, ios 0x1bca3c {}
    virtual void dailyStatusFinished(GJTimedLevelType) = win 0xce560, imac 0x21f9a0, m1 0x1d28e4, ios 0x1bc164;
    virtual void dailyStatusFailed(GJTimedLevelType, GJErrorCode) = win 0xce860, imac 0x21fde0, m1 0x1d2cd0, ios 0x1bc4a8;
    virtual void levelDownloadFinished(GJGameLevel*) = win 0xceb90, imac 0x220030, m1 0x1d2f0c, ios 0x1bc67c;
    virtual void levelDownloadFailed(int) = win 0xcebf0, imac 0x2200f0, m1 0x1d2fec, ios 0x1bc6f4;

    void claimLevelReward(DailyLevelNode*, GJGameLevel*, cocos2d::CCPoint) = win 0xd06b0, m1 0x1d3470, imac 0x220580;
    void createDailyNode(GJGameLevel*, bool, float, bool) = win 0xcee40, imac 0x21f7b0, m1 0x1d2700, ios 0x1bbfc4;
    void createNodeIfLoaded() = win 0xced50, m1 0x1d302c, imac 0x220130, ios 0x1bc734;
    void downloadAndCreateNode() = win 0xceca0, m1 0x1d2bec, imac 0x21fce0, ios 0x1bc3c4;
    void exitDailyNode(DailyLevelNode*, float) = ios 0x1bc310, imac 0x21fc20, m1 0x1d2b34, win 0xcf130;
    int getDailyTime() = m1 0x1d3198, imac 0x2202a0;
    gd::string getDailyTimeString(int timeLeft) = win 0xcf200, imac 0x21f120, m1 0x1d1e6c, ios 0x1bbb24;
    bool init(GJTimedLevelType) = ios 0x1baf38, win 0xcd110, imac 0x21e440, m1 0x1d0ebc;
    void onClose(cocos2d::CCObject* sender) = win 0x86940, imac 0x21f070, m1 0x1d1db4, ios 0x1bba6c;
    void onTheSafe(cocos2d::CCObject* sender) = win 0xd0bb0, m1 0x1d1e00, imac 0x21f0b0, ios 0x1bbab8;
    void refreshDailyPage();
    void skipDailyLevel(DailyLevelNode*, GJGameLevel*) = win 0xd0980, m1 0x1d3620, imac 0x220700, ios 0x1bcbdc;
    void tryGetDailyStatus() = win 0xcec10;
    callback void updateTimers(float) = ios 0x1bbe2c, win 0xd0360, imac 0x21f570, m1 0x1d24a8;

    cocos2d::CCLabelBMFont* m_timeLabel;
    LoadingCircle* m_timeCircle;
    LoadingCircle* m_nodeCircle;
    bool m_gettingDailyStatus;
    DailyLevelNode* m_dailyNode;
    bool m_downloadStarted;
    GJTimedLevelType m_type;
    int m_downloadLevelID;
}

[[link(android)]]
class DashRingObject : RingObject {
    // virtual ~DashRingObject();

    DashRingObject() {
        m_dashSpeed = 1.f;
        m_endBoost = 1.f;
        m_maxDuration = 0.f;
        m_allowCollide = false;
        m_stopSlide = false;
    }

    static DashRingObject* create(char const*);

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x489db0, imac 0x1a4340, m1 0x166864, ios 0x37bacc;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x489ff0, imac 0x1a44b0, m1 0x1669bc, ios 0x37bc10;

    bool init(char const*);

    // property 586
    float m_dashSpeed;
    // property 588
    float m_endBoost;
    // property 590
    float m_maxDuration;
    // property 587
    bool m_allowCollide;
    // property 589
    bool m_stopSlide;
}

[[link(android)]]
class DelayedSpawnNode {
    EffectGameObject* m_gameObject;
    float m_spawnDelay;
}

[[link(android)]]
class DemonFilterDelegate {
    virtual void demonFilterSelectClosed(int) {}
}

[[link(android)]]
class DemonFilterSelectLayer : FLAlertLayer {
    DemonFilterSelectLayer() {
        m_demons = nullptr;
        m_unkPtr = nullptr;
        m_currentDemon = 0;
        m_delegate = nullptr;
    }
    ~DemonFilterSelectLayer() = win inline, m1 0x5447c4, imac 0x618820, ios 0x5a8c4 {
        CC_SAFE_RELEASE(m_demons);
    }

    static DemonFilterSelectLayer* create() = win inline {
        auto ret = new DemonFilterSelectLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x302da0, imac 0x618b50, m1 0x5449e8, ios 0x5a968;
    virtual void keyBackClicked() = win 0x3034f0, m1 0x544fc8, imac 0x619140, ios 0x5aebc;

    void onClose(cocos2d::CCObject* sender) = win 0x3034a0;
    void selectRating(cocos2d::CCObject* sender) = win 0x3033e0, m1 0x544ea0, imac 0x619030, ios 0x5ad94;

    cocos2d::CCArray* m_demons;
    void* m_unkPtr;
    int m_currentDemon;
    DemonFilterDelegate* m_delegate;
}

[[link(android)]]
class DemonInfoPopup : FLAlertLayer {
    // ~DemonInfoPopup();

    static DemonInfoPopup* create(int easyClassic, int mediumClassic, int hardClassic, int insaneClassic, int extremeClassic, int easyPlatformer, int mediumPlatformer, int hardPlatformer, int insanePlatformer, int extremePlatformer, int weekly, int gauntlet) = win 0x3afc90, imac 0x7aba80, m1 0x6bd1f0, ios 0x1a0188;
    static DemonInfoPopup* createFromString(gd::string str) = win 0x3af8c0, imac 0x7a9640, m1 0x6baf10, ios 0x19ec08;

    virtual void keyBackClicked() = win 0x84650, m1 0x6bdcdc, imac 0x7ac5b0, ios 0x1a0b9c;

    bool init(int easyClassic, int mediumClassic, int hardClassic, int insaneClassic, int extremeClassic, int easyPlatformer, int mediumPlatformer, int hardPlatformer, int insanePlatformer, int extremePlatformer, int weekly, int gauntlet) = ios 0x1a02a8, win 0x3afdf0, imac 0x7abc10, m1 0x6bd34c;
    void onClose(cocos2d::CCObject* sender) = win 0x84620, m1 0x6bdca0, imac 0x7ac580, ios 0x1a0b60;
}

[[link(android)]]
class DialogDelegate {
    virtual void dialogClosed(DialogLayer*) {}
}

[[link(android)]]
class DialogLayer : cocos2d::CCLayerColor, TextAreaDelegate {
    // virtual ~DialogLayer();

    static DialogLayer* create(DialogObject* object, int background) = win inline, m1 0x33f91c, imac 0x3b4270, ios 0x8a89c {
        return DialogLayer::createDialogLayer(object, nullptr, background);
    }
    static DialogLayer* createDialogLayer(DialogObject* object, cocos2d::CCArray* objects, int background) = win 0xd1f60, imac 0x3b4280, m1 0x33f928, ios 0x8a8a8;
    static DialogLayer* createWithObjects(cocos2d::CCArray* objects, int background) = ios 0x8a934, win inline, imac 0x3b43c0, m1 0x33fa38 {
        return DialogLayer::createDialogLayer(nullptr, objects, background);
    }

    virtual void onEnter() = win 0x52db0, imac 0x3b5410, m1 0x3409f8, ios 0x8b544;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0xd2b60, imac 0x3b52c0, m1 0x3408c4, ios 0x8b428;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x340974, imac 0x3b5360, ios 0x8b4c0 {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0xd2b90, m1 0x34093c, imac 0x3b5320, ios 0x8b488;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0xd2bb0, imac 0x3b5380, m1 0x34097c, ios 0x8b4c8;
    virtual void registerWithTouchDispatcher() = win 0x52d60, imac 0x3b53d0, m1 0x3409c0, ios 0x8b50c;
    virtual void keyBackClicked() = win 0xd2ad0, m1 0x3407a0, imac 0x3b5190, ios 0x8b41c;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0xd2e80, imac 0x3b57b0, m1 0x340d70, ios 0x8b824;
    virtual void fadeInTextFinished(TextArea*) = win 0xd2bd0, m1 0x3409fc, imac 0x3b5420, ios 0x8b548;

    void addToMainScene() = win 0xd2a70, m1 0x340748, imac 0x3b5140, ios 0x8b3c4;
    void animateIn(DialogAnimationType) = ios 0x8b61c, imac 0x3b5560, m1 0x340b4c;
    void animateInDialog() = m1 0x340d68, imac 0x3b57a0;
    void animateInRandomSide() = ios 0x8b5c4, win 0xd2c40, m1 0x340aec, imac 0x3b5510;
    void displayDialogObject(DialogObject*) = win 0xd2570, m1 0x33ffc8, imac 0x3b4980, ios 0x8add0;
    void displayNextObject() = win 0xd2510, m1 0x33ff28, imac 0x3b48d0, ios 0x8ad70;
    void finishCurrentAnimation() = win inline, imac 0x3b4ff0, m1 0x340620, ios 0x8b2dc {
        m_animating = false;
        if (m_textArea) {
            m_textArea->m_delegate = nullptr;
            m_textArea->stopAllCharacterActions();
            m_textArea->showAll();
        }
        m_navButtonSprite->stopAllActions();
        m_navButtonSprite->setOpacity(255);
        this->updateNavButtonFrame();
    }
    void handleDialogTap() = win 0xd2940, m1 0x3404c4, imac 0x3b4eb0, ios 0x8b214;
    bool init(DialogObject*, cocos2d::CCArray*, int) = win 0xd20b0, imac 0x3b43e0, m1 0x33fa48, ios 0x8a944;
    void onClose() = win 0xd2ae0, m1 0x3406b8, imac 0x3b50b0, ios 0x8b334;
    void updateChatPlacement(DialogChatPlacement placement) = ios 0x8b158, win inline, m1 0x340408, imac 0x3b4de0 {
        auto winSize = cocos2d::CCDirector::sharedDirector()->getWinSize();
            switch (placement) {
                case DialogChatPlacement::Center:
                        m_mainLayer->setPosition({winSize.width * 0.5F, winSize.height * 0.5F});
                        break;
                case DialogChatPlacement::Top:
                        m_mainLayer->setPosition({winSize.width * 0.5F, (winSize.height - 50.F) - 20.F});
                        break;
                case DialogChatPlacement::Bottom:
                        m_mainLayer->setPosition({winSize.width * 0.5F, 70.F});
                        break;
            }
    }
    void updateNavButtonFrame() = win 0xd28c0, m1 0x3403a8, imac 0x3b4d70, ios 0x8b0f8;

    float m_animateTime;
    cocos2d::CCLayer* m_mainLayer;
    cocos2d::CCLabelBMFont* m_characterLabel;
    TextArea* m_textArea;
    cocos2d::CCSprite* m_characterSprite;
    cocos2d::CCArray* m_dialogObjects;
    int m_touchID;
    cocos2d::CCSprite* m_navButtonSprite;
    bool m_animating;
    bool m_skippable;
    DialogDelegate* m_delegate;
    bool m_handleTap;
    DialogAnimationType m_animationType;
    bool m_noRemove;
}

[[link(android)]]
class DialogObject : cocos2d::CCObject {
    // virtual ~DialogObject();
    DialogObject() {
        m_characterFrame = 0;
        m_textScale = 1.f;
        m_skippable = false;
    }

    static DialogObject* create(gd::string character, gd::string text, int characterFrame, float textScale, bool skippable, cocos2d::ccColor3B color) = win 0xd1da0, m1 0x33f4ac, imac 0x3b3d20, ios 0x8a650;

    bool init(gd::string character, gd::string text, int characterFrame, float textScale, bool skippable, cocos2d::ccColor3B color) = win inline, imac 0x3b3eb0, m1 0x33f664 {
        m_character = character;
        m_text = text;
        m_characterFrame = characterFrame;
        m_textScale = textScale;
        m_color = color;
        m_skippable = skippable;
        return true;
    }

    gd::string m_text;
    gd::string m_character;
    int m_characterFrame;
    cocos2d::ccColor3B m_color;
    float m_textScale;
    bool m_skippable;
}

[[link(android)]]
class DownloadMessageDelegate {
    virtual void downloadMessageFinished(GJUserMessage*) {}
    virtual void downloadMessageFailed(int) {}
}

[[link(android)]]
class DrawGridLayer : cocos2d::CCLayer {
    // virtual ~DrawGridLayer();

    static DrawGridLayer* create(cocos2d::CCNode*, LevelEditorLayer*) = win 0x2db1f0, m1 0xc4b04, imac 0xdd0d0, ios 0x3575ac;

    virtual void update(float) = win 0x2db6f0, imac 0xf5c30, m1 0xd9cd8, ios 0x3657b8;
    virtual void draw() = win 0x2db8f0, imac 0xf5dc0, m1 0xd9de8, ios 0x3658c8;

    void addAudioLineObject(AudioLineGuideGameObject*);
    void addToEffects(EffectGameObject*);
    void addToGuides(GameObject*);
    void addToSpeedObjects(EffectGameObject*);
    cocos2d::CCPoint getPortalMinMax(GameObject*);
    bool init(cocos2d::CCNode* parent, LevelEditorLayer* layer) = win inline, m1 0xd9aa0, imac 0xf59b0, ios 0x3655bc {
        if (!cocos2d::CCLayer::init()) return false;
        m_objectLayer = parent;
        m_editorLayer = layer;
        m_timeMarkers = nullptr;
        m_effectGameObjects = cocos2d::CCArray::create();
        m_effectGameObjects->retain();
        m_guideObjects = cocos2d::CCArray::create();
        m_guideObjects->retain();
        m_speedObjects = cocos2d::CCArray::create();
        m_speedObjects->retain();
        m_slowSpeed = 251.16008f;
        m_normalSpeed = 311.5801f;
        m_fastSpeed = 387.42014f;
        m_fasterSpeed = 468.00015f;
        m_fastestSpeed = 576.0002f;
        m_currentSpeed = 311.5801f;
        m_pointArray1 = new std::array<cocos2d::CCPoint, 400>();
        m_pointArray2 = new std::array<cocos2d::CCPoint, 400>();
        m_pointArray3 = new std::array<cocos2d::CCPoint, 400>();
        return true;
    }
    void loadTimeMarkers(gd::string) = win 0x2db3d0, m1 0xc6aa4, imac 0xdf600, ios 0x358dbc;
    cocos2d::CCPoint posForTime(float time) = win inline, m1 0xd449c, imac 0xef340, ios inline {
        return LevelTools::posForTime(time, m_speedObjects, (int)m_editorLayer->m_levelSettings->m_startSpeed, m_editorLayer->m_levelSettings->m_platformerMode, m_editorLayer->m_gameState.m_rotateChannel);
    }
    void postUpdate();
    void removeAudioLineObject(AudioLineGuideGameObject*);
    void removeFromEffects(EffectGameObject*);
    void removeFromGuides(GameObject*);
    void removeFromSpeedObjects(EffectGameObject*);
    void sortSpeedObjects();
    float timeForPos(cocos2d::CCPoint position, int order, int channel, bool songTriggers, bool ignoreWarp, bool ignoreRotate, int id) = win inline, m1 0xd2ce4, imac 0xed530, ios 0x360104 {
        return LevelTools::timeForPos(position, m_speedObjects, (int)m_editorLayer->m_levelSettings->m_startSpeed, order, channel, songTriggers, m_editorLayer->m_levelSettings->m_platformerMode, ignoreWarp, ignoreRotate, id);
    }
    void updateMusicGuideTime(float);
    void updateTimeMarkers();

    std::array<cocos2d::CCPoint, 400>* m_pointArray1;
    std::array<cocos2d::CCPoint, 400>* m_pointArray2;
    std::array<cocos2d::CCPoint, 400>* m_pointArray3;
    gd::unordered_map<int, AudioLineGuideGameObject*> m_audioLineObjects;
    float m_musicTime;
    float m_playbackTime;
    float m_oldPlaybackTime;
    float m_playbackX;
    float m_playbackY;
    bool m_sortEffects;
    LevelEditorLayer* m_editorLayer;
    gd::string m_timeMarkerString;
    cocos2d::CCNode* m_objectLayer;
    cocos2d::CCArray* m_timeMarkers;
    cocos2d::CCArray* m_effectGameObjects;
    cocos2d::CCArray* m_guideObjects;
    cocos2d::CCArray* m_speedObjects;
    double m_unk258;
    float m_currentSpeed;
    float m_slowSpeed;
    float m_normalSpeed;
    float m_fastSpeed;
    float m_fasterSpeed;
    float m_fastestSpeed;
    bool m_updateTimeMarkers;
    bool m_updateSpeedObjects;
    float m_gridSize;
}

[[link(android)]]
class DungeonBarsSprite : cocos2d::CCNode {
    // virtual ~DungeonBarsSprite();
    DungeonBarsSprite() {
        m_barsSprite = nullptr;
    }

    static DungeonBarsSprite* create() = win inline {
        auto ret = new DungeonBarsSprite();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x3d8470, m1 0x401c4c, imac 0x495430, ios 0x3119ac;
    virtual void visit() = win 0x3d84f0, imac 0x4954b0, m1 0x401ccc, ios 0x311a2c;

    void animateOutBars() = win inline {
        auto a1 = cocos2d::CCMoveBy::create(0.08, { -1.5f, 0.0f });
        auto a2 = cocos2d::CCMoveBy::create(0.08, { 1.5f, 0.0f });
        auto a3 = cocos2d::CCMoveBy::create(0.08, { -1.5f, 0.0f });
        auto a4 = cocos2d::CCMoveBy::create(0.08, { 1.5f, 0.0f });
        auto a5 = cocos2d::CCMoveBy::create(0.08, { -1.5f, 0.0f });
        auto a6 = cocos2d::CCMoveBy::create(0.08, { 1.5f, 0.0f });
        auto a7 = cocos2d::CCMoveBy::create(2.5, { 0.0f, -130.0f });

        auto seq = cocos2d::CCSequence::create(
            a1, a2, a3, a4, a5, a6,
            cocos2d::CCEaseElasticIn::create(a7, 1.6f),
            nullptr
        );
        this->m_barsSprite->runAction(seq);
    }

    cocos2d::CCSprite* m_barsSprite;
}

[[link(android)]]
class DynamicBitset {
    void resize(size_t) = win 0x38deb0;

    gd::vector<unsigned int> m_bits;
}

[[link(android)]]
class DynamicScrollDelegate {
    virtual void updatePageWithObject(cocos2d::CCObject* p0, cocos2d::CCObject* p1) {}
}

[[link(android)]]
class EditButtonBar : cocos2d::CCNode {
    // virtual ~EditButtonBar();

    static EditButtonBar* create(cocos2d::CCArray* objects, cocos2d::CCPoint size, int tab, bool hasCreateItems, int columns, int rows) = ios 0x418b98, win 0xd2f40, imac 0x5c99e0, m1 0x4fe2c0;

    int getPage();
    void goToPage(int);
    bool init(cocos2d::CCArray* objects, cocos2d::CCPoint position, int tab, bool hasCreateItems, int columns, int rows) = imac 0x5c9ad0, m1 0x4fe3bc;
    void loadFromItems(cocos2d::CCArray*, int, int, bool) = ios 0x418d0c, win 0xd30a0, imac 0x5c9b80, m1 0x4fe468;
    void onLeft(cocos2d::CCObject* sender) = ios 0x419330, win 0xd3a90, m1 0x4fea94, imac 0x5ca250;
    void onRight(cocos2d::CCObject* sender) = ios 0x419340, win 0xd3a20, m1 0x4feadc, imac 0x5ca2a0;
    void reloadItems(int rowCount, int columnCount) = ios 0x419234, win inline, imac 0x5ca140, m1 0x4fe998 {
        if (m_buttonArray) this->loadFromItems(m_buttonArray, rowCount, columnCount, false);
    }

    cocos2d::CCPoint m_position;
    int m_tabIndex;
    bool m_hasCreateItems;
    cocos2d::CCArray* m_buttonArray;
    BoomScrollLayer* m_scrollLayer;
    cocos2d::CCArray* m_pagesArray;
}

[[link(android)]]
class EditGameObjectPopup : SetupTriggerPopup {
    // virtual ~EditGameObjectPopup();

    static EditGameObjectPopup* create(EffectGameObject*, cocos2d::CCArray*, bool);

    bool init(EffectGameObject*, cocos2d::CCArray*, bool) = win 0x2938e0, m1 0x23facc, imac 0x297b50;
}

[[link(android)]]
class EditLevelLayer : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate, SetIDPopupDelegate {
    EditLevelLayer() {
        m_buttonMenu = nullptr;
        m_level = nullptr;
        m_textInputs = nullptr;
        m_folderLabel = nullptr;
        m_exiting = false;
        m_levelType = GJLevelType::Default;
        m_descriptionPopup = nullptr;
    }
    ~EditLevelLayer() = win inline, m1 0x19f664, imac 0x1e8350, ios 0xebcb8 {
        CC_SAFE_RELEASE(m_textInputs);
        CC_SAFE_RELEASE(m_level);
        CC_SAFE_RELEASE(m_descriptionPopup);
        auto glm = GameLevelManager::sharedState();
        if (glm->m_uploadActionDelegate == this) glm->m_uploadActionDelegate = nullptr;
    }

    static EditLevelLayer* create(GJGameLevel* level) = ios 0xebdfc, win inline, m1 0x19f878, imac 0x1e8670 {
        auto ret = new EditLevelLayer();
        if (ret && ret->init(level)) {
            ret->autorelease();
            return ret;
        }
        CC_SAFE_DELETE(ret);
        return nullptr;
    }
    static cocos2d::CCScene* scene(GJGameLevel*) = win 0xd3d80, m1 0x19f774, imac 0x1e8510, ios 0xebdb0;

    virtual void keyBackClicked() = win 0xd8570, m1 0x1a3824, imac 0x1ec740, ios 0xef59c;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0xd8580, imac 0x1ec770, m1 0x1a3830, ios 0xef5a8;
    virtual void setIDPopupClosed(SetIDPopup*, int) = win 0xd8050, m1 0x1a3724, imac 0x1ec640, ios 0xef518;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xd7710, imac 0x1ec260, m1 0x1a3368, ios 0xef1a0;
    virtual void textInputOpened(CCTextInputNode*) = win 0xd65c0, imac 0x1eba90, m1 0x1a2b78, ios 0xeeb98;
    virtual void textInputClosed(CCTextInputNode*) = win 0xd5fc0, m1 0x1a282c, imac 0x1eb720, ios 0xee908;
    virtual void textChanged(CCTextInputNode*) = win 0xd6730, imac 0x1ebb70, m1 0x1a2c88, ios 0xeeca8;
    virtual void uploadActionFinished(int, int) = win 0xd85f0, imac 0x1ec810, m1 0x1a38b4, ios 0xef618;
    virtual void uploadActionFailed(int, int) = win 0xd8730, imac 0x1ec9c0, m1 0x1a3a6c, ios 0xef70c;
    virtual void onClosePopup(UploadActionPopup*) = win 0xd85b0, imac 0x1ec7c0, m1 0x1a3864, ios 0xef5c8;

    void closeTextInputs() = win 0xd5f60;
    void confirmClone(cocos2d::CCObject*);
    void confirmDelete(cocos2d::CCObject*) = ios 0xee16c, imac 0x1ead40, m1 0x1a1e40, win 0xd75d0;
    void confirmMoveToTop(cocos2d::CCObject*) = m1 0x1a20d8, imac 0x1eafd0, win 0xd7e90;
    bool init(GJGameLevel*) = ios 0xebed4, win 0xd3f10, imac 0x1e87a0, m1 0x19f95c;
    void onBack(cocos2d::CCObject* sender) = ios 0xee518, win 0xd80e0, imac 0x1eb1a0, m1 0x1a22a4;
    void onClone() = m1 0x1a3618, imac 0x1ec500;
    void onDelete() = m1 0x1a3328, imac 0x1ec220;
    void onEdit(cocos2d::CCObject* sender) = win 0xd6d80, imac 0x1e9db0, m1 0x1a0ec4, ios 0xed344;
    void onGuidelines(cocos2d::CCObject* sender) = win 0xd52e0, m1 0x1a26f4, imac 0x1eb5e0;
    void onHelp(cocos2d::CCObject* sender) = m1 0x1a1f28, imac 0x1eae30, win 0xd7c50;
    void onLevelInfo(cocos2d::CCObject* sender) = ios 0xee63c, win 0xd5500, m1 0x1a2420, imac 0x1eb320;
    void onLevelLeaderboard(cocos2d::CCObject* sender) = win 0xd5450;
    void onLevelOptions(cocos2d::CCObject* sender) = win 0xd54d0;
    void onMoveToTop();
    void onPlay(cocos2d::CCObject* sender) = win 0xd6920, m1 0x1a100c, imac 0x1e9f10, ios 0xed444;
    void onSetFolder(cocos2d::CCObject* sender) = ios 0xee43c, win 0xd7fc0, imac 0x1eb0b0, m1 0x1a21b8;
    void onShare(cocos2d::CCObject* sender) = ios 0xed54c, win 0xd6f20, m1 0x1a1164, imac 0x1ea050;
    void onTest(cocos2d::CCObject* sender) = m1 0x1a3298, imac 0x1ec180;
    void onUpdateDescription(cocos2d::CCObject* sender) = m1 0x1a1d60, imac 0x1eac60;
    void playStep2() = win 0xd6ae0, m1 0x1a3184, imac 0x1ec070, ios 0xef04c;
    void playStep3() = win 0xd6bc0, m1 0x1a3248, imac 0x1ec130, ios 0xef110;
    void setupLevelInfo() = win 0xd5720, m1 0x1a1540, imac 0x1ea490;
    void updateDescText(char const*);
    void verifyLevelName() = win 0xd8290;

    cocos2d::CCMenu* m_buttonMenu;
    GJGameLevel* m_level;
    cocos2d::CCArray* m_textInputs;
    cocos2d::CCLabelBMFont* m_folderLabel;
    bool m_exiting;
    GJLevelType m_levelType;
    gd::string m_levelName;
    UploadActionPopup* m_descriptionPopup;
}

[[link(android)]]
class EditorOptionsLayer : GJOptionsLayer {
    // virtual ~EditorOptionsLayer();

    static EditorOptionsLayer* create() = imac 0x28bbe0, m1 0x2347d0;

    virtual bool init() = win 0x2896d0, imac 0x28be40, m1 0x23496c, ios 0x2d46d8;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x28a100, imac 0x28c810, m1 0x235368, ios 0x2d50d0;
    virtual void setupOptions() = win 0x289700, imac 0x28be70, m1 0x234988, ios 0x2d46f4;

    void onButtonRows(cocos2d::CCObject* sender) = ios 0x2d5050, win 0x28a070, imac 0x28c7a0, m1 0x2352e8;
    void onButtonsPerRow(cocos2d::CCObject* sender) = ios 0x2d4fc8, win 0x289fe0, imac 0x28c720, m1 0x235260;

    int m_buttonsPerRow;
    int m_buttonRows;
    cocos2d::CCLabelBMFont* m_buttonsPerRowLabel;
    cocos2d::CCLabelBMFont* m_buttonRowsLabel;
}

[[link(android)]]
class EditorPauseLayer : CCBlockLayer, FLAlertLayerProtocol {
    // virtual ~EditorPauseLayer();
    EditorPauseLayer() {
        m_saved = false;
        m_guidelinesOffButton = nullptr;
        m_guidelinesOnButton = nullptr;
        m_editorLayer = nullptr;
    }

    static EditorPauseLayer* create(LevelEditorLayer*) = win inline, m1 0x228ae4, imac 0x27f120, ios 0x394884 {
        auto ret = new EditorPauseLayer();
        if (ret && ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        CC_SAFE_DELETE(ret);
        return nullptr;
    }

    virtual void keyBackClicked() = win 0xdd0c0, m1 0x22c910, imac 0x283060, ios 0x3976d4;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0xdd0d0, imac 0x283150, m1 0x22c9f0, ios 0x3976e0;
    virtual void customSetup() = win 0xd9020, imac 0x27fa70, m1 0x2296c0, ios 0x394ef0;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xdcfa0, imac 0x282f80, m1 0x22c834, ios 0x397610;

    void doResetUnused();
    bool init(LevelEditorLayer*) = ios 0x394950, win 0xd8990, imac 0x27f220, m1 0x228bbc;
    void onAlignX(cocos2d::CCObject* sender) = win 0xdb9e0, m1 0x22b9d4, imac 0x282020, ios 0x396e30;
    void onAlignY(cocos2d::CCObject* sender) = win 0xdba10, m1 0x22ba08, imac 0x282050, ios 0x396e64;
    void onBuildHelper(cocos2d::CCObject* sender) = win 0xdb7b0, m1 0x22b9a8, imac 0x281fc0;
    void onCopyWColor(cocos2d::CCObject* sender) = win 0xdb7f0;
    void onCreateExtras(cocos2d::CCObject* sender) = win 0xdb760;
    void onCreateLoop(cocos2d::CCObject* sender) = win 0xdb7d0, m1 0x22b9b8, imac 0x281fe0, ios 0x396e14;
    void onCreateTemplate(cocos2d::CCObject* sender);
    void onExitEditor(cocos2d::CCObject* sender) = ios 0x3975d8, win 0xdcd60, m1 0x22c7fc, imac 0x282f40;
    void onExitNoSave(cocos2d::CCObject* sender) = ios 0x396a80, win 0xdce30, imac 0x281ad0, m1 0x22b51c;
    void onHelp(cocos2d::CCObject* sender) = win 0xdd050;
    void onKeybindings(cocos2d::CCObject* sender) = imac 0x282310, m1 0x22bc3c, win 0xdba40;
    void onNewGroupX(cocos2d::CCObject* sender) = win 0xdb830, m1 0x22ba68, imac 0x2820f0, ios 0x396ec4;
    void onNewGroupY(cocos2d::CCObject* sender) = win 0xdb850, m1 0x22ba78, imac 0x282110, ios 0x396ed4;
    void onOptions(cocos2d::CCObject* sender) = win 0xdb390;
    void onPasteWColor(cocos2d::CCObject* sender) = win 0xdb810;
    void onReGroup(cocos2d::CCObject* sender) = win 0xdb790;
    void onResetUnusedColors(cocos2d::CCObject* sender) = imac 0x281e30, m1 0x22b850, win 0xdb5c0;
    void onResume(cocos2d::CCObject* sender) = ios 0x396874, win 0xdc140, m1 0x22b2c4, imac 0x2818a0;
    void onSave(cocos2d::CCObject* sender) = win 0xdcbf0, m1 0x22b42c, imac 0x2819f0, ios 0x3969c4;
    void onSaveAndExit(cocos2d::CCObject* sender) = ios 0x396970, win 0xdcd20, imac 0x281980, m1 0x22b3c0;
    void onSaveAndPlay(cocos2d::CCObject* sender) = win 0xdc9a0, imac 0x281910, m1 0x22b330, ios 0x3968e0;
    void onSelectAll(cocos2d::CCObject* sender) = ios 0x396e98, win 0xdb870, m1 0x22ba3c, imac 0x282090;
    void onSelectAllLeft(cocos2d::CCObject* sender) = ios 0x396ea4, win 0xdb9a0, m1 0x22ba48, imac 0x2820b0;
    void onSelectAllRight(cocos2d::CCObject* sender) = ios 0x396eb4, win 0xdb9c0, m1 0x22ba58, imac 0x2820d0;
    void onSong(cocos2d::CCObject* sender) = win 0xdbfe0;
    void onUnlockAllLayers(cocos2d::CCObject* sender) = win 0xdb720;
    void playStep2() = win 0xdca20, m1 0x22c6d0, imac 0x282e10, ios 0x3974d0;
    void playStep3() = win 0xdcb50, m1 0x22c7a0, imac 0x282ee0, ios 0x3975a0;
    void saveLevel() = ios 0x3970b4, win 0xdc310, m1 0x22c274, imac 0x282980;
    void toggleDebugDraw(cocos2d::CCObject* sender) = win 0xdbdd0;
    void toggleEditorBackground(cocos2d::CCObject*);
    TodoReturn toggleEditorColorMode(cocos2d::CCObject*);
    void toggleEditorGrid(cocos2d::CCObject* sender) = win 0xdbee0;
    void toggleEditorGround(cocos2d::CCObject* sender) = win 0xdbe20;
    TodoReturn toggleEffectDuration(cocos2d::CCObject*);
    TodoReturn toggleEffectLines(cocos2d::CCObject*);
    TodoReturn toggleFollowPlayer(cocos2d::CCObject*);
    TodoReturn toggleGridOnTop(cocos2d::CCObject*);
    void toggleHideInvisible(cocos2d::CCObject* sender) = win 0xdbb10;
    void toggleIgnoreDamage(cocos2d::CCObject* sender) = win 0xdba60;
    void togglePlaytestMusic(cocos2d::CCObject* sender);
    void togglePreviewAnim(cocos2d::CCObject* sender) = ios 0x397000, win 0xdbc10, m1 0x22bba4, imac 0x282270;
    void togglePreviewParticles(cocos2d::CCObject* sender) = win 0xdbb60;
    void togglePreviewShaders(cocos2d::CCObject* sender) = win 0xdbbc0;
    TodoReturn toggleRecordOrder(cocos2d::CCObject*);
    void toggleSelectFilter(cocos2d::CCObject* sender) = win 0xdbf90;
    void toggleShowObjectInfo(cocos2d::CCObject* sender) = win 0xdbf30;
    void uncheckAllPortals(cocos2d::CCObject* sender) = imac 0x281d60, m1 0x22b784, win 0xdb4e0;
    void updateSongButton() = win 0xdc090;

    bool m_saved;
    CCMenuItemSpriteExtra* m_guidelinesOffButton;
    CCMenuItemSpriteExtra* m_guidelinesOnButton;
    LevelEditorLayer* m_editorLayer;
    PAD = win 0x20, android32 0x10, android64 0x20, mac 0x20, ios 0x20;
}

[[link(android), depends(GameObjectEditorState), depends(GJTransformState)]]
class EditorUI : cocos2d::CCLayer, FLAlertLayerProtocol, ColorSelectDelegate, GJRotationControlDelegate, GJScaleControlDelegate, GJTransformControlDelegate, MusicDownloadDelegate, SetIDPopupDelegate {
    EditorUI() = win 0xdd4b0, m1 0x4b6a8, imac 0x54780, ios 0x3f44b0;
    ~EditorUI() = win inline, m1 0xab00, imac 0x93e0, ios 0x3bd1fc {
        CC_SAFE_RELEASE(m_selectedObjects);
        CC_SAFE_RELEASE(m_deleteObjects);
        CC_SAFE_RELEASE(m_createButtonArray);
        CC_SAFE_RELEASE(m_customObjectButtonArray);
        CC_SAFE_RELEASE(m_createButtonBars);
        CC_SAFE_RELEASE(m_tabsArray);
        CC_SAFE_RELEASE(m_editButtonDict);
        CC_SAFE_RELEASE(m_rotationControl);
        CC_SAFE_RELEASE(m_scaleControl);
        CC_SAFE_RELEASE(m_transformControl);
        CC_SAFE_RELEASE(m_snapPositions);
        CC_SAFE_RELEASE(m_uiItems);
        CC_SAFE_RELEASE(m_customTabControls);
    }

    static EditorUI* create(LevelEditorLayer*) = imac 0x96b0, m1 0xaccc;
    static EditorUI* get() {
        auto lel = LevelEditorLayer::get();
        if (!lel) return nullptr;
        return lel->m_editorUI;
    }

    virtual void draw() = win 0x121120, imac 0x4e7d0, m1 0x463fc, ios 0x3f0124;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x121c60, imac 0x4f290, m1 0x46de4, ios 0x3f07a0;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x1222e0, imac 0x4f8b0, m1 0x473c0, ios 0x3f0ce4;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x122a30, imac 0x4fe60, m1 0x478e8, ios 0x3f11c8;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x48094, imac 0x50780, ios 0x3f1938;
    virtual void registerWithTouchDispatcher() = win 0x9b1a0, m1 0x480b0, imac 0x507c0, ios 0x3f1954;
    virtual void keyBackClicked() = win 0x1130e0, m1 0x39b48, imac 0x3f0f0, ios 0x3e7358;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x123770, imac 0x50800, m1 0x480e8, ios 0x3f198c;
    virtual EditorUI* getUI() = win 0xdd8f0, imac 0x546c0 { return this; }
    virtual void setIDPopupClosed(SetIDPopup*, int) = win 0xe5580, imac 0x337d0, m1 0x32e34, ios 0x3e213c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xe5390, imac 0x33640, m1 0x32c64, ios 0x3e2060;
    virtual void updateTransformControl() = win 0x113b60, imac 0x40b50, m1 0x3b2bc, ios 0x3e8214;
    virtual void transformChangeBegin() = win 0x114050, imac 0x414f0, m1 0x3bb74, ios 0x3e89b4;
    virtual void transformChangeEnded() = m1 0x3bc20, imac 0x415d0, ios 0x3e8a60 {}
    virtual cocos2d::CCNode* getTransformNode() = win 0xdd900, m1 0x4b658, imac 0x546d0, ios 0x3f4498;
    virtual void transformScaleXChanged(float) = win 0x11fca0, m1 0x44ec0, imac 0x4d000, ios 0x3ef7c8;
    virtual void transformScaleYChanged(float) = win 0x11fcc0, m1 0x45088, imac 0x4d210, ios 0x3ef868;
    virtual void transformScaleXYChanged(float, float) = win 0x11fce0, imac 0x4d370, m1 0x451bc, ios 0x3ef880;
    virtual void transformSkewXChanged(float) = win 0x11fd00, m1 0x452f4, imac 0x4d4e0, ios 0x3ef89c;
    virtual void transformSkewYChanged(float) = win 0x11fd20, m1 0x45428, imac 0x4d640, ios 0x3ef8b4;
    virtual void transformRotationXChanged(float) = win 0x11fd40, m1 0x4555c, imac 0x4d7a0, ios 0x3ef8cc;
    virtual void transformRotationYChanged(float) = win 0x11fd60, m1 0x45690, imac 0x4d900, ios 0x3ef8e4;
    virtual void transformRotationChanged(float) = win 0x11fd80, imac 0x4da60, m1 0x457c4, ios 0x3ef8fc;
    virtual void transformResetRotation() = win 0x11fda0, imac 0x4dbd0, m1 0x458fc, ios 0x3ef918;
    virtual void transformRestoreRotation() = win 0x11fdd0, imac 0x4dcc0, m1 0x459b4, ios 0x3ef95c;
    virtual void songStateChanged() = win 0x110990, imac 0x3df50, m1 0x38a48, ios 0x3e68b4;
    virtual void colorSelectClosed(cocos2d::CCNode*) = win 0x11dcd0, imac 0x4a5a0, m1 0x4342c, ios 0x3edf18;
    virtual void keyUp(cocos2d::enumKeyCodes) = win 0x124a00, m1 0x48dcc, imac 0x51920, ios 0x3f2630;
    virtual void scrollWheel(float, float) = win 0x124a40, imac 0x519c0, m1 0x48e44, ios 0x3f26a8;
    virtual void angleChangeBegin() = win 0x121560, imac 0x4e8b0, m1 0x464d4, ios 0x3f01fc;
    virtual void angleChangeEnded() = m1 0x464f0, imac 0x4e8f0, ios 0x3f0218 {}
    virtual void angleChanged(float) = win 0x121570, imac 0x4e910, m1 0x464f8, ios 0x3f0220;
    virtual void updateScaleControl() = win 0x113550, imac 0x3f540, m1 0x39f48, ios 0x3e75c4;
    virtual void anchorPointMoved(cocos2d::CCPoint) = win 0x114060, imac 0x415f0, m1 0x3bc28, ios 0x3e8a68;
    virtual void scaleChangeBegin() = win 0x1136b0, imac 0x3fc70, m1 0x3a590, ios 0x3e7aac;
    virtual void scaleChangeEnded() = m1 0x3a5ac, imac 0x3fcb0, ios 0x3e7ac8 {}
    virtual void scaleXChanged(float, bool) = win 0x1136c0, m1 0x3a5b4, imac 0x3fcd0, ios 0x3e7ad0;
    virtual void scaleYChanged(float, bool) = win 0x113770, m1 0x3abec, imac 0x40440, ios 0x3e7ec4;
    virtual void scaleXYChanged(float, float, bool) = win 0x113820, imac 0x40590, m1 0x3ad30, ios 0x3e7f6c;

    void activateRotationControl(cocos2d::CCObject*) = ios 0x3e6664, win 0x121420, m1 0x3878c, imac 0x3dc70;
    void activateScaleControl(cocos2d::CCObject*) = win 0x113280, m1 0x39c78, imac 0x3f250, ios 0x3e7408;
    void activateTransformControl(cocos2d::CCObject*) = win 0x1138d0, m1 0x3aec4, imac 0x40720, ios 0x3e803c;
    void addObjectsToSmartTemplate(GJSmartTemplate*, cocos2d::CCArray*) = win 0x114390;
    TodoReturn addSnapPosition(cocos2d::CCPoint);
    void alignObjects(cocos2d::CCArray* objects, bool axisY) = win 0x1203a0, m1 0x45afc, imac 0x4de50, ios 0x3efa20;
    void applyOffset(GameObject* object) = win 0x120d40, ios 0x3e4a18, m1 0x35e80, imac 0x3ab90;
    cocos2d::CCPoint applySpecialOffset(cocos2d::CCPoint, GameObject*, cocos2d::CCPoint) = win 0x120ab0, m1 0x46220, imac 0x4e5d0, ios 0x3effe8;
    TodoReturn arrayContainsClass(cocos2d::CCArray*, int);
    void assignNewGroups(bool groupY) = win 0x1178c0, m1 0x3f6a0, imac 0x45970, ios 0x3eb650;
    TodoReturn canAllowMultiActivate(GameObject*, cocos2d::CCArray*);
    bool canSelectObject(GameObject* object) = win 0x10ec30, imac 0x3c770, m1 0x373c8, ios 0x3e57f8;
    TodoReturn centerCameraOnObject(GameObject*);
    TodoReturn changeSelectedObjects(cocos2d::CCArray*, bool);
    void checkDiffAfterTransformAnchor(cocos2d::CCPoint, cocos2d::CCArray*) = win 0x1140e0, m1 0x3bd78, imac 0x41740, ios 0x3e8ae8;
    void checkLiveColorSelect() = win 0x10ef50;
    void clickOnPosition(cocos2d::CCPoint) = ios 0x3dea18, win 0xe1040, imac 0x2dfa0, m1 0x2d9d4;
    TodoReturn closeLiveColorSelect();
    TodoReturn closeLiveHSVSelect();
    void colorSelectClosed(cocos2d::ccColor3B);
    void constrainGameLayerPosition();
    void constrainGameLayerPosition(float, float) = ios 0x3dc880, win 0x120dd0, imac 0x2afb0, m1 0x2b208;
    TodoReturn convertKeyBasedOnNeighbors(int, int, cocos2d::CCPoint, cocos2d::CCArray*);
    TodoReturn convertToBaseKey(int);
    gd::string copyObjects(cocos2d::CCArray* objects, bool copyColors, bool sort) = win 0x111560, imac 0x31280, m1 0x309d4, ios 0x3e0a08;
    TodoReturn copyObjectsDetailed(cocos2d::CCArray*);
    cocos2d::CCArray* createCustomItems() = ios 0x3e0ec8, win 0xe30e0, imac 0x31b80, m1 0x3122c;
    TodoReturn createEdgeForObject(GameObject*, int);
    TodoReturn createExtraObject(int, cocos2d::CCPoint, GameObject*, cocos2d::CCArray*, int, int);
    TodoReturn createExtras(cocos2d::CCArray*);
    TodoReturn createExtrasForObject(int, GameObject*, cocos2d::CCArray*);
    TodoReturn createGlow();
    void createLoop() = win 0x117c90, m1 0x3fa34, imac 0x45d70, ios 0x3eb930;
    void createMoveMenu() = ios 0x3ebe14, win 0x119350, m1 0x400a8, imac 0x464d0;
    void createNewKeyframeAnim() = win 0x1179f0;
    GameObject* createObject(int, cocos2d::CCPoint) = win 0x10e840, m1 0x35d7c, imac 0x3aa80, ios 0x3e4914;
    TodoReturn createOutlines(cocos2d::CCArray*);
    void createPrefab(GJSmartTemplate*, gd::string, int) = win 0x1160f0, m1 0x3dfc0, imac 0x43f80, ios 0x3ea55c;
    cocos2d::CCArray* createRockBases(cocos2d::CCArray*) = win 0x12da00, m1 0x52bf0c, imac 0x5fd600;
    TodoReturn createRockEdges(cocos2d::CCArray*);
    void createSmartObjectsFromTemplate(GJSmartTemplate*, cocos2d::CCArray*, bool, bool, bool, bool) = win 0x115580;
    void createSmartObjectsFromType(int, cocos2d::CCArray*, bool, bool) = win 0x116660;
    UndoObject* createUndoObject(UndoCommand, bool) = win 0x10f830, m1 0x37f50, imac 0x3d3e0, ios 0x3e62ac;
    void createUndoSelectObject(bool) = win 0x10fb50, m1 0x2e58c, imac 0x2ebf0, ios 0x3df104;
    void deactivateRotationControl() = win inline, m1 0xd338, imac 0xbf40, ios 0x3bf430 {
        m_rotationTouchID = -1;
        if (m_rotationControl->isVisible()) {
            m_rotationControl->setVisible(false);
            m_rotationControl->finishTouch();
        }
    }
    void deactivateScaleControl() = win 0x113480;
    void deactivateTransformControl() = win 0x113ad0, m1 0xd5dc, imac 0xc200, ios 0x3bf614;
    void deleteObject(GameObject* object, bool noUndo) = win inline, m1 0x325f8, imac 0x32f70, ios 0x3e1e9c {
        if (!object) return;
        object->m_unk45c = object->m_isSelected;
        m_editorLayer->removeObject(object, noUndo);
        this->deactivateRotationControl();
        this->deactivateScaleControl();
        this->deactivateTransformControl();
    }
    void deleteSmartBlocksFromObjects(cocos2d::CCArray*) = win 0x116500, m1 0x34134, imac 0x34bb0, ios 0x3e3184;
    void deleteTypeFromObjects(int id, cocos2d::CCArray* objects) = win inline {
        for (int i = 0; i < objects->count(); i++) {
            auto obj = static_cast<GameObject*>(objects->objectAtIndex(i));
            if (obj->m_objectID != id) continue;
            if (obj->m_linkedGroup > 0) {
                if (auto stickyGroup = m_editorLayer->getStickyGroup(obj->m_linkedGroup)) stickyGroup->removeObject(obj, true);
            }
            this->deleteObject(obj, true);
            objects->removeObjectAtIndex(i, true);
        }
    }
    void deselectAll() = win 0x10fd80, imac 0x33240, m1 0x328b0, ios 0x3e1f84;
    void deselectObject() = win inline, m1 0x32a98, imac 0x33450, ios 0x3e2010 {
        this->stopActionByTag(124);
        if (m_selectedObject) m_selectedObject->deselectObject();
        m_selectedObject = nullptr;
        this->toggleEditObjectButton();
        m_canActivateControls = true;
        m_lastTouchPoint = cocos2d::CCPoint { 0.f, 0.f };
    }
    void deselectObject(GameObject*) = win 0x10fc60, m1 0x32808, imac 0x331a0, ios 0x3e1f00;
    void deselectObjectsColor() = win 0x10f0b0;
    void deselectTargetPortals() = imac 0x32e10, m1 0x324a8, win 0xe51b0;
    TodoReturn disableButton(CreateMenuItem*);
    void doCopyObjects(bool) = ios 0x3e6d64, win 0x111900, m1 0x391d4, imac 0x3e700;
    TodoReturn doPasteInPlace(bool);
    void doPasteObjects(bool) = ios 0x3e6e5c, win 0x111a90, m1 0x392cc, imac 0x3e820;
    void dynamicGroupUpdate(bool) = win 0x117000, imac 0x44e10, m1 0x3ed20, ios 0x3eafa8;
    TodoReturn edgeForObject(int, int);
    bool editButton2Usable() = m1 0x4238c, imac 0x492e0;
    bool editButtonUsable() = win 0x1182f0, imac 0x48580, m1 0x41e60, ios 0x3eccac;
    TodoReturn editColor();
    TodoReturn editColorButtonUsable();
    void editGroup(cocos2d::CCObject*) = win 0x11d880, imac 0x2c8f0, m1 0x2c4d0;
    TodoReturn editHSV();
    void editObject(cocos2d::CCObject*) = win 0x11a510, m1 0x2b750, imac 0x2b550, ios 0x3dcd18;
    void editObject2(cocos2d::CCObject*) = win 0x11c4a0, m1 0x2b748, imac 0x2b540, ios 0x3dcd10;
    void editObject3(cocos2d::CCObject*) = m1 0x4304c, imac 0x4a0e0;
    void editObjectSpecial(int) = win 0x11c4b0, m1 0x42aa0, imac 0x499d0, ios 0x3ed75c;
    TodoReturn editorLayerForArray(cocos2d::CCArray*, bool);
    TodoReturn enableButton(CreateMenuItem*);
    TodoReturn findAndSelectObject(int, bool);
    void findSnapObject(cocos2d::CCArray*, float) = win 0x121790, m1 0x46738, imac 0x4eb50, ios 0x3f0448;
    void findSnapObject(cocos2d::CCPoint, float) = win 0x121690, m1 0x46620, imac 0x4ea40, ios 0x3f0338;
    TodoReturn findTriggerTest();
    void flipObjectsX(cocos2d::CCArray*) = win 0x11f0f0, m1 0x3ddc0, imac 0x43d70, ios 0x3ea3d4;
    void flipObjectsY(cocos2d::CCArray*) = win 0x11f2d0, m1 0x3dc18, imac 0x43ba0, ios 0x3ea24c;
    TodoReturn getButton(char const*, int, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*);
    CreateMenuItem* getCreateBtn(int id, int bg) = ios 0x3e24b8, win 0x10d2a0, m1 0x332f0, imac 0x33c60;
    CreateMenuItem* getCreateMenuItemButton(cocos2d::CCSprite*, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*, float, int, cocos2d::CCPoint) = win inline, ios 0x3df54c, imac 0x2f190, m1 0x2eb94 {
        const char* background;
        switch (p4) {
            case 2: background = "GJ_button_02.png"; break;
            case 3: background = "GJ_button_03.png"; break;
            case 4: background = "GJ_button_04.png"; break;
            case 5: background = "GJ_button_05.png"; break;
            case 6: background = "GJ_button_06.png"; break;
            default: background = "GJ_button_01.png"; break;
        }
        auto sprite = ButtonSprite::create(p0, 32, 0, 32.f, 1.f, true, background, true);
        auto button = CreateMenuItem::create(sprite, nullptr, this, p1);
        button->setScale(p3);
        button->m_baseScale = p3;
        if (p2) p2->addChild(button);
        sprite->updateSpriteOffset(p5);
        return button;
    }
    TodoReturn getCycledObject(cocos2d::CCArray*, bool);
    void getEditColorTargets(ColorAction*&, ColorAction*&, EffectGameObject*&) = m1 0x43088, imac 0x4a120;
    cocos2d::CCPoint getGridSnappedPos(cocos2d::CCPoint pos) = win inline, m1 0x35130, imac 0x35c40, ios 0x3e3cc8 {
        auto size = m_editorLayer->m_drawGridLayer->m_gridSize;
        auto xVal = std::floorf(pos.x / size);
        auto yVal = std::floorf(pos.y / size);
        return this->getLimitedPosition(ccp((xVal + 0.5) * size, (yVal + 0.5) * size));
    }
    cocos2d::CCPoint getGroupCenter(cocos2d::CCArray* objs, bool) = win 0x121190, m1 0x36e28, imac 0x3c1b0, ios 0x3e5280;
    TodoReturn getGroupInfo(GameObject*, cocos2d::CCArray*, int&, int&, int&);
    cocos2d::CCPoint getLimitedPosition(cocos2d::CCPoint) = win 0x11e6f0, m1 0x43aa4, imac 0x4acf0, ios 0x3ee478;
    CCMenuItemSpriteExtra* getModeBtn(char const*, int);
    cocos2d::CCNode* getNeighbor(int, cocos2d::CCPoint, GJSmartDirection, cocos2d::CCArray*) = win 0x116f30;
    TodoReturn getRandomStartKey(int);
    cocos2d::CCPoint getRelativeOffset(GameObject*) = win inline, m1 0x35c3c, imac 0x3a960, ios 0x3e482c {
        return GameToolbox::getRelativeOffset(p0, this->offsetForKey(p0->m_objectID));
    }
    cocos2d::CCArray* getSelectedObjects() = win 0x10f780, m1 0x37eac, imac 0x3d330, ios 0x3e6210;
    TodoReturn getSimpleButton(gd::string, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*);
    SmartGameObject* getSmartNeighbor(SmartGameObject*, cocos2d::CCPoint, GJSmartDirection, cocos2d::CCArray*) = win 0x116e10;
    static int getSmartObjectKey(int, GJSmartDirection) = win 0x12bbd0;
    float getSnapAngle(GameObject*, cocos2d::CCArray*) = win inline, m1 0x43b14, imac 0x4ad60, ios 0x3ee4e4 {
        if (p1 && p1->count() > 0) {
            for (int i = 0; i < p1->count(); i++) {
                auto rotation = m_editorLayer->rotationForSlopeNearObject(static_cast<GameObject*>(p1->objectAtIndex(i)));
                if (rotation != -1.f) return rotation;
            }
            return -1.f;
        }
        else if (p0) return m_editorLayer->rotationForSlopeNearObject(p0);
        else return -1.f;
    }
    CCMenuItemSpriteExtra* getSpriteButton(char const* spriteFrameName, cocos2d::SEL_MenuHandler selector, cocos2d::CCMenu* menu, float scale, int buttonKind, cocos2d::CCPoint offset) = win 0xe11d0, m1 0xd81c, imac 0xc440, ios 0x3bf6f8;
    CCMenuItemSpriteExtra* getSpriteButton(char const* spriteFrameName, cocos2d::SEL_MenuHandler selector, cocos2d::CCMenu* menu, float scale) = win inline, imac 0xc2d0, m1 0xd6b0, ios inline {
        return this->getSpriteButton(spriteFrameName, selector, menu, scale, 1, {0, 0});
    }
    CCMenuItemSpriteExtra* getSpriteButton(cocos2d::CCSprite* sprite, cocos2d::SEL_MenuHandler selector, cocos2d::CCMenu* menu, float scale, int buttonKind, cocos2d::CCPoint offset) = win 0xe1260, m1 0x2e9a0, imac 0x2efb0, ios 0x3df454;
    TodoReturn getTouchPoint(cocos2d::CCTouch*, cocos2d::CCEvent*);
    TodoReturn getTransformState();
    float getXMin(int) = win 0x121010, m1 0x2ee78, imac 0x2f470, ios 0x3df78c;
    bool init(LevelEditorLayer* editorLayer) = ios 0x3bd3d4, win 0xdde60, m1 0xad4c, imac 0x9710;
    bool isLiveColorSelectTrigger(GameObject*);
    bool isSpecialSnapObject(int) = win 0x1272b0, m1 0x44de8, imac 0x4c2f0, ios 0x3ef5f0;
    TodoReturn liveEditColorUsable();
    CreateMenuItem* menuItemFromObjectString(gd::string, int) = win 0x10d090, m1 0x315a4, imac 0x31f10, ios 0x3e1170;
    cocos2d::CCPoint moveForCommand(EditCommand command) = ios 0x3ee010, win 0x11de20, imac 0x4a7d0, m1 0x435fc;
    void moveGamelayer(cocos2d::CCPoint) = ios 0x3dfa64, win 0xe16b0, imac 0x2f800, m1 0x2f18c;
    void moveObject(GameObject*, cocos2d::CCPoint) = ios 0x3e7270, win 0x11e290, m1 0x399d4, imac 0x3ef90;
    void moveObjectCall(cocos2d::CCObject*) = win 0x11dfd0, m1 0x42a38, imac 0x49970, ios 0x3ed6f4;
    void moveObjectCall(EditCommand) = ios 0x3ee190, win 0x11e000, imac 0x4a9d0, m1 0x437a8;
    cocos2d::CCPoint offsetForKey(int) = win 0x124bf0, m1 0x35208, imac 0x35d10, ios 0x3e3d3c;
    TodoReturn onAssignNewGroupID();
    void onColorFilter(cocos2d::CCObject* sender) = win 0xe5bd0, m1 0x31b94, imac 0x324d0, ios 0x3e1690;
    void onCopy(cocos2d::CCObject* sender) = win 0x1118f0;
    void onCopyState(cocos2d::CCObject* sender) = win 0x112ac0, imac 0x2c960, m1 0x2c538, ios 0x3ddb38;
    bool onCreate() = ios 0x3dee84, win 0x10dd10, m1 0x2dfac, imac 0x2e600;
    void onCreateButton(cocos2d::CCObject* sender) = ios 0x3e32f0, win 0x10d880, imac 0x34d30, m1 0x342c0;
    void onCreateObject(int) = ios 0x3e35c0, win 0x10df10, m1 0x34758, imac 0x35170;
    void onDelete(cocos2d::CCObject* sender) = win 0xe4760, m1 0x2db50, imac 0x2e140, ios 0x3deb7c;
    void onDeleteAll(cocos2d::CCObject* sender);
    void onDeleteCustomItem(cocos2d::CCObject* sender) = win 0xe2e80, m1 0x31018, imac 0x31960, ios 0x3e0dbc;
    void onDeleteInfo(cocos2d::CCObject* sender) = m1 0x3198c, imac 0x32320;
    void onDeleteSelected(cocos2d::CCObject* sender) = win 0xe4d80, m1 0xdb78, imac 0xc7a0, ios 0x3bf9c8;
    void onDeleteSelectedType(cocos2d::CCObject* sender) = win 0xe5310, imac 0x32240, m1 0x318b8, ios 0x3e141c;
    void onDeleteStartPos(cocos2d::CCObject* sender) = win 0xe5360, m1 0x31890, imac 0x32210, ios 0x3e13f4;
    void onDeselectAll(cocos2d::CCObject* sender) = ios 0x3dda90, win 0x10fd40, m1 0x2c478, imac 0x2c890;
    void onDuplicate(cocos2d::CCObject* sender) = ios 0x3dcae4, win 0x1113e0, m1 0x2b4dc, imac 0x2b2e0;
    void onEditColor(cocos2d::CCObject* sender) = win 0x11d0b0;
    void onFindObject(cocos2d::CCObject* sender);
    void onGoToBaseLayer(cocos2d::CCObject* sender) = ios 0x3ddd20, imac 0x2cc60, m1 0x2c7e8, win 0x112f40;
    void onGoToLayer(cocos2d::CCObject* sender) = win 0x112de0, m1 0x2c624, imac 0x2ca60;
    void onGroupDown(cocos2d::CCObject* sender) = ios 0x3ddd04, imac 0x2cc30, m1 0x2c7cc, win 0x11da90;
    void onGroupIDFilter(cocos2d::CCObject* sender) = win 0xe5a80, m1 0x31a68, imac 0x323d0;
    void onGroupSticky(cocos2d::CCObject* sender) = ios 0x3bff98, win 0x1110f0, imac 0xcf70, m1 0xe2d4;
    void onGroupUp(cocos2d::CCObject* sender) = ios 0x3ddcec, imac 0x2cc10, m1 0x2c7b4, win 0x11da70;
    void onLockLayer(cocos2d::CCObject* sender) = ios 0x3ddd34, win 0x11dc00, m1 0x2c7fc, imac 0x2cc80;
    void onNewCustomItem(cocos2d::CCObject* sender) = ios 0x3e073c, win 0xe2990, m1 0x304d0, imac 0x30d30;
    void onPaste(cocos2d::CCObject* sender) = win 0x111a80;
    void onPasteColor(cocos2d::CCObject* sender) = win 0x112cd0, m1 0x2c5d0, imac 0x2ca00, ios 0x3ddbd0;
    void onPasteInPlace(cocos2d::CCObject* sender);
    void onPasteState(cocos2d::CCObject* sender) = win 0x112b40, m1 0x2c57c, imac 0x2c9a0, ios 0x3ddb7c;
    void onPause(cocos2d::CCObject* sender) = ios 0x3dc64c, win 0xe03d0, imac 0x2ad50, m1 0x2afc0;
    void onPlayback(cocos2d::CCObject* sender) = ios 0x3bfb28, win 0x110390, imac 0xc930, m1 0xdce0;
    void onPlaytest(cocos2d::CCObject* sender) = ios 0x3bfd14, win 0x1109a0, imac 0xcb90, m1 0xdef4;
    void onResetSpecialFilter(cocos2d::CCObject* sender) = win 0xe5d60, m1 0x31bec, imac 0x32530, ios 0x3e16e8;
    void onSelectBuildTab(cocos2d::CCObject* sender) = ios 0x3e298c, win 0x112f60, imac 0x34310, m1 0x33940;
    void onSettings(cocos2d::CCObject* sender) = ios 0x3dca74, win 0xe0350, m1 0x2b46c, imac 0x2b270;
    void onStopPlaytest(cocos2d::CCObject* sender) = ios 0x3bfea8, win 0x110d40, m1 0xe134, imac 0xcdd0;
    void onTargetIDChange(int) = win 0x120860, m1 0x45f90, imac 0x4e330, ios 0x3efe54;
    void onToggleGuide(EffectGameObject*);
    TodoReturn onToggleSelectedOrder(EffectGameObject*);
    void onUngroupSticky(cocos2d::CCObject* sender) = ios 0x3bffdc, win 0x111130, m1 0xe318, imac 0xcfc0;
    void onUpdateDeleteFilter(cocos2d::CCObject* sender) = win 0xe5e30, m1 0x31900, imac 0x32290, ios 0x3e1464;
    void orderDownCustomItem(cocos2d::CCObject*) = win 0xe3050;
    void orderUpCustomItem(cocos2d::CCObject*) = win 0xe2fc0;
    cocos2d::CCArray* pasteObjects(gd::string, bool, bool) = win 0x111d10, m1 0x35f00, imac 0x3ac10, ios 0x3e4a98;
    TodoReturn playCircleAnim(cocos2d::CCPoint, float, float);
    TodoReturn playerTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*);
    TodoReturn playerTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*);
    void playtestStopped() = win 0x110d80, m1 0x38a54, imac 0x3df80, ios 0x3e68c0;
    TodoReturn positionIsInSnapped(cocos2d::CCPoint);
    cocos2d::CCPoint positionWithoutOffset(GameObject*) = win inline, m1 0x461c0, imac 0x4e560, ios 0x3eff88 {
        return p0->getPosition() - this->getRelativeOffset(p0);
    }
    void processSelectObjects(cocos2d::CCArray*) = win 0x110060, m1 0x38398, imac 0x3d880;
    void processSmartObjectsFromType(int, cocos2d::CCArray*, cocos2d::CCArray*, cocos2d::CCArray*, cocos2d::CCArray*) = win 0x116b80;
    void recreateButtonTabs();
    void redoLastAction(cocos2d::CCObject*) = win 0x110190, m1 0xdb14, imac 0xc740, ios 0x3bf964;
    void reloadCustomItems() = win 0xe35f0, m1 0x30fac, imac 0x318f0, ios 0x3e0d50;
    void removeOffset(GameObject* object) = win 0x120cb0, ios 0x3e4998, m1 0x35e00, imac 0x3ab10;
    void replaceGroupID(GameObject*, int, int) = win 0x117680, imac 0x456e0, ios 0x3eb3fc, m1 0x3f3c0;
    void repositionObjectsToCenter(cocos2d::CCArray*, cocos2d::CCPoint, bool) = win 0x112a20, ios 0x3e30e4, imac 0x34b10, m1 0x34094;
    void resetObjectEditorValues(cocos2d::CCArray*);
    void resetSelectedObjectsColor() = win 0x11dd50, m1 0x43568, imac 0x4a720, ios 0x3edf7c;
    void resetUI() = ios 0x3dc538, win 0xe36d0, imac 0x2ac40, m1 0x2aeac;
    void rotateObjects(cocos2d::CCArray*, float, cocos2d::CCPoint) = ios 0x3e5484, win 0x11f4b0, m1 0x37044, imac 0x3c3d0;
    float rotationforCommand(EditCommand) = win inline, m1 0x43788, imac 0x4a9b0, ios inline {
        switch (p0) {
            case EditCommand::RotateCW: return 90.f;
            case EditCommand::RotateCCW: return -90.f;
            case EditCommand::RotateCW45: return 45.f;
            case EditCommand::RotateCCW45: return -45.f;
            default: return 0.f;
        }
    }
    void scaleObjects(cocos2d::CCArray*, float, float, cocos2d::CCPoint, ObjectScaleType, bool) = win 0x11f8d0, m1 0x3a654, imac 0x3fd70, ios 0x3e7b70;
    void selectAll() = win inline, m1 0x38178, imac 0x3d650, ios 0x3e6388 {
        auto objects = m_editorLayer->m_objects;
        auto selected = cocos2d::CCArray::create();
        for (int i = 0; i < objects->count(); i++) {
            auto obj = static_cast<GameObject*>(objects->objectAtIndex(i));
            auto currentLayer = m_editorLayer->m_currentLayer;
            auto editorLayer2 = obj->m_editorLayer2;
            if (editorLayer2 == 0) editorLayer2 = -1;
            if (currentLayer == -1 || currentLayer == obj->m_editorLayer || currentLayer == editorLayer2) {
                selected->addObject(obj);
            }
        }
    }
    void selectAllWithDirection(bool) = win 0x10feb0, ios 0x3e651c, imac 0x3d960, m1 0x38480;
    void selectBuildTab(int) = ios 0x3e29c0, win 0x112f90, imac 0x34340, m1 0x33974;
    void selectObject(GameObject*, bool) = ios 0x3df140, win 0x10ee50, imac 0x2ec30, m1 0x2e5c8;
    void selectObjects(cocos2d::CCArray*, bool) = ios 0x3e58c4, win 0x10f140, imac 0x3c830, m1 0x3749c;
    void selectObjectsInRect(cocos2d::CCRect) = win inline, m1 0x37db0, imac 0x3d230, ios 0x3e612c {
        auto objects = m_editorLayer->objectsInRect(p0, false);
        if (objects->count() > 0) {
            for (int i = 0; i < objects->count(); i++) {
                auto obj = static_cast<GameObject*>(objects->objectAtIndex(i));
                if ((m_selectedObject && m_selectedObject->m_uniqueID != obj->m_uniqueID) || !m_selectedObjects->containsObject(obj)) {
                    this->createUndoSelectObject(false);
                    break;
                }
            }
            this->selectObjects(objects, false);
            this->updateSpecialUIElements();
        }
    }
    void setupCreateMenu() = ios 0x3c09dc, win 0xe6910, imac 0xdf10, m1 0xf170;
    void setupDeleteMenu() = ios 0x3c0020, win 0xe38d0, m1 0xe35c, imac 0xd010;
    void setupEditMenu() = win inline, m1 0x2ae74, imac 0x2ac00, ios inline {
        this->createMoveMenu();
        this->updateEditMenu();
    }
    TodoReturn setupTransformControl();
    bool shouldDeleteObject(GameObject*) = win 0xe4c50, m1 0x323a8, imac 0x32d40, ios 0x3e1cd8;
    bool shouldSnap(GameObject*) = win inline, m1 0x46b24, imac 0x4efe0, ios inline {
        return (int)p0->getRotation() % 90 == 0;
    }
    void showDeleteConfirmation() = m1 0x32b90, imac 0x33560;
    void showLiveColorSelectForMode(int);
    void showLiveColorSelectForModeSpecial(int);
    void showMaxBasicError() = win 0x1112a0, m1 0x34474, imac 0x34ec0, ios 0x3e340c;
    void showMaxCoinError() = m1 0x345f0, imac 0x35020, ios 0x3e34f0;
    void showMaxError() = win 0x111170, m1 0x342fc, imac 0x34d70, ios 0x3e332c;
    void showUI(bool) = ios 0x3e6770, win 0x110200, m1 0x388f4, imac 0x3de00;
    void sliderChanged(cocos2d::CCObject*) = ios 0x3bf328, win 0xe13a0, imac 0xbd50, m1 0xd16c;
    static int smartTypeForKey(int) = win 0x12b890;
    cocos2d::CCSprite* spriteFromObjectString(gd::string str, bool, bool, int objLimit, cocos2d::CCArray*, cocos2d::CCArray*, GameObject*) = win 0x10c790, imac 0x344a0, m1 0x33ab0, ios 0x3e2af4;
    TodoReturn toggleDuplicateButton();
    void toggleEditObjectButton() = win 0x118f10;
    void toggleEnableRotate(cocos2d::CCObject*) = ios 0x3bf870, win 0x10eb00, imac 0xc5b0, m1 0xd994;
    void toggleFreeMove(cocos2d::CCObject*) = ios 0x3bf790, win 0x10e980, m1 0xd8b4, imac 0xc4c0;
    TodoReturn toggleLockUI(bool);
    void toggleMode(cocos2d::CCObject*) = ios 0x3dc7b8, win 0xe37f0, imac 0x2af00, m1 0x2b140;
    void toggleObjectInfoLabel() = win 0xe1730, m1 0x2cfc4, imac 0x2d530, ios 0x3de3cc;
    void toggleSnap(cocos2d::CCObject*) = ios 0x3bf7f8, win 0x10ea20, imac 0xc530, m1 0xd91c;
    void toggleSpecialEditButtons() = win 0x119010;
    void toggleStickyControls(bool enable) = ios 0x3de424, win inline, imac 0x2d590, m1 0x2d020 {
        m_stickyControlsEnabled = enable;
        m_linkBtn->setEnabled(enable);
              m_linkBtn->setVisible(enable);
              m_unlinkBtn->setEnabled(enable);
              m_unlinkBtn->setVisible(enable);
    }
    void toggleSwipe(cocos2d::CCObject*) = ios 0x3bf690, win 0x10e8e0, m1 0xd7b4, imac 0xc3d0;
    void transformObject(GameObject*, EditCommand, bool) = win 0x11ed00, m1 0x44924, imac 0x4be30, ios 0x3ef1e0;
    void transformObjectCall(cocos2d::CCObject*) = win 0x11e780;
    void transformObjectCall(EditCommand) = ios 0x3ee598, win 0x11e7b0, imac 0x4ae10, m1 0x43bc8;
    void transformObjects(cocos2d::CCArray* objs, cocos2d::CCPoint anchor, float scaleX, float scaleY, float rotateX, float rotateY, float warpX, float warpY) = win 0x11fec0, m1 0x3b5d4, imac 0x40ec0, ios 0x3e8474;
    void transformObjectsActive() = win 0x11fe00, m1 0x44f58, imac 0x4d0b0, ios 0x3ef7d0;
    void transformObjectsReset() = win inline, m1 0x45a68, imac 0x4ddb0, ios 0x3ef998 {
        auto selectedObjects = m_selectedObjects;
        if (!selectedObjects || selectedObjects->count() == 0) {
            if (!m_selectedObject) return;
            selectedObjects = cocos2d::CCArray::createWithObject(m_selectedObject);
        }
        if (selectedObjects) this->transformObjects(selectedObjects, m_pivotPoint, 1.f, 1.f, 0.f, 0.f, m_transformState.m_skewX, m_transformState.m_skewY);
    }
    void triggerSwipeMode() = win 0x121b80, m1 0x46b70, imac 0x4f010, ios 0x3f0680;
    TodoReturn tryUpdateTimeMarkers();
    void undoLastAction(cocos2d::CCObject*) = win 0x110120, m1 0xdab0, imac 0xc6e0, ios 0x3bf900;
    void updateButtons() = win 0xe07e0, m1 0x2c954, imac 0x2cdd0, ios 0x3dde88;
    void updateCreateMenu(bool) = ios 0x3def70, win 0x10d8c0, imac 0x2e710, m1 0x2e0e4;
    void updateDeleteButtons() = ios 0x3e1790, win 0xe5fb0, m1 0x31c94, imac 0x325d0;
    void updateDeleteMenu() {
        m_deleteMenu->setVisible(m_selectedMode == 1);
        this->updateDeleteButtons();
    }
    void updateEditButtonColor(int, cocos2d::ccColor3B) = m1 0x39b54, imac 0x3f120, win 0x1130f0;
    void updateEditColorButton() = m1 0x42894, imac 0x497f0;
    void updateEditMenu() {
        m_editButtonBar->setVisible(m_selectedMode == 3);
    }
    void updateGridNodeSize() = ios 0x3df914, win 0xe1560, imac 0x2f620, m1 0x2f000;
    TodoReturn updateGridNodeSize(int);
    TodoReturn updateGroupIDBtn2();
    void updateGroupIDLabel() = imac 0x2ccd0, win 0x11dac0, m1 0x2c844, ios 0x3ddd7c;
    void updateObjectInfoLabel() = ios 0x3dfae0, win 0xe17c0, m1 0x2f208, imac 0x2f870;
    void updatePlaybackBtn() = win 0x110850, m1 0x2d08c, imac 0x2d5f0, ios 0x3de490;
    void updateSlider() = win 0xe14a0, m1 0x2b3c0, imac 0x2b1b0, ios 0x3dca34;
    void updateSpecialUIElements() = win inline, m1 0x2e6c0, imac 0x2ed30, ios inline {
        this->updateObjectInfoLabel();
        this->updateScaleControl();
    }
    void updateZoom(float) = ios 0x3e6980, win 0x110ef0, m1 0x38b14, imac 0x3e050;
    float valueFromXPos(float);
    float xPosFromValue(float);
    void zoomGameLayer(bool) = win inline, m1 0x38d98, imac 0x3e320, ios inline {
        auto scale = m_editorLayer->m_objectLayer->getScale();
        this->updateZoom(std::clamp(p0 ? scale + .1f : scale - .1f, .1f, 4.f));
    }
    void zoomIn(cocos2d::CCObject*) = ios 0x3bfee8, win 0x110e50, imac 0xced0, m1 0xe218;
    void zoomOut(cocos2d::CCObject*) = ios 0x3bff3c, win 0x110ea0, imac 0xcf20, m1 0xe270;

    gd::unordered_map<int, GameObjectEditorState> m_objectEditorStates;
    GJTransformState m_transformState;
    bool m_isPlayingMusic;
    EditButtonBar* m_customTabBar;
    bool m_alertShown;
    cocos2d::CCArray* m_uiItems;
    float m_gridSize;
    int m_playerTouchID1;
    int m_playerTouchID2;
    bool m_playbackActive;
    float m_playbackStartWarp;
    float m_playbackStartTime;
    UndoObject* m_undoObject;
    bool m_spaceSwiping;
    bool m_noSnapUndo;
    bool m_editingObject;
    bool m_increaseScale;
    bool m_refreshPosition;
    int m_rotationTouchID;
    int m_scaleTouchID;
    int m_touchID;
    int m_transformTouchID;
    cocos2d::CCLabelBMFont* m_objectInfoLabel;
    GJRotationControl* m_rotationControl;
    cocos2d::CCPoint m_pivotPoint;
    bool m_canActivateControls;
    GJScaleControl* m_scaleControl;
    GJTransformControl* m_transformControl;
    cocos2d::CCNode* m_transformNode;
    cocos2d::CCNode* m_transformChild;
    cocos2d::CCDictionary* m_editButtonDict;
    EditButtonBar* m_createButtonBar;
    EditButtonBar* m_editButtonBar;
    Slider* m_positionSlider;
    float m_unk308;
    float m_constrainedHeight;
    float m_toolbarHeight;
    bool m_swipeEnabled;
    bool m_swipeActive;
    bool m_swipeSelected;
    bool m_continuousSnap;
    bool m_freeMoveEnabled;
    bool m_snapObjectExists;
    bool m_snapSelected;
    bool m_stickyControlsEnabled;
    bool m_speedObjectsUpdated;
    cocos2d::CCPoint m_createPosition;
    cocos2d::CCArray* m_snapPositions;
    cocos2d::CCPoint m_snapPosition;
    cocos2d::CCArray* m_selectedObjects;
    cocos2d::CCMenu* m_deleteMenu;
    cocos2d::CCArray* m_customTabControls;
    CCMenuItemSpriteExtra* m_deleteModeBtn;
    CCMenuItemSpriteExtra* m_buildModeBtn;
    CCMenuItemSpriteExtra* m_editModeBtn;
    CCMenuItemSpriteExtra* m_swipeBtn;
    CCMenuItemSpriteExtra* m_freeMoveBtn;
    CCMenuItemSpriteExtra* m_deselectBtn;
    CCMenuItemSpriteExtra* m_snapBtn;
    CCMenuItemSpriteExtra* m_rotateBtn;
    CCMenuItemSpriteExtra* m_playbackBtn;
    CCMenuItemSpriteExtra* m_playtestBtn;
    CCMenuItemSpriteExtra* m_playtestStopBtn;
    CCMenuItemSpriteExtra* m_trashBtn;
    CCMenuItemSpriteExtra* m_linkBtn;
    CCMenuItemSpriteExtra* m_unlinkBtn;
    CCMenuItemSpriteExtra* m_undoBtn;
    CCMenuItemSpriteExtra* m_redoBtn;
    CCMenuItemSpriteExtra* m_editObjectBtn;
    CCMenuItemSpriteExtra* m_editGroupBtn;
    CCMenuItemSpriteExtra* m_editHSVBtn;
    CCMenuItemSpriteExtra* m_editSpecialBtn;
    cocos2d::CCObject* m_unk3F0;
    CCMenuItemSpriteExtra* m_copyPasteBtn;
    CCMenuItemSpriteExtra* m_copyBtn;
    CCMenuItemSpriteExtra* m_pasteBtn;
    CCMenuItemSpriteExtra* m_copyValuesBtn;
    CCMenuItemSpriteExtra* m_pasteStateBtn;
    CCMenuItemSpriteExtra* m_pasteColorBtn;
    CCMenuItemSpriteExtra* m_goToLayerBtn;
    cocos2d::CCArray* m_createButtonBars;
    cocos2d::CCMenu* m_tabsMenu;
    cocos2d::CCArray* m_tabsArray;
    cocos2d::CCSprite* m_deleteAllSprite;
    cocos2d::CCSprite* m_customDeleteSprite;
    CCMenuItemSpriteExtra* m_deleteButton;
    CCMenuItemSpriteExtra* m_deleteAllButton;
    CCMenuItemSpriteExtra* m_deleteFilterNone;
    CCMenuItemSpriteExtra* m_deleteFilterStatic;
    CCMenuItemSpriteExtra* m_deleteFilterDetails;
    CCMenuItemSpriteExtra* m_deleteFilterCustom;
    cocos2d::CCLabelBMFont* m_currentLayerLabel;
    CCMenuItemSpriteExtra* m_layerNextBtn;
    CCMenuItemSpriteExtra* m_layerPrevBtn;
    CCMenuItemSpriteExtra* m_goToBaseBtn;
    ButtonSprite* m_deleteGroupSprite;
    ButtonSprite* m_deleteColorSprite;
    void* m_unk4b8;
    void* m_unk4c0;
    int m_selectedObjectIndex;
    cocos2d::CCArray* m_createButtonArray;
    cocos2d::CCArray* m_customObjectButtonArray;
    cocos2d::CCArray* m_deleteObjects;
    int m_selectedMode;
    LevelEditorLayer* m_editorLayer;
    cocos2d::CCPoint m_swipeStart;
    cocos2d::CCPoint m_swipeEnd;
    cocos2d::CCPoint m_swipePosition;
    cocos2d::CCPoint m_lastTouchPoint;
    cocos2d::CCPoint m_cameraTest;
    cocos2d::CCPoint m_clickAtPosition;
    GameObject* m_selectedObject;
    GameObject* m_snapObject;
    bool m_isDraggingCamera;
    bool m_continueSwipe;
    bool m_findSnap;
    void* m_unk540;
    int m_selectedTab;
    int m_cycledObjectIndex;
    ColorSelectLiveOverlay* m_colorOverlay;
    HSVLiveOverlay* m_hsvOverlay;
    double m_keyTime;
    double m_keyTime2;
    bool m_swipeModeTriggered;
    cocos2d::CCSprite* m_layerLockSprite;
    void* m_unk580;
    bool m_pressedSpace;
    float m_editorZoom;
    bool m_isPaused;
    bool m_reloadItems;
}

[[link(android)]]
class EditTriggersPopup : SetupTriggerPopup {
    // virtual ~EditTriggersPopup();

    static EditTriggersPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x2874a0;

    virtual void determineStartValues() = win 0x287910, imac 0x288da0, m1 0x231fb4, ios 0x2d2e64;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x287920, imac 0x288db0, m1 0x231fb8, ios 0x2d2e68;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x2875b0, m1 0x231cd4, imac 0x288ae0, ios 0x2d2c04;
}

[[link(android)]]
class EffectGameObject : EnhancedGameObject {
    // virtual ~EffectGameObject();
    EffectGameObject() = win 0x47d040, m1 0x199d84, imac 0x1e2030, ios 0x3925fc;

    static EffectGameObject* create(char const* frame) = win inline, m1 0x16a0d4, imac 0x1a8150, ios 0x37de80 {
        auto ret = new EffectGameObject();
        if (ret->init(frame)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void setOpacity(unsigned char) = win 0x48d790, m1 0x16a470, imac 0x1a8550, ios 0x37e130;
    virtual void firstSetup() = win 0x48ffb0, imac 0x1aa2d0, m1 0x16b8dc, ios 0x37f594;
    virtual void customSetup() = win 0x48ffd0, m1 0x14e098, imac 0x186600, ios 0x370000;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x48d7d0, imac 0x1a85d0, m1 0x16a4f4, ios 0x37e1b4;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x490230, imac 0x187840, m1 0x14f5b0, ios 0x371028;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4932b0, imac 0x17c180, m1 0x1463d0, ios 0x36b454;
    virtual void setRScaleX(float) = win 0x48d210, m1 0x16a178, imac 0x1a81e0, ios 0x37df18;
    virtual void setRScaleY(float) = win 0x48d260, m1 0x16a188, imac 0x1a8200, ios 0x37df28;
    virtual void triggerActivated(float) = win 0x48ff90, imac 0x1aa260, m1 0x16b854, ios 0x37f520;
    virtual void restoreObject() = win 0x48fd80, imac 0x1aa020, m1 0x16b604, ios 0x37f2ec;
    virtual float spawnXPosition() = win 0x48ff50, imac 0x1aa220, m1 0x16b814, ios 0x37f4e8;
    virtual bool canReverse() = win 0x493160, imac 0x1aa3b0, m1 0x16ba58, ios 0x37f680;
    virtual bool isSpecialSpawnObject() = m1 0x16bae4, imac 0x1aa420, ios 0x37f70c { return false; }
    virtual bool canBeOrdered() = win 0x493240, imac 0x1aa430, m1 0x16baec, ios 0x37f714;
    virtual cocos2d::CCLabelBMFont* getObjectLabel() = win 0x47d2b0, m1 0x199b10, imac 0x1e1d20, ios 0x3922c0;
    virtual void setObjectLabel(cocos2d::CCLabelBMFont*) = win 0x47d2c0, m1 0x199b18, imac 0x1e1d30, ios 0x3922c8;
    virtual void stateSensitiveOff(GJBaseGameLayer*) = win 0x48fcd0, imac 0x1a9f90, m1 0x16b578, ios 0x37f260;

    int getTargetColorIndex() = win inline, m1 0x16b618, imac 0x1aa040, ios 0x37f300 {
        switch (m_objectID) {
            case 29: return 1000;
            case 30: return 1001;
            case 105: return 1004;
            case 744: return 1003;
            case 900: return 1009;
            case 915: return 1002;
            default: return m_targetColor;
        }
    }
    bool init(char const* frame) = win 0x48d1a0, m1 0x1405bc, imac 0x174830, ios inline {
        if (!EnhancedGameObject::init(frame)) return false;
        m_classType = GameObjectClassType::Effect;
        m_triggerTargetColor.r = 255;
        m_triggerTargetColor.g = 255;
        m_triggerTargetColor.b = 255;
        m_legacyHSV = true;
        m_duration = .5f;
        return true;
    }
    void playTriggerEffect() = win 0x48d2b0, imac 0x1a8220, m1 0x16a198, ios 0x37df38;
    void resetSpawnTrigger() = win inline, m1 0x16b8a8, imac 0x1aa2a0, ios 0x37f560 {
        m_activatedByPlayer1 = false;
        m_activatedByPlayer2 = false;
        m_spawnXPosition = this->getPosition().x;
    }
    void setTargetID(int id) = win inline, m1 0x157c40, imac 0x192130, ios 0x3756ec {
        m_targetGroupID = std::clamp(id, 0, 9999);
    }
    void setTargetID2(int id) = win inline, m1 0x157c58, imac 0x192150, ios 0x375704 {
        m_centerGroupID = std::clamp(id, 0, 9999);
    }
    void triggerEffectFinished() = win 0x48d780, m1 0x16a468, imac 0x1a8540, ios 0x37e128;
    void updateInteractiveHover(float offset) = win 0x48fe30, m1 0x16b704, imac 0x1aa110, ios 0x37f3ec;
    void updateSpecialColor() = win 0x48fdb0, m1 0x16b68c, imac 0x1aa0b0, ios 0x37f374;
    void updateSpeedModType() = win 0x493010, m1 0x16b8f4, imac 0x1aa2f0, ios 0x37f5ac;

    // this is probably pretty wrong :D

    bool m_unknownBool;
    cocos2d::ccColor3B m_triggerTargetColor;
    // property 10
    float m_duration;
    // property 35
    float m_opacity;
    bool m_triggerEffectPlaying;
    // property 51
    int m_targetGroupID;
    // property 71
    int m_centerGroupID;
    // property 11
    bool m_isTouchTriggered;
    // property 62
    bool m_isSpawnTriggered;
    // property 369
    bool m_hasCenterEffect;
    // property 75
    float m_shakeStrength;
    // property 84
    float m_shakeInterval;
    // property 14
    bool m_tintGround;
    // property 15
    bool m_usesPlayerColor1;
    // property 16
    bool m_usesPlayerColor2;
    // property 17
    bool m_usesBlending;
    // property 28, property 29
    cocos2d::CCPoint m_moveOffset;
    // property 30
    EasingType m_easingType;
    // property 85
    float m_easingRate;
    // property 58
    bool m_lockToPlayerX;
    // property 59
    bool m_lockToPlayerY;
    // property 141
    bool m_lockToCameraX;
    // property 142
    bool m_lockToCameraY;
    // property 100
    bool m_useMoveTarget;
    // property 101
    MoveTargetType m_moveTargetMode;
    // property 143
    float m_moveModX;
    // property 144
    float m_moveModY;
    // property 393
    bool m_smallStep;
    // property 394
    bool m_isDirectionFollowSnap360;
    // property 395
    int m_targetModCenterID;
    // property 396
    float m_directionModeDistance;
    // property 397
    bool m_isDynamicMode;
    // property 544
    bool m_isSilent;
    // property 538
    int m_specialTarget;
    // property 68
    float m_rotationDegrees;
    // property 69
    int m_times360;
    // property 70
    bool m_lockObjectRotation;
    // property 401
    int m_rotationTargetID;
    // property 402
    float m_rotationOffset;
    // property 403
    int m_dynamicModeEasing;
    // property 72
    float m_followXMod;
    // property 73
    float m_followYMod;
    // property 90
    float m_followYSpeed;
    // property 91
    float m_followYDelay;
    // property 92
    int m_followYOffset;
    // property 105
    float m_followYMaxSpeed;
    // property 45
    float m_fadeInDuration;
    // property 46
    float m_holdDuration;
    // property 47
    float m_fadeOutDuration;
    // property 48
    int m_pulseMode;
    // property 52
    int m_pulseTargetType;
    // property 49
    cocos2d::ccHSVValue m_hsvValue;
    // property 50
    int m_copyColorID;
    // property 60
    bool m_copyOpacity;
    // property 65
    bool m_pulseMainOnly;
    // property 66
    bool m_pulseDetailOnly;
    // property 86
    bool m_pulseExclusive;
    // property 210
    bool m_legacyHSV;
    // property 56
    bool m_activateGroup;
    // property 81
    bool m_touchHoldMode;
    // property 82
    TouchTriggerType m_touchToggleMode;
    // property 198
    TouchTriggerControl m_touchPlayerMode;
    // property 89
    bool m_isDualMode;
    // property 76
    int m_animationID;
    float m_spawnXPosition;
    int m_spawnOrder;
    // property 87
    bool m_isMultiTriggered;
    // property 102
    bool m_previewDisable;
    // property 441
    bool m_spawnOrdered;
    // property 93
    bool m_triggerOnExit;
    // property 95
    int m_itemID2;
    // property 534
    int m_controlID;
    // property 535
    bool m_targetControlID;
    // property 94
    bool m_isDynamicBlock;
    // property 80
    int m_itemID;
    // property 138
    bool m_targetPlayer1;
    // property 200
    bool m_targetPlayer2;
    // property 201
    bool m_followCPP;
    // property 78
    bool m_subtractCount;
    // property 381
    bool m_collectibleIsPickupItem;
    // property 382
    bool m_collectibleIsToggleTrigger;
    // property 440
    int m_collectibleParticleID;
    // property 383
    int m_collectiblePoints;
    // property 463
    bool m_hasNoAnimation;
    void* m_unk698;
    int m_forceModID;
    bool m_rotateFollowP1;
    bool m_rotateFollowP2;
    float m_unk6a8;
    float m_unk6ac;
    float m_unk6b0;
    bool m_unk6b4;
    // property 148
    float m_gravityValue;
    // property 284
    bool m_isSinglePTouch;
    // property 371
    float m_zoomValue;
    // property 111
    bool m_cameraIsFreeMode;
    // property 112
    bool m_cameraEditCameraSettings;
    // property 113
    float m_cameraEasingValue;
    // property 114
    float m_cameraPaddingValue;
    // property 370
    bool m_cameraDisableGridSnap;
    // property 118
    bool m_endReversed;
    // property 120
    float m_timeWarpTimeMod;
    // property 13
    bool m_shouldPreview;
    // property 115
    int m_ordValue;
    // property 170
    int m_channelValue;
    // property 117
    bool m_isReverse;
    short m_speedModType;
    cocos2d::CCPoint m_speedStart;
    // property 12
    int m_secretCoinID;
    bool m_unk6f4;
    bool m_unk6f5;
    cocos2d::CCPoint m_endPosition;
    float m_spawnTriggerDelay;
    float m_gravityMod;
    bool m_unk708;
    cocos2d::CCLabelBMFont* m_objectLabel;
    // property 280
    bool m_ignoreGroupParent;
    // property 281
    bool m_ignoreLinkedObjects;
    bool m_channelChanged;
}

[[link(android), depends(CAState), depends(PulseEffectAction), depends(CountTriggerAction), depends(OpacityEffectAction), depends(TouchToggleAction), depends(CollisionTriggerAction), depends(ToggleTriggerAction), depends(SpawnTriggerAction), depends(GroupCommandObject2), depends(TimerItem), depends(TimerTriggerAction)]]
class EffectManagerState {
    // ~EffectManagerState();
    // EffectManagerState();

    gd::vector<CAState> m_unkVecCAState;
    gd::vector<PulseEffectAction> m_unkVecPulseEffectAction;
    gd::unordered_map<int,gd::vector<PulseEffectAction>> m_unorderedMapInt_vectorPulseEffectAction;
    gd::unordered_map<int,gd::vector<CountTriggerAction>> m_unorderedMapInt_vectorCountTriggerAction;
    gd::unordered_set<int> m_unorderedSet_int1;
    gd::map<int,int> m_mapInt_Int;
    gd::unordered_map<int,OpacityEffectAction> m_unorderedMapInt_OpacityEffectAction;
    gd::vector<TouchToggleAction> m_vectorTouchToggleAction;
    gd::vector<CollisionTriggerAction> m_vectorCollisionTriggerAction;
    gd::vector<ToggleTriggerAction> m_vectorToggleTriggerAction;
    gd::vector<SpawnTriggerAction> m_vectorSpawnTriggerAction;
    gd::unordered_map<int,int> m_itemCountMap;
    gd::unordered_map<int,bool> m_unorderedMapInt_bool;
    gd::vector<GroupCommandObject2> m_vectorGroupCommandObject2;
    gd::unordered_map<int,std::pair<double,double>> m_unorderedMapInt_pair_double_double;
    gd::unordered_set<int> m_unorderedSet_int2;
    gd::unordered_map<int,TimerItem> m_timerItemMap;
    gd::unordered_map<int,gd::vector<TimerTriggerAction>> m_unorderedMapInt_vectorTimerTriggerAction;
}

[[link(android)]]
class EndLevelLayer : GJDropDownLayer {
    // virtual ~EndLevelLayer();
    // EndLevelLayer();

    static EndLevelLayer* create(PlayLayer* playLayer);

    virtual void keyBackClicked() = win 0x133aa0, imac 0x4afe70, m1 0x418b0c, ios 0x2f81f4;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x135140, imac 0x4b0620, m1 0x4192a4, ios 0x2f893c;
    virtual void customSetup() = win 0x131260, imac 0x4acc80, m1 0x415c30, ios 0x2f5654;
    virtual void showLayer(bool) = win 0x133070, m1 0x417d7c, imac 0x4af060, ios 0x2f74d8;
    virtual void enterAnimFinished() = m1 0x418a60, imac 0x4afd90, ios 0x2f8174 {}
    virtual void keyUp(cocos2d::enumKeyCodes) = m1 0x419320, imac 0x4b06b0, ios 0x2f8980 {}

    void coinEnterFinished(cocos2d::CCPoint) = win 0x134230, m1 0x418e98, imac 0x4b0230, ios 0x2f8550;
    void coinEnterFinishedO(cocos2d::CCObject*) = win 0x1341f0, m1 0x418e4c, imac 0x4b01f0;
    void currencyEnterFinished();
    void diamondEnterFinished();
    gd::string getCoinString() = win 0x132d30, m1 0x4174b8, imac 0x4ae840;
    const char* getEndText() = win 0x135190, m1 0x41770c, imac 0x4aea80;
    void goEdit() = win 0x1336e0;
    bool init(PlayLayer* playLayer);
    void onEdit(cocos2d::CCObject* sender) = win 0x1335e0, m1 0x417a1c, imac 0x4aed20, ios 0x2f71c0;
    void onEveryplay(cocos2d::CCObject* sender);
    void onHideLayer(cocos2d::CCObject* sender) = win 0x1337b0, imac 0x4aef70, m1 0x417c94, ios 0x2f7420;
    void onLevelLeaderboard(cocos2d::CCObject* sender) = win 0x132c30, m1 0x417c20, imac 0x4aef00, ios 0x2f73ac;
    void onMenu(cocos2d::CCObject* sender) = win 0x133460, m1 0x417918, imac 0x4aec30, ios 0x2f70d4;
    void onReplay(cocos2d::CCObject* sender) = win 0x133250, m1 0x4177f4, imac 0x4aeb30, ios 0x2f6fc8;
    void onRestartCheckpoint(cocos2d::CCObject* sender) = win 0x133890, m1 0x417ab8, imac 0x4aedb0, ios 0x2f725c;
    void playCoinEffect(float) = win 0x133fb0, m1 0x41825c, imac 0x4af550, ios 0x2f7998;
    void playCurrencyEffect(float) = win 0x134560;
    void playDiamondEffect(float) = win 0x1349f0, m1 0x418728, imac 0x4afa40, ios 0x2f7e48;
    void playEndEffect() = win 0x134e80, m1 0x418c38, imac 0x4affd0, ios 0x2f831c;
    void playStarEffect(float) = win 0x133ab0;
    void starEnterFinished() = win 0x133e50;
    void tryShowBanner(float);

    PlayLayer* m_playLayer;
    bool m_notLocal;
    bool m_coinsVerified;
    bool m_unknown3;
    bool m_exiting;
    bool m_animateCoins;
    bool m_endEffectPlayed;
    cocos2d::CCMenu* m_sideMenu;
    cocos2d::CCArray* m_coinsToAnimate;
    cocos2d::CCPoint m_starsPosition;
    cocos2d::CCPoint m_orbsPosition;
    cocos2d::CCPoint m_diamondsPosition;
    int m_orbs;
    int m_stars;
    int m_moons;
    int m_diamonds;
    bool m_secretKey;
    bool m_hidden;
}

[[link(android)]]
class EndPortalObject : GameObject {
    // virtual ~EndPortalObject();

    static EndPortalObject* create() = m1 0x318990, imac 0x3891b0;

    virtual bool init() = win 0x136110, imac 0x389250, m1 0x318a2c, ios 0x3f66b0;
    virtual void setPosition(cocos2d::CCPoint const&) = win 0x136620, m1 0x318ec4, imac 0x389750, ios 0x3f6b38;
    virtual void setVisible(bool) = win 0x136780, imac 0x389860, m1 0x318fbc, ios 0x3f6c30;

    cocos2d::CCPoint getSpawnPos() = win 0x136560, m1 0x318e60, imac 0x3896d0;
    void triggerObject(GJBaseGameLayer*) = win inline, ios 0x3f6a50, imac 0x389640, m1 0x318dcc {
        auto playLayer = GameManager::sharedState()->m_playLayer;
        if (!playLayer->m_player1->m_isDead) {
            playLayer->m_levelEndAnimationStarted = true;
            playLayer->m_uiLayer->disableMenu();
            playLayer->playEndAnimationToPos(this->getStartPos());
        }
    }
    TodoReturn updateColors(cocos2d::ccColor3B);
    void updateEndPos(bool) = win 0x1367d0, m1 0x319020, imac 0x3898c0, ios 0x3f6c94;

    cocos2d::CCSprite* m_gradientBar;
    bool m_flippedX;
    bool m_startPosHeightRelated;
}

[[link(android)]]
class EndTriggerGameObject : EffectGameObject {
    // virtual ~EndTriggerGameObject();

    static EndTriggerGameObject* create();

    virtual bool init() = win 0x4a4110, m1 0x1864c4, imac 0x1ca130, ios 0x38ad10;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a4180, imac 0x1ca180, m1 0x186514, ios 0x38ad60;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a45b0, imac 0x1caf50, m1 0x1870ac, ios 0x38b0ec;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a4270, imac 0x1ca260, m1 0x1865f0, ios 0x38adec;

    // property 460
    bool m_noEffects;
    // property 461
    bool m_noSFX;
    // property 487
    bool m_instant;
}

[[link(android)]]
class EnhancedGameObject : GameObject {
    // virtual ~EnhancedGameObject();
    EnhancedGameObject() = win 0x188580, ios 0x264720 {
        m_poweredOn = false;
        m_state = 0;
        m_animationRandomizedStartValue = 0;
        m_animationStart = 0.f;
        m_unk540 = 0.f;
        m_unk544 = 0.f;
        m_unk548 = false;
        m_randomFrameTime = 1.f;
        m_visible = false;
        m_shouldNotHideAnimFreeze = false;
        m_usesSpecialAnimation = false;
        m_frameTime = 1.f;
        m_frames = 1;
        m_hasCustomAnimation = false;
        m_hasCustomRotation = false;
        m_disableRotation = false;
        m_rotationSpeed = 0.f;
        m_rotationAngle = 0.f;
        m_rotationDelta = 0.f;
        m_rotationAnimationSpeed = 0.f;
        m_animationRandomizedStart = false;
        m_animationSpeed = 1.f;
        m_animationShouldUseSpeed = false;
        m_animateOnTrigger = false;
        m_disableDelayedLoop = false;
        m_disableAnimShine = false;
        m_singleFrame = 0;
        m_animationOffset = false;
        m_animationTriggered = false;
        m_unkAnimationInt = 0;
        m_maybeAnimationVariableXInt = 0;
        m_maybeAnimationVariableYInt = 0;
        m_animateOnlyWhenActive = false;
        m_isNoMultiActivate = false;
        m_isMultiActivate = false;
        m_activated = false;
        m_activatedByPlayer1 = false;
        m_activatedByPlayer2 = false;
        m_hasUniqueCoin = false;
    }

    static EnhancedGameObject* create(char const* frame) = win inline, m1 0x4d7780, imac 0x58a150, ios 0x253cc8 {
        auto ret = new EnhancedGameObject();
        if (ret->init(frame)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void customSetup() = win 0x1a1ff0, imac 0x5b42e0, m1 0x4ec86c, ios 0x262680;
    virtual void resetObject() = win 0x1a19b0, imac 0x5b3b10, m1 0x4ec1fc, ios 0x2620bc;
    virtual void deactivateObject(bool) = win 0x1a3af0, imac 0x5b7190, m1 0x4ed9e8, ios 0x26389c;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x1a1cc0, imac 0x5b3df0, m1 0x4ec4b0, ios 0x26234c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x1a3c50, imac 0x5b71f0, m1 0x4eda50, ios 0x263904;
    virtual void triggerActivated(float) = win 0x1a1b00, m1 0x4ec328, imac 0x5b3c80, ios 0x2621e8;
    virtual void restoreObject() = win 0x1a1a60, imac 0x5b3bb0, m1 0x4ec278, ios 0x262138;
    virtual void animationTriggered() = win 0x1a1bf0, m1 0x4ec428, imac 0x5b3d50, ios 0x2622c8;
    virtual void activatedByPlayer(PlayerObject*) = win 0x1a1b10, imac 0x5b3c90, m1 0x4ec334, ios 0x2621f4;
    virtual bool hasBeenActivatedByPlayer(PlayerObject*) = win 0x1a1b70, imac 0x5b3ce0, m1 0x4ec394, ios 0x26224c;
    virtual bool hasBeenActivated() = win 0x1a1bd0, m1 0x4ec408, imac 0x5b3d30, ios 0x2622a8;
    virtual void saveActiveColors() = win 0x1a1c50, imac 0x5b3d70, m1 0x4ec438, ios 0x2622d8;
    virtual bool canAllowMultiActivate() = win 0x1a1850, imac 0x5b3810, m1 0x4ec104, ios 0x261f88;
    virtual bool getHasSyncedAnimation() = win 0x188660, m1 0x199ae8, imac 0x1e1cd0, ios 0x26466c;
    virtual bool getHasRotateAction() = win 0x188670, m1 0x199af0, imac 0x1e1ce0, ios 0x264674;
    virtual bool canMultiActivate(bool) = win 0x1a1ae0, imac 0x5b3c60, m1 0x4ec304, ios 0x2621c4;
    virtual void powerOnObject(int) = win 0x1a1aa0, imac 0x5b3bf0, m1 0x4ec2b0, ios 0x262170;
    virtual void powerOffObject() = win 0x1a1ac0, imac 0x5b3c10, m1 0x4ec2c4, ios 0x262184;
    virtual void stateSensitiveOff(GJBaseGameLayer*) {}
    virtual void updateSyncedAnimation(float, int) = win 0x1a4e30, imac 0x2499e0, m1 0x1f7c7c, ios 0x347598;
    virtual void updateAnimateOnTrigger(bool) = win 0x1a6af0, imac 0x24b920, m1 0x1f903c, ios 0x348938;

    void createRotateAction(float angle, int clockwiseDirection) = win 0x1a4300, m1 0x4ec7f4, imac 0x5b4240, ios 0x262608;
    bool init(char const* frame) = win 0x1a1800, m1 0x4ec0c4, imac 0x5b37d0, ios 0x261f48;
    void previewAnimateOnTrigger() = win inline, m1 0x1f9130, imac 0x24ba20, ios 0x3489fc {
        m_animateOnTrigger = false;
        m_isDisabled2 = false;
        this->updateSyncedAnimation(0.f, -1);
        m_animateOnTrigger = true;
    }
    void refreshRotateAction() = win inline, m1 0x4ef08c, imac 0x5b8de0, ios 0x263ed8 {
        this->createRotateAction(m_rotationAngle, 0);
    }
    void resetSyncedAnimation() = win inline, m1 0x1f9170, imac 0x24ba60, ios 0x348a3c {
        m_unk544 = 0.f;
        m_animationStart = m_unk548 ? -1.f : 0.f;
        m_unkAnimationInt = 0;
        this->updateSyncedAnimation(-m_animationRandomizedStartValue, -1);
    }
    void setupAnimationVariables() = win 0x1a6bf0, m1 0x1f91a4, imac 0x24bab0, ios 0x348a70;
    void triggerAnimation() = win inline, m1 0x1f8fe0, imac 0x24b8c0, ios 0x3488dc {
        if (!m_animateOnlyWhenActive || m_isActivated) {
            m_animationTriggered = true;
            m_isDisabled2 = false;
            m_maybeAnimationVariableXInt = -1;
            this->updateSyncedAnimation(0.f, -1);
            m_animationRandomizedStartValue = 0;
        }
    }
    void updateRotateAction(float dt) = win 0x1a4390, m1 0x4ef108, imac 0x5b8e60, ios 0x263ee4;
    void updateState(int state) = win inline, m1 0x4ec2d8, imac 0x5b3c30, ios 0x262198 {
        if (m_state < state) m_poweredOn = false;
        if (!m_poweredOn) this->powerOffObject();
    }
    void updateUserCoin() = ios 0x25e724, win 0x1a3970, imac 0x5a9770, m1 0x4e3b94;
    void waitForAnimationTrigger() = win inline, m1 0x1f8e84, imac 0x24b7a0, ios 0x3487a4 {
        m_animationTriggered = false;
        m_isDisabled2 = true;
        m_animationRandomizedStartValue = 0;
        m_animationStart = 0.f;
        m_unk540 = 0.f;
        m_unk544 = 0.f;
        this->setOpacity(0);
    }

    bool m_poweredOn;
    int m_state;
    int m_animationRandomizedStartValue;
    float m_animationStart;
    float m_unk540;
    float m_unk544;
    bool m_unk548;
    float m_randomFrameTime;
    bool m_visible;
    bool m_shouldNotHideAnimFreeze;
    bool m_usesSpecialAnimation;
    float m_frameTime;
    short m_frames;
    bool m_hasCustomAnimation;
    bool m_hasCustomRotation;
    // property 98
    bool m_disableRotation;

    // property 97
    float m_rotationSpeed;

    float m_rotationAngle;
    float m_rotationDelta;
    float m_rotationAnimationSpeed;
    
    // property 106
    bool m_animationRandomizedStart;
    // property 107
    float m_animationSpeed;
    // property 122
    bool m_animationShouldUseSpeed;
    // property 123
    bool m_animateOnTrigger;
    // property 126
    bool m_disableDelayedLoop;
    // property 127
    bool m_disableAnimShine;
    // property 462
    int m_singleFrame;
    // property 592
    bool m_animationOffset;
    bool m_animationTriggered;
    int m_unkAnimationInt;
    int m_maybeAnimationVariableXInt;
    int m_maybeAnimationVariableYInt;
    // property 214
    bool m_animateOnlyWhenActive;
    // property 444
    bool m_isNoMultiActivate;
    // property 99
    bool m_isMultiActivate;
    bool m_activated;
    bool m_activatedByPlayer1;
    bool m_activatedByPlayer2;
    bool m_hasUniqueCoin;
}    

[[link(android)]]
class EnhancedTriggerObject : EffectGameObject {
    // virtual ~EnhancedTriggerObject();

    static EnhancedTriggerObject* create(char const*);

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x499340, imac 0x1ac3b0, m1 0x16d4e8, ios 0x38017c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x499070, imac 0x1ab8c0, m1 0x16cbf8, ios 0x37fed8;

    bool init(char const*);

    // property 516
    int m_minXID;
    // property 517
    int m_minYID;
    // property 518
    int m_maxXID;
    // property 519
    int m_maxYID;
}

[[link(android)]]
class EnterEffectInstance {
    // ~EnterEffectInstance();
    // EnterEffectInstance(EnterEffectInstance const&);
    // EnterEffectInstance(EnterEffectInstance&&);
    // Sabe: idk why but this makes it so my mod works :shrug:
    EnterEffectInstance() {}
    EnterEffectInstance(EnterEffectObject* object, int targetID, int centerID, int, int targetGroupIndex, int easeIndexCount, int controlID) = win 0x1ff0b0, ios 0x20cab0 {
        m_gameObject = object;
        m_reversed = false;
        m_targetID = targetID;
        m_centerID = centerID;
        m_unkFloat3 = p3;
        m_easeIndex = 0;
        m_paused = false;
        m_paused2 = false;
        m_unkBool4 = false;
        m_targetGroupIndex = targetGroupIndex;
        m_controlID = controlID;
        if (easeIndexCount > 0) m_easeIndices.resize(easeIndexCount);
        this->loadValuesFromObject(m_gameObject);
    }

    void animateValue(int key, float value, float distance, float duration, int easingType, float easingRate, int easingBuffer) = win 0x1378e0, m1 0x4f1048, imac 0x5bb330, ios 0x4f900;
    float getValue(int key) = win inline, m1 0x4f14b8, imac 0x5bb830, ios inline {
        switch (key) {
            case 0: return m_length;
            case 1: return m_lengthVariance;
            case 2: return m_offset;
            case 3: return m_offsetVariance;
            case 4: return m_modFront;
            case 5: return m_modBack;
            case 6: return m_deadzone;
            case 7: return m_moveDistance;
            case 8: return m_moveDistanceVariance;
            case 9: return m_moveAngle;
            case 10: return m_moveAngleVariance;
            case 11: return m_moveX;
            case 12: return m_moveXVariance;
            case 13: return m_moveY;
            case 14: return m_moveYVariance;
            case 15: return m_scaleX;
            case 16: return m_scaleXVariance;
            case 17: return m_scaleY;
            case 18: return m_scaleYVariance;
            case 19: return m_rotation;
            case 20: return m_rotationVariance;
            case 21: return m_tint;
            case 22: return m_unk074;
            case 23: return m_toOpacity;
            case 24: return m_fromOpacity;
            case 25: return m_offsetY;
            case 26: return m_offsetYVariance;
            case 27: return m_relativeFade;
            case 28: return m_hue;
            case 29: return m_saturation;
            case 30: return m_value;
            default: return 0;
        }
    }
    void loadTransitions(EnterEffectObject* object, float time) = win 0x136d00, m1 0x4f0958, imac 0x5ba960, ios 0x4f2dc;
    void loadValuesFromObject(EnterEffectObject* object) = win 0x136b60, m1 0x4f0888, imac 0x5ba850, ios 0x4f21c;
    void setValue(int key, float value) = win 0x137d00, m1 0x4f121c, imac 0x5bb4d0, ios 0x4f9c0;
    void updateTransitions(float dt, GJBaseGameLayer* layer) = win 0x137ad0, imac 0x5bb680, m1 0x4f1338, ios 0x4fadc;

    gd::map<int,EnterEffectAnimValue> m_enterEffectAnimMap;
    float m_length;
    float m_lengthVariance;
    float m_offset;
    float m_offsetVariance;
    float m_offsetY;
    float m_offsetYVariance;
    float m_modFront;
    float m_modBack;
    float m_deadzone;
    float m_moveDistance;
    float m_moveDistanceVariance;
    float m_moveAngle;
    float m_moveAngleVariance;
    float m_moveX;
    float m_moveXVariance;
    float m_moveY;
    float m_moveYVariance;
    float m_relativeFade;
    float m_scaleX;
    float m_scaleXVariance;
    float m_scaleY;
    float m_scaleYVariance;
    float m_rotation;
    float m_rotationVariance;
    float m_tint;
    float m_unk074;
    float m_toOpacity;
    float m_fromOpacity;
    cocos2d::ccHSVValue m_hsvValue;
    float m_hue;
    float m_saturation;
    float m_value;
    EnterEffectObject* m_gameObject;
    bool m_reversed;
    int m_targetID;
    int m_centerID;
    int m_unkFloat3;
    int m_easeIndex;
    bool m_paused;
    bool m_paused2;
    bool m_unkBool4;
    int m_targetGroupIndex;
    gd::vector<int> m_easeIndices;
    int m_controlID;
}

[[link(android)]]
class EnterEffectObject : EffectGameObject {
    // virtual ~EnterEffectObject();

    // make every member zero
    EnterEffectObject() {
        m_enterType = 0;
        m_length = 0;
        m_lengthVariance = 0;
        m_offset = 0;
        m_offsetVariance = 0;
        m_offsetY = 0;
        m_offsetYVariance = 0;
        m_moveDistance = 0;
        m_moveDistanceVariance = 0;
        m_areaScaleX = 0.0f;
        m_areaScaleXVariance = 0.0f;
        m_areaScaleY = 0.0f;
        m_areaScaleYVariance = 0.0f;
        m_moveAngle = 0;
        m_moveAngleVariance = 0;
        m_startAngle = false;
        m_anglePosition = cocos2d::CCPoint{0, 0};
        m_relative = false;
        m_relativeFade = 0.0f;
        m_easingInType = EasingType::None;
        m_easingInRate = 2.0f;
        m_easingInBuffer = 0;
        m_easingOutType = EasingType::None;
        m_easingOutRate = 2.0f;
        m_easingOutBuffer = 0;
        m_moveX = 0;
        m_moveXVariance = 0;
        m_moveY = 0;
        m_moveYVariance = 0;
        m_tintChannelID = 0;
        m_property224 = 0;
        m_directionType = 0;
        m_xyMode = false;
        m_easeOutEnabled = false;
        m_modFront = 1.0f;
        m_modBack = 1.0f;
        m_areaTint = 0.0f;
        m_property285 = 0.0f;
        m_effectID = 0;
        m_areaRotation = 0.0f;
        m_areaRotationVariance = 0.0f;
        m_toOpacity = 0.0f;
        m_fromOpacity = 0.0f;
        m_inbound = false;
        m_hsvEnabled = false;
        m_deadzone = 0.0f;
        m_twoDirections = false;
        m_dontEditAreaParent = false;
        m_priority = 0;
        m_unk7d8 = 0;
        m_enterChannel = 0;
        m_useEffectID = false;
        m_unk7e4 = cocos2d::CCPoint{0, 0};
        m_unk7ec = cocos2d::CCPoint{0, 0};
        m_negativeTargetX = false;
        m_areaRange = 0;
        m_unk7fc = 0;
    }

    static EnterEffectObject* create(char const*);

    virtual void customSetup() = win 0x47fbf0, imac 0x186570, m1 0x14e030, ios 0x36ffc0;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x47fd50, imac 0x1868b0, m1 0x14e368, ios 0x370254;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x47df50, imac 0x174880, m1 0x140604, ios 0x369c38;

    bool init(char const*);
    void resetEnterAnimValues();

    // property 217
    int m_enterType;
    // property 222
    int m_length;
    // property 223
    int m_lengthVariance;
    // property 220
    int m_offset;
    // property 221
    int m_offsetVariance;
    // property 252
    int m_offsetY;
    // property 253
    int m_offsetYVariance;
    // property 218
    int m_moveDistance;
    // property 219
    int m_moveDistanceVariance;
    // property 233
    float m_areaScaleX;
    // property 234
    float m_areaScaleXVariance;
    // property 235
    float m_areaScaleY;
    // property 236
    float m_areaScaleYVariance;
    // property 231
    int m_moveAngle;
    // property 232
    int m_moveAngleVariance;
    bool m_startAngle;
    cocos2d::CCPoint m_anglePosition;
    // property 287
    bool m_relative;
    // property 288
    float m_relativeFade;
    // property 242
    EasingType m_easingInType;
    // property 243
    float m_easingInRate;
    int m_easingInBuffer;
    // property 248
    EasingType m_easingOutType;
    // property 249
    float m_easingOutRate;
    int m_easingOutBuffer;
    // property 237
    int m_moveX;
    // property 238
    int m_moveXVariance;
    // property 239
    int m_moveY;
    // property 240
    int m_moveYVariance;
    // property 260
    int m_tintChannelID;
    // property 224
    int m_property224;
    // property 262
    int m_directionType;
    // property 241
    bool m_xyMode;
    // property 261
    bool m_easeOutEnabled;
    // property 263
    float m_modFront;
    // property 264
    float m_modBack;
    // property 265
    float m_areaTint;
    // property 285
    float m_property285;
    // property 225
    int m_effectID;
    // property 270
    float m_areaRotation;
    // property 271
    float m_areaRotationVariance;
    // property 275
    float m_toOpacity;
    // property 286
    float m_fromOpacity;
    // property 276
    bool m_inbound;
    // property 278
    bool m_hsvEnabled;
    // property 282
    float m_deadzone;
    // property 283
    bool m_twoDirections;
    // property 539
    bool m_dontEditAreaParent;
    // property 341
    int m_priority;
    int m_unk7d8;
    // property 344
    int m_enterChannel;
    // property 355
    bool m_useEffectID;
    cocos2d::CCPoint m_unk7e4;
    cocos2d::CCPoint m_unk7ec;
    bool m_negativeTargetX;
    int m_areaRange;
    int m_unk7fc;
}

[[link(android)]]
class EventLinkTrigger : EffectGameObject {
    // virtual ~EventLinkTrigger();

    static EventLinkTrigger* create();

    virtual bool init() = win 0x49fce0, m1 0x17dc54, imac 0x1bfdd0, ios 0x386e24;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x49fd50, imac 0x1bfe20, m1 0x17dca4, ios 0x386e74;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a0220, imac 0x1c0cf0, m1 0x17e8e0, ios 0x387270;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x49fe30, imac 0x1bff00, m1 0x17dd78, ios 0x386ef8;

    // property 430
    gd::set<int> m_eventIDs;
    // property 431
    bool m_resetRemap;
    // property 447
    int m_extraID;
    // property 525
    int m_extraID2;
}

[[link(android)]]
class ExplodeItemNode : cocos2d::CCNode {
    // virtual ~ExplodeItemNode();

    static ExplodeItemNode* create(cocos2d::CCRenderTexture*) = win 0x36e780, m1 0x1b6f88, imac 0x201ac0, ios 0x6031c;

    virtual void update(float) = win 0x36f1f0, imac 0x202b30, m1 0x1b7f14, ios 0x6105c;

    void createSprites(int, int, float, float, float, float, float, float, cocos2d::ccColor4F, cocos2d::ccColor4F, bool) = win 0x36e840, m1 0x1b703c, imac 0x201b70, ios 0x603a8;
    bool init(cocos2d::CCRenderTexture*) = win inline, m1 0x1b7e18, imac 0x202a40, ios 0x60f6c {
        if (!cocos2d::CCNode::init()) return false;
        m_floorHeight = 90.f;
        m_renderTexture = p0;
        p0->retain();
        m_sprites = cocos2d::CCArray::create();
        m_sprites->retain();
        return true;
    }

    cocos2d::CCRenderTexture* m_renderTexture;
    cocos2d::CCArray* m_sprites;
    float m_unk1;
    float m_floorHeight;
    bool m_noGravity;
}

[[link(android)]]
class ExplodeItemSprite : cocos2d::CCSprite {
    // virtual ~ExplodeItemSprite();

    static ExplodeItemSprite* create();

    virtual bool init() = win 0x36f5c0, imac 0x202eb0, m1 0x1b8200, ios 0x6132c;

    float m_xVelocity;
    float m_yVelocity;
    float m_timeRemaining;
    float m_fadeOutTime;
    float m_rotVelocity;
    cocos2d::CCParticleSystemQuad* m_particles;
}

[[link(android)]]
class ExtendedLayer : cocos2d::CCLayer {
    // virtual ~ExtendedLayer();
    ExtendedLayer() {
        m_delegate = nullptr;
    }

    static ExtendedLayer* create() = win inline {
        auto ret = new ExtendedLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x3ec90, imac 0x394410, m1 0x322be4, ios 0x12fc48;
    virtual void setPosition(cocos2d::CCPoint const&) = win 0x3ecb0, m1 0x322be8, imac 0x394420, ios 0x12fc4c;

    BoomScrollLayerDelegate* m_delegate;
}

[[link(android)]]
class FileOperation {
    static gd::string getFilePath();
    static void readFile();
    static void saveFile() = m1 0x53a54c, imac 0x60d880;
}

[[link(android)]]
class FileSaveManager : GManager {
    // virtual ~FileSaveManager();

    static FileSaveManager* sharedState();

    virtual bool init() = imac 0x73b0, m1 0x91d4;
    virtual void firstLoad() = imac 0x73e0, m1 0x9204;

    cocos2d::CCDictionary* getStoreData();
    void loadDataFromFile(char const*);

    cocos2d::CCDictionary* m_storeData;
}

[[link(android)]]
class FindBPMLayer : CreateGuidelinesLayer {
    // virtual ~FindBPMLayer();

    static FindBPMLayer* create(int) = win 0x9b280;

    virtual void onClose(cocos2d::CCObject* sender) = win 0x9b870, imac 0x4f7a00, m1 0x4581b8, ios 0x823f8;
    virtual void playMusic() = win 0x9b6e0, m1 0x458024, imac 0x4f7870, ios 0x82284;
    virtual void registerTouch() = win 0x9b780, imac 0x4f7900, m1 0x4580c0, ios 0x82310;
    virtual void onInfo(cocos2d::CCObject* sender) = m1 0x4581b4, imac 0x4f79f0, ios 0x823f4 {}
    virtual void onRecord(cocos2d::CCObject* sender) = win 0x9b4a0, imac 0x4f7760, m1 0x457f44, ios 0x821e0;
    virtual void recordingDidStop() = win 0x9b660, imac 0x4f77a0, m1 0x457f7c, ios 0x82218;

    void calculateBPM();
    bool init(int);

    int m_songID;
    cocos2d::CCLabelBMFont* m_bpmLabel;
    float m_startOffset;
    int m_beats;
    int m_beatsPerMinute;
}

[[link(android)]]
class FindObjectPopup : SetIDPopup {
    // virtual ~FindObjectPopup();

    static FindObjectPopup* create();

    virtual bool init() = win 0x294db0, imac 0x299fd0, m1 0x241b10, ios 0x2de9e8;

    void onFindObjectID(cocos2d::CCObject* sender) = win inline {
        m_unknownBool = !m_unknownBool;
    }

    bool m_unknownBool;
}

[[link(android)]]
class FLAlertLayer : cocos2d::CCLayerColor {
    FLAlertLayer() { // ios 0xa7ec : this seems too small?
        m_buttonMenu = nullptr;
        m_controlConnected = -1;
        m_mainLayer = nullptr;
        m_ZOrder = 0;
        m_noElasticity = false;
        m_reverseKeyBack = false;
        m_scene = nullptr;
        m_alertProtocol = nullptr;
        m_scrollingLayer = nullptr;
        m_button2 = nullptr;
        m_button1 = nullptr;
        m_joystickConnected = -1;
        m_containsBorder = 0;
        m_forcePrioRegistered = false;
    }
    ~FLAlertLayer() = win 0x517e0, m1 0x3f5238, imac 0x487cb0, ios 0x2aad7c;

    static FLAlertLayer* create(FLAlertLayerProtocol* delegate, char const* title, gd::string desc, char const* btn1, char const* btn2, float width, bool scroll, float height, float textScale) = win 0x51940, imac 0x4880e0, m1 0x3f5598, ios 0x2aaef4;
    static FLAlertLayer* create(FLAlertLayerProtocol* delegate, char const* title, gd::string desc, char const* btn1, char const* btn2, float width) = win 0x51890, imac 0x4882b0, m1 0x3f5738, ios 0x2ab01c;
    static FLAlertLayer* create(FLAlertLayerProtocol* delegate, char const* title, gd::string desc, char const* btn1, char const* btn2) {
        return FLAlertLayer::create(delegate, title, desc, btn1, btn2, 300.0);
    }

    static FLAlertLayer* create(char const* title, const gd::string& desc, char const* btn) {
        return FLAlertLayer::create(nullptr, title, desc, btn, nullptr, 300.0);
    }

    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x52a00, imac 0x489190, m1 0x3f6568, ios 0x2abcac;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x52b50, m1 0x3f6818, imac 0x4893d0, ios 0x2abe9c;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x52aa0, imac 0x4892b0, m1 0x3f66c8, ios 0x2abd64;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x52b10, m1 0x3f6788, imac 0x489350, ios 0x2abe24;
    virtual void registerWithTouchDispatcher() = win 0x52d60, imac 0x489600, m1 0x3f6a4c, ios 0x2ac09c;
    virtual void keyBackClicked() = win 0x52880, imac 0x489070, m1 0x3f6440, ios 0x2abc48;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x52800, imac 0x488fc0, m1 0x3f63a4, ios 0x2abc18;
    virtual void show() = win 0x52b90, imac 0x489450, m1 0x3f68a8, ios 0x2abf14;

    void incrementForcePrio() = win inline, imac 0x488eb0, m1 0x3f6294, ios 0x2abb08 {
        if (!m_forcePrioRegistered) {
            m_forcePrioRegistered = true;
            cocos2d::CCDirector::sharedDirector()->getTouchDispatcher()->registerForcePrio(this, 2);
        }
    }
    bool init(FLAlertLayerProtocol* delegate, char const* title, gd::string desc, char const* btn1, char const* btn2, float width, bool scroll, float height, float textScale) = win 0x51b60, imac 0x488360, m1 0x3f5800, ios 0x2ab0e4;
    bool init(int) = win 0x51a50, imac 0x488de0, m1 0x3f61c0, ios 0x2aba58;
    void onBtn1(cocos2d::CCObject* sender) = win 0x52940, imac 0x488f00, m1 0x3f62e4, ios 0x2abb58;
    void onBtn2(cocos2d::CCObject* sender) = win 0x529a0, imac 0x488f60, m1 0x3f6344, ios 0x2abbb8;
    // virtual void onEnter() = win 0x52db0, m1 0x3f6a84, imac 0x489640, ios 0x2ac0d4; // only exists on armv7...

    cocos2d::CCMenu* m_buttonMenu;
    FLAlertLayerProtocol* m_alertProtocol;
    cocos2d::CCNode* m_scene;
    bool m_reverseKeyBack;
    cocos2d::ccColor3B m_color;
    cocos2d::CCLayer* m_mainLayer;
    int m_ZOrder;
    bool m_noElasticity;
    cocos2d::ccColor3B m_color2;
    ButtonSprite* m_button1;
    ButtonSprite* m_button2;
    ScrollingLayer* m_scrollingLayer;
    int m_controlConnected;
    bool m_containsBorder;
    bool m_noAction;
    int m_joystickConnected;
    bool m_forcePrioRegistered;
}

[[link(android)]]
class FLAlertLayerProtocol {
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) {}
}

[[link(android), depends(FMODAudioState), depends(FMODSoundState), depends(FMODMusic), depends(FMODSound), depends(FMODQueuedEffect), depends(FMODQueuedMusic), depends(FMODSoundTween)]]
class FMODAudioEngine : cocos2d::CCNode {
    FMODAudioEngine() = ios 0x142378, win 0x530d0 {
        m_musicVolume = 1.f;
        m_sfxVolume = 1.f;
        m_backgroundMusicFade = .0f;
        m_musicFadeStart = .0f;
        m_pulse1 = .0f;
        m_pulse2 = .0f;
        m_pulse3 = .0f;
        m_pulseCounter = 0;
        m_metering = false;
        m_backgroundMusicChannel = nullptr;
        m_system = nullptr;
        m_mainDSP = nullptr;
        m_globalChannelDSP = nullptr;
        m_globalChannel = nullptr;
        m_reverbChannel = nullptr;
        m_lastResult = FMOD_RESULT::FMOD_OK;
        m_sampleRate = 0;
        m_reducedQuality = false;
        m_allAudioPaused = false;
        m_musicOffset = 0;
        m_stopped = false;
        m_reverbPreset = FMODReverbPreset::Generic;
        m_showAudioVisualizer = false;
        m_musicVisualizerTime = .0f;
        m_musicVisualizerPeak = .0f;
        m_musicVisualizerVolume = .0f;
        m_sfxVisualizerTime = .0f;
        m_sfxVisualizerPeak = .0f;
        m_sfxVisualizerVolume = .0f;
    }
    ~FMODAudioEngine() = win inline, m1 0x35262c, imac 0x3c99d0, ios 0x13afd8 {
        m_system->close();
        if (m_system) m_system->release();
    }

    static FMODAudioEngine* get() {
        return FMODAudioEngine::sharedEngine();
    }

    static FMODAudioEngine* sharedEngine() = ios 0x13b0c8, win inline, imac 0x3c9e70, m1 0x352964 {
        auto** instancePtr = reinterpret_cast<FMODAudioEngine**>(geode::base::get() + 0x6a4e18);
        if (!*instancePtr) {
            *instancePtr = new FMODAudioEngine();
            (*instancePtr)->init();
        }
        return *instancePtr;
    }

    virtual void update(float) = win 0x55390, imac 0x3cc160, m1 0x3542a0, ios 0x13becc;

    void activateQueuedMusic(int);
    FMOD::Channel* channelForChannelID(int) = win 0x58480, imac 0x3cd8a0, m1 0x355668;
    FMOD::Channel* channelForUniqueID(int id) = win inline {
        return this->channelForChannelID(this->channelIDForUniqueID(id));
    }
    int channelIDForUniqueID(int) = win 0x583c0;
    void channelLinkSound(int, FMODSound*);
    void channelStopped(FMOD::Channel*, bool) = win 0x580b0;
    void channelUnlinkSound(int) = win 0x57e20;
    void clearAllAudio() = win 0x552e0, imac 0x3cb330, m1 0x353b90, ios 0x13bbd4;
    int countActiveEffects() {
        return m_channelIDToChannel.size() - countActiveMusic();
    }
    int countActiveMusic() {
        int count = 0;
        for (auto& music : m_fmodMusic) {
            if (music.second.m_channelID > 0) {
                ++count;
            }
        }
        return count;
    }
    FMOD::Sound* createStream(gd::string) = win 0x5cb70;
    void disableMetering() = win inline, m1 0x358054, imac 0x3d1090, ios 0x13e688 {
        this->m_metering = false;
    }
    void enableMetering() = win inline, m1 0x358034, imac 0x3d1060, ios 0x13e668 {
        this->m_metering = true;
        this->m_pulse1 = 0.1f;
        this->m_pulse2 = 0.1f;
        this->m_pulse3 = 0.0f;
    }
    void fadeInBackgroundMusic(float value) = win inline, m1 0x35ad28, imac 0x3d4840, ios 0x140238 {
        m_backgroundMusicChannel->setVolume(value);
        m_backgroundMusicFade = value;
        m_musicFadeStart = -1.f;
    }
    void fadeInMusic(float, int) = ios 0x1406b8, win 0x5c3c0, m1 0x35b38c, imac 0x3d4f80;
    void fadeMusic(float, int, float, float) = win 0x5c640;
    void fadeOutMusic(float, int) = ios 0x141e24, win 0x5c500, m1 0x35d940, imac 0x3d7e20;
    gd::string getActiveMusic(int id) {
        if (m_fmodMusic.count(id) == 0) return "";
        return m_fmodMusic[id].m_filePath;
    }
    FMOD::Channel* getActiveMusicChannel(int musicID) = win inline, imac 0x3cf390, m1 0x356984, ios 0x13d850 {
        if (m_fmodMusic.count(musicID) == 0) return nullptr;
        return this->channelForChannelID(m_fmodMusic[musicID].m_channelID);
    }
    float getBackgroundMusicVolume() = ios 0x140278, win inline, imac 0x3d4880, m1 0x35ad68 {
        return m_musicVolume;
    }
    FMOD::ChannelGroup* getChannelGroup(int, bool) = win 0x56b20, m1 0x358208, imac 0x3d1240;
    float getEffectsVolume() {
        return m_sfxVolume;
    }
    gd::string getFMODStatus(int) = win 0x5cdb0, imac 0x3d82b0, m1 0x35dce4;
    float getMeteringValue() = imac 0x3d10a0, m1 0x35805c {
        return m_pulse1;
    }
    int getMusicChannelID(int musicID) {
        if (m_fmodMusic.count(musicID) == 0) return 0;
        return m_fmodMusic[musicID].m_channelID;
    }
    unsigned int getMusicLengthMS(int channel) = win 0x5c330, m1 0x35d400, imac 0x3d7750, ios 0x141b44;
    float getMusicTime(int channel) {
        return this->getMusicTimeMS(channel) / 1000.f;
    }
    unsigned int getMusicTimeMS(int channel) = win 0x5c2d0, m1 0x35d310, imac 0x3d7660, ios 0x141ab4;
    int getNextChannelID();
    gd::map<std::pair<int, int>, FMODSoundTween>& getTweenContainer(AudioTargetType type) {
        switch (type) {
            case AudioTargetType::SFXGroup:
                return m_audioState.m_tweensForEffectGroups;
            case AudioTargetType::MusicChannel:
                return m_audioState.m_tweensForMusicChannels;
            default:
                return m_audioState.m_tweensForEffectChannels;
        }
    }
    bool isAnyPersistentPlaying() {
        for (auto& [id, music] : m_fmodMusic) {
            if (music.m_dontReset) return true;
        }
        return false;
    }
    bool isChannelStopping(int channel) {
        return m_stoppedChannels.count(channel) != 0;
    }
    bool isEffectLoaded(gd::string path) {
        return m_fmodSounds.count(path) != 0;
    }
    bool isMusicPlaying(gd::string path, int musicID) = win 0x59ee0, imac 0x3d4a20, m1 0x35aeb0;
    bool isMusicPlaying(int musicID) = ios 0x1402b4, win 0x59d00, imac 0x3d48f0, m1 0x35ada4;
    bool isPersistentMatchPlaying(gd::string, int) = win 0x5ad50;
    bool isSoundReady(FMOD::Sound* sound) {
        FMOD_OPENSTATE state;
        m_lastResult = sound->getOpenState(&state, nullptr, nullptr, nullptr);
        return state == FMOD_OPENSTATE_READY || state == FMOD_OPENSTATE_ERROR || state == FMOD_OPENSTATE_PLAYING;
    }
    int lengthForSound(gd::string path) = win 0x599d0;
    void loadAndPlayMusic(gd::string, unsigned int, int) = win 0x5a010;
    void loadAudioState(FMODAudioState&) = win 0x55f20;
    void loadMusic(gd::string path, float speed, float, float volume, bool shouldLoop, int musicID, int channelID, bool dontReset) = win 0x5a280, imac 0x3ced40, m1 0x356464, ios 0x13d3f4;
    void loadMusic(gd::string path) {
        this->loadMusic(path, 1.f, 0.f, 1.f, false, 0, 0, false);
    }
    void pauseAllAudio() = win inline, imac 0x3cb290, m1 0x353afc, ios 0x13bb40 {
        if (m_allAudioPaused) return;
        m_allAudioPaused = true;
        m_backgroundMusicChannel->setPaused(true);
        m_globalChannel->setPaused(true);
    }
    void pauseAllEffects() {
        m_globalChannel->setPaused(true);
    }
    void pauseAllMusic(bool force) = ios 0x1402f0, win inline, imac 0x3d4930, m1 0x35ade0 {
        for (auto& [id, music] : m_fmodMusic) {
            if (force || !music.m_dontReset) {
                if (auto ch = this->channelForChannelID(music.m_channelID))
                    ch->setPaused(true);
            }
        }
    }
    void pauseEffect(unsigned int) {}
    void pauseMusic(int musicChannel) = win inline, m1 0x35d91c, imac 0x3d7e00, ios inline {
        auto* channel = this->getActiveMusicChannel(musicChannel);
        if (channel)
            channel->setPaused(true);
    }
    static float pitchForIdx(int) = ios 0x13e698, imac 0x3d10c0, m1 0x358068, win 0x569b0;
    int playEffect(gd::string path, float speed, float, float volume) = win 0x56e10, imac 0x3d1ba0, m1 0x358870, ios 0x13ea50;
    int playEffect(gd::string path) = win 0x56d90, m1 0x3587c0, imac 0x3d1b10, ios 0x13e9b4;
    int playEffectAdvanced(gd::string path, float speed, float, float volume, float pitch, bool fastFourierTransform, bool reverb, int startMillis, int endMillis, int fadeIn, int fadeOut, bool loopEnabled, int effectID, bool override, bool noPreload, int channelID, int uniqueID, float minInterval, int sfxGroup) = win 0x56f00, imac 0x3cf550, m1 0x356ac0, ios 0x13d8c4;
    int playEffectAsync(gd::string path) {
        return this->playEffectAdvanced(path, 1.f, 0.f, 1.f, 0.f, false, false, 0, 0, 0, 0, false, 0, false, true, 0, 0, 0.f, 0);
    }
    void playMusic(gd::string path, bool shouldLoop, float fadeInTime, int channel) = win 0x5a110, imac 0x3d4dc0, m1 0x35b20c, ios 0x1405b0;
    FMODSound* preloadEffect(gd::string path) = win 0x59260, m1 0x3531c4, imac 0x3ca980, ios 0x13b644;
    FMOD::Sound* preloadEffectAsync(gd::string path) = win 0x59650;
    FMOD::Sound* preloadMusic(gd::string path, bool noRelease, int musicID) = win 0x5c790, imac 0x3d5220, m1 0x35b618, ios 0x1408d0;
    void printResult(FMOD_RESULT) {}
    void queuedEffectFinishedLoading(gd::string) = win 0x5b070;
    int queuePlayEffect(gd::string audioFilename, float speed, float, float volume, float pitch, bool fastFourierTransform, bool reverb, int start, int end, int fadeIn, int fadeOut, bool loop, int effectID, bool override, int uniqueID, float minInterval, int group) = win 0x57920;
    void queueStartMusic(gd::string audioFilename, float pitch, float, float volume, bool loop, int start, int end, int fadeIn, int fadeOut, int musicID, bool, int channelID, bool noPrepare, bool dontReset) = win 0x5aa70, imac 0x3d5af0, m1 0x35bdb8, ios 0x140e60;
    int registerChannel(FMOD::Channel*, int, int) = win 0x57af0;
    void releaseRemovedSounds() = win inline {
        for (auto it = m_removedSounds.begin(); it != m_removedSounds.end();) {
            FMOD_OPENSTATE state;
            m_lastResult = (*it)->getOpenState(&state, nullptr, nullptr, nullptr);
            if (state == FMOD_OPENSTATE_READY || state == FMOD_OPENSTATE_ERROR) it = m_removedSounds.erase(it);
            else ++it;
        }
    }
    void resumeAllAudio() = ios 0x13bb8c, win inline, imac 0x3cb2e0, m1 0x353b48 {
        if (!m_allAudioPaused) return;
        m_allAudioPaused = false;
        m_backgroundMusicChannel->setPaused(false);
        m_globalChannel->setPaused(false);
    }
    void resumeAllEffects() = win inline, imac 0x3d44b0, m1 0x35aa2c, ios 0x140064 {
        m_globalChannel->setPaused(false);
    }
    void resumeAllMusic() = ios 0x14034c, win 0x59e80, imac 0x3d49c0, m1 0x35ae5c;
    void resumeAudio() = win inline, imac 0x3cb150, m1 0x3539c0 {
        this->start();
    }
    void resumeEffect(unsigned int) {}
    void resumeMusic(int musicChannel) = win inline {
        auto* channel = this->getActiveMusicChannel(musicChannel);
        if (channel)
            channel->setPaused(false);
    }
    static gd::string reverbToString(FMODReverbPreset) = win 0x54cc0, m1 0x353648, imac 0x3caea0, win 0x54cc0;
    void saveAudioState(FMODAudioState&) = win 0x558f0;
    void setBackgroundMusicVolume(float volume) = win inline, imac 0x3d4890, m1 0x35ad70, ios 0x140280 {
        m_musicVolume = volume;
        m_musicFadeStart = 0.f;
        if (m_backgroundMusicChannel) m_backgroundMusicChannel->setVolume(volume);
    }
    void setChannelPitch(int, AudioTargetType, float) = win 0x59150, m1 0x357f14, imac 0x3d0f40, ios 0x13e554;
    void setChannelVolume(int, AudioTargetType, float) = win 0x58db0, m1 0x357d38, imac 0x3d0d50, ios 0x13e378;
    void setChannelVolumeMod(int, AudioTargetType, float) = win 0x58f80;
    void setEffectsVolume(float volume) = win inline, imac 0x3d48d0, m1 0x35ad90, ios 0x1402a0 {
        m_sfxVolume = volume;
        if (m_globalChannel) m_globalChannel->setVolume(volume);
    }
    void setMusicTimeMS(unsigned int, bool, int) = ios 0x13e06c, win 0x5c190, imac 0x3d0290, m1 0x357488;
    void setup() = win 0x53bc0, m1 0x352b4c, imac 0x3ca220, ios 0x13b128;
    void setupAudioEngine() = win 0x540a0, m1 0x352f40, imac 0x3ca670, ios 0x13b3b4;
    void start() = win 0x55280;
    void startMusic(int start, int end, int fadeIn, int fadeOut, bool loop, int musicID, bool noResume, bool dontReset) = win 0x5a5f0, m1 0x35b940, imac 0x3d5570, ios 0x140b64;
    void stop() {
        if (m_stopped) return;
        m_stopped = true;
        m_system->mixerSuspend();
        m_system->update();
        this->pauseSchedulerAndActions();
    }
    void stopAllEffects() = ios 0x13bc58, win 0x598b0, m1 0x353c3c, imac 0x3cb410;
    void stopAllMusic(bool) = ios 0x13bd04, win 0x59d70, imac 0x3cbbf0, m1 0x353f28;
    float stopAndGetFade(FMOD::Channel*) = win 0x58a20, m1 0x35a2bc, imac 0x3d3cc0, ios 0x13fa54;
    void stopAndRemoveMusic(int) = win 0x5ca80, imac 0x3d7a20, m1 0x35d624, ios 0x141c7c;
    void stopChannel(FMOD::Channel*, bool, float) = win 0x58810, m1 0x35a188, imac 0x3d3b10, ios 0x13f920;
    void stopChannel(int, AudioTargetType, bool, float) = win 0x58540, imac 0x3d33c0, m1 0x359c14, ios 0x13f654;
    void stopChannel(int id) = win inline, imac 0x3d2550, m1 0x359028, ios 0x13eec0 {
        this->stopChannel(id, AudioTargetType::SFXChannel, false, 0.f);
    }
    void stopChannelTween(int id, AudioTargetType target, AudioModType mod) {
        this->getTweenContainer(target).erase({ id, (int)mod });
    }
    void stopChannelTweens(int id, AudioTargetType target) {
        this->stopChannelTween(id, target, AudioModType::Volume);
        this->stopChannelTween(id, target, AudioModType::Pitch);
    }
    void stopMusic(int id) = win inline, imac 0x3d6260, m1 0x35c3cc, ios 0x141318 {
        this->stopAndRemoveMusic(id);
    }
    void stopMusicNotInSet(gd::unordered_set<int>& musicIDs) = win inline {
        std::unordered_set<int> totalIDs;
        for (auto& [id, _] : m_fmodMusic) {
            totalIDs.insert(id);
        }
        for (auto& id : totalIDs) {
            if (musicIDs.count(id) == 0) {
                this->stopMusic(id);
            }
        }
    }
    FMODSound* storeEffect(FMOD::Sound* sound, gd::string path) = win 0x59510;
    void swapMusicIndex(int, int) = win 0x5bce0;
    void testFunction(int) {}
    void triggerQueuedMusic(FMODQueuedMusic) = win 0x5b9a0;
    void unloadAllEffects() = ios 0x1400c8, win 0x59aa0, imac 0x3d4540, m1 0x35aa94;
    void unloadEffect(gd::string path) {}
    void unregisterChannel(int) = win 0x57c20;
    void updateBackgroundFade();
    void updateChannel(int channel, AudioTargetType target, AudioModType mod, float duration, float value) = win 0x58b60, m1 0x35a3b8, imac 0x3d3e10, ios 0x13fb50;
    void updateChannelTweens(float) = win 0x567c0, m1 0x3551f4, imac 0x3cd220, ios 0x13c8dc;
    void updateMetering();
    void updateQueuedEffects() = win 0x5aec0;
    void updateQueuedMusic() = win 0x5b6a0;
    void updateReverb(FMODReverbPreset, bool) = win 0x54400, imac 0x3cac50, m1 0x353444;
    void updateTemporaryEffects() = win 0x5b410, m1 0x354898, imac 0x3cc820, ios 0x13c208;
    FMOD_OPENSTATE waitUntilSoundReady(FMOD::Sound* sound) {
        if (!sound) return FMOD_OPENSTATE_ERROR;
        FMOD_OPENSTATE state;
        m_lastResult = sound->getOpenState(&state, nullptr, nullptr, nullptr);
        while (state != FMOD_OPENSTATE_READY && state != FMOD_OPENSTATE_ERROR && state != FMOD_OPENSTATE_PLAYING) {
            m_lastResult = sound->getOpenState(&state, nullptr, nullptr, nullptr);
        }
        return state;
    }

    gd::unordered_map<int, FMODMusic> m_fmodMusic;
    gd::unordered_map<gd::string, FMODSound> m_fmodSounds;
    gd::unordered_set<gd::string> m_temporarySoundPaths;
    float m_musicVolume;
    float m_sfxVolume;
    float m_backgroundMusicFade;
    float m_musicFadeStart;
    float m_pulse1;
    float m_pulse2;
    float m_pulse3;
    int m_pulseCounter;
    bool m_metering;
    FMOD::ChannelGroup* m_backgroundMusicChannel;
    FMOD::System* m_system;
    FMOD::DSP* m_mainDSP;
    FMOD::DSP* m_globalChannelDSP;
    FMOD::ChannelGroup* m_globalChannel;
    FMOD::ChannelGroup* m_reverbChannel;
    FMOD_RESULT m_lastResult;
    int m_sampleRate;
    bool m_reducedQuality;
    bool m_allAudioPaused;
    int m_musicOffset;
    bool m_stopped;
    FMODAudioState m_audioState;
    gd::vector<FMOD::Sound*> m_removedSounds;
    gd::unordered_map<int, FMOD::DSP*> m_channelIDToDSP;
    gd::unordered_map<int, FMOD::Channel*> m_channelIDToChannel;
    gd::unordered_set<int> m_stoppedChannels;
    FMODReverbPreset m_reverbPreset;
    gd::unordered_map<int, int> m_channelIDToEffectID;
    gd::unordered_map<int, int> m_effectIDToChannelID;
    gd::unordered_map<int, gd::string> m_channelIDToSoundPath;
    gd::vector<FMODQueuedEffect> m_queuedEffects;
    gd::unordered_map<gd::string, FMOD::Sound*> m_soundPathToSound;
    gd::unordered_map<int, FMOD::ChannelGroup*> m_globalChannelGroups;
    gd::unordered_map<int, FMOD::ChannelGroup*> m_reverbChannelGroups;
    bool m_showAudioVisualizer;
    float m_musicVisualizerTime;
    float m_musicVisualizerPeak;
    float m_musicVisualizerVolume;
    float m_sfxVisualizerTime;
    float m_sfxVisualizerPeak;
    float m_sfxVisualizerVolume;
}

[[link(android), depends(FMODSoundTween), depends(FMODQueuedMusic), depends(FMODSoundState)]]
class FMODAudioState {
    // ~FMODAudioState();
    FMODAudioState() = win 0x52e40, ios 0x12ad78 {
        m_interval = 0.f;
        m_elapsed = 0.f;
    }

    float m_interval;
    float m_elapsed;
    gd::map<std::pair<int,int>,FMODSoundTween> m_tweensForEffectChannels;
    gd::map<std::pair<int,int>,FMODSoundTween> m_tweensForEffectGroups;
    gd::map<std::pair<int,int>,FMODSoundTween> m_tweensForMusicChannels;
    gd::unordered_map<int,float> m_volumeForEffectChannels;
    gd::unordered_map<int,float> m_volumeModForEffectChannels;
    gd::unordered_map<int,float> m_pitchForEffectChannels;
    gd::unordered_map<int,float> m_volumeForEffectGroups;
    gd::unordered_map<int,float> m_volumeModForEffectGroups;
    gd::unordered_map<int,float> m_pitchForEffectGroups;
    gd::unordered_map<int,float> m_volumeForMusicChannels;
    gd::unordered_map<int,float> m_volumeModForMusicChannels;
    gd::unordered_map<int,float> m_pitchForMusicChannels;
    gd::unordered_map<int,float> m_intervalForEffects;
    gd::unordered_map<int,FMODQueuedMusic> m_queuedMusicForChannels1;
    gd::unordered_map<int,FMODQueuedMusic> m_queuedMusicForChannels2;
    gd::unordered_map<int,FMODSoundState> m_soundStateForChannels;
    uint64_t m_unkUint64_1;
}

[[link(android)]]
class FMODLevelVisualizer : cocos2d::CCNode {
    // virtual ~FMODLevelVisualizer();

    static FMODLevelVisualizer* create() = ios 0x2e0ba4, win 0x297150, imac 0x29cfb0, m1 0x244748;

    virtual bool init() = win 0x2971d0, imac 0x29d020, m1 0x2447d0, ios 0x2e0c20;

    void updateVisualizer(float volume, float peak, float time) = ios 0x2e1008, win 0x297690, imac 0x29d460, m1 0x244c40;

    float m_width;
}

class FMODMusic {
    int m_channelID;
    FMOD::Sound* m_sound;
    gd::string m_filePath;
    bool m_ogg;
    bool m_dontReset;
}

[[link(android)]]
class FMODQueuedEffect {
    gd::string m_filePath;
    float m_speed;
    float m_unk024;
    float m_volume;
    float m_pitch;
    bool m_fastFourierTransform;
    bool m_reverb;
    int m_start;
    int m_end;
    int m_fadeIn;
    int m_fadeOut;
    bool m_loop;
    int m_effectID;
    bool m_override;
    bool m_unk04d;
    int m_channelID;
    FMOD::Sound* m_sound;
    int m_uniqueID;
    int m_minInterval;
    int m_group;
}

[[link(android)]]
class FollowRewardPage : FLAlertLayer, FLAlertLayerProtocol, GameRateDelegate, RewardedVideoDelegate {
    // virtual ~FollowRewardPage();

    static FollowRewardPage* create() = win 0x137fc0, m1 0x3897ec, imac 0x40d090, ios 0x41c360;

    virtual bool init() = win 0x1380e0, imac 0x40d200, m1 0x3898fc, ios 0x41c428;
    virtual void registerWithTouchDispatcher() = win 0x425d0, imac 0x40f3b0, m1 0x38b854, ios 0x41dd84;
    virtual void keyBackClicked() = win 0x84650, m1 0x38b7d8, imac 0x40f340, ios 0x41dd08;
    virtual void show() = win 0x867a0, imac 0x40f110, m1 0x38b5c0, ios 0x41db00;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x13b5f0, imac 0x40f290, m1 0x38b744, ios 0x41dc74;
    virtual void rewardedVideoFinished() = win 0x13a330, m1 0x38b5b0, imac 0x40f0f0, ios 0x41daf0;
    virtual void updateRate() = win 0x139e00, imac 0x40e9e0, m1 0x38aee8, ios 0x41d79c;

    void onClose(cocos2d::CCObject* sender);
    void onRewardedVideo(cocos2d::CCObject* sender) = m1 0x38b228, imac 0x40ed30;
    void onSpecialItem(cocos2d::CCObject* sender) = win 0x13a340, m1 0x38a858, imac 0x40e310, ios 0x41d1d8;
    void switchToOpenedState(CCMenuItemSpriteExtra*) = win 0x13b510, imac 0x40e910, m1 0x38ae04;

    cocos2d::CCArray* m_chests;
    bool m_videoPlaying;
}

[[link(android)]]
class FontObject : cocos2d::CCObject {
    // virtual ~FontObject();
    FontObject() {
        m_hugeIntArray = {};
    }

    static FontObject* createWithConfigFile(char const* p0, float p1) = win inline, imac 0x20e860, m1 0x1c2f68, ios 0x2f38b4 {
        auto ret = new FontObject();
        if (ret->initWithConfigFile(p0, p1)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    int getFontWidth(int p0) = win inline, m1 0x1c38d8, imac 0x20f360, ios 0x2f3e58 {
        return m_hugeIntArray[p0];
    }
    bool initWithConfigFile(char const* p0, float p1) = win inline, m1 0x1c2fdc, imac 0x20e8d0, ios inline {
        this->parseConfigFile(p0, p1);
        return true;
    }
    void parseConfigFile(char const*, float) = win 0x3b620, m1 0x1c2ff4, imac 0x20e8e0, ios 0x2f3928;

    std::array<int, 300> m_hugeIntArray;
}

[[link(android)]]
class ForceBlockGameObject : EffectGameObject {
    // virtual ~ForceBlockGameObject();

    static ForceBlockGameObject* create(char const*);

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a91e0, imac 0x1dacc0, m1 0x193bfc, ios 0x38f9a8;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a8e00, imac 0x1d9d40, m1 0x192f78, ios 0x38f600;

    cocos2d::CCPoint calculateForceToTarget(GameObject*) = win 0x4a9370;
    bool init(char const*);

    // property 149
    float m_force;
    // property 526
    float m_minForce;
    // property 527
    float m_maxForce;
    // property 528
    bool m_relativeForce;
    // property 529
    bool m_forceRange;
    // property 530
    int m_forceID;
}

[[link(android)]]
class FRequestProfilePage : FLAlertLayer, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate, FriendRequestDelegate {
    // virtual ~FRequestProfilePage();

    static FRequestProfilePage* create(bool) = win 0x13bc90, m1 0x68e8cc, imac 0x7798d0, ios 0x1b7ef8;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x68ffa8, imac 0x77b1a0, ios 0x1b91f4;
    virtual void keyBackClicked() = win 0x13d290, imac 0x77b170, m1 0x68ff9c, ios 0x1b91e8;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x13d070, imac 0x77b090, m1 0x68fe98, ios 0x1b90f0;
    virtual void onClosePopup(UploadActionPopup*) = win 0x13d2a0, m1 0x68ffe0, imac 0x77b1e0, ios 0x1b922c;
    virtual void uploadActionFinished(int, int) = win 0x13d2f0, imac 0x77b250, m1 0x690068, ios 0x1b929c;
    virtual void uploadActionFailed(int, int) = win 0x13d460, imac 0x77b410, m1 0x690234, ios 0x1b9384;
    virtual void loadFRequestsFinished(cocos2d::CCArray*, char const*) = win 0x13dbd0, imac 0x77b7e0, m1 0x690608, ios 0x1b95c0;
    virtual void loadFRequestsFailed(char const*, GJErrorCode) = win 0x13dc50, imac 0x77b8d0, m1 0x690714, ios 0x1b9644;
    virtual void setupPageInfo(gd::string, char const*) = win 0x13dcf0, imac 0x77ba20, m1 0x690874, ios 0x1b9714;
    virtual void forceReloadRequests(bool) = win 0x13dcd0, imac 0x77b9e0, m1 0x690840, ios 0x1b96e0;

    void deleteSelected() = ios 0x1b8f60, win 0x13ce00, m1 0x68fcd0, imac 0x77aeb0;
    bool init(bool) = win 0x13be30, m1 0x68ea04, imac 0x779a80, ios 0x1b7f6c;
    bool isCorrect(char const*) = win 0x13d500;
    void loadPage(int) = win 0x13d630;
    void onClose(cocos2d::CCObject* sender) = win 0x13d130;
    void onDeleteSelected(cocos2d::CCObject* sender) = win 0x13cb10, m1 0x68f608, imac 0x77a720;
    void onNextPage(cocos2d::CCObject* sender) = win 0x13de80;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x13de90;
    void onSentRequests(cocos2d::CCObject* sender) = win 0x13d0a0;
    void onToggleAllObjects(cocos2d::CCObject* sender) = win 0x13c930;
    void onUpdate(cocos2d::CCObject* sender) = win 0x13ca10;
    void setupCommentsBrowser(cocos2d::CCArray*) = ios 0x1b944c, win 0x13da30, m1 0x690494, imac 0x77b660;
    void untoggleAll() = win 0x13d1f0;
    void updateLevelsLabel();
    void updatePageArrows();

    bool m_sent;
    gd::string m_key;
    cocos2d::CCLabelBMFont* m_pageLabel;
    cocos2d::CCLabelBMFont* m_errorLabel;
    GJCommentListLayer* m_listLayer;
    LoadingCircle* m_circle;
    UploadActionPopup* m_uploadPopup;
    void* m_unk2e8;
    CCMenuItemSpriteExtra* m_nextButton;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_refreshButton;
    int m_itemCount;
    int m_pageStartIdx;
    int m_pageEndIdx;
    int m_page;
    bool m_toggledAll;
}

[[link(android)]]
class FriendRequestDelegate {
    virtual void loadFRequestsFinished(cocos2d::CCArray*, char const*) {}
    virtual void loadFRequestsFailed(char const*, GJErrorCode) {}
    virtual void setupPageInfo(gd::string, char const*) {}
    virtual void forceReloadRequests(bool) {}
}

[[link(android)]]
class FriendRequestPopup : FLAlertLayer, UploadActionDelegate, UploadPopupDelegate, FLAlertLayerProtocol {
    // virtual ~FriendRequestPopup();

    static FriendRequestPopup* create(GJFriendRequest*) = win 0x28e370;

    virtual void keyBackClicked() = win 0x28f950, m1 0x23ade4, imac 0x292af0, ios 0x2d9a8c;
    virtual void uploadActionFinished(int, int) = win 0x28f960, imac 0x292be0, m1 0x23aec0, ios 0x2d9a98;
    virtual void uploadActionFailed(int, int) = win 0x28fb10, imac 0x292dc0, m1 0x23b0c0, ios 0x2d9bc8;
    virtual void onClosePopup(UploadActionPopup*) = win 0x28fbd0, imac 0x292f10, m1 0x23b228, ios 0x2d9c60;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x28fc30, imac 0x293080, m1 0x23b3a4, ios 0x2d9cd8;

    void blockUser();
    bool init(GJFriendRequest*) = ios 0x2d889c, win 0x28e4b0, imac 0x2916b0, m1 0x239a00;
    void loadFromGJFriendRequest(GJFriendRequest*) = win 0x28eb20, m1 0x23a080, imac 0x291cf0, ios 0x2d8ed0;
    void onAccept(cocos2d::CCObject* sender) = win 0x28f4e0, m1 0x23a914, imac 0x292650, ios 0x2d9744;
    void onBlock(cocos2d::CCObject* sender) = win 0x28f6f0, m1 0x23aab0, imac 0x2927f0, ios 0x2d9880;
    void onClose(cocos2d::CCObject* sender) = ios 0x2d8e64, win 0x28f440, m1 0x23a014, imac 0x291c80;
    void onRemove(cocos2d::CCObject* sender) = win 0x28f5f0, imac 0x292720, m1 0x23a9e0, ios 0x2d97e0;

    void* m_unk;
    GJFriendRequest* m_request;
    LoadingCircle* m_circle;
    CCMenuItemSpriteExtra* m_closeBtn;
    UploadActionPopup* m_popup;
}

[[link(android)]]
class FriendsProfilePage : FLAlertLayer, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate, UserListDelegate {
    // virtual ~FriendsProfilePage();

    static FriendsProfilePage* create(UserListType) = ios 0x1d9ac0, win 0x13e010, imac 0x641780, m1 0x56a370;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x56b2b4, imac 0x6427d0, ios 0x1da854;
    virtual void keyBackClicked() = win 0x13f0a0, imac 0x6427a0, m1 0x56b2a8, ios 0x1da848;
    virtual void getUserListFinished(cocos2d::CCArray*, UserListType) = win 0x13ebd0, imac 0x642420, m1 0x56af2c, ios 0x1da5f0;
    virtual void getUserListFailed(UserListType, GJErrorCode) = win 0x13ed20, imac 0x642560, m1 0x56b048, ios 0x1da6fc;
    virtual void userListChanged(cocos2d::CCArray*, UserListType) = win 0x8b790, m1 0x56b178, imac 0x642670, ios 0x1da79c;
    virtual void forceReloadList(UserListType) = win 0x13ed90, imac 0x6426b0, m1 0x56b194, ios 0x1da7b8;

    bool init(UserListType type) = ios 0x1d9ba0, win 0x13e160, imac 0x641910, m1 0x56a498;
    void onBlocked(cocos2d::CCObject* sender) = win 0x13ef50, m1 0x56abb8, imac 0x6420b0;
    void onClose(cocos2d::CCObject* sender) = ios 0x1da1f8, win 0x13efe0, m1 0x56ab00, imac 0x641ff0;
    void onUpdate(cocos2d::CCObject* sender) = win 0x13EE30, m1 0x56ac44, imac 0x642140;
    void setupUsersBrowser(cocos2d::CCArray* users, UserListType type) = ios 0x1da3a0, win 0x13e870, imac 0x6421b0, m1 0x56aca8;

    UserListType m_type;
    cocos2d::CCLabelBMFont* m_noInternet;
    cocos2d::CCLabelBMFont* m_totalFriends;
    GJCommentListLayer* m_listLayer;
    LoadingCircle* m_circle;
    void* m_unk532;
    cocos2d::CCArray* m_users;
    CCMenuItemSpriteExtra* m_refreshBtn;
}

[[link(android)]]
class GameCell : TableViewCell {
    // virtual ~GameCell();
    GameCell(char const*, float, float) = m1 0x291758, imac 0x2f8e00;

    virtual bool init() = win 0x3c7f0, m1 0x291d60, imac 0x2f9520, ios 0x1d1424;
    virtual void draw() = win 0x3cbf0, imac 0x2f95e0, m1 0x291e34, ios 0x1d1468;

    void loadFromString(gd::string) = win 0x3c800, m1 0x291900, imac 0x2f9000;
    void onTouch(cocos2d::CCObject* sender) = win 0x3cbc0, m1 0x291d6c, imac 0x2f9540;
    void updateBGColor(int) = m1 0x291db8, imac 0x2f9580;

    void* m_unk230;
    gd::string m_gameLink;
}

[[link(android)]]
class GameEffectsManager : cocos2d::CCNode {
    // virtual ~GameEffectsManager();

    static GameEffectsManager* create(PlayLayer*);

    void addParticleEffect(cocos2d::CCParticleSystemQuad*, int);
    bool init(PlayLayer*);
    void scaleParticle(cocos2d::CCParticleSystemQuad*, float);

    PlayLayer* m_playLayer;
}

[[link(android)]]
class GameLevelManager : cocos2d::CCNode {
    static GameLevelManager* get() {
        return GameLevelManager::sharedState();
    }
    static cocos2d::CCDictionary* responseToDict(gd::string, bool) = win 0x168140, m1 0x477c14, imac 0x51b260, ios 0x98c58;
    // virtual ~GameLevelManager();

    static GameLevelManager* sharedState() = ios 0x8bbdc, win 0x140b20, imac 0x504a90, m1 0x4641c4;

    virtual bool init() = win 0x142230, m1 0x473374, imac 0x515dc0, ios 0x95d68;

    void acceptFriendRequest(int, int) = win 0x15e780, imac 0x53e840, m1 0x497a7c, ios 0xac1c4;
    int accountIDForUserID(int userID) = win 0x144350, imac 0x518ae0, m1 0x475c08, ios 0x975a8;
    void addDLToActive(char const*) = win 0x147a20, imac 0x5228d0, m1 0x47e834;
    bool areGauntletsLoaded();
    void banUser(int);
    bool blockUser(int) = win 0x15f510, m1 0x498a24, imac 0x53f840, ios 0xac9c8;
    void cleanupDailyLevels() = win 0x1485e0;
    cocos2d::CCArray* createAndGetAccountComments(gd::string, int) = win inline, m1 0x4935d8, imac 0x539da0, ios 0xa9b88 {
        return this->createAndGetCommentsFull(p0, p1, true);
    }
    cocos2d::CCArray* createAndGetCommentsFull(gd::string, int, bool) = win 0x15aa50, m1 0x493688, imac 0x539e30, ios 0xa9c24;
    cocos2d::CCArray* createAndGetLevelComments(gd::string, int) = win inline, m1 0x4931b8, imac 0x5399b0, ios 0xa98e8 {
        return this->createAndGetCommentsFull(p0, p1, false);
    }
    cocos2d::CCArray* createAndGetLevelLists(gd::string) = m1 0x478128, imac 0x51b840;
    cocos2d::CCArray* createAndGetLevels(gd::string) = win 0x1446b0;
    cocos2d::CCArray* createAndGetMapPacks(gd::string) = win 0x144e90, m1 0x478bc4, imac 0x51c2d0, ios 0x99610;
    cocos2d::CCArray* createAndGetScores(gd::string, GJScoreType) = ios 0x99d40, imac 0x51cf60, m1 0x479718, win 0x145130;
    GJGameLevel* createNewLevel() = win 0x142800, imac 0x5165d0, m1 0x473a40;
    GJLevelList* createNewLevelList() = ios 0x96a04, win 0x1432b0, m1 0x474704, imac 0x517330;
    gd::string createPageInfo(int, int, int) = m1 0x47e660, imac 0x522710;
    GJSmartTemplate* createSmartTemplate();
    void dataLoaded(DS_Dictionary*) = win 0x149310, imac 0x525360, m1 0x481004;
    void deleteAccountComment(int, int);
    void deleteComment(int, CommentType, int) = win 0x15cae0, m1 0x496170, imac 0x53ccf0, ios 0xab3c0;
    bool deleteFriendRequests(int, cocos2d::CCArray*, bool) = ios 0xabc4c, win 0x15e180, m1 0x49713c, imac 0x53de30;
    void deleteLevel(GJGameLevel*) = ios 0x967dc, win 0x142fe0, imac 0x517010, m1 0x4743e0;
    void deleteLevelComment(int, int);
    void deleteLevelList(GJLevelList*) = ios 0x96d58, win 0x143890, imac 0x517880, m1 0x474ba4;
    bool deleteSentFriendRequest(int) = m1 0x497130, imac 0x53de10;
    void deleteServerLevel(int) = win 0x152350, m1 0x48b430, imac 0x530ad0, ios 0xa4dfc;
    void deleteServerLevelList(int) = win 0x14e3a0, m1 0x486e7c, imac 0x52bc60, ios 0xa2448;
    void deleteSmartTemplate(GJSmartTemplate*);
    bool deleteUserMessages(GJUserMessage* message, cocos2d::CCArray* messages, bool isSender) = ios 0xa8ef4, win 0x158f20, m1 0x492290, imac 0x5389d0;
    void downloadLevel(int, bool) = ios 0xa337c, win 0x14fde0, imac 0x52dae0, m1 0x4889b0;
    void downloadUserMessage(int, bool) = win 0x1584f0, m1 0x491908, imac 0x537ff0, ios 0xa89c8;
    void encodeDataTo(DS_Dictionary*) = ios 0x9e988, win 0x148e00, imac 0x524e30, m1 0x480b48;
    void firstSetup();
    void followUser(int) = m1 0x47feb0, imac 0x5240e0;
    GJFriendRequest* friendRequestFromAccountID(int);
    void friendRequestWasRemoved(int, bool);
    char const* getAccountCommentKey(int p0, int p1) = m1 0x4935b0, imac 0x539d80 {
        return cocos2d::CCString::createWithFormat("%i_%i", p0, p1)->getCString();
    }
    void getAccountComments(int accountID, int page, int total) = win 0x15a2e0, imac 0x539a30, m1 0x493268, ios 0xa9984;
    int getActiveDailyID(GJTimedLevelType type) = win inline, imac 0x5439d0, m1 0x49c9d0, ios 0xaef3c {
        if (type == GJTimedLevelType::Daily) return m_activeDailyID;
        if (type == GJTimedLevelType::Weekly) return m_activeWeeklyID;
        if (type == GJTimedLevelType::Event) return m_activeEventID;
        return 0;
    }
    GJSmartTemplate* getActiveSmartTemplate();
    cocos2d::CCArray* getAllSmartTemplates();
    cocos2d::CCDictionary* getAllUsedSongIDs();
    GJLevelList* getAllUsedSongIDs(int);
    gd::string getBasePostString() = win 0x14a4b0, m1 0x4826c4, imac 0x526da0;
    bool getBoolForKey(char const* key) = ios 0xaf64c, win inline, m1 0x49da8c, imac 0x544a30 {
        return m_searchFilters->valueForKey(key)->boolValue();
    }
    gd::string getCommentKey(int ID, int page, int mode, CommentKeyType keytype) = m1 0x492fb4, imac 0x5397d0 {
        return cocos2d::CCString::createWithFormat("comment_%i_%i_%i_%i", ID, page, mode, (int) keytype)->getCString();
    }
    int getCompletedDailyLevels() = win 0x1466c0;
    int getCompletedEventLevels(int, int) = win 0x1468c0;
    int getCompletedGauntletDemons();
    int getCompletedGauntletLevels();
    cocos2d::CCArray* getCompletedLevels(bool) = ios 0x9b350, win 0x145860, imac 0x51ef80, m1 0x47b4a4;
    int getCompletedWeeklyLevels() = win 0x1464b0;
    int getDailyID(GJTimedLevelType type) = win inline, m1 0x49c99c, imac 0x5439a0, ios 0xaef08 {
        if (type == GJTimedLevelType::Daily) return m_dailyID;
        if (type == GJTimedLevelType::Weekly) return m_weeklyID;
        if (type == GJTimedLevelType::Event) return m_eventID;
        return 0;
    }
    double getDailyTimer(GJTimedLevelType) = imac 0x543a00, m1 0x49ca04;
    char const* getDeleteCommentKey(int, int, int) = m1 0x494660, imac 0x53afa0;
    char const* getDeleteMessageKey(int, bool) = m1 0x492778, imac 0x538ed0;
    gd::string getDemonLevelsString() = win 0x1459f0;
    char const* getDescKey(int) = m1 0x494610, imac 0x53af60;
    gd::string getDifficultyStr(bool, bool, bool, bool, bool, bool, bool, bool);
    char const* getDiffKey(int) = m1 0x49d290, imac 0x544280;
    bool getDiffVal(int);
    gd::string getFolderName(int, bool) = win 0x148910, imac 0x5245e0, m1 0x4803b8, ios 0x9e158;
    char const* getFriendRequestKey(bool, int) = m1 0x4945e4, imac 0x53af40;
    void getFriendRequests(bool, int, int) = win 0x15d2d0, m1 0x49689c, imac 0x53d510, ios 0xab778;
    char const* getGauntletKey(int);
    void getGauntletLevels(int) = win 0x14fa90, m1 0x4883b0, imac 0x52d450, ios 0xa3048;
    void getGauntlets() = win 0x14f180, m1 0x487fd0, imac 0x52d080, ios 0xa2e1c;
    gd::string getGauntletSearchKey(int) = m1 0x487f04, imac 0x52cfc0;
    void getGJChallenges() = win 0x164ad0, m1 0x49be48, imac 0x542da0, ios 0xae728;
    void getGJDailyLevelState(GJTimedLevelType) = win 0x165ec0, imac 0x543260, m1 0x49c2bc, ios 0xaea0c;
    void getGJRewards(int) = ios 0xae25c, win 0x1635e0, imac 0x542540, m1 0x49b6b0;
    bool getGJSecretReward(gd::string) = win 0x1624b0, m1 0x49b214, imac 0x542050, ios 0xadf68;
    void getGJUserInfo(int) = ios 0xa7be0, win 0x157880, imac 0x536710, m1 0x4901ac;
    int getHighestLevelOrder() = m1 0x47b238, imac 0x51ece0;
    int getIntForKey(char const* key) = win inline, m1 0x49d874, imac 0x544830, ios 0xaf54c {
        return m_searchFilters->valueForKey(key)->intValue();
    }
    void getLeaderboardScores(char const*) = win 0x1554b0, m1 0x48e540, imac 0x5347a0, ios 0xa69ac;
    gd::string getLengthStr(bool, bool, bool, bool, bool, bool) = imac 0x528ae0, m1 0x4841e8;
    const char* getLenKey(int len) = m1 0x49d4f4, imac 0x5444d0;
    bool getLenVal(int);
    void getLevelComments(int ID, int page, int total, int mode, CommentKeyType keytype) = ios 0xa94a8, win 0x159870, imac 0x5392d0, m1 0x492b0c;
    const char* getLevelDownloadKey(int levelID, bool isGauntlet) {
        return cocos2d::CCString::createWithFormat("%i_%i", levelID, isGauntlet)->getCString();
    }
    const char* getLevelKey(int levelID) {
        return cocos2d::CCString::createWithFormat("%i", levelID)->getCString();
    }
    void getLevelLeaderboard(GJGameLevel*, LevelLeaderboardType, LevelLeaderboardMode) = ios 0xa6d94, win 0x155ff0, imac 0x535090, m1 0x48ed8c;
    char const* getLevelLeaderboardKey(int, LevelLeaderboardType, LevelLeaderboardMode) = m1 0x48f940, imac 0x535e90;
    char const* getLevelListKey(int listID) {
        return cocos2d::CCString::createWithFormat("%i", listID)->getCString();
    }
    void getLevelLists(GJSearchObject*) = ios 0xa26d8, win 0x14e6e0, m1 0x4873b8, imac 0x52c220;
    void getLevelSaveData() = win 0x14cd40, m1 0x485a64, imac 0x52a7d0, ios 0xa1914;
    char const* getLikeAccountItemKey(LikeItemType, int, bool, int);
    char const* getLikeItemKey(LikeItemType, int, bool, int);
    GJGameLevel* getLocalLevel(int);
    GJGameLevel* getLocalLevelByName(gd::string);
    GJLevelList* getLocalLevelList(int) = win 0x143240;
    int getLowestLevelOrder() = m1 0x47b274, imac 0x51ed20;
    GJGameLevel* getMainLevel(int levelID, bool dontGetLevelString) = ios 0x95e78, win 0x1423e0, m1 0x473484, imac 0x515f50;
    const char* getMapPackKey(int pack);
    void getMapPacks(GJSearchObject*) = win 0x14d470, imac 0x52aa70, m1 0x485d20, ios 0xa1ab4;
    char const* getMessageKey(int) = m1 0x491c5c, imac 0x538350;
    char const* getMessagesKey(bool, int) = m1 0x490dc4, imac 0x5373f0;
    void getNews();
    int getNextFreeTemplateID();
    gd::string getNextLevelName(gd::string);
    void getOnlineLevels(GJSearchObject*) = ios 0xa0fec, win 0x14bb70, m1 0x484cec, imac 0x529700;
    char const* getPageInfo(char const*) = win 0x147870;
    char const* getPostCommentKey(int);
    const char* getRateStarsKey(int key);
    char const* getReportKey(int);
    GJGameLevel* getSavedDailyLevel(int) = ios 0x9c644, win 0x146ba0, m1 0x47d344, imac 0x521300;
    GJGameLevel* getSavedDailyLevelFromLevelID(int) = imac 0x521600, m1 0x47d650;
    GJMapPack* getSavedGauntlet(int);
    GJGameLevel* getSavedGauntletLevel(int) = win 0x146c70, m1 0x47d448, imac 0x521400, ios 0x9c6c8;
    GJGameLevel* getSavedLevel(GJGameLevel* level) = ios 0x98f70, win inline, m1 0x4780e4, imac 0x51b7f0 {
        if (!level) return nullptr;
        else if (level->m_dailyID.value() > 0) return this->getSavedDailyLevel(level->m_dailyID.value());
        else if (level->m_gauntletLevel) return this->getSavedGauntletLevel(level->m_levelID.value());
        else return this->getSavedLevel(level->m_levelID.value());
    }
    GJGameLevel* getSavedLevel(int) = win 0x146ad0, m1 0x47d54c, imac 0x521500, ios 0x9c74c;
    GJLevelList* getSavedLevelList(int listID) = win inline, m1 0x48795c, imac 0x52c910, ios 0xa2a30 {
        return static_cast<GJLevelList*>(m_favoriteLists->objectForKey(this->getLevelListKey(listID)));
    }
    cocos2d::CCArray* getSavedLevelLists(int);
    cocos2d::CCArray* getSavedLevels(bool, int) = ios 0x9afb4, win 0x145410, m1 0x47af84, imac 0x51e9f0;
    GJMapPack* getSavedMapPack(int);
    cocos2d::CCScene* getSearchScene(char const* key) = win inline, ios 0x9d558, imac 0x522e00, m1 0x47edb8 {
        if (auto searchObject = GJSearchObject::createFromKey(key)) {
            return LevelBrowserLayer::scene(searchObject);
        }
        return nullptr;
    }
    int getSplitIntFromKey(char const*, int) = win 0x15b010, m1 0x48bed4, imac 0x531620, ios 0xa530c;
    gd::string getStarLevelsString() = win 0x145bf0;
    cocos2d::CCArray* getStoredLevelComments(char const*) = win 0x15b420, imac 0x53b2f0, m1 0x494a28;
    cocos2d::CCArray* getStoredOnlineLevels(char const*) = ios 0x9d020, win 0x147780, imac 0x5223c0, m1 0x47e2d8;
    cocos2d::CCArray* getStoredUserList(UserListType) = win 0x1606b0, m1 0x498928, imac 0x53f790, ios 0xac918;
    GJUserMessage* getStoredUserMessage(int);
    GJUserMessage* getStoredUserMessageReply(int);
    int getTimeLeft(char const*, float) = win 0x147dd0, imac 0x522ab0, m1 0x47ea48;
    void getTopArtists(int page, int total) = win 0x156a20, m1 0x48fa04, imac 0x535f20, ios 0xa774c;
    const char* getTopArtistsKey(int page) = m1 0x48fdc4, imac 0x536300 {
        return cocos2d::CCString::createWithFormat("topArtists_%i", page)->getCString();
    }
    char const* getUploadMessageKey(int) = m1 0x491c84, imac 0x538370;
    char const* getUserInfoKey(int) = m1 0x490184, imac 0x5366f0;
    void getUserList(UserListType) = ios 0xacef4, win 0x15ffa0, imac 0x5402b0, m1 0x499414;
    void getUserMessages(bool sent, int page, int total) = win 0x157c30, m1 0x490a64, imac 0x537080, ios 0xa8114;
    void getUsers(GJSearchObject*) = ios 0xa79b0, win 0x1571c0, m1 0x48fdec, imac 0x536320;
    void gotoLevelPage(GJGameLevel*) = win 0x1473c0, m1 0x47dd44, imac 0x521e70, ios 0x9cd20;
    void handleIt(bool, gd::string, gd::string, GJHttpType) = win 0x140e00, m1 0x46479c, imac 0x505160, ios 0x8c0bc;
    void handleItDelayed(bool, gd::string, gd::string, GJHttpType) = m1 0x4669d0, imac 0x507fb0;
    void handleItND(cocos2d::CCNode*, void*) = m1 0x466ce4, imac 0x5082a0;
    bool hasDailyStateBeenLoaded(GJTimedLevelType) = imac 0x543960, m1 0x49c950;
    bool hasDownloadedLevel(int id) = win 0x151630, imac 0x52e360, m1 0x48911c, ios 0xa3854;
    bool hasDownloadedList(int id) = win inline, imac 0x52a7c0, m1 0x485a5c, ios inline {
        return this->hasDownloadedLevel(-id);
    }
    bool hasLikedAccountItem(LikeItemType, int, bool, int);
    bool hasLikedItem(LikeItemType, int, bool, int) = win 0x1623d0;
    bool hasLikedItemFullCheck(LikeItemType, int, int) = win 0x162340, imac 0x541500, m1 0x49a5c4, ios 0xad8d4;
    bool hasRatedDemon(int id) = win 0x152280, m1 0x48b328, imac 0x5309d0;
    bool hasRatedLevelStars(int id);
    bool hasReportedLevel(int id);
    void invalidateMessages(bool, bool) = win 0x159720, m1 0x4927a4, imac 0x538ef0, ios 0xa9250;
    void invalidateRequests(bool, bool) = m1 0x49772c, imac 0x53e480;
    void invalidateUserList(UserListType, bool) = win inline, m1 0x4996f8, imac 0x540580, ios 0xad0b0 {
        this->resetStoredUserList(p0);
        if (p1 && m_userListDelegate) m_userListDelegate->forceReloadList(p0);
    }
    bool isDLActive(char const* tag) = win 0x147960, m1 0x47e73c, imac 0x5227e0, ios 0x9d250;
    bool isFollowingUser(int) = ios 0x9df80, win 0x148840, imac 0x523fe0, m1 0x47fda8;
    bool isTimeValid(char const*, float) = win 0x147c90;
    bool isUpdateValid(int id) = win inline {
        const char* str = cocos2d::CCString::createWithFormat("%i", id)->getCString();

        return this->isTimeValid(str, 3600.f);
    }
    int itemIDFromLikeKey(char const*);
    bool keyHasTimer(char const*);
    int levelIDFromCommentKey(char const*) = win 0x15b110, m1 0x493084, imac 0x5398a0, ios 0xa9854;
    int levelIDFromPostCommentKey(char const*);
    int likeFromLikeKey(char const*);
    void likeItem(LikeItemType, int, bool, int) = win 0x161270, m1 0x499d68, imac 0x540b40, ios 0xad3b0;
    void limitSavedLevels() = ios 0x9d9e8, win 0x148090, imac 0x5236b0, m1 0x47f58c;
    void makeTimeStamp(char const*) = ios 0x9cf68, win 0x147b90, imac 0x522290, m1 0x47e18c;
    void markItemAsLiked(LikeItemType, int, bool, int);
    void markLevelAsDownloaded(int) = win 0x151510;
    void markLevelAsRatedDemon(int id) = win inline, m1 0x48b1c8, imac 0x530870 {
        if (m_ratedDemons->count() > 999) m_ratedDemons->removeObjectForKey(m_ratedDemons->getFirstKey());
        m_ratedDemons->setObject(m_trueString, cocos2d::CCString::createWithFormat("%i", id)->getCString());
    }
    void markLevelAsRatedStars(int);
    void markLevelAsReported(int);
    void markListAsDownloaded(int id) = win inline {
        this->markLevelAsDownloaded(-id);
    }
    void messageWasRemoved(int, bool) = win 0x159560, m1 0x492914, imac 0x5390c0, ios 0xa933c;
    void onAcceptFriendRequestCompleted(gd::string response, gd::string tag) = win 0x15eaa0, m1 0x46b86c, imac 0x50d720, ios 0x91000;
    void onBanUserCompleted(gd::string response, gd::string tag) = win inline, m1 0x46e3d0, imac 0x510440, ios 0x92920 {
        if (response != "-1") this->resetTimerForKey("leaderboard_top");
    }
    void onBlockUserCompleted(gd::string response, gd::string tag) = win 0x15f820, m1 0x46be34, imac 0x50dc90, ios 0x91388;
    void onDeleteCommentCompleted(gd::string response, gd::string tag) = win 0x15cfc0, m1 0x46a914, imac 0x50c8c0, ios 0x90564;
    void onDeleteFriendRequestCompleted(gd::string response, gd::string tag) = win 0x15e580, m1 0x46b660, imac 0x50d520, ios 0x90e84;
    void onDeleteServerLevelCompleted(gd::string response, gd::string tag) = win 0x152740, m1 0x468a40, imac 0x50a3c0, ios 0x8f474;
    void onDeleteServerLevelListCompleted(gd::string response, gd::string tag) = win inline, m1 0x47279c, imac 0x514f40, ios 0x95540 {
        m_queuedLists.erase(tag);
        auto responseInt = atoi(response.c_str());
        if (response == "-1") {
            if (m_levelListDeleteDelegate) m_levelListDeleteDelegate->levelListDeleteFailed(responseInt);
        }
        else {
            if (m_levelListDeleteDelegate) m_levelListDeleteDelegate->levelListDeleteFinished(responseInt);
        }
    }
    void onDeleteUserMessagesCompleted(gd::string response, gd::string tag) = win 0x159390, m1 0x46d8bc, imac 0x50f860, ios 0x92294;
    void onDownloadLevelCompleted(gd::string response, gd::string tag) = win inline, m1 0x468670, imac 0x50a060, ios 0x8f1bc {
        this->processOnDownloadLevelCompleted(response, tag, false);
    }
    void onDownloadUserMessageCompleted(gd::string response, gd::string tag) = win 0x158730, m1 0x46da9c, imac 0x50fa30, ios 0x923dc;
    void onGetAccountCommentsCompleted(gd::string response, gd::string tag) = win 0x15a510, m1 0x469890, imac 0x50b2e0, ios 0x8fd44;
    void onGetFriendRequestsCompleted(gd::string response, gd::string tag) = win 0x15d510, m1 0x46c964, imac 0x50e7b0, ios 0x9197c;
    void onGetGauntletsCompleted(gd::string response, gd::string tag) = win 0x14f470, m1 0x471154, imac 0x5136f0, ios 0x947e4;
    void onGetGJChallengesCompleted(gd::string response, gd::string tag) = win 0x164f20, imac 0x5117a0, m1 0x46f5b0, ios 0x935e0;
    void onGetGJDailyLevelStateCompleted(gd::string response, gd::string tag) = win 0x1663a0, imac 0x512730, m1 0x470324, ios 0x93e20;
    void onGetGJRewardsCompleted(gd::string response, gd::string tag) = win 0x163d50, m1 0x46eac8, imac 0x510b00, ios 0x92e90;
    void onGetGJSecretRewardCompleted(gd::string, gd::string) = win 0x162960, m1 0x47287c, imac 0x5150a0, ios 0x955f4;
    void onGetGJUserInfoCompleted(gd::string response, gd::string tag) = win 0x157aa0, m1 0x46b2a8, imac 0x50d1a0, ios 0x90bb4;
    void onGetLeaderboardScoresCompleted(gd::string response, gd::string tag) = win 0x155b80, m1 0x468fa0, imac 0x50a9d0, ios 0x8f7e4;
    void onGetLevelCommentsCompleted(gd::string response, gd::string tag) = win 0x159da0, m1 0x469368, imac 0x50ad90, ios 0x8fa64;
    void onGetLevelLeaderboardCompleted(gd::string response, gd::string tag) = win inline, m1 0x470fd8, imac 0x513580, ios 0x94674 {
        this->removeDLFromActive(tag.c_str());
        if (response == "-1") {
            if (m_leaderboardManagerDelegate) m_leaderboardManagerDelegate->loadLeaderboardFailed(tag.c_str());
        }
        else {
            auto scores = this->createAndGetScores(response, GJScoreType::LevelScore);
            this->storeSearchResult(scores, " ", tag.c_str());
            if (m_leaderboardManagerDelegate) m_leaderboardManagerDelegate->loadLeaderboardFinished(scores, tag.c_str());
        }
    }
    void onGetLevelListsCompleted(gd::string response, gd::string tag) = win 0x14e970, m1 0x471f08, imac 0x5145d0, ios 0x95060;
    void onGetLevelSaveDataCompleted(gd::string response, gd::string tag) = win 0x14d020, m1 0x46e5e4, imac 0x510610, ios 0x92ae0;
    void onGetMapPacksCompleted(gd::string response, gd::string tag) = win 0x14d680, m1 0x467ce8, imac 0x509510, ios 0x8ebfc;
    void onGetNewsCompleted(gd::string response, gd::string tag) = win inline, m1 0x472878, imac 0x515090, ios inline {}
    void onGetOnlineLevelsCompleted(gd::string response, gd::string tag) = win 0x14c3d0, m1 0x46708c, imac 0x508660, ios 0x8e490;
    void onGetTopArtistsCompleted(gd::string response, gd::string tag) = win 0x156d40, m1 0x471874, imac 0x513ef0, ios 0x94cbc;
    void onGetUserListCompleted(gd::string response, gd::string tag) = win 0x1601b0, m1 0x46c388, imac 0x50e190, ios 0x91620;
    void onGetUserMessagesCompleted(gd::string response, gd::string tag) = win 0x157e70, m1 0x46d148, imac 0x50f040, ios 0x91e30;
    void onGetUsersCompleted(gd::string response, gd::string tag) = win 0x157420, m1 0x46defc, imac 0x50ff90, ios 0x92654;
    void onLikeItemCompleted(gd::string response, gd::string tag) = win 0x161880, m1 0x46aacc, imac 0x50ca60, ios 0x90680;
    void onProcessHttpRequestCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*) = ios 0x8be3c, win 0x140d10, m1 0x464438, imac 0x504de0;
    void onRateDemonCompleted(gd::string response, gd::string tag) = win 0x1532b0, m1 0x470d14, imac 0x5132a0, ios 0x944a4;
    void onRateStarsCompleted(gd::string response, gd::string tag) = win 0x151fc0, m1 0x4688a0, imac 0x50a230, ios 0x8f384;
    void onReadFriendRequestCompleted(gd::string response, gd::string tag) = win inline, m1 0x46baa0, imac 0x50d940, ios 0x91168 {
        m_friendReqAndUserBlocks->removeObjectForKey(tag);
    }
    void onRemoveFriendCompleted(gd::string response, gd::string tag) = win 0x15f2c0, m1 0x46bbb0, imac 0x50da30, ios 0x911dc;
    void onReportLevelCompleted(gd::string response, gd::string tag) = win 0x167ad0, m1 0x46aed0, imac 0x50cdf0, ios 0x90988;
    void onRequestUserAccessCompleted(gd::string response, gd::string tag) = win 0x161fb0, m1 0x46e458, imac 0x5104c0, ios 0x92994;
    void onRestoreItemsCompleted(gd::string response, gd::string tag) = win 0x1670f0, imac 0x50cc20, m1 0x46acc0, ios 0x907c0;
    void onSetLevelFeaturedCompleted(gd::string response, gd::string tag) = win inline, m1 0x468d58, imac 0x50a6b0, ios 0x8f65c {}
    void onSetLevelStarsCompleted(gd::string response, gd::string tag) = win 0x153600, m1 0x468bc8, imac 0x50a530, ios 0x8f564;
    void onSubmitUserInfoCompleted(gd::string response, gd::string tag) = win inline, m1 0x46aecc, imac 0x50cde0, ios 0x90950 {}
    void onSuggestLevelStarsCompleted(gd::string response, gd::string tag) = win 0x152be0, m1 0x46e8d0, imac 0x510900, ios 0x92d20;
    void onUnblockUserCompleted(gd::string response, gd::string tag) = win 0x15fd40, m1 0x46c124, imac 0x50df50, ios 0x91500;
    void onUpdateDescriptionCompleted(gd::string response, gd::string tag) = win 0x161010, m1 0x46b04c, imac 0x50cf60, ios 0x90a68;
    void onUpdateLevelCompleted(gd::string response, gd::string tag) = win inline, m1 0x468788, imac 0x50a140, ios 0x8f2a0 {
        this->processOnDownloadLevelCompleted(response, tag, true);
    }
    void onUpdateUserScoreCompleted(gd::string response, gd::string tag) = win 0x155180, m1 0x468d5c, imac 0x50a6c0, ios 0x8f694;
    void onUploadCommentCompleted(gd::string response, gd::string tag) = win 0x15bde0, imac 0x50b830, m1 0x469db8, ios 0x90024;
    void onUploadFriendRequestCompleted(gd::string response, gd::string tag) = win 0x15dfb0, m1 0x46b488, imac 0x50d350, ios 0x90d3c;
    void onUploadLevelCompleted(gd::string response, gd::string tag) = win 0x14b1a0, m1 0x466e10, imac 0x5083c0, ios 0x8e328;
    void onUploadLevelListCompleted(gd::string response, gd::string tag) = win inline, m1 0x472600, imac 0x514d50, ios 0x95464 {
        m_queuedLists.erase(tag);
        auto listID = atoi(response.c_str());
        auto uniqueID = atoi(tag.c_str());
        if (listID < 0) {
            if (m_listUploadDelegate) m_listUploadDelegate->listUploadFailed(this->getLocalLevelList(uniqueID), listID);
        }
        else {
            auto levelList = this->getLocalLevelList(uniqueID);
            if (levelList) {
                levelList->m_listID = listID;
                levelList->m_uploaded = true;
            }
            if (m_listUploadDelegate) m_listUploadDelegate->listUploadFinished(levelList);
        }
    }
    void onUploadUserMessageCompleted(gd::string response, gd::string tag) = win 0x158d00, m1 0x46dc78, imac 0x50fc20, ios 0x92518;
    int pageFromCommentKey(char const*);
    void parseRestoreData(gd::string);
    void performNetworkTest() = win inline, m1 0x4642b0, imac 0x504c40, ios 0x8bcbc {
        if (m_testedNetwork) return;
        m_testedNetwork = true;
        auto request = new cocos2d::extension::CCHttpRequest();
        request->setUrl("https://www.google.com");
        request->setReadTimeout(1);
        request->setRequestType(cocos2d::extension::CCHttpRequest::kHttpPost);
        request->setResponseCallback(this, httpresponse_selector(GameLevelManager::onProcessHttpRequestCompleted));
        request->setRequestData("temp", 4);
        request->setTag("tag");
        request->setType(56);
        cocos2d::extension::CCHttpClient::getInstance()->send(request);
        request->release();
    }
    void ProcessHttpRequest(gd::string endpoint, gd::string params, gd::string tag, GJHttpType httpType) = win 0x140b70, imac 0x504fa0, m1 0x464634, ios 0x8bf54;
    void processOnDownloadLevelCompleted(gd::string response, gd::string tag, bool) = win 0x150350, m1 0x489224, imac 0x52e460, ios 0xa38dc;
    void purgeUnusedLevels() = win 0x148330, m1 0x47f7a0, imac 0x523900;
    void rateDemon(int, int, bool) = m1 0x48c020, imac 0x531730, win 0x152e80, ios 0xa53a8;
    void rateStars(int, int) = win 0x151930, m1 0x48a7c8, imac 0x52fd00, ios 0xa4674;
    void readFriendRequest(int) = win 0x15ec90, m1 0x498000, imac 0x53edd0, ios 0xac4b0;
    void removeDelimiterChars(gd::string, bool) = win 0x167f10;
    void removeDLFromActive(char const*) = m1 0x47e944, imac 0x5229d0, win 0x147ae0, ios 0x9d340;
    bool removeFriend(int) = win 0x15efa0, m1 0x498490, imac 0x53f2b0, ios 0xac6e0;
    void removeLevelDownloadedKeysFromDict(cocos2d::CCDictionary*);
    void removeUserFromList(int, UserListType);
    void reportLevel(int) = win 0x167830, m1 0x49cd30, imac 0x543d30, ios 0xaefa4;
    void requestUserAccess() = win 0x161cd0, m1 0x49ab48, imac 0x5419f0, ios 0xadc30;
    void resetAccountComments(int accountID) {
        for(int i = 0; i <= 1; i++) {
            auto key = getAccountCommentKey(accountID, i);
            if(getStoredOnlineLevels(key)) {
                m_storedLevels->removeObjectForKey(key);
            }
        }
    }
    void resetAllTimers();
    void resetCommentTimersForAccountID(int);
    void resetCommentTimersForLevelID(int, CommentKeyType) = ios 0xab1bc, win 0x15c770, imac 0x53c490, m1 0x495b6c;
    void resetDailyLevelState(GJTimedLevelType) = imac 0x543920, m1 0x49c920;
    void resetGauntlets();
    void resetStoredUserInfo(int id) = win inline, m1 0x490a04, imac 0x536fc0 {
        m_storedUserInfo->removeObjectForKey(id);
    }
    void resetStoredUserList(UserListType) = win 0x160840, m1 0x497f28, imac 0x53ed30, ios 0xac410;
    void resetTimerForKey(char const*) = win 0x147fe0, m1 0x47ecac, imac 0x522d00;
    void restoreItems() = m1 0x49ca38, imac 0x543a30;
    void saveFetchedLevelLists(cocos2d::CCArray* lists) = win inline {
        for (int i = 0; i < lists->count(); i++) {
            this->saveLevelList(static_cast<GJLevelList*>(lists->objectAtIndex(i)));
        }
    }
    void saveFetchedLevels(cocos2d::CCArray*) = ios 0x98dac, win 0x144960, imac 0x51b540, m1 0x477ed0;
    void saveFetchedMapPacks(cocos2d::CCArray*);
    void saveGauntlet(GJMapPack*);
    void saveLevel(GJGameLevel*) = win 0x146d40, imac 0x521650, m1 0x47d688, ios 0x9c808;
    void saveLevelList(GJLevelList*) = win 0x14ee60;
    void saveLocalScore(int, int, int);
    void saveMapPack(GJMapPack*);
    void setActiveSmartTemplate(GJSmartTemplate*);
    void setBoolForKey(bool value, char const* key) = win inline, m1 0x49d96c, imac 0x544920, ios 0xaf5bc {
        m_searchFilters->setObject(cocos2d::CCString::createWithFormat("%i", (int)value), key);
    }
    void setDiffVal(int, bool);
    void setFolderName(int, gd::string, bool) = imac 0x524790, m1 0x48055c;
    void setIntForKey(int value, char const* key) = win inline, m1 0x49d758, imac 0x544720, ios 0xaf4c0 {
        m_searchFilters->setObject(cocos2d::CCString::createWithFormat("%i", value), key);
    }
    void setLenVal(int, bool);
    void setLevelFeatured(int, int, bool);
    void setLevelStars(int, int, bool);
    int specialFromLikeKey(char const*);
    void storeCommentsResult(cocos2d::CCArray*, gd::string, char const*) = win 0x15b220, m1 0x491640, imac 0x537d50, ios 0xa88b0;
    void storeDailyLevelState(int, int, GJTimedLevelType) = m1 0x49c7e4, imac 0x543800, ios 0xaed8c;
    void storeFriendRequest(GJFriendRequest* request) = win inline, m1 0x4909e8, imac 0x536f90, ios inline {
        if (request && request->m_accountID > 0) m_friendRequests->setObject(request, request->m_accountID);
    }
    void storeSearchResult(cocos2d::CCArray* levels, gd::string pageInfo, char const* searchKey) = win 0x147570, m1 0x47dec0, imac 0x521fe0, ios 0x9ce4c;
    void storeUserInfo(GJUserScore* score) = win inline, m1 0x4904e8, imac 0x536a60, ios inline {
        if (score && score->m_accountID > 0) m_storedUserInfo->setObject(score, score->m_accountID);
    }
    void storeUserMessage(GJUserMessage*);
    void storeUserMessageReply(int, GJUserMessage*);
    void storeUserName(int userID, int accountID, gd::string userName) = win 0x143ca0, m1 0x4754d4, imac 0x5181b0, ios 0x97218;
    void storeUserNames(gd::string usernameString) = imac 0x5179d0, m1 0x474d1c, win 0x1439a0;
    void submitUserInfo() = win 0x1673f0, m1 0x48ddc8, imac 0x533e90, ios 0xa65f0;
    void suggestLevelStars(int, int, int) = win 0x1528c0, m1 0x48b9ec, imac 0x531110, ios 0xa50b8;
    gd::string tryGetUsername(int) = win 0x144000, m1 0x475900, imac 0x5185d0, ios 0x9742c;
    CommentType typeFromCommentKey(char const*);
    LikeItemType typeFromLikeKey(char const*);
    void unblockUser(int) = win 0x15fa20, m1 0x498f7c, imac 0x53fdd0, ios 0xaccbc;
    void unfollowUser(int) = m1 0x480044, imac 0x524240;
    void updateDescription(int, gd::string) = win 0x160cc0, m1 0x499750, imac 0x5405d0, ios 0xad108;
    void updateLevel(GJGameLevel*) = win 0x151700, imac 0x52f9a0, m1 0x48a478, ios 0xa44a0;
    void updateLevelOrders() = win 0x145680, m1 0x47b2b0, imac 0x51ed60;
    void updateLevelRewards(GJGameLevel*) = win 0x144380, m1 0x475db4, imac 0x518cc0;
    void updateSavedLevelList(GJLevelList*) = ios 0xa2948, win 0x14ef40, m1 0x487790, imac 0x52c630;
    void updateUsernames() = m1 0x47fcd4, imac 0x523ed0;
    void updateUserScore() = ios 0xa5620, win 0x153790, m1 0x48c508, imac 0x531c80;
    void uploadAccountComment(gd::string);
    void uploadComment(gd::string, CommentType, int, int) = win 0x15b510, m1 0x494bec, imac 0x53b480, ios 0xaa938;
    void uploadFriendRequest(int, gd::string) = win 0x15dba0, m1 0x496bfc, imac 0x53d870, ios 0xab968;
    void uploadLevel(GJGameLevel*) = win 0x14a6c0, m1 0x482908, imac 0x526fe0, ios 0x9fd1c;
    void uploadLevelComment(int, gd::string, int);
    void uploadLevelList(GJLevelList*) = win 0x14dd70, m1 0x486180, imac 0x52aed0, ios 0xa1cf0;
    void uploadUserMessage(int, gd::string, gd::string) = win 0x1588b0, m1 0x491cac, imac 0x538390, ios 0xa8ba4;
    int userIDForAccountID(int);
    GJUserScore* userInfoForAccountID(int id) = win inline, m1 0x475bfc, imac 0x518ac0, ios 0x9759c {
        return static_cast<GJUserScore*>(m_storedUserInfo->objectForKey(id));
    }
    gd::string userNameForUserID(int) = win 0x143e80, m1 0x475748, imac 0x518420, ios 0x9735c;
    bool verifyContainerOnlyHasLevels(cocos2d::CCDictionary*) = m1 0x480d4c, imac 0x525060;
    void verifyLevelState(GJGameLevel*);
    gd::string writeSpecialFilters(GJSearchObject*) = win 0x14b8b0, imac 0x529260, m1 0x4848d4, ios 0xa0d2c;

    gd::set<gd::string> m_queuedLists;
    cocos2d::CCDictionary* m_mainLevels;
    cocos2d::CCDictionary* m_searchFilters; //"value dict"
    cocos2d::CCDictionary* m_onlineLevels;
    cocos2d::CCDictionary* m_storedLevelData;
    cocos2d::CCDictionary* m_followedCreators;
    cocos2d::CCDictionary* m_favoriteLists;
    cocos2d::CCDictionary* m_downloadedLevels;
    cocos2d::CCDictionary* m_likedLevels;
    cocos2d::CCDictionary* m_ratedLevels;
    cocos2d::CCDictionary* m_ratedDemons;
    cocos2d::CCDictionary* m_reportedLevels;
    cocos2d::CCDictionary* m_onlineFolders;
    cocos2d::CCDictionary* m_localLevelsFolders;
    cocos2d::CCDictionary* m_dailyLevels;
    int m_dailyTimeLeft;
    int m_dailyID;
    int m_activeDailyID;
    int m_weeklyTimeLeft;
    int m_weeklyID;
    int m_activeWeeklyID;
    int m_eventTimeLeft;
    int m_eventID;
    int m_activeEventID;
    cocos2d::CCDictionary* m_gauntletLevels;
    gd::map<gd::string, bool> m_availableFilters;
    cocos2d::CCDictionary* m_timerDict;
    cocos2d::CCDictionary* m_knownUsers;
    cocos2d::CCDictionary* m_accountIDtoUserIDDict;
    cocos2d::CCDictionary* m_userIDtoAccountIDDict;
    cocos2d::CCDictionary* m_storedLevels;
    cocos2d::CCDictionary* m_pageInfo;
    cocos2d::CCDictionary* m_unkDict20;
    cocos2d::CCDictionary* m_savedPacks;
    cocos2d::CCDictionary* m_savedGauntlets;
    cocos2d::CCDictionary* m_downloadObjects;
    cocos2d::CCDictionary* m_friendReqAndUserBlocks;
    cocos2d::CCDictionary* m_storedUserInfo;
    cocos2d::CCDictionary* m_friendRequests;
    cocos2d::CCDictionary* m_userMessages;
    cocos2d::CCDictionary* m_userReplies;
    gd::string m_searchKey;
    gd::string m_mapPackKey;
    LeaderboardState m_leaderboardState;
    bool m_returnToLocalLevels;
    LevelManagerDelegate* m_levelManagerDelegate;
    LevelDownloadDelegate* m_levelDownloadDelegate;
    LevelCommentDelegate* m_levelCommentDelegate;
    CommentUploadDelegate* m_commentUploadDelegate;
    LevelUploadDelegate* m_levelUploadDelegate;
    ListUploadDelegate* m_listUploadDelegate;
    LevelUpdateDelegate* m_levelUpdateDelegate;
    LeaderboardManagerDelegate* m_leaderboardManagerDelegate;
    LevelDeleteDelegate* m_levelDeleteDelegate;
    LevelListDeleteDelegate* m_levelListDeleteDelegate;
    UserInfoDelegate* m_userInfoDelegate;
    UploadActionDelegate* m_uploadActionDelegate;
    UserListDelegate* m_userListDelegate;
    FriendRequestDelegate* m_friendRequestDelegate;
    MessageListDelegate* m_messageListDelegate;
    DownloadMessageDelegate* m_downloadMessageDelegate;
    UploadMessageDelegate* m_uploadMessageDelegate;
    GJRewardDelegate* m_GJRewardDelegate;
    GJOnlineRewardDelegate* m_GJOnlineRewardDelegate;
    GJChallengeDelegate* m_GJChallengeDelegate;
    GJDailyLevelDelegate* m_GJDailyLevelDelegate;
    OnlineListDelegate* m_onlineListDelegate;
    SearchType m_searchType;
    int m_mapPack;
    gd::string m_tempSave;
    cocos2d::CCString* m_trueString;
    cocos2d::CCArray* m_smartTemplates;
    GJSmartTemplate* m_smartTemplate;
    bool m_testedNetwork;
}

[[link(android)]]
class GameLevelOptionsLayer : GJOptionsLayer {
    // virtual ~GameLevelOptionsLayer();

    static GameLevelOptionsLayer* create(GJGameLevel*) = win 0x2993c0, ios 0x2e20cc, imac 0x29ebd0, m1 0x246194;

    virtual void setupOptions() = win 0x299520, imac 0x29eeb0, m1 0x2463b8, ios 0x2e2200;
    virtual void didToggle(int) = win 0x2995a0, imac 0x29ef20, m1 0x246424, ios 0x2e226c;

    bool init(GJGameLevel*) = imac 0x29ee50, m1 0x246350;

    GJGameLevel* m_level;
}

[[link(android), depends(UIButtonConfig)]]
class GameManager : GManager {
    // virtual ~GameManager();
    // GameManager() = win 0x177af0, ios 0x32eafc;

    static GameManager* get() {
        return GameManager::sharedState();
    }

    static GameManager* sharedState() = ios 0x311de4, win 0x178480, imac 0x363400, m1 0x2f60ec;
    virtual void update(float) = win 0x186c40, imac 0x3785d0, m1 0x308ae4, ios 0x31d65c;
    virtual bool init() = win 0x1784d0, imac 0x363460, m1 0x2f6158, ios 0x311e44;
    virtual void encodeDataTo(DS_Dictionary*) = win 0x186050, imac 0x3779c0, m1 0x307eec, ios 0x31ce28;
    virtual void dataLoaded(DS_Dictionary*) = win 0x183b40, m1 0x306384, imac 0x375ba0, ios 0x31b6a4;
    virtual void firstLoad() = win 0x185750, imac 0x377060, m1 0x3076a8, ios 0x31c908;

    void accountStatusChanged() = win inline, m1 0x302bd8, imac 0x3717e0, ios 0x3198f0 {
        if (m_menuLayer) m_menuLayer->updateUserProfileButton();
    }
    int activeIconForType(IconType) = ios 0x31781c, win 0x17ea70, imac 0x36d480, m1 0x2feb3c;
    TodoReturn addCustomAnimationFrame(int, int, gd::string, gd::string);
    TodoReturn addDuplicateLastFrame(int);
    void addGameAnimation(int objectID, int frames, float frameTime, gd::string mainAnimFrame, gd::string detailAnimFrame, int defaultFrame) = win 0x1aba70, m1 0x201188, imac 0x254220, ios 0x34ed6c;
    TodoReturn addIconDelegate(cocos2d::CCObject*, int);
    void addNewCustomObject(gd::string str) = win 0x1807d0, m1 0x302400, imac 0x370fd0, ios 0x319548;
    TodoReturn addToGJLog(cocos2d::CCString*);
    void applicationDidEnterBackground();
    void applicationWillEnterForeground() = win 0x186cd0, m1 0x308b48, imac 0x378630, ios 0x31d68c;
    void calculateBaseKeyForIcons() = m1 0x2f6240, imac 0x363550, ios 0x311f24;
    TodoReturn canShowRewardedVideo();
    void checkSteamAchievementUnlock() = win 0x17b1a0;
    void checkUsedIcons() = ios 0x316a40, win 0x1811b0, m1 0x2fcce8, imac 0x36b860;
    TodoReturn claimItemsResponse(gd::string);
    TodoReturn clearGJLog();
    cocos2d::ccColor3B colorForIdx(int) = ios 0x316f24, win 0x17e330, imac 0x36c520, m1 0x2fdae8;
    TodoReturn colorForPos(int);
    gd::string colorKey(int, UnlockType) = win 0x179790, m1 0x2f766c, imac 0x364cb0, ios 0x312e84;
    void completedAchievement(gd::string) = win 0x17a1d0, m1 0x2f8464, imac 0x365aa0;
    int countForType(IconType) = ios 0x3178fc, win 0x17ebe0, m1 0x2febfc, imac 0x36d6f0;
    TodoReturn defaultFrameForAnimation(int);
    TodoReturn defaultYOffsetForBG2(int);
    void didExitPlayscene() = win inline, imac 0x378540, m1 0x308a38, ios 0x31d618 {
        if (this->m_unkBool8) {
            this->m_unkBool8 = false;
            if (cocos2d::CCDirector::sharedDirector()->getSmoothFixCounter() >= 10) {
                this->setGameVariable("0023", false);
            }
        }
    }
    void doQuickSave();
    gd::string dpadConfigToString(UIButtonConfig&) = win 0x183540, imac 0x374330, m1 0x304e14, ios 0x31ac2c;
    TodoReturn eventUnlockFeature(char const*);
    void fadeInMenuMusic() = ios 0x312450, win 0x178a90, imac 0x363ca0, m1 0x2f6a1c;
    void fadeInMusic(gd::string) = win 0x178b80, m1 0x2f6b18, imac 0x363d80, ios 0x3124e0;
    TodoReturn finishedLoadingBGAsync(cocos2d::CCObject*);
    TodoReturn finishedLoadingGAsync(int);
    TodoReturn finishedLoadingGAsync1(cocos2d::CCObject*);
    TodoReturn finishedLoadingGAsync2(cocos2d::CCObject*);
    TodoReturn finishedLoadingIconAsync(cocos2d::CCObject*);
    TodoReturn finishedLoadingMGAsync(int);
    TodoReturn finishedLoadingMGAsync1(cocos2d::CCObject*);
    TodoReturn finishedLoadingMGAsync2(cocos2d::CCObject*);
    void followTwitch() = m1 0x2fe874, imac 0x36d1e0, ios 0x317578;
    void followTwitter() = m1 0x2fe774, imac 0x36d100, ios 0x317480;
    TodoReturn framesForAnimation(int);
    TodoReturn frameTimeForAnimation(int);
    TodoReturn generateSecretNumber();

    const char* getBGTexture(int id) = ios 0x318e30, win inline, imac 0x370460, m1 0x3017dc {
        return cocos2d::CCString::createWithFormat(
            "game_bg_%02d_001.png",
            std::clamp(id, 1, 59)
        )->getCString();
    }

    LevelEditorLayer* getEditorLayer() {
        return m_levelEditorLayer;
    }

    const char* getFontFile(int) = win inline, ios 0x318378, imac 0x36fa00, m1 0x300d14 {
        p0 = std::clamp(p0, 0, 59);
        this->loadFont(p0);
        if (p0 != 0) {
            return cocos2d::CCString::createWithFormat("gjFont%02d.fnt", p0)->getCString();
        }
        return "bigFont.fnt";
    }
    const char* getFontTexture(int) = win inline, m1 0x300d7c, imac 0x36fa60, ios 0x3183e0 {
        p0 = std::clamp(p0, 0, 59);
        this->loadFont(p0);
        if (p0 != 0) {
            return cocos2d::CCString::createWithFormat("gjFont%02d.png", p0)->getCString();
        }
        return "bigFont.png";
    }

    GJBaseGameLayer* getGameLayer() {
        return m_gameLayer;
    }
    bool getGameVariable(char const*) = ios 0x312374, win 0x1800f0, imac 0x363b40, m1 0x2f6894;
    bool getGameVariableDefault(const char* key, bool defaultValue) {
        //helper function
        auto object = static_cast<cocos2d::CCString*>(m_valueKeeper->objectForKey(std::string("gv_") + key));
        if (object == nullptr)
            return defaultValue;
        return object->boolValue();
    }
    char const* getGTexture(int) = m1 0x301874, imac 0x370500;
    int getIconRequestID() = ios 0x3182c0 {
        return m_iconRequestID++;
    }
    int getIntGameVariable(char const*) = ios 0x319324, win 0x1806f0, imac 0x370ca0, m1 0x3020bc;
    int getIntGameVariableDefault(const char* key, int defaultValue) {
        //helper function
        auto object = static_cast<cocos2d::CCString*>(m_valueKeeper->objectForKey(std::string("gv_") + key));
        if (object == nullptr)
            return defaultValue;
        return object->intValue();
    }
    gd::string getMenuMusicFile() = win 0x178700, m1 0x2f63c0, imac 0x3636f0, ios 0x312078;
    TodoReturn getMGTexture(int);
    TodoReturn getNextUniqueObjectKey();
    TodoReturn getNextUsedKey(int, bool);
    cocos2d::CCArray* getOrderedCustomObjectKeys() = win inline, ios 0x319428, imac 0x370e40, m1 0x302280 {
        auto keys = m_customObjectDict->allKeys();
        if (keys->count() != 0) {
            qsort(keys->data->arr, keys->data->num, sizeof(cocos2d::CCString*), [](void const* a, void const* b) {
                auto sa = *static_cast<cocos2d::CCString* const*>(a);
                auto sb = *static_cast<cocos2d::CCString* const*>(b);
                return sa->intValue() - sb->intValue();
            });
        }
        return keys;
    }
    int getPlayerBall() {
        return m_playerBall;
    }
    int getPlayerBird() {
        return m_playerBird;
    }
    int getPlayerColor() {
        return m_playerColor;
    }
    int getPlayerColor2() {
        return m_playerColor2;
    }
    int getPlayerDart() {
        return m_playerDart;
    }
    int getPlayerDeathEffect() {
        return m_playerDeathEffect;
    }

    int getPlayerFrame() {
        return m_playerFrame;
    }
    bool getPlayerGlow() {
        return m_playerGlow;
    }
    int getPlayerGlowColor() {
        return m_playerGlowColor;
    }
    int getPlayerJetpack() {
        return m_playerJetpack;
    }
    int getPlayerRobot() {
        return m_playerRobot;
    }
    int getPlayerShip() {
        return m_playerShip;
    }
    int getPlayerShipFire() {
        return m_playerShipFire;
    }
    int getPlayerSpider() {
        return m_playerSpider;
    }
    int getPlayerStreak() {
        return m_playerStreak;
    }
    int getPlayerSwing() {
        return m_playerSwing;
    }

    PlayLayer* getPlayLayer() {
        return m_playLayer;
    }
    gd::string getPracticeMusicFile() = win inline, ios 0x312140, m1 0x2f6540, imac 0x363850 {
        auto mdm = MusicDownloadManager::sharedState();
        if (m_customPracticeSongID > 0) {
            if (mdm->isSongDownloaded(m_customPracticeSongID)) {
                if (m_customPracticeSongID > 0) {
                    return mdm->pathForSong(m_customPracticeSongID);
                }
            }
            else {
                m_customPracticeSongID = 0;
            }
        }
        return "StayInsideMe.mp3";
    }
    bool getUGV(char const*) = ios 0x319198, win 0x180480, imac 0x370a10, m1 0x301df0;
    void getUnlockForAchievement(gd::string, int&, UnlockType&) = win 0x179980, m1 0x2f7a94, imac 0x3650e0, ios 0x313158;
    TodoReturn groundHasSecondaryColor(int);
    TodoReturn iconAndTypeForKey(int, int&, int&);
    gd::string iconKey(int, IconType) = win 0x1792b0, m1 0x2f7060, imac 0x364400, ios 0x3129e8;
    UnlockType iconTypeToUnlockType(IconType) = ios 0x312cb0, win 0x1795c0, m1 0x2f7498, imac 0x364990;
    bool isColorUnlocked(int, UnlockType) = ios 0x312fb8, win 0x1798c0, imac 0x364f40, m1 0x2f78a8;
    bool isIconLoaded(int id, int type) = win inline, m1 0x2fec84, imac 0x36d8f0, ios 0x3179a4 {
        return m_iconLoadCounts[this->keyForIcon(id, type)] > 0;
    }
    bool isIconUnlocked(int, IconType) = ios 0x312be8, win 0x1794e0, imac 0x3648d0, m1 0x2f7388;
    TodoReturn itemPurchased(char const*);
    void joinDiscord() = m1 0x2fe8f4, imac 0x36d250, ios 0x3175f4;
    void joinReddit() = m1 0x2fe974, imac 0x36d2c0, ios 0x317670;
    int keyForIcon(int iconIdx, int iconEnum) {
        return m_keyStartForIcon[iconEnum] + iconIdx - 1;
    }
    TodoReturn levelIsPremium(int, int);
    void likeFacebook() = m1 0x2fe6f4, imac 0x36d090, ios 0x317404;
    void loadBackground(int) = win 0x17f880, m1 0x300f5c, imac 0x36fc40, ios 0x3185c0;
    void loadBackgroundAsync(int);

    void loadDeathEffect(int id) = ios 0x318448, win inline, imac 0x36fac0, m1 0x300de4 {
        if (id < 1) id = 1;
        if (id > 19) id = 20;
        if (id != m_loadedDeathEffect) {
            if (1 < m_loadedDeathEffect) {
                cocos2d::CCTextureCache::sharedTextureCache()->removeTextureForKey(
                    cocos2d::CCString::createWithFormat("PlayerExplosion_%02d.png", m_loadedDeathEffect-1)->getCString()
                );
            }
            if (1 < id) {
                cocos2d::CCTextureCache::sharedTextureCache()->addImage(
                    cocos2d::CCString::createWithFormat("PlayerExplosion_%02d.png", id-1)->getCString(),
                    false
                );
                cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile(
                    cocos2d::CCString::createWithFormat("PlayerExplosion_%02d.plist", id-1)->getCString()
                );
            }
            m_loadedDeathEffect = id;
        }
    }

    gd::string loadDpadFromString(UIButtonConfig&, gd::string) = win 0x183830, imac 0x375010, m1 0x305914, ios 0x31b20c;
    TodoReturn loadDPadLayout(int, bool);
    void loadFont(int) = m1 0x300c70, imac 0x36f960, win 0x17f7d0;
    void loadGround(int) = win 0x17fc30, m1 0x301484, imac 0x370120, ios 0x318ad8;
    void loadGroundAsync(int);
    cocos2d::CCTexture2D* loadIcon(int, int, int) = ios 0x317bac, win 0x17ecf0, imac 0x36e7f0, m1 0x2ffaf4;
    TodoReturn loadIconAsync(int, int, int, cocos2d::CCObject*);
    void loadMiddleground(int) = win 0x17f9e0, m1 0x301148, imac 0x36fe10, ios 0x3187ac;
    void loadMiddlegroundAsync(int);
    void loadVideoSettings() = m1 0x306228, imac 0x375a90;
    TodoReturn lockColor(int, UnlockType);
    TodoReturn lockIcon(int, IconType);
    TodoReturn logLoadedIconInfo();
    void openEditorGuide();
    void playMenuMusic() = win 0x178810, m1 0x2f66b4, imac 0x3639a0, ios 0x312208;
    int playSFXTrigger(SFXTriggerGameObject*) = ios 0x31260c, imac 0x363ea0, m1 0x2f6c50, win 0x178ca0;
    void prepareDPadSettings() = imac 0x375340, m1 0x305c54, win 0x183aa0;
    TodoReturn printGJLog();
    void queueReloadMenu() = m1 0x3092fc, imac 0x378db0;
    TodoReturn rateGame();
    void recountUserStats(gd::string) = ios 0x319eac, m1 0x3032cc, imac 0x372010, win 0x181ba0;
    void reloadAll(bool switchingModes, bool toFullscreen, bool borderless, bool fix, bool unused) = ios 0x31dbbc, win 0x187490, imac 0x378ee0, m1 0x309444;
    void reloadAll(bool switchingModes, bool toFullscreen, bool unused) {
        return this->reloadAll(switchingModes, toFullscreen, false, false, unused);
    }
    void reloadAllStep2() = ios 0x31dc60, win 0x187540, imac 0x378f90, m1 0x3094e8;
    void reloadAllStep3() = win 0x1876a0;
    void reloadAllStep4() = win 0x1877b0;
    void reloadAllStep5() = win 0x187850, imac 0x379180, m1 0x3096c0, ios 0x31de38;
    void reloadMenu() = win 0x187460, m1 0x309370, imac 0x378e10;
    TodoReturn removeCustomObject(int);
    TodoReturn removeIconDelegate(int);
    TodoReturn reorderKey(int, bool);
    void reportAchievementWithID(char const*, int, bool) = ios 0x313e4c, win 0x17afd0, imac 0x366830, m1 0x2f9160;
    void reportPercentageForLevel(int levelID, int percentage, bool isPlatformer) = ios 0x313a44, win 0x17a5f0, m1 0x2f87b4, imac 0x365da0;
    void resetAchievement(gd::string) = win 0x17a390, m1 0x2f8614, imac 0x365c30;
    TodoReturn resetAdTimer();
    TodoReturn resetAllIcons();
    void resetCoinUnlocks() = win 0x17db50;
    TodoReturn resetDPadSettings(bool);
    cocos2d::CCSize resolutionForKey(int) = win 0x187890, m1 0x309710, imac 0x3791c0, ios 0x31de78;
    TodoReturn resumeAudio();
    TodoReturn resumeAudioDelayed();
    void returnToLastScene(GJGameLevel*) = ios 0x31d818, win 0x187030, m1 0x308f8c, imac 0x3789d0;
    TodoReturn rewardedVideoAdFinished(int);
    TodoReturn rewardedVideoHidden();
    TodoReturn rewardedVideoHiddenDelayed();
    // partially inlined on windows
    bool safePopScene() = ios 0x31dab8, win 0x1873e0, m1 0x309298, imac 0x378d40;
    TodoReturn saveAdTimer();
    TodoReturn saveDPadLayout(int, bool);
    void setGameVariable(char const*, bool) = ios 0x318f14, win 0x17fe90, imac 0x370550, m1 0x3018c0;
    void setHasRatingPower(int);
    void setIntGameVariable(char const*, int) = ios 0x319274, win 0x1805f0, imac 0x370b70, m1 0x301f7c;
    void setPlayerBall(int id) {
        m_playerBall = id;
    }
    void setPlayerBird(int id) {
        m_playerBird = id;
    }
    void setPlayerColor(int id) {
        m_playerColor = id;
    }
    void setPlayerColor2(int id) {
        m_playerColor2 = id;
    }
    void setPlayerColor3(int id) {
        m_playerGlowColor = id;
    }
    void setPlayerDart(int id) {
        m_playerDart = id;
    }
    void setPlayerDeathEffect(int id) {
        m_playerDeathEffect = id;
    }
    void setPlayerFrame(int id) {
        m_playerFrame = id;
    }
    void setPlayerGlow(bool v) {
        m_playerGlow = v;
    }
    void setPlayerJetpack(int id) {
        m_playerJetpack = id;
    }
    void setPlayerRobot(int id) {
        m_playerRobot = id;
    }
    void setPlayerShip(int id) {
        m_playerShip = id;
    }
    void setPlayerShipStreak(int id) {
        m_playerShipFire = id;
    }
    void setPlayerSpider(int id) {
        m_playerSpider = id;
    }
    void setPlayerStreak(int id) {
        m_playerStreak = id;
    }
    void setPlayerSwing(int id) {
        m_playerSwing = id;
    }
    void setPlayerUserID(int);
    void setUGV(char const*, bool) = ios 0x3190a8, win 0x180320, m1 0x301c3c, imac 0x370890;
    void setupGameAnimations() = win 0x1a8870, m1 0x1fa990, imac 0x24d5f0, ios 0x349e78;
    gd::string sheetNameForIcon(int, int) = win 0x17f470, imac 0x36dcb0, m1 0x2ff040, ios 0x317a00;
    TodoReturn shortenAdTimer(float);
    TodoReturn shouldShowInterstitial(int, int, int);
    void showInterstitial();
    void showInterstitialForced();
    void showMainMenuAd();
    void startUpdate() = m1 0x2f6378, imac 0x3636a0;
    gd::string stringForCustomObject(int customObjectID) = win 0x180950, imac 0x371170, m1 0x3025a0, ios 0x3195f0;
    void subYouTube() = m1 0x2fe7f4, imac 0x36d170, ios 0x3174fc;
    TodoReturn switchCustomObjects(int, int);
    TodoReturn switchScreenMode(bool, bool, bool, bool);
    void syncPlatformAchievements();
    bool toggleGameVariable(char const*) = ios 0x319068, win 0x180270, imac 0x3707d0, m1 0x301b54;
    TodoReturn tryCacheAd();
    TodoReturn tryShowInterstitial(int, int, int);
    TodoReturn unloadBackground();
    void unloadIcon(int, int, int) = ios 0x317ea4, win 0x17f050, m1 0x30016c, imac 0x36ee80;
    void unloadIcons(int) = win 0x17f310, m1 0x3008e4, imac 0x36f5c0, ios 0x3181c0;
    TodoReturn unlockColor(int, UnlockType);
    TodoReturn unlockedPremium();
    void unlockIcon(int, IconType);
    IconType unlockTypeToIconType(int) = ios 0x312d64, win 0x1796e0, imac 0x364ba0, m1 0x2f7528;
    void updateCustomFPS() = win 0x187cc0, m1 0x3099c4, imac 0x379480;
    TodoReturn updateMusic();
    void verifyAchievementUnlocks() = m1 0x2f93b0, imac 0x366a80;
    void verifyCoinUnlocks() = win 0x17b580;
    TodoReturn verifyStarUnlocks();
    TodoReturn verifySyncedCoins();
    TodoReturn videoAdHidden();
    TodoReturn videoAdShowed();

    cocos2d::CCDictionary* m_mainFramesForAnimation;
    cocos2d::CCDictionary* m_detailFramesForAnimation;
    cocos2d::CCDictionary* m_frameTimeForAnimation;
    cocos2d::CCDictionary* m_framesForAnimation;
    cocos2d::CCDictionary* m_defaultFrames;
    bool m_switchModes;
    bool m_toFullscreen;
    bool m_reloading;
    bool m_fix;
    bool m_reloadTextures;
    bool m_unkBool2;
    bool m_vsyncEnabled;
    cocos2d::CCDictionary* m_valueKeeper;
    cocos2d::CCDictionary* m_unlockValueKeeper;
    cocos2d::CCDictionary* m_customObjectDict;
    double m_adTimer;
    double m_adCache;
    bool m_unkBool3;
    int m_unkSize4_1;
    double m_unkDouble2;
    int m_unkSize4_2;
    int m_unkSize4_3;
    bool m_loaded;
    bool m_googlePlaySignedIn;
    gd::string m_editorClipboard;
    int m_copiedObjectCount;
    PlayLayer* m_playLayer;
    LevelEditorLayer* m_levelEditorLayer;
    GJBaseGameLayer* m_gameLayer;
    LevelSelectLayer* m_levelSelectLayer;
    MenuLayer* m_menuLayer;
    bool m_inMenuLayer;
    void* m_premiumPopup;
    bool m_firstSetup;
    bool m_showedMenu;
    bool m_unknownBool4;
    bool m_unknownBool5;
    gd::string m_playerUDID;
    gd::string m_playerName;
    bool m_scoreUpdated; //playerScoreValid
    geode::SeedValueRSV m_playerUserID;
    float m_bgVolume;
    float m_sfxVolume;
    float m_timeOffset;
    bool m_ratedGame;
    bool m_clickedFacebook;
    bool m_clickedTwitter;
    bool m_clickedYouTube;
    bool m_clickedTwitch;
    bool m_clickedDiscord;
    bool m_clickedReddit;
    double m_socialsDuration;
    bool m_showedAd; //didPauseBGMusic
    bool m_wasHigh;
    bool m_editorEnabled;
    int m_sceneEnum;
    bool m_searchObjectBool;
    geode::SeedValueRSV m_playerFrame;
    geode::SeedValueRSV m_playerShip;
    geode::SeedValueRSV m_playerBall;
    geode::SeedValueRSV m_playerBird;
    geode::SeedValueRSV m_playerDart;
    geode::SeedValueRSV m_playerRobot;
    geode::SeedValueRSV m_playerSpider;
    geode::SeedValueRSV m_playerSwing;
    geode::SeedValueRSV m_playerColor;
    geode::SeedValueRSV m_playerColor2;
    geode::SeedValueRSV m_playerGlowColor;
    geode::SeedValueRSV m_playerStreak;
    geode::SeedValueRSV m_playerShipFire;
    geode::SeedValueRSV m_playerDeathEffect;
    geode::SeedValueRSV m_playerJetpack;
    geode::SeedValueRS m_chk;
    geode::SeedValueSR m_secretNumber;
    bool m_playerGlow;
    IconType m_playerIconType;
    bool m_everyPlaySetup;
    bool m_showSongMarkers;
    bool m_showBPMMarkers;
    bool m_recordGameplay;
    bool m_showProgressBar;
    bool m_performanceMode;
    bool m_addGlow;
    bool m_clickedGarage;
    bool m_clickedEditor;
    bool m_clickedName;
    bool m_clickedPractice;
    bool m_showedEditorGuide;
    bool m_showedRateDiffDialog;
    bool m_showedRateStarDialog;
    bool m_showedLowDetailDialog;
    GameRateDelegate* m_gameRateDelegate1;
    GameRateDelegate* m_gameRateDelegate2;
    cocos2d::ccColor3B m_copiedColor;
    int m_currentLevelID;
    int m_currentColorChannel;
    int m_currentGroupID;
    int m_loadedBgID;
    int m_loadedGroundID;
    int m_loadedMG;
    int m_loadedFont;
    int m_loadedDeathEffect;
    bool m_loadingBG;
    bool m_loadingG;
    bool m_loadingG1;
    bool m_finishedLoadingG1;
    bool m_shouldLoadG1;
    bool m_finishedLoadingMG1;
    bool m_finishedLoadingMG2;
    int m_sessionAttempts;
    int m_sessionAttempts2;
    int m_sessionNormalAttempts;
    int m_bootups;
    bool m_hasRatedGame;
    bool m_unkBool6;
    bool m_shouldLoadUnlockValueKeeper;
    bool m_unkBool7;
    bool m_unkBool8;
    geode::SeedValueRSV m_hasRP;
    bool m_canGetLevelSaveData;
    int m_resolution;
    int m_texQuality;
    bool m_somethingInMenuLayer;
    DailyLevelPage* m_dailyLevelPage;
    bool m_ropeGarageEnter;
    int m_currentGauntlet;
    int m_unkSize4_13;
    bool m_unkBool10;
    int m_unkSize4_14;
    bool m_disableThumbstick;
    float m_customFPSTarget;
    bool m_loadingLevel;
    int m_customMenuSongID;
    int m_customPracticeSongID;
    gd::map<int, int> m_iconLoadCounts;
    gd::map<int, gd::map<int, int>> m_iconRequests;
    gd::map<int, bool> m_isIconBeingLoaded;
    gd::vector<int> m_keyStartForIcon;
    gd::map<int, gd::vector<cocos2d::CCObject*>> m_iconDelegates;
    int m_iconRequestID;
    cocos2d::CCArray* m_unkArray;
    RewardedVideoDelegate* m_rewardedVideoDelegate;
    SearchType m_localSearchType;
    SearchType m_savedSearchType;
    int m_levelSearchType;
    UIButtonConfig m_dpad1;
    UIButtonConfig m_dpad2;
    UIButtonConfig m_dpad3;
    UIButtonConfig m_dpad4;
    UIButtonConfig m_dpad5;
    gd::string m_dpadLayout1;
    gd::string m_dpadLayout2;
    gd::string m_dpadLayout3;
    gd::string m_dpadLayoutDual1;
    gd::string m_dpadLayoutDual2;
    gd::string m_dpadLayoutDual3;
    int m_leaderboardLevelID;
    int m_leaderboardLevelTime;
    int m_leaderboardLevelPoints;
    bool m_shouldResetShader;
    cocos2d::CCPoint m_practicePos;
    float m_practiceOpacity;
}

[[link(android)]]
class GameObject : CCSpritePlus {
    GameObject() = win 0x135ba0, m1 0x199f78, imac 0x1e2350, ios 0x22ee90;
    ~GameObject() = win 0x188730, m1 0x4d72e4, imac 0x585600, ios 0x2534cc;

    static GameObject* createWithFrame(char const* name) = ios 0x253d3c, win 0x18aca0, imac 0x58a280, m1 0x4d7884;
    static GameObject* createWithKey(int key) = ios 0x253594, win 0x188850, imac 0x585720, m1 0x4d73bc;
    static GameObject* objectFromVector(gd::vector<gd::string>& propValues, gd::vector<void*>& propIsPresent, GJBaseGameLayer* gameLayer, bool lowDetail) = win 0x19a260, imac 0x5a7da0, m1 0x4e2090, ios 0x25d1e4;

    virtual void update(float) = m1 0x4d99a0, imac 0x5926c0, ios 0x255980 {}
    virtual void setScaleX(float) = win 0x1952d0, m1 0x4de6e4, imac 0x5a42e0, ios 0x25a750;
    virtual void setScaleY(float) = win 0x1953b0, m1 0x4de784, imac 0x5a4380, ios 0x25a7e8;
    virtual void setScale(float) = win 0x1954a0, m1 0x4de824, imac 0x5a4420, ios 0x25a880;
    virtual void setPosition(cocos2d::CCPoint const&) = win 0x194be0, m1 0x4de10c, imac 0x5a3d60, ios 0x25a238;
    virtual void setVisible(bool) = win 0x195cd0, imac 0x5a4b20, m1 0x4dee6c, ios 0x25ade8;
    virtual void setRotation(float) = win 0x194e80, imac 0x5a3fd0, m1 0x4de3ac, ios 0x25a444;
    virtual void setRotationX(float) = win 0x194fd0, m1 0x4de494, imac 0x5a40a0, ios 0x25a51c;
    virtual void setRotationY(float) = win 0x195120, m1 0x4de570, imac 0x5a4160, ios 0x25a5e8;
    virtual void setOpacity(unsigned char) = win 0x195880, imac 0x5a4780, m1 0x4deb48, ios 0x25aafc;
    virtual bool initWithTexture(cocos2d::CCTexture2D*) = win 0x18ad30, m1 0x4d7ac8, imac 0x58a4b0, ios 0x253f40;
    virtual void setChildColor(cocos2d::ccColor3B const&) = win 0x19de40, imac 0x5b0a70, m1 0x4e9884, ios 0x260390;
    virtual void setFlipX(bool) = win 0x195240, m1 0x4de63c, imac 0x5a4240, ios 0x25a6a8;
    virtual void setFlipY(bool) = win 0x195280, m1 0x4de690, imac 0x5a4290, ios 0x25a6fc;
    virtual void firstSetup() {}
    virtual void customSetup() = win 0x18dea0, imac 0x5926d0, m1 0x4d99a4, ios 0x255984;
    virtual void setupCustomSprites(gd::string) = win 0x1abf80, imac 0x430540, m1 0x3ab2c8, ios 0x2ad6f8;
    virtual void addMainSpriteToParent(bool) = win 0x198dd0, imac 0x5a5e40, m1 0x4e0268, ios 0x25be94;
    virtual void resetObject() = win 0x18d750, imac 0x591b80, m1 0x4d8f98, ios 0x255010;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) {}
    virtual void activateObject() = win 0x18db60, imac 0x5921a0, m1 0x4d945c, ios 0x25544c;
    virtual void deactivateObject(bool) = win 0x18dc10, imac 0x592510, m1 0x4d97e0, ios 0x2557d0;
    virtual void transferObjectRect(cocos2d::CCRect&) = win 0x1946d0, imac 0x5a3660, m1 0x4ddae0, ios 0x259cf0;
    virtual cocos2d::CCRect const& getObjectRect() = win 0x194720, imac 0x5a36d0, m1 0x4ddb58, ios 0x259d68;
    virtual cocos2d::CCRect getObjectRect(float, float) = win 0x194740, imac 0x5a3700, m1 0x4ddb6c, ios 0x259d7c;
    virtual cocos2d::CCRect const& getObjectRect2(float, float) = win 0x1948d0, imac 0x5a3930, m1 0x4ddd50, ios 0x259f50;
    virtual cocos2d::CCRect const& getObjectTextureRect() = win 0x194970, imac 0x5a3a00, m1 0x4dde14, ios 0x259fd4;
    virtual cocos2d::CCPoint getRealPosition() = win 0x194ba0, imac 0x5a3ca0, m1 0x4de06c, ios 0x25a1b8;
    virtual void setStartPos(cocos2d::CCPoint) = win 0x18d5d0, m1 0x4d8e7c, imac 0x591a70, ios 0x254ef4;
    virtual void updateStartValues() = win 0x18d9a0, m1 0x4d92ec, imac 0x591fd0, ios 0x25535c;
    virtual void customObjectSetup(gd::vector<gd::string>& propValues, gd::vector<void*>& propIsPresent) {}
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x19bd50, imac 0x5a9880, m1 0x4e3ca8, ios 0x25e828;
    virtual void claimParticle() = win 0x195df0, imac 0x5a4c80, m1 0x4defb4, ios 0x25af30;
    virtual void unclaimParticle() = win 0x196320, m1 0x4df574, imac 0x5a52c0, ios 0x25b3d0;
    virtual void particleWasActivated() = m1 0x4df5dc, imac 0x5a5330, ios 0x25b424 {}
    virtual bool isFlipX() = win 0x195220, m1 0x4de62c, imac 0x5a4220, ios 0x25a698;
    virtual bool isFlipY() = win 0x195230, m1 0x4de634, imac 0x5a4230, ios 0x25a6a0;
    virtual void setRScaleX(float) = win 0x195590, m1 0x4de8c4, imac 0x5a44c0, ios 0x25a918;
    virtual void setRScaleY(float) = win 0x1955d0, m1 0x4de8f8, imac 0x5a4500, ios 0x25a94c;
    virtual void setRScale(float) = win 0x195610, imac 0x5a4540, m1 0x4de92c, ios 0x25a980;
    virtual float getRScaleX() = win 0x195650, m1 0x4de9b0, imac 0x5a45c0, ios 0x25a9c4;
    virtual float getRScaleY() = win 0x195690, m1 0x4de9e8, imac 0x5a45f0, ios 0x25a9fc;
    virtual void setRRotation(float) = win 0x194df0, imac 0x5a3f50, m1 0x4de314, ios 0x25a3c0;
    virtual void triggerActivated(float) {}
    virtual void setObjectColor(cocos2d::ccColor3B const&) = win 0x19db00, imac 0x5b0790, m1 0x4e956c, ios 0x260094;
    virtual void setGlowColor(cocos2d::ccColor3B const&) = win 0x19ddf0, imac 0x5b0a20, m1 0x4e982c, ios 0x260338;
    virtual void restoreObject() = win 0x196410, m1 0x4df5fc, imac 0x5a5370, ios 0x25b444;
    virtual void animationTriggered() {}
    virtual void selectObject(cocos2d::ccColor3B) = win 0x19dec0, imac 0x5b0ae0, m1 0x4e9910, ios 0x26041c;
    virtual void activatedByPlayer(PlayerObject*) {}
    virtual bool hasBeenActivatedByPlayer(PlayerObject*) { return false; }
    virtual bool hasBeenActivated() { return false; }
    virtual OBB2D* getOrientedBox() = win 0x19e590, imac 0x5b1510, m1 0x4ea374, ios 0x2609e4;
    virtual void updateOrientedBox() = win 0x19e5f0, imac 0x5b1590, m1 0x4ea408, ios 0x260a78;
    virtual float getObjectRotation() = win 0x19e570, imac 0x5b9cb0, m1 0x4efe24, ios 0x264644;
    virtual void updateMainColor(cocos2d::ccColor3B const&) = win 0x19eff0, m1 0x4eae24, imac 0x5b2150, ios 0x2612d0;
    virtual void updateSecondaryColor(cocos2d::ccColor3B const&) = win 0x19f000, m1 0x4eb32c, imac 0x5b2660, ios 0x2614a4;
    virtual int addToGroup(int) = win 0x199810, imac 0x5a6570, m1 0x4e09b8, ios 0x25c4f0;
    virtual void removeFromGroup(int) = win 0x199930, imac 0x5a6620, m1 0x4e0a90, ios 0x25c5a0;
    virtual void saveActiveColors() = win 0x19d950, imac 0x5b05d0, m1 0x4e93b4, ios 0x25ff38;
    virtual float spawnXPosition() = win 0x135fe0, imac 0x1e1b50, m1 0x19999c, ios 0x22ea4c;
    virtual bool canAllowMultiActivate() { return false; }
    virtual void blendModeChanged() {}
    virtual void updateParticleColor(cocos2d::ccColor3B const&) = win 0x19dce0, imac 0x5b0960, m1 0x4e9764, ios 0x260270;
    virtual void updateParticleOpacity(unsigned char) = win 0x195b20, imac 0x5a4aa0, m1 0x4dede4, ios 0x25ad60;
    virtual void updateMainParticleOpacity(unsigned char) {}
    virtual void updateSecondaryParticleOpacity(unsigned char) {}
    virtual bool canReverse() { return false; }
    virtual bool isSpecialSpawnObject() { return false; }
    virtual bool canBeOrdered() { return false; }
    virtual cocos2d::CCLabelBMFont* getObjectLabel() = m1 0x8d390, ios 0x171fa4 { return nullptr; }
    virtual void setObjectLabel(cocos2d::CCLabelBMFont*) {}
    virtual bool shouldDrawEditorHitbox() = m1 0x4ec0bc, imac 0x5b37c0, ios 0x261f40 { return true; }
    virtual bool getHasSyncedAnimation() { return false; }
    virtual bool getHasRotateAction() { return false; }
    virtual bool canMultiActivate(bool) { return false; }
    virtual void updateTextKerning(int) {}
    virtual int getTextKerning() { return false; }
    virtual bool getObjectRectDirty() const = win 0x136000, m1 0x1999bc, imac 0x1e1b70, ios 0x22ea6c;
    virtual void setObjectRectDirty(bool) = win 0x136010, m1 0x1999c4, imac 0x1e1b80, ios 0x22ea74;
    virtual bool getOrientedRectDirty() const = win 0x136020, m1 0x1999cc, imac 0x1e1b90, ios 0x22ea7c;
    virtual void setOrientedRectDirty(bool) = win 0x136030, m1 0x1999d4, imac 0x1e1ba0, ios 0x22ea84;
    virtual GameObjectType getType() const = win 0x136040, m1 0x1999dc, imac 0x1e1bb0, ios 0x22ea8c;
    virtual void setType(GameObjectType) = win 0x136050, m1 0x1999e4, imac 0x1e1bc0, ios 0x22ea94;
    virtual cocos2d::CCPoint getStartPos() const = win 0x136060, imac 0x1e1bd0, m1 0x1999ec, ios 0x22ea9c;

    void addColorSprite(gd::string frame) = win 0x18b830, m1 0x4d83b4, imac 0x58cc00, ios 0x254690;
    void addColorSpriteToParent(bool reorder) = imac 0x592300, m1 0x4d95b8, win 0x199040, ios 0x2555a8;
    void addColorSpriteToSelf() = win 0x199240, m1 0x4e045c, imac 0x5a6020, ios 0x25c010;
    cocos2d::CCSprite* addCustomBlackChild(gd::string frame, float opacity, bool color) = win inline, imac 0x5a30a0, m1 0x4dd4c0, ios inline {
        if (color) {
            return this->addCustomColorChild(frame);
        }
        else {
            auto ret = this->addCustomChild(frame, { 0.f, 0.f }, -2);
            ret->setColor({ 0, 0, 0 });
            m_blackChildOpacity = opacity;
            ret->setOpacity(opacity * 255);
            m_unk280 = true;
            return ret;
        }
    }
    cocos2d::CCSprite* addCustomChild(gd::string frame, cocos2d::CCPoint offset, int zOrder) = win 0x194330, m1 0x4dd6a8, imac 0x5a3240, ios 0x259a28;
    cocos2d::CCSprite* addCustomColorChild(gd::string frame) = win 0x1943f0, m1 0x4dd750, imac 0x5a32e0, ios 0x259ad0;
    void addEmptyGlow() = win 0x18b6e0, m1 0x4d825c, imac 0x58ca90, ios 0x2545d8;
    void addGlow(gd::string frame) = win 0x18af60, imac 0x58a5c0, m1 0x4d7bd0, ios 0x254034;
    cocos2d::CCSprite* addInternalChild(cocos2d::CCSprite* parent, gd::string frame, cocos2d::CCPoint offset, int zOrder) = win inline, imac 0x5a3480, m1 0x4dd8ec, ios inline {
        auto spr = cocos2d::CCSprite::createWithSpriteFrameName(frame.c_str());
        spr->setPosition(parent->convertToNodeSpace({0.f, 0.f}) + offset);
        parent->addChild(spr, zOrder);
        return spr;
    }
    cocos2d::CCSprite* addInternalCustomColorChild(gd::string frame, cocos2d::CCPoint offset, int zOrder) = win 0x194530, m1 0x4dd828, imac 0x5a33d0, ios 0x259b68;
    cocos2d::CCSprite* addInternalGlowChild(gd::string frame, cocos2d::CCPoint offset) = win 0x194600, imac 0x5a3510, m1 0x4dd990, ios 0x259c18;
    void addNewSlope01(bool dontDraw) = win inline, m1 0x4ebae0, imac 0x5b3230, ios 0x261a74 {
        if (dontDraw) this->setDontDraw(true);
        auto sprite = this->addCustomChild("blockOutline_14new_001.png", { 0.f, 0.f }, 2);
        sprite->setRotation(-45.f);
    }
    void addNewSlope01Glow(bool dontDraw) = win inline, m1 0x4ebbe8, imac 0x5b3320, ios 0x261b20 {
        if (!m_glowSprite) return;
        if (dontDraw) m_glowSprite->setDontDraw(true);
        auto sprite = cocos2d::CCSprite::createWithSpriteFrameName(this->getGlowFrame("blockOutline_14new_001.png").c_str());
        sprite->setRotation(-45.f);
        m_glowSprite->addChild(sprite);
        sprite->setPosition(m_glowSprite->convertToNodeSpace({ 0.f, 0.f }));
    }
    void addNewSlope02(bool dontDraw) = win inline, m1 0x4ebd2c, imac 0x5b3460, ios 0x261c38 {
        if (dontDraw) this->setDontDraw(true);
        auto sprite = this->addCustomChild("blockOutline_15new_001.png", { 0.f, 0.f }, 2);
        sprite->setRotation(-26.5f);
    }
    void addNewSlope02Glow(bool dontDraw) = win inline, m1 0x4ebe34, imac 0x5b3550, ios 0x261ce4 {
        if (!m_glowSprite) return;
        if (dontDraw) m_glowSprite->setDontDraw(true);
        auto sprite = cocos2d::CCSprite::createWithSpriteFrameName(this->getGlowFrame("blockOutline_15new_001.png").c_str());
        sprite->setRotation(-26.5f);
        m_glowSprite->addChild(sprite);
        sprite->setPosition(m_glowSprite->convertToNodeSpace({ 0.f, 0.f }));
    }
    void addRotation(float rotationX, float rotationY) = win inline, m1 0x4de2a8, imac 0x5a3ef0, ios inline {
        this->setRotationX(this->getRotationX() + rotationX);
        this->setRotationY(this->getRotationY() + rotationY);
    }
    void addRotation(float rotation) = win 0x194d50, m1 0x4de21c, imac 0x5a3e70, ios 0x25a334;
    void addToColorGroup(int group) = win 0x199a50, m1 0x4e0c78, imac 0x5a6800, ios 0x25c714;
    void addToCustomScaleX(float scale) = win inline, m1 0x4dea20, imac 0x5a4620, ios 0x25aa34 {
        m_isDirty = true;
        m_isObjectRectDirty = true;
        m_scaleXOffset += scale;
        m_scaleX += scale;
    }
    void addToCustomScaleY(float scale) = win inline, m1 0x4dea48, imac 0x5a4660, ios 0x25aa5c {
        m_isDirty = true;
        m_isObjectRectDirty = true;
        m_scaleYOffset += scale;
        m_scaleY += scale;
    }
    void addToOpacityGroup(int group) = win inline, m1 0x4e0db4, imac 0x5a6950, ios 0x25c7e0 {
        if (m_opacityGroupCount < 10 && group > 0 && group < 10000) {
            this->createOpacityGroupContainer(10);
            if (m_opacityGroupCount > 0) {
                for (int i = 0; i < m_opacityGroupCount; i++) {
                    if ((*m_opacityGroups)[i] == group) return;
                }
            }
            (*m_opacityGroups)[m_opacityGroupCount] = group;
            m_opacityGroupCount++;
        }
    }
    void addToTempOffset(double offsetX, double offsetY) = win inline, m1 0x4ddfdc, imac 0x5a3bc0, ios 0x25a164 {
        if (!m_tempOffsetXRelated) m_positionX += offsetX;
        m_positionY += offsetY;
    }
    void assignUniqueID() = win inline, m1 0x4d7bb4, imac 0x58a5a0, ios 0x254018 {
        auto uniqueID = reinterpret_cast<int*>(geode::base::get() + 0x69c158);
        m_uniqueID = *uniqueID;
        m_unknown5 = *uniqueID;
        (*uniqueID)++;
    }
    bool belongsToGroup(int group) = win inline, m1 0x4e0bbc, imac 0x5a6740, ios 0x25c6b8 {
        if (m_groupCount > 0) {
            for (int i = 0; i < m_groupCount; i++) {
                if ((*m_groups)[i] == group) return true;
            }
        }
        return false;
    }
    void calculateOrientedBox() = win inline, m1 0x4ea3cc, imac 0x5b1560, ios 0x260a3c {
        m_shouldUseOuterOb = true;
        this->updateOrientedBox();
        this->getObjectRect();
    }
    bool canChangeCustomColor() = win inline, m1 0x4ea888, imac 0x5b1a40, ios 0x260e70 {
        return this->canChangeMainColor() || this->canChangeSecondaryColor();
    }
    bool canChangeMainColor() = win inline, m1 0x4ea8bc, imac 0x5b1a70, ios 0x260ea4 {
        return m_baseColor->m_defaultColorID != 0;
    }
    bool canChangeSecondaryColor() = win inline, m1 0x4ea8d0, imac 0x5b1a90, ios 0x260eb8 {
        return m_detailColor && m_detailColor->m_defaultColorID != 0;
    }
    bool canRotateFree() = ios 0x25c49c, m1 0x4e0904, imac 0x5a64b0, win inline {
        auto type = m_objectType;
        return (
            type != GameObjectType::Solid
            && type != GameObjectType::Breakable
            && type != GameObjectType::Slope
        ) || m_isNoTouch;
    }
    cocos2d::ccColor3B colorForMode(int id, bool mainColor) = win 0x19f010, m1 0x4eaf28, imac 0x5b2260, ios 0x261330;
    void commonInteractiveSetup() = win 0x193e00, imac 0x59d6a0, m1 0x4dc750, ios 0x25893c;
    void commonSetup() = win 0x18ad70, m1 0x4d7950, imac 0x58a320, ios 0x253dfc;
    void copyGroups(GameObject* object) = win 0x1999c0, m1 0x4e0b44, imac 0x5a66d0, ios 0x25c644;
    cocos2d::CCParticleSystemQuad* createAndAddParticle(int objectType, char const* plistName, int tag, cocos2d::tCCPositionType positionType) = win 0x195ba0, imac 0x59d770, m1 0x4dc810, ios 0x2589ec;
    void createColorGroupContainer(int size) = win inline, m1 0x4e0c18, imac 0x5a67a0, ios inline {
        if (!m_colorGroups) {
            m_colorGroups = new std::array<short, 10>();
            for (int i = 0; i < size; i++) {
                (*m_colorGroups)[i] = 0;
            }
        }
    }
    void createGlow(gd::string frame) = win 0x18b750, imac 0x58c9f0, m1 0x4d81c8, ios 0x254544;
    void createGroupContainer(int size) = win 0x199740, m1 0x4e0958, imac 0x5a6510, ios inline {
        if (!m_groups) {
            m_groups = new std::array<short, 10>();
            for (int i = 0; i < size; i++) {
                (*m_groups)[i] = 0;
            }
        }
    }
    void createOpacityGroupContainer(int size) = win inline, m1 0x4e0d54, imac 0x5a68f0, ios inline {
        if (!m_opacityGroups) {
            m_opacityGroups = new std::array<short, 10>();
            for (int i = 0; i < size; i++) {
                (*m_opacityGroups)[i] = 0;
            }
        }
    }
    void createSpriteColor(int type) = win inline, imac 0x58a4e0, m1 0x4d7afc, ios 0x253f74 {
        if (type == 2) {
            if (!m_detailColor) m_detailColor = new GJSpriteColor();
        }
        else {
            if (!m_baseColor) m_baseColor = new GJSpriteColor();
        }
    }
    void deselectObject() = win inline, m1 0x4e9d48, imac 0x5b0ef0, ios 0x260768 {
        m_isSelected = false;
        this->updateObjectEditorColor();
    }
    void destroyObject() = win inline, m1 0x4df5e0, imac 0x5a5340, ios 0x25b428 {
        m_isDisabled = true;
        m_isDisabled2 = true;
        this->setOpacity(0);
    }
    void determineSlopeDirection() = ios 0x25c100, win 0x199340, m1 0x4e0550, imac 0x5a6120;
    bool didScaleXChange() = win inline, m1 0x4dea70, imac 0x5a46a0, ios inline {
        return (int)(m_scaleX * 10000) != (int)(m_customScaleX * 10000);
    }
    bool didScaleYChange() = win inline, m1 0x4deaa0, imac 0x5a46d0, ios inline {
        return (int)(m_scaleY * 10000) != (int)(m_customScaleY * 10000);
    }
    void dirtifyObjectPos() = win inline, m1 0x4ddad0, imac 0x5a3650, ios 0x259ce0 {
        m_isObjectPosDirty = true;
        m_isUnmodifiedPosDirty = true;
    }
    void dirtifyObjectRect() = win inline, m1 0x4ddac4, imac 0x5a3640, ios 0x259cd4 {
        m_isObjectRectDirty = true;
        m_isOrientedBoxDirty = true;
    }
    void disableObject() = win inline, m1 0x4df648, imac 0x5a5400, ios 0x25b490 {
        m_isDisabled = true;
        m_isDisabled2 = true;
        this->setOpacity(0);
        this->triggerActivated(0.f);
    }
    bool dontCountTowardsLimit() = win inline, m1 0x4dca58, imac 0x59de70, ios inline {
        return m_objectID == 31;
    }
    void duplicateAttributes(GameObject* object) = win 0x19ed00, m1 0x4eaae4, imac 0x5b1d50, ios 0x261040;
    void duplicateColorMode(GameObject* object) = win 0x19ec20, m1 0x4eaa44, imac 0x5b1c80, ios 0x260fa0;
    void duplicateValues(GameObject* object) = win 0x19ee40, ios 0x2610c4, m1 0x4eab88, imac 0x5b1e40;
    cocos2d::ccColor3B editorColorForCustomMode(int id) = win inline, m1 0x4e9c68, imac 0x5b0e30, ios 0x2606a0 {
        auto index = (id < 5 ? id : id - 5) % 12;
        switch (index) {
            case 0: return { 210, 255, 167 };
            case 1: return { 167, 255, 167 };
            case 2: return { 165, 255, 209 };
            case 3: return { 167, 255, 255 };
            case 4: return { 166, 209, 255 };
            case 5: return { 167, 167, 255 };
            case 6: return { 209, 166, 255 };
            case 7: return { 255, 167, 255 };
            case 8: return { 255, 166, 209 };
            case 9: return { 255, 167, 167 };
            case 10: return { 255, 209, 166 };
            case 11: return { 255, 255, 167 };
            default: return { 255, 255, 255 };
        }
    }
    cocos2d::ccColor3B editorColorForMode(int id) = win 0x19e0a0, m1 0x4e9ad8, imac 0x5b0cc0, ios 0x2605e0;
    void fastRotateObject(float rotation) = win inline, m1 0x4ea650, imac 0x5b1830, ios 0x260cac {
        m_rotationXOffset += rotation;
        m_rotationYOffset += rotation;
        this->addRotation(rotation);
        if (m_objectType != GameObjectType::Decoration && !m_shouldUseOuterOb) {
            this->calculateOrientedBox();
        }
    }
    cocos2d::ccColor3B const& getActiveColorForMode(int id, bool mainColor) = win 0x19f140, m1 0x4eb568, imac 0x5b28b0, ios 0x26151c;
    const char* getBallFrame(int index) = win inline, m1 0x4e937c, imac 0x5b05a0, ios 0x25ff00 {
        return cocos2d::CCString::createWithFormat("rod_ball_%02d_001.png", std::clamp(index, 0, 3))->getCString();
    }
    cocos2d::CCRect getBoundingRect() = win inline, m1 0x4dda60, imac 0x5a35d0, ios inline {
        return cocos2d::CCRectApplyAffineTransform({ 0.f, 0.f, m_width, m_height }, this->nodeToParentTransform());
    }
    cocos2d::CCPoint const& getBoxOffset() = win 0x19e850, m1 0x4ddc60, imac 0x5a3830, ios 0x259e70;
    gd::string getColorFrame(gd::string frame) = win 0x18d450, m1 0x4d8c0c, imac 0x591800, ios 0x254dac;
    int getColorIndex() = win inline, m1 0x4eb928, imac 0x5b3070, ios 0x2618bc {
        switch (m_objectID) {
            case 29: return 1000;
            case 30: return 1001;
            case 105: return 1004;
            case 744: return 1003;
            case 899: return m_targetColor;
            case 900: return 1009;
            case 915: return 1002;
            default: return 0;
        }
    }
    gd::string getColorKey(bool isMainColor, bool colorGroups) = win 0x199db0, m1 0x4e1704, imac 0x5a7190, ios 0x25ccd4;
    ZLayer getCustomZLayer() = win inline, m1 0x4e093c, imac 0x5a64e0, ios 0x25c4d4 {
        return m_zLayer;
    }
    gd::string getGlowFrame(gd::string frame) = win 0x18d510, m1 0x4d8d54, imac 0x591950, ios 0x254e60;
    bool getGroupDisabled() = win inline, m1 0x4e0e60, imac 0x5a69f0, ios 0x25c87c {
        return m_isGroupDisabled;
    }
    int getGroupID(int index) = win inline, m1 0x4e0b24, imac 0x5a66b0, ios 0x25c624 {
        if (index < 10 && m_groups) {
            return m_groups->at(index);
        }
        return 0;
    }
    gd::string getGroupString() = win inline, m1 0x4e0e9c, imac 0x5a6a40, ios 0x25c8b8 {
        gd::string ret;
        auto first = true;
        for (int i = 0; i < 10; i++) {
            auto group = (*m_groups)[i];
            if (group > 0) {
                if (!first) ret += '.';
                ret += std::to_string(group);
                first = false;
            }
        }
        return ret;
    }
    cocos2d::CCPoint const& getLastPosition() = win inline, m1 0x4eb730, imac 0x5b2a90, ios 0x261674 {
        return m_lastPosition;
    }
    GJSpriteColor* getMainColor() = win inline, m1 0x4ea878, imac 0x5b1a20, ios 0x260e60 {
        return m_baseColor;
    }
    int getMainColorMode() = win inline, m1 0x4e2048, imac 0x5a7d40, ios 0x25d19c {
        if (auto color = this->getMainColor()) return color->getColorMode();
        return 0;
    }
    int getObjectDirection() = win 0x1995a0, m1 0x4e07b0, imac 0x5a6360, ios 0x25c360;
    float getObjectRadius() = win inline, m1 0x4eba3c, imac 0x5b3170, ios 0x2619d0 {
        return m_scaleX == 1.f && m_scaleY == 1.f ? m_objectRadius : m_objectRadius * (std::max)(m_scaleX, m_scaleY);
    }
    cocos2d::CCRect* getObjectRectPointer() = win inline, m1 0x4ddb20, imac 0x5a36a0, ios 0x259d30 {
        if (m_isObjectRectDirty) this->getObjectRect();
        return &m_objectRect;
    }
    ZLayer getObjectZLayer() = win inline, m1 0x4d95a0, imac 0x5922e0, ios 0x255590 {
        return m_zLayer != ZLayer::Default ? m_zLayer : m_defaultZLayer;
    }
    int getObjectZOrder() = win inline, m1 0x4e0444, imac 0x5a6000, ios 0x25bff8 {
        return m_zOrder != 0 ? m_zOrder : m_defaultZOrder;
    }
    cocos2d::CCRect getOuterObjectRect() = win inline, m1 0x4dddd4, imac 0x5a39c0, ios inline {
        if (m_isOrientedBoxDirty) this->updateOrientedBox();
        return m_orientedBox->getBoundingRect();
    }
    int getParentMode() = ios 0x25b36c, m1 0x4df4f0, imac 0x5a5250, win 0x197bb0;
    GJSpriteColor* getRelativeSpriteColor(int type) = win 0x19eb30, imac 0x5b1ab0, m1 0x4ea8f0, ios 0x260ed8;
    cocos2d::CCPoint getScalePosDelta() = win 0x199620, m1 0x4e07fc, imac 0x5a63a0, ios 0x25c3a4;
    GJSpriteColor* getSecondaryColor() = win inline, m1 0x4ea880, imac 0x5b1a30, ios 0x260e68 {
        return m_detailColor;
    }
    int getSecondaryColorMode() = win inline, m1 0x4e206c, imac 0x5a7d70, ios 0x25d1c0 {
        if (auto color = this->getSecondaryColor()) return color->getColorMode();
        return 0;
    }
    float getSlopeAngle() = win inline, m1 0x4e0774, imac 0x5a6320, ios 0x25c324 {
        cocos2d::CCRect rect = getObjectRect();
        return atanf(rect.size.height / rect.size.width);
    }
    cocos2d::CCPoint getUnmodifiedPosition() = win inline, m1 0x4de010, imac 0x5a3c10, ios 0x25a188 {
        return { (float)(m_positionX - m_positionXOffset), (float)(m_positionY - m_positionYOffset) };
    }
    cocos2d::ccColor3B const& groupColor(cocos2d::ccColor3B const& color, bool mainColor) = win inline, m1 0x4eb658, imac 0x5b29a0, ios 0x2615f0 {
        m_groupColor = color;
        if (m_groupCount > 0) {
            for (int i = 0; i < m_groupCount; i++) {
                m_groupColor = m_goEffectManager->colorForGroupID((*m_groups)[i], color, mainColor);
            }
        }
        return m_groupColor;
    }
    float groupOpacityMod() = win 0x199d30, imac 0x5a7040, m1 0x4e157c, ios 0x25cb6c;
    void groupWasDisabled() = win inline, m1 0x4e0e84, imac 0x5a6a20, ios 0x25c8a0 {
        m_enabledGroupsCounter--;
        m_isGroupDisabled = m_enabledGroupsCounter < 1;
    }
    void groupWasEnabled() = win inline, m1 0x4e0e68, imac 0x5a6a00, ios 0x25c884 {
        m_enabledGroupsCounter++;
        m_isGroupDisabled = m_enabledGroupsCounter < 1;
    }
    bool hasSecondaryColor() = win inline, m1 0x4eaa34, imac 0x5b1c60, ios 0x260f90 {
        return m_colorSprite;
    }
    bool ignoreEditorDuration() = win 0x1a0180, m1 0x4dcd64, imac 0x59e530, ios 0x258fdc;
    bool ignoreEnter() = win inline, m1 0x4dda58, imac 0x5a35c0, ios 0x259ccc {
        return m_ignoreEnter;
    }
    bool ignoreFade() = win inline, m1 0x4dda50, imac 0x5a35b0, ios 0x259cc4 {
        return m_ignoreFade;
    }
    bool init(char const* frame) = win inline, m1 0x4d7914, imac 0x58a2f0, ios 0x253dc0 {
        if (!CCSpritePlus::initWithSpriteFrameName(frame)) return false;
        this->commonSetup();
        m_bUnkBool2 = true;
        return true;
    }
    static bool isBasicEnterEffect(int id) = win inline, m1 0x4ec080, imac 0x5b3790, ios 0x261f04 {
        return (id > 21 && id < 29) || (id > 54 || id < 60) || id == 1915;
    }
    bool isBasicTrigger() = win 0x1a0670, m1 0x4ebf90, imac 0x5b36b0, ios 0x261e14;
    bool isColorObject() = win inline, m1 0x4ea96c, imac 0x5b1b30, ios 0x260f30 {
        if (m_customColorType == 0) {
            if (m_maybeNotColorable) return false;
        }
        else if (m_customColorType == 1) return false;
        if (this->hasSecondaryColor()) return false;
        auto defaultColorID = m_baseColor->m_defaultColorID;
        return defaultColorID != 1004 && defaultColorID != 0;
    }
    bool isColorTrigger() = win inline, m1 0x4eb8d4, imac 0x5b3020, ios 0x261868 {
        return m_objectID == 29 || m_objectID == 30 || m_objectID == 105 || m_objectID == 744 || m_objectID == 899 || m_objectID == 900 || m_objectID == 915;
    }
    bool isConfigurablePortal() = win inline, m1 0x4ec004, imac 0x5b3720, ios 0x261e88 {
        auto id = m_objectID;
        return id == 12 || id == 13 || id == 47 || id == 111 || id == 286 || id == 287 || id == 660 || id == 745 || id == 1331 || id == 1933;
    }
    bool isEditorSpawnableTrigger() = win inline, m1 0x4dcef8, imac 0x59f080, ios 0x259230 {
        auto id = m_objectID;
        return id == 29 || id == 30 || id == 105 || id == 744 || id == 899 || id == 900 || id == 901 || id == 915 || id == 1006 || id == 1007 || id == 1049 || id == 1268 || id == 1346 ||
            id == 1347 || id == 1585 || id == 1595 || id == 1611 || id == 1612 || id == 1613 || id == 1616 || id == 1811 || id == 1814 || id == 1815 || id == 1817 || id == 1912 ||
            id == 1913 || id == 1914 || id == 1916 || id == 1917 || id == 1932 || id == 1934 || id == 1935 || id == 2015 || id == 2062 || id == 2066 || id == 2067 || id == 2068 ||
            id == 2899 || id == 2900 || id == 2901 || id == 2903 || id == 2904 || id == 2905 || id == 2907 || id == 2909 || id == 2910 || id == 2911 || id == 2912 || id == 2913 ||
            id == 2914 || id == 2915 || id == 2916 || id == 2917 || id == 2919 || id == 2920 || id == 2921 || id == 2922 || id == 2923 || id == 2924 || id == 2925 || id == 2999 ||
            id == 3006 || id == 3007 || id == 3008 || id == 3009 || id == 3010 || id == 3011 || id == 3012 || id == 3013 || id == 3014 || id == 3015 || id == 3016 || id == 3022 ||
            id == 3024 || id == 3029 || id == 3030 || id == 3031 || id == 3033 || id == 3602 || id == 3603 || id == 3604 || id == 3605 || id == 3606 || id == 3607 || id == 3608 ||
            id == 3609 || id == 3612 || id == 3613 || id == 3614 || id == 3615 || id == 3617 || id == 3618 || id == 3619 || id == 3620 || id == 3640 || id == 3641 || id == 3655 ||
            id == 3660 || id == 3661 || id == 3662;
    }
    bool isFacingDown() = win 0x19e990, m1 0x4ea740, imac 0x5b1910, ios 0x260d28;
    bool isFacingLeft() = win 0x19ea50, m1 0x4ea7d0, imac 0x5b1990, ios 0x260db8;
    bool isSettingsObject() = win inline, imac 0x5b3690, m1 0x4ebf78, ios 0x261dfc {
        return m_objectID == 3662 || m_objectID == 3613;
    }
    bool isSpawnableTrigger() = win 0x19f730, m1 0x4eb740, imac 0x5b2ac0, ios 0x261684;
    bool isSpecialObject() = win 0x19fb40, m1 0x4eba68, imac 0x5b31c0, ios 0x2619fc;
    bool isSpeedObject() = win inline, m1 0x4eb9b4, imac 0x5b30f0, ios 0x261948 {
        auto id = m_objectID;
        return id == 200 || id == 201 || id == 202 || id == 203 || id == 1334 || id == 1917 || id == 1934 || id == 1935 || id == 2900 || id == 2902 || id == 3022 || id == 3027;
    }
    bool isStoppableTrigger() = win inline, m1 0x4dcc08, imac 0x59e3f0, ios 0x258e80 {
        auto id = m_objectID;
        return id == 29 || id == 30 || id == 105 || id == 744 || id == 899 || id == 900 || id == 901 || id == 915 || id == 1006 || id == 1007 || id == 1268 || id == 1346 || id == 1347 ||
            id == 1595 || id == 1611 || id == 1615 || id == 1812 || id == 1814 || id == 1815 || id == 1913 || id == 1916 || id == 2015 || id == 2067 || id == 2903 || id == 2999 ||
            id == 3006 || id == 3007 || id == 3008 || id == 3009 || id == 3010 || id == 3016 || id == 3033 || id == 3602 || id == 3604 || id == 3614 || id == 3615;
    }
    bool isTrigger() = win 0x19f2c0, m1 0x4dca68, imac 0x59de80, ios 0x258c90;
    void loadGroupsFromString(gd::string groupList) = win 0x199b50, imac 0x5a6d00, m1 0x4e1100, ios 0x25c9f8;
    void makeInvisible() = win inline, ios 0x25b45c, imac 0x5a53a0, m1 0x4df614 {
        m_isDisabled2 = true;
        m_isInvisible = true;
        this->setOpacity(0);
    }
    void makeVisible() = win inline, m1 0x4df630, imac 0x5a53d0, ios 0x25b478 {
        m_isDisabled2 = false;
        m_isInvisible = false;
        this->setOpacity(255);
    }
    float opacityModForMode(int id, bool mainColor) = win inline, m1 0x4eb240, imac 0x5b2590, ios 0x261430 {
        auto ret = 1.f;
        if (id > 0) {
            auto actionSprite = mainColor ? m_mainActionSprite : m_detailActionSprite;
            uint8_t opacity = actionSprite->m_opacity;
            if (opacity < 250) ret = opacity / 255.f;
        }
        if (m_opacityGroupCount > 0) ret *= this->groupOpacityMod();
        return ret;
    }
    cocos2d::CCNode* parentForZLayer(int zLayer, bool blending, int parentMode) = win 0x198f60, imac 0x592280, m1 0x4d953c, ios 0x25552c;
    gd::string perspectiveColorFrame(char const* prefix, int index) = win 0x1abf50, m1 0x3ab24c, imac 0x4304d0, ios 0x2ad68c;
    gd::string perspectiveFrame(char const* prefix, int index) = win 0x1abe10, m1 0x3aaf40, imac 0x430160, ios 0x2ad570;
    void playDestroyObjectAnim(GJBaseGameLayer* layer) = ios 0x349078, win 0x1a7520, m1 0x1f9910, imac 0x24c560;
    void playPickupAnimation(cocos2d::CCSprite* target, float xOffset, float yOffset, float controlYOffset1, float controlYOffset2, float endYOffset, float duration, float fadeDelay, float fadeDuration, bool rotate, float randomValue1, float randomValue2) = win 0x1a7040, m1 0x1f9498, imac 0x24c0f0, ios 0x348c30;
    void playPickupAnimation(cocos2d::CCSprite* target, float offset, float duration, float randomValue1, float randomValue2) = win 0x1a6f50, m1 0x1f9410, imac 0x24c060, ios inline {
        this->playPickupAnimation(target, offset * 50.f, offset * 60.f, offset * 90.f, offset * 180.f, offset * 20.f, duration * .75f, duration * .5f, duration * .25f, false, randomValue1, randomValue2);
    }
    void playShineEffect() = ios 0x25b4d8, win 0x196430, imac 0x5a5440, m1 0x4df690;
    void quickUpdatePosition() = win inline, m1 0x4de084, imac 0x5a3cd0, ios 0x25a1d0 {
        auto pos = ccp(m_positionX, m_positionY);
        cocos2d::CCSprite::setPosition(pos);
        if (m_colorSprite && !m_colorSpriteLocked) m_colorSprite->setPosition(pos);
    }
    void quickUpdatePosition2() = win inline, m1 0x4de0fc, imac 0x5a3d40, ios inline {
        m_obPosition.x = m_positionX;
        m_obPosition.y = m_positionY;
    }
    void removeColorSprite() = win inline, m1 0x4d8388, imac 0x58cbd0, ios inline {
        if (m_colorSprite) {
            m_colorSprite->release();
            m_colorSprite = nullptr;
        }
    }
    void removeGlow() = win inline, m1 0x4d834c, imac 0x58cb90, ios 0x254654 {
        if (m_glowSprite) {
            m_glowSprite->removeMeAndCleanup();
            m_glowSprite = nullptr;
        }
    }
    void reorderColorSprite() = win inline, m1 0x4e054c, imac 0x5a6110, ios inline {}
    void resetColorGroups() = win inline, m1 0x4e0d24, imac 0x5a68a0, ios 0x25c7b0 {
        if (m_colorGroupCount > 0) {
            for (int i = 0; i < m_colorGroupCount; i++) {
                (*m_colorGroups)[i] = 0;
            }
        }
        m_colorGroupCount = 0;
    }
    void resetGroupDisabled() = ios 0x255290, imac 0x591eb0, m1 0x4d9220, win inline {
        m_enabledGroupsCounter = 0;
        m_isGroupDisabled = false;
    }
    void resetGroups() = win inline, imac 0x5a66a0, m1 0x4e0b1c, ios 0x25c61c {
        m_groupCount = 0;
    }
    void resetMainColorMode() = win inline, m1 0x4ea9ec, imac 0x5b1be0, ios inline {
        if (auto color = this->getMainColor()) {
            color->m_defaultColorID = std::clamp(color->m_defaultColorID, 0, 1101);
            color->m_colorID = 0;
        }
    }
    static void resetMID() = win inline, m1 0x4d72d4, imac 0x5855f0, ios 0x2534bc {
        *reinterpret_cast<int*>(geode::base::get() + 0x69c158) = 10;
    }
    void resetMoveOffset() = win inline, m1 0x4d944c, imac 0x592180, ios 0x25543c {
        m_positionX = m_startPosition.x;
        m_positionY = m_startPosition.y;
    }
    void resetRScaleForced() = win inline, m1 0x4de970, imac 0x5a4580, ios inline {
        m_fScaleX = 0.f;
        m_fScaleY = 0.f;
        this->setRScaleX(1.f);
        this->setRScaleY(1.f);
    }
    void resetSecondaryColorMode() = win inline, m1 0x4eaa10, imac 0x5b1c20, ios inline {
        if (auto color = this->getSecondaryColor()) {
            color->m_defaultColorID = std::clamp(color->m_defaultColorID, 0, 1101);
            color->m_colorID = 0;
        }
    }
    void setAreaOpacity(float step, float value, int index) = win 0x1957f0, m1 0x4dead0, imac 0x5a4700, ios 0x25aa84;
    void setCustomZLayer(int zLayer) = win inline, m1 0x4e0944, imac 0x5a64f0, ios 0x25c4dc {
        if (m_zFixedZLayer) return;
        m_zLayer = static_cast<ZLayer>(zLayer);
    }
    void setDefaultMainColorMode(int id) = win inline, m1 0x4dc730, imac 0x59d670, ios 0x25891c {
        if (auto color = this->getMainColor()) {
            color->m_defaultColorID = std::clamp(id, 0, 1101);
            color->m_colorID = 0;
        }
    }
    void setDefaultSecondaryColorMode(int id) = win inline, m1 0x4d8d34, imac 0x591920, ios 0x254e40 {
        if (auto color = this->getSecondaryColor()) {
            color->m_defaultColorID = std::clamp(id, 0, 1101);
            color->m_colorID = 0;
        }
    }
    void setGlowOpacity(unsigned char opacity) = win inline, m1 0x4ded7c, imac 0x5a4a20, ios 0x25acf8 {
        if (m_glowSprite) {
            auto glowOpacity = opacity * m_opacityMod;
            m_glowSprite->setOpacity(glowOpacity);
            m_glowSprite->setChildOpacity(glowOpacity);
        }
    }
    void setLastPosition(cocos2d::CCPoint const& position) = win inline, ios 0x26167c, imac 0x5b2aa0, m1 0x4eb738 {
        m_lastPosition = position;
    }
    void setMainColorMode(int id) = win inline, m1 0x4ea9ac, imac 0x5b1b80, ios 0x260f70 {
        if (auto color = this->getMainColor()) {
            color->m_colorID = std::clamp(id, 0, 1101);
        }
    }
    void setSecondaryColorMode(int id) = win inline, m1 0x4ea9cc, imac 0x5b1bb0, ios inline {
        if (auto color = this->getSecondaryColor()) {
            color->m_colorID = std::clamp(id, 0, 1101);
        }
    }
    void setupColorSprite(int id, bool mainColor) = win inline, m1 0x4e9530, imac 0x5b0760, ios inline {
        if (mainColor) m_mainActionSprite = m_goEffectManager->getColorSprite(id);
        else m_detailActionSprite = m_goEffectManager->getColorSprite(id);
    }
    void setupPixelScale() = win 0x1c0380, m1 0x3cb20c, imac 0x457620, ios 0x2ca594;
    void setupSpriteSize() = win 0x1a0720, m1 0x4dd088, imac 0x59f3e0, ios 0x2593e0;
    bool shouldBlendColor(GJSpriteColor* color, bool mainColor) = win 0x18dd00, m1 0x4d98f0, imac 0x592610, ios 0x2558d4;
    bool shouldLockX() = win 0x193ec0, m1 0x4dc8e0, imac 0x59d840, ios 0x258abc;
    bool shouldNotHideAnimFreeze() = win inline, m1 0x1f93b8, imac 0x24bff0, ios inline {
        return m_objectID == 1855;
    }
    bool shouldShowPickupEffects() = win inline, m1 0x1f96ac, imac 0x24c330, ios 0x348e3c {
        if (!m_hasNoEffects && !m_isInvisible) {
            if (this->getOpacity() != 0) return true;
            if (m_colorSprite && m_colorSprite->getOpacity() != 0) return true;
        }
        return false;
    }
    bool slopeFloorTop() = win inline, m1 0x4ea144, imac 0x5b12f0, ios 0x260860 {
        return m_slopeDirection == 1 || m_slopeDirection == 3 || m_slopeDirection == 5 || m_slopeDirection == 6;
    }
    bool slopeWallLeft() = win inline, m1 0x4ea128, imac 0x5b12d0, ios 0x260844 {
        return m_slopeDirection == 2 || m_slopeDirection == 3 || m_slopeDirection == 4 || m_slopeDirection == 6;
    }
    double slopeYPos(cocos2d::CCRect rect) = win inline, m1 0x4ea200, imac 0x5b1380, ios 0x26087c {
        auto floorTop = this->slopeFloorTop();
        if (m_slopeUphill) {
            return this->slopeYPos(floorTop ? rect.getMaxX() : rect.getMinX());
        }
        else {
            return this->slopeYPos(floorTop ? rect.getMinX() : rect.getMaxX());
        }
    }
    double slopeYPos(float x) = win 0x19e430, m1 0x4ea270, imac 0x5b13d0, ios 0x2608e0;
    double slopeYPos(GameObject* object) = win inline, m1 0x4ea160, imac 0x5b1310, ios inline {
        return this->slopeYPos(object->getObjectRect());
    }
    void spawnDefaultPickupParticle(GJBaseGameLayer* layer) = win 0x1a72e0, m1 0x1f9738, imac 0x24c390, ios 0x348ea8;
    void updateBlendMode() = win inline, m1 0x4e01f4, imac 0x5a5dd0, ios 0x25be2c {
        auto shouldBlend = this->shouldBlendColor(m_baseColor, true);
        m_shouldBlendBase = shouldBlend;
        if (!m_colorSprite) {
            m_shouldBlendDetail = false;
            return;
        }
        m_shouldBlendDetail = m_detailColor->getColorMode() != 1012 ? this->shouldBlendColor(m_detailColor, false) : shouldBlend;
    }
    void updateCustomColorType(short type) = win inline, m1 0x4eb6dc, imac 0x5b2a30, ios inline {
        m_customColorType = type;
        m_customSpriteColor = this->getRelativeSpriteColor(1) == nullptr;
    }
    void updateCustomScaleX(float scaleX) = ios 0x25529c, win 0x1956d0, m1 0x4d922c, imac 0x591ed0;
    void updateCustomScaleY(float scaleY) = ios 0x2552fc, win 0x195760, m1 0x4d928c, imac 0x591f50;
    void updateHSVState() = win inline, m1 0x4e1614, imac 0x5a70d0, ios 0x25cbe4 {
        if (auto color = m_baseColor) {
            color->m_usesHSV = color->m_hsv.h != 0.f || color->m_hsv.s != 1.f || color->m_hsv.v != 1.f || color->m_hsv.absoluteSaturation || color->m_hsv.absoluteBrightness;
        }
        if (auto color = m_detailColor) {
            color->m_usesHSV = color->m_hsv.h != 0.f || color->m_hsv.s != 1.f || color->m_hsv.v != 1.f || color->m_hsv.absoluteSaturation || color->m_hsv.absoluteBrightness;
        }
    }
    void updateIsOriented() = ios 0x260be4, win 0x19e7b0, imac 0x5b1730, m1 0x4ea58c;
    void updateMainColor() = win inline, m1 0x4eae30, imac 0x5b2170, ios 0x2612dc {
        this->updateMainColor(this->colorForMode(m_activeMainColorID, true));
        this->updateMainOpacity();
    }
    void updateMainColorOnly() = win inline, m1 0x4eb1e4, imac 0x5b2530, ios inline {
        if (m_activeMainColorID != 0 && m_colorGroupCount != 0 && m_opacityGroupCount != 0) {
            this->updateMainColor(this->colorForMode(m_activeMainColorID, true));
        }
    }
    void updateMainOpacity() = win inline, m1 0x4eb10c, imac 0x5b2460, ios inline {
        m_baseColor->m_opacity = this->opacityModForMode(m_activeMainColorID, true);
    }
    void updateObjectEditorColor() = win 0x19e370, ios 0x260770, imac 0x5b0f10, m1 0x4e9d50;
    void updateSecondaryColor() = win inline, m1 0x4eb338, imac 0x5b2680, ios 0x2614b0 {
        if (this->hasSecondaryColor() && m_activeDetailColorID != 0 && m_groupCount != 0) {
            this->updateSecondaryColor(this->colorForMode(m_activeDetailColorID, false));
            this->updateSecondaryOpacity();
        }
    }
    void updateSecondaryColorOnly() = win inline, m1 0x4eb50c, imac 0x5b2860, ios inline {
        if (this->hasSecondaryColor() && m_activeDetailColorID != 0 && m_groupCount != 0) {
            this->updateSecondaryColor(this->colorForMode(m_activeDetailColorID, false));
        }
    }
    void updateSecondaryOpacity() = win inline, m1 0x4eb434, imac 0x5b2790, ios inline {
        m_detailColor->m_opacity = this->opacityModForMode(m_activeDetailColorID, false);
    }
    void updateStartPos() = imac 0x591af0, m1 0x4d8ef8, win 0x18d670, ios 0x254f70;
    void updateUnmodifiedPositions() = win inline, m1 0x4de040, imac 0x5a3c60, ios inline {
        if (m_isDisabled) {
            m_isDisabled = false;
            m_unmodifiedPositionX = m_positionX - m_positionXOffset;
            m_unmodifiedPositionY = m_positionY - m_positionYOffset;
        }
    }
    bool usesFreezeAnimation() = win inline, m1 0x1f9338, imac 0x24bc50, ios 0x348b4c {
        auto id = m_objectID;
        return id == 921 || id == 1519 || id == 1618 || id == 1851 || id == 1852 || id == 1854 || id == 1855 || id == 1856 || id == 1860 || id == 2020 || id == 2021 || id == 2022 ||
            id == 2024 || id == 2025 || id == 2026 || id == 2027 || id == 2028 || id == 2029 || id == 2030 || id == 2031 || id == 2033 || id == 2035 || id == 2036 || id == 2037 ||
            id == 2038 || id == 2039 || id == 2040 || id == 2043 || id == 2044 || id == 2045 || id == 2046 || id == 2047 || id == 2048 || id == 2049 || id == 2050 || id == 2051 ||
            id == 2052 || id == 2053 || id == 2054 || id == 2055 || id == 2867 || id == 2868 || id == 2869 || id == 2870 || id == 2871 || id == 2872 || id == 2875 || id == 2876 ||
            id == 2877 || id == 2878 || id == 2880 || id == 2882 || id == 2883 || id == 2885 || id == 2886 || id == 2887;
    }
    bool usesSpecialAnimation() = win inline, m1 0x1f93c8, imac 0x24c010, ios inline {
        auto id = m_objectID;
        return id == 1591 || id == 1593 || id == 1839 || id == 1840 || id == 1841 || id == 1842 || id == 2892 || id == 2893;
    }

    int m_someOtherIndex;
    int m_innerSectionIndex;
    int m_outerSectionIndex;
    int m_middleSectionIndex;

    // property 511
    bool m_hasExtendedCollision;
    cocos2d::ccColor3B m_groupColor;
    bool m_unk280;
    bool m_unk281;
    float m_blackChildOpacity;
    bool m_unk288;
    bool m_editorEnabled;
    bool m_isGroupDisabled;
    bool m_unk28B;
    bool m_unk28c;

    // somehow related to property 155 and 156 if anyone wants to reverse engineer
    int m_activeMainColorID;
    int m_activeDetailColorID;
    bool m_baseUsesHSV;
    bool m_detailUsesHSV;
    float m_positionXOffset;
    float m_positionYOffset;

    float m_rotationXOffset;
    float m_unk2A8;
    float m_rotationYOffset;
    float m_unk2B0;
    float m_scaleXOffset;
    float m_scaleYOffset;
    float m_unk2BC;
    float m_unk2C0;
    bool m_tempOffsetXRelated;
    bool m_isFlipX;
    bool m_isFlipY;
    cocos2d::CCPoint m_customBoxOffset;
    bool m_boxOffsetCalculated;
    cocos2d::CCPoint m_boxOffset;
    OBB2D* m_orientedBox;
    bool m_shouldUseOuterOb;
    cocos2d::CCSprite* m_glowSprite;
    bool m_isRingPoweredOn;
    float m_width;
    float m_height;
    bool m_hasSpecialChild;
    bool m_isActivated;
    bool m_isDisabled2;
    cocos2d::CCParticleSystemQuad* m_particle;
    gd::string m_particleString;
    bool m_hasParticles;

    // property 146
    bool m_particleUseObjectColor;
    bool m_hasColorSprite;
    cocos2d::CCPoint m_particleOffset;
    bool m_isSomeSpriteScalable;
    cocos2d::CCRect m_textureRect;
    bool m_isDirty;
    bool m_isObjectPosDirty;
    bool m_isUnmodifiedPosDirty;
    float m_fadeMargin;
    cocos2d::CCRect m_objectRect;
    bool m_isObjectRectDirty;
    bool m_isOrientedBoxDirty;
    bool m_colorSpriteLocked;
    bool m_unk353;
    bool m_canRotateFree;
    bool m_isMirroredByScale;

    // property 108
    int m_linkedGroup;
    int m_unk35C;
    short m_colorType;
    short m_childColorType;
    bool m_shouldBlendBase;
    bool m_shouldBlendDetail;
    bool m_hasCustomChild;
    bool m_unk367;
    cocos2d::CCSprite* m_colorSprite;
    bool m_unk370;
    float m_objectRadius;
    bool m_isRotationAligned;
    float m_spriteWidthScale;
    float m_spriteHeightScale;
    int m_uniqueID;
    GameObjectType m_objectType;

    // used in PlayerObject::gameEventTriggered
    GameObjectType m_savedObjectType;
    int m_unk390;
    float m_unmodifiedPositionX;
    float m_unmodifiedPositionY;
    double m_positionX;
    double m_positionY;
    cocos2d::CCPoint m_startPosition;
    bool m_usesAudioScale;

    // property 372
    bool m_hasNoAudioScale;
    bool m_isDisabled;
    float m_startRotationX;
    float m_startRotationY;
    float m_startScaleX;
    float m_startScaleY;
    float m_customScaleX;
    float m_customScaleY;
    bool m_startFlipX;
    bool m_startFlipY;
    bool m_unk3ee;
    bool m_isInvisible;
    int m_unk3D8;
    short m_varianceIndex;
    bool m_unk3DE;
    short m_enterType;
    short m_exitType;

    // property 343
    short m_enterChannel;
    // property 446
    short m_objectMaterial;
    bool m_unk3E8;
    short m_parentMode;

    // property 96
    bool m_hasNoGlow;

    // property 23
    int m_targetColor;

    // property 1
    int m_objectID;
    bool m_unk3F8;
    bool m_intrinsicDontFade;
    bool m_ignoreEnter;
    bool m_ignoreFade;
    // true for object IDs 207-213 and 693-694
    bool m_isSolidColorBlock;
    bool m_baseOrDetailBlending;
    bool m_customSpriteColor;

    // property 497
    short m_customColorType;
    // property 67
    bool m_isDontEnter;
    // property 64
    bool m_isDontFade;
    // property 116
    bool m_hasNoEffects;
    // property 507
    bool m_hasNoParticles;
    int m_defaultZOrder;
    bool m_unk40C;
    bool m_colorZLayerRelated;
    bool m_customAudioScale;
    float m_minAudioScale;
    float m_maxAudioScale;
    bool m_particleLocked;

    // property 53
    int m_property53;
    bool m_isInvisibleBlock;
    bool m_glowColorIsLBG;
    bool m_customGlowColor;
    bool m_cantColorGlow;
    float m_opacityMod;
    bool m_slopeUphill;
    int m_slopeDirection;
    bool m_slopeIsHazard;
    float m_opacityMod2;

    // property 21, also used with 41 and 43
    GJSpriteColor* m_baseColor;
    // property 22, also used with 42 and 44
    GJSpriteColor* m_detailColor;
    bool m_unk448;
    ZLayer m_defaultZLayer;
    bool m_zFixedZLayer;

    // property 24
    ZLayer m_zLayer;
    // property 25
    int m_zOrder;
    bool m_unk45c;
    bool m_isSelected;
    float m_unk460;
    cocos2d::CCPoint m_unk464;
    bool m_shouldUpdateColorSprite;
    bool m_unk46d;

    // property 34
    bool m_hasGroupParent;
    // property 279
    bool m_hasAreaParent;
    // property 128
    float m_scaleX;
    // property 129
    float m_scaleY;

    // property 57, short array of size either 10 or m_groupCount
    std::array<short, 10>* m_groups;
    // used with property 57
    short m_groupCount;
    // used with property 274
    bool m_hasGroupParentsString;

    std::array<short, 10>* m_colorGroups;
    short m_colorGroupCount;
    std::array<short, 10>* m_opacityGroups;
    short m_opacityGroupCount;

    // property 20
    short m_editorLayer;
    // property 61
    short m_editorLayer2;
    int m_enabledGroupsCounter;
    bool m_updateCustomContentSize;
    bool m_hasContentSize;

    // property 121
    bool m_isNoTouch;
    cocos2d::CCSize m_lastSize;
    cocos2d::CCPoint m_lastPosition;
    int m_unk4C0;
    int m_unk4C4;
    int m_unk4C8;
    int m_unk4CC;
    GameObjectClassType m_classType;
    bool m_isTrigger;
    bool m_isSpawnOrderTrigger;
    bool m_isColorTrigger;
    bool m_dontIgnoreDuration;
    bool m_canBeControlled;
    bool m_activateTriggerInEditor;
    bool m_isStartPos;

    // property 103
    bool m_isHighDetail;
    ColorActionSprite* m_mainActionSprite;
    ColorActionSprite* m_detailActionSprite;
    GJEffectManager* m_goEffectManager;
    bool m_unk4F8;
    bool m_isDecoration;
    bool m_isDecoration2;
    bool m_unk4fb;
    bool m_maybeNotColorable;

    // property 134
    bool m_isPassable;
    // property 135
    bool m_isHide;
    // property 136
    bool m_isNonStickX;
    // property 289
    bool m_isNonStickY;
    // property 137
    bool m_isIceBlock;
    // property 193
    bool m_isGripSlope;
    // property 356
    bool m_isScaleStick;
    // property 495
    bool m_isExtraSticky;
    // property 496
    bool m_isDontBoostY;
    // property 509
    bool m_isDontBoostX;
    bool m_unk507;
    bool m_unk508;
    float m_unk50C;
    float m_pixelScaleX;
    float m_pixelScaleY;

    // property 155
    int m_mainColorKeyIndex;
    // property 156
    int m_detailColorKeyIndex;
    uint8_t m_areaOpacityRelated;
    float m_areaOpacityValue;
    int m_areaOpacityIndex;
    int m_unk52C;
    bool m_unk530;
    bool m_isUIObject;
    bool m_greenDebugDraw;
}

[[link(android)]]
class GameObjectCopy : cocos2d::CCObject {
    // virtual ~GameObjectCopy();

    static GameObjectCopy* create(GameObject*) = win 0x2db040, m1 0xca710, imac 0xe3820;

    bool init(GameObject*);
    void resetObject() = win 0x2db140, m1 0xca828, imac 0xe3940;

    GameObject* m_object;
    cocos2d::CCPoint m_position;
    float m_rotationX;
    float m_rotationY;
    bool m_isFlipX;
    bool m_isFlipY;
    float m_customScaleX;
    float m_customScaleY;
}

[[link(android)]]
class GameObjectEditorState {
    void loadValues(GameObject* obj) = win inline, m1 0xaa8c, imac 0x9370 {
        m_position = obj->getPosition();
        m_scaleX = obj->m_scaleX / obj->m_pixelScaleX;
        m_scaleY = obj->m_scaleY / obj->m_pixelScaleY;
        m_rotationX = obj->getRotationX();
        m_rotationY = obj->getRotationY();
    }

    cocos2d::CCPoint m_position;
    float m_scaleX;
    float m_scaleY;
    float m_rotationX;
    float m_rotationY;
}

[[link(android)]]
class GameOptionsLayer : GJOptionsLayer {
    // virtual ~GameOptionsLayer();
    GameOptionsLayer() = win inline {
        m_practiceDialogIndex = 0;
    }

    static GameOptionsLayer* create(GJBaseGameLayer* baseGameLayer) = ios 0x2e122c, win inline, imac 0x29d740, m1 0x244f94 {
        auto ret = new GameOptionsLayer();
        if (ret->init(baseGameLayer)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void setupOptions() = win 0x2978e0, m1 0x24519c, imac 0x29da00, ios 0x2e1350;
    virtual void didToggle(int) = win 0x298ed0, imac 0x29e7e0, m1 0x245e98, ios 0x2e1e6c;

    bool init(GJBaseGameLayer* baseGameLayer) = win inline, m1 0x245144, imac 0x29d9b0 {
        m_baseGameLayer = baseGameLayer;
        m_gap = 40.f;
        m_maxLabelScale = .4f;
        if (!GJOptionsLayer::init(2)) return false;
        this->preSetup();
        this->postSetup();
        return true;
    }
    void onPracticeMusicSync(cocos2d::CCObject* sender) = win 0x298be0, m1 0x2458f4, imac 0x29e1b0, ios 0x2e1a04;
    void onUIOptions(cocos2d::CCObject* sender) = win 0x298d60, m1 0x245868, imac 0x29e120, ios 0x2e19c8;
    void onUIPOptions(cocos2d::CCObject* sender) = win 0x298d80, m1 0x245888, imac 0x29e140, ios 0x2e19e8;
    void showPracticeMusicSyncUnlockInfo() = win 0x298380, m1 0x245968, imac 0x29e230;

    GJBaseGameLayer* m_baseGameLayer;
    int m_practiceDialogIndex;
}

[[link(android)]]
class GameOptionsTrigger : EffectGameObject {
    // virtual ~GameOptionsTrigger();

    static GameOptionsTrigger* create(char const*);

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x486d70, imac 0x19fa20, m1 0x162644, ios 0x3792b0;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x486600, imac 0x19db40, m1 0x160e08, ios 0x378c58;

    bool init(char const*);

    // property 159
    GameOptionsSetting m_streakAdditive;
    // property 160
    GameOptionsSetting m_unlinkDualGravity;
    // property 161
    GameOptionsSetting m_hideGround;
    // property 162
    GameOptionsSetting m_hideP1;
    // property 163
    GameOptionsSetting m_hideP2;
    // property 165
    GameOptionsSetting m_disableP1Controls;
    // property 199
    GameOptionsSetting m_disableP2Controls;
    // property 195
    GameOptionsSetting m_hideMG;
    // property 532
    GameOptionsSetting m_hideAttempts;
    // property 573
    GameOptionsSetting m_editRespawnTime;
    // property 574
    float m_respawnTime;
    // property 575
    GameOptionsSetting m_audioOnDeath;
    // property 576
    GameOptionsSetting m_noDeathSFX;
    // property 593
    GameOptionsSetting m_boostSlide;
}

[[link(android)]]
class GameRateDelegate {
    virtual void updateRate() {}
}

[[link(android)]]
class GameStatsManager : cocos2d::CCNode {
    static GameStatsManager* get() {
        return GameStatsManager::sharedState();
    }
    // virtual ~GameStatsManager();
    // GameStatsManager();

    static GameStatsManager* sharedState() = ios 0x325804, win 0x1cdf20, imac 0x5a460, m1 0x50108;

    virtual bool init() = win 0x1ce140, imac 0x5a940, m1 0x50450, ios 0x3259a0;

    int accountIDForIcon(int, UnlockType) = m1 0x2acc74, imac 0x3171d0;
    void addSimpleSpecialChestReward(gd::string, UnlockType, int, bool) = win 0x1e6d10;
    void addSpecialRewardDescription(gd::string, gd::string);
    void addStoreItem(int, int, int, int, ShopType) = ios 0x32bb90, win 0x1d1000, imac 0x660d0, m1 0x5a758;
    bool areChallengesLoaded() = win inline, m1 0x663dc, imac 0x729b0, ios 0x3339d0 {
        return m_challengeTime > 0;
    }
    bool areRewardsLoaded() = win inline, m1 0x6599c, imac 0x71f60, ios 0x3333c4 {
        return m_rewardItems->objectForKey(1) != nullptr;
    }
    void awardCurrencyForLevel(GJGameLevel*) = win 0x1dd990, imac 0x70c90, m1 0x64700, ios 0x33282c;
    void awardDiamondsForLevel(GJGameLevel*) = win 0x1de170, m1 0x64e84, imac 0x71470, ios 0x332ce4;
    bool awardSecretKey() = win 0x1ee660, m1 0x7fba8, imac 0x8bf50, ios 0x33e2ec;
    TodoReturn canItemBeUnlocked(int, UnlockType);
    void checkAchievement(char const*) = win 0x1d2470, m1 0x5b28c, imac 0x66d20;
    void checkCoinAchievement(GJGameLevel*) = ios 0x33052c, win 0x1da830, imac 0x6c8d0, m1 0x60414;
    void checkCoinsForLevel(GJGameLevel*) = imac 0x6f9a0, m1 0x633a0;
    TodoReturn claimListReward(GJLevelList*);
    void collectReward(GJRewardType, GJRewardItem*) = win inline, m1 0x65c74, imac 0x72270, ios 0x333564 {
        if (!p1 || this->hasRewardBeenCollected(p0, p1->m_chestID)) return;
        this->registerRewardsFromItem(p1);
        m_dailyChests->setObject(p1, this->getRewardKey(p0, p1->m_chestID));
    }
    TodoReturn collectVideoReward(int);
    void completedChallenge(GJChallengeItem*) = m1 0x67008, imac 0x734a0;
    GJRewardItem* completedDailyLevel(GJGameLevel*) = win 0x1dfe10, imac 0x73c90, m1 0x67884;
    void completedDemonLevel(GJGameLevel*) = m1 0x613f8, imac 0x6d7f0, ios 0x330e60, win 0x1db530;
    void completedLevel(GJGameLevel*) = ios 0x330d54, imac 0x6d6b0, m1 0x6129c, win 0x1db3e0;
    void completedMapPack(GJMapPack*) = win 0x1dbe30;
    void completedStarLevel(GJGameLevel*) = m1 0x61598, imac 0x6d990, ios 0x330f2c, win 0x1db7a0;
    int countSecretChests(GJRewardType rewardType) = win inline, imac 0x8bdd0, m1 0x7fa48, ios 0x33e264 {
        using namespace cocos2d;
        if (!m_allTreasureRoomChests) {
            return 0;
        }
        
        if (rewardType == GJRewardType::Unknown) {
            return m_allTreasureRoomChests->count();
        }

        int count = 0;
        CCDictElement* obj;
        CCDICT_FOREACH(m_allTreasureRoomChests, obj) {
            auto chest = static_cast<GJRewardItem*>(obj->getObject());
            if (chest->m_rewardType == rewardType) count++;
        }
        return count;
    }
    int countUnlockedSecretChests(GJRewardType rewardType) = win inline, imac 0x8be30, m1 0x7fa8c, ios 0x33e2a8 {
        using namespace cocos2d;
        if (!m_treasureRoomChests) {
            return 0;
        }
        
        if (rewardType == GJRewardType::Unknown) {
            return m_treasureRoomChests->count();
        }

        int count = 0;
        CCDictElement* obj;
        CCDICT_FOREACH(m_treasureRoomChests, obj) {
            auto chest = static_cast<GJRewardItem*>(obj->getObject());
            if (chest->m_rewardType == rewardType) count++;
        }
        return count;
    }
    GJRewardItem* createReward(GJRewardType, int, gd::string) = ios 0x332fb4, imac 0x71940, m1 0x65374, win 0x1de620;
    void createSecretChestItems() = imac 0x5d080, m1 0x5243c;
    void createSecretChestRewards() = win 0x1e7760;
    void createSpecialChestItems() = m1 0x52580, imac 0x5d1d0, win 0x1e2c90;
    void createStoreItems() = ios 0x325a70, win 0x1ce830, m1 0x504f8, imac 0x5a9f0;
    void dataLoaded(DS_Dictionary*) = win 0x1ef0b0, m1 0x808bc, imac 0x8cee0, ios 0x33f030;
    void encodeDataTo(DS_Dictionary*) = ios 0x33ec78, imac 0x8c9c0, m1 0x803f4, win 0x1eedd0;
    void firstSetup();
    void generateItemUnlockableData() = imac 0x651f0, m1 0x59b18, win 0x1ce340;
    int getAwardedCurrencyForLevel(GJGameLevel*) = ios 0x3326e0, win 0x1dd750, imac 0x70ab0, m1 0x6450c;
    int getAwardedDiamondsForLevel(GJGameLevel*) = imac 0x712a0, win 0x1ddf40, m1 0x64cb4, ios 0x332bac;
    int getBaseCurrency(int stars, bool mainLevel, int levelID) = win inline, m1 0x64264, imac 0x70870, ios 0x332558 {
        if (mainLevel) {
            return levelID == 14 || levelID == 18 || levelID == 20 ? 400 : (stars + 1) * 20;
        }
        else {
            switch (stars) {
                case 2: return 40;
                case 3: return 60;
                case 4: return 100;
                case 5: return 140;
                case 6: return 180;
                case 7: return 220;
                case 8: return 280;
                case 9: return 340;
                case 10: return 400;
                default: return 0;
            }
        }
    }
    int getBaseCurrencyForLevel(GJGameLevel*) = ios 0x3325b8, win 0x1dd4b0, imac 0x708c0, m1 0x642c4;
    void getBaseDiamonds(int) = imac 0x71240, m1 0x64c64;
    int getBonusDiamonds(int) = imac 0x71260, m1 0x64c78;
    GJChallengeItem* getChallenge(int) = ios 0x333cf4, win 0x1dee70, m1 0x66a90, imac 0x73000;
    gd::string getChallengeKey(GJChallengeItem* chal) = win inline, m1 0x66e24, imac 0x73370, ios 0x333efc {
        return cocos2d::CCString::createWithFormat("c%i%i", chal->m_position, chal->m_timeLeft)->getCString();
    }
    int getCollectedCoinsForLevel(GJGameLevel*) = win 0x1dabd0, m1 0x608b4, imac 0x6cd40, ios 0x330730;
    cocos2d::CCArray* getCompletedMapPacks() = win 0x1dc180, imac 0x6e6c0, m1 0x6230c, ios 0x331520;
    gd::string getCurrencyKey(GJGameLevel* level) = win inline, m1 0x64184, imac 0x70790 {
        auto dailyID = level->m_dailyID.value();
        return cocos2d::CCString::createWithFormat("%i", dailyID > 0 ? dailyID : level->m_levelID.value())->getCString();
    }
    TodoReturn getDailyLevelKey(int);
    const char* getDemonLevelKey(GJGameLevel* level) = win inline, m1 0x60c5c, imac 0x6d140, ios 0x330994 {
        auto dailyID = level->m_dailyID.value();
        if (dailyID > 0) return cocos2d::CCString::createWithFormat("ddemon_%i", dailyID)->getCString();
        auto levelID = level->m_levelID.value();
        if (level->m_gauntletLevel) return cocos2d::CCString::createWithFormat("gdemon_%i", levelID)->getCString();
        return cocos2d::CCString::createWithFormat("demon_%i", levelID)->getCString();
    }
    TodoReturn getEventRewardKey(int);
    gd::string getGauntletRewardKey(int) = win 0x1e6e40, imac 0x77710, m1 0x6b024, ios 0x33648c;
    gd::string getItemKey(int, int) = win 0x1de9b0, m1 0x5a52c, imac 0x65e50, ios 0x32ba84;
    int getItemUnlockState(int itemID, UnlockType unlockType) = ios 0x336148, win 0x1e2b30, m1 0x6a898, imac 0x77010;
    int getItemUnlockStateLite(int, UnlockType);
    gd::string getLevelKey(GJGameLevel* level) = win inline {
        return getLevelKey(level->m_levelID, level->m_levelType != GJLevelType::Main, level->m_dailyID > 0, level->m_gauntletLevel, level->m_dailyID > 200000);
    }
    gd::string getLevelKey(int levelID, bool isOnline, bool isDaily, bool isGauntlet, bool isEvent) = win 0x1dad50;
    gd::string getListRewardKey(GJLevelList*) = m1 0x671f8, imac 0x73610;
    char const* getMapPackKey(int);
    TodoReturn getNextGoldChestID();
    TodoReturn getNextVideoAdReward();
    gd::string getPathRewardKey(int) = win 0x1e7330;
    GJChallengeItem* getQueuedChallenge(int) = ios 0x333d78, win 0x1def40, m1 0x66b94, imac 0x73100;
    GJRewardItem* getRewardForSecretChest(int id) = win inline, m1 0x7f8cc, imac 0x8bc30, ios inline {
        return static_cast<GJRewardItem*>(m_allTreasureRoomChests->objectForKey(id));
    }
    TodoReturn getRewardForSpecialChest(gd::string);
    GJRewardItem* getRewardItem(GJRewardType) = win inline, m1 0x65990, imac 0x71f40, ios 0x3333b8 {
        return static_cast<GJRewardItem*>(m_rewardItems->objectForKey((int)p0));
    }
    gd::string getRewardKey(GJRewardType, int) = win 0x1de9b0, m1 0x659c0, imac 0x71f80, ios 0x3333e8;
    GJChallengeItem* getSecondaryQueuedChallenge(int) = m1 0x66c98, imac 0x73200, win 0x1df010;
    TodoReturn getSecretChestForItem(int, UnlockType);
    char const* getSecretCoinKey(char const*) = m1 0x63ad4, imac 0x700d0;
    gd::string getSecretOnlineRewardKey(int) = m1 0x6beb0, imac 0x78550;
    TodoReturn getSpecialChestKeyForItem(int, UnlockType);
    TodoReturn getSpecialRewardDescription(gd::string, bool);
    gd::string getSpecialUnlockDescription(int, UnlockType, bool) = win 0x1e6fb0, m1 0x6b4a4, imac 0x77bb0, ios 0x336794;
    char const* getStarLevelKey(GJGameLevel* level) = win inline, m1 0x60ce4, imac 0x6d1a0, ios 0x330a04 {
        int dailyID = level->m_dailyID.value();
        if (dailyID > 0) return cocos2d::CCString::createWithFormat("dstar_%i",dailyID)->getCString();
        int levelID = level->m_levelID.value();
        if (level->m_gauntletLevel) return cocos2d::CCString::createWithFormat("gstar_%i",levelID)->getCString();
        return cocos2d::CCString::createWithFormat("star_%i",levelID)->getCString();
    }
    int getStat(char const*) = ios 0x32bf54, win 0x1d21e0, imac 0x66610, m1 0x5aca0;
    int getStatFromKey(StatKey key) = ios 0x33027c, m1 0x5ff6c, imac 0x6c410, win inline {
        return this->getStat(GameToolbox::intToString((int)key).c_str());
    }
    TodoReturn getStoreItem(int, int);
    TodoReturn getStoreItem(int);
    int getTotalCollectedCurrency() = ios 0x3349f0, win 0x1e08b0, imac 0x743f0, m1 0x67fc4;
    int getTotalCollectedDiamonds() = win 0x1e1180, imac 0x751c0, m1 0x68c58;
    bool hasClaimedListReward(GJLevelList*) = ios 0x334154, win 0x1dfc30, imac 0x736d0, m1 0x672c8;
    bool hasCompletedChallenge(GJChallengeItem*) = win 0x1df870, m1 0x66ef8, imac 0x73430, ios 0x333f44;
    bool hasCompletedDailyLevel(int) = win 0x1dfd10, imac 0x73b50, m1 0x67750;
    bool hasCompletedDemonLevel(GJGameLevel*);
    bool hasCompletedGauntletLevel(int) = win 0x1db1a0, m1 0x60f64, imac 0x6d3b0;
    bool hasCompletedLevel(GJGameLevel* level) = ios 0x330af4, win 0x1dafb0, imac 0x6d280, m1 0x60e04;
    bool hasCompletedMainLevel(int levelID) = ios 0x330a74, win 0x1dae80, m1 0x60d6c, imac 0x6d200;
    bool hasCompletedMapPack(int);
    bool hasCompletedOnlineLevel(int) = ios 0x330b64, win 0x1db070, m1 0x60ecc, imac 0x6d330;
    bool hasCompletedStarLevel(GJGameLevel*) = m1 0x6114c, imac 0x6d570;
    bool hasPendingUserCoin(char const*) = ios 0x331ee0, win 0x1dce90, m1 0x636cc, imac 0x6fcf0;
    bool hasRewardBeenCollected(GJRewardType, int) = win 0x1deaa0, m1 0x65bec, imac 0x72200, ios 0x3334f4;
    bool hasSecretCoin(char const*) = ios 0x33078c, win 0x1dcf50, imac 0x6cdc0, m1 0x60930;
    bool hasUserCoin(char const*) = ios 0x331f50, win 0x1dcd10, m1 0x637c4, imac 0x6fde0;
    TodoReturn incrementActivePath(int);
    void incrementChallenge(GJChallengeType type, int amount) = win 0x1df0f0, m1 0x5eb10, imac 0x6b0c0, ios 0x32f8b4;
    void incrementStat(char const* key, int amount) = ios 0x32c170, win 0x1d1500, imac 0x66960, m1 0x5afdc;
    void incrementStat(char const* key) = win inline, m1 0x5afd4, imac 0x66950, ios 0x32c168 {
        this->incrementStat(key, 1);
    }
    bool isGauntletChestUnlocked(int);
    bool isItemEnabled(UnlockType type, int id) = ios 0x336220, win inline, imac 0x773c0, m1 0x6ac58 {
        return this->isItemUnlocked(type, id) && m_enabledItems->valueForKey(this->getItemKey(id, (int)type))->boolValue();
    }
    bool isItemUnlocked(UnlockType, int) = ios 0x32fb64, win 0x1e2850, m1 0x5ee84, imac 0x6b3b0;
    bool isPathChestUnlocked(int path) = win inline, ios 0x336a94, m1 0x6bb18, imac 0x781f0 {
        return this->isSpecialChestUnlocked(this->getPathRewardKey(path));
    }
    bool isPathUnlocked(StatKey);
    bool isSecretChestUnlocked(int) = win 0x1e74d0, imac 0x76e10, m1 0x6a68c, ios 0x336044;
    bool isSecretCoin(gd::string) = m1 0x63c18, imac 0x70200;
    bool isSecretCoinValid(gd::string);
    bool isSpecialChestLiteUnlockable(gd::string);
    bool isSpecialChestUnlocked(gd::string) = win 0x1e7160, imac 0x76f10, m1 0x6a794, ios 0x3360cc;
    bool isStoreItemUnlocked(int) = win 0x1d1210, imac 0x662e0, m1 0x5a978, ios 0x32bd28;
    int keyCostForSecretChest(int) = m1 0x6a2a4, imac 0x76a40;
    TodoReturn linkSpecialChestUnlocks(GJRewardItem*, gd::string);
    TodoReturn logCoins();
    TodoReturn markLevelAsCompletedAndClaimed(GJGameLevel*);
    void postLoadGameStats() = win 0x1f0460;
    void preProcessReward(GJRewardItem*) = win 0x1deb00;
    void preSaveGameStats() = win 0x1f0630;
    void processChallengeQueue(int position) = win 0x1df950, m1 0x67160, imac 0x73590, ios 0x334078;
    TodoReturn processOnlineChests();
    bool purchaseItem(int) = win 0x1d12e0, m1 0x5aa80, imac 0x663e0, ios 0x32bdb0;
    void recountSpecialStats() = win 0x1e1480, ios 0x3351a4, imac 0x75760, m1 0x69188;
    TodoReturn recountUserCoins(bool);
    void registerRewardsFromItem(GJRewardItem*) = win 0x1ee170, m1 0x65d58, imac 0x72340, ios 0x333604;
    void removeChallenge(int songID) = m1 0x6650c, imac 0x72ae0;
    void removeErrorFromSpecialChests() = win 0x1f0310;
    void removeQueuedChallenge(int position) = win inline, m1 0x66740, imac 0x72cf0, ios 0x333b6c {
        m_upcomingChallenges->removeObjectForKey(cocos2d::CCString::createWithFormat("%i", position)->getCString());
    }
    void removeQueuedSecondaryChallenge(int position) = win inline, m1 0x66978, imac 0x72f00, ios 0x333c74 {
        m_upcomingChallenges->removeObjectForKey(cocos2d::CCString::createWithFormat("%i", position + 100)->getCString());
    }
    void resetChallengeTimer() = win inline, imac 0x72990, m1 0x663d4, ios 0x3339c8 {
        m_challengeTime = 0;
    }
    TodoReturn resetPreSync();
    TodoReturn resetSpecialChest(gd::string);
    void resetSpecialStatAchievements() = win 0x1e22e0, imac 0x76aa0, m1 0x6a2f8, ios 0x335d94;
    TodoReturn resetUserCoins();
    TodoReturn restorePostSync();
    void setAwardedBonusKeys(int);
    void setStarsForMapPack(int, int) = win 0x1dc090;
    void setStat(char const*, int) = ios 0x32c038, win 0x1d2300, imac 0x66770, m1 0x5ae04;
    void setStatIfHigher(char const*, int);
    void setupIconCredits() = win 0x1c1190, m1 0x2acd6c, imac 0x3172c0;
    TodoReturn shopTypeForItemID(int);
    TodoReturn shouldAwardSecretKey();
    TodoReturn starsForMapPack(int);
    void storeChallenge(int position, GJChallengeItem* challenge) = win inline, m1 0x663ec, imac 0x729d0, ios 0x3339e0 {
        m_activeChallenges->setObject(challenge, cocos2d::CCString::createWithFormat("%i", position)->getCString());
    }
    void storeChallengeTime(int) = m1 0x66370, imac 0x72930;
    TodoReturn storeEventChest(int, GJRewardItem*);
    TodoReturn storeOnlineChest(gd::string, GJRewardItem*);
    TodoReturn storePendingUserCoin(char const*);
    void storeQueuedChallenge(int position, GJChallengeItem* challenge) = m1 0x66620, imac 0x72be0, win 0x1ded90, ios 0x333ae4;
    TodoReturn storeRewardState(GJRewardType, int, int, gd::string);
    TodoReturn storeSecondaryQueuedChallenge(int, GJChallengeItem*);
    TodoReturn storeSecretCoin(char const*);
    void storeUserCoin(char const*) = win 0x1dcdd0;
    TodoReturn tempClear();
    void toggleEnableItem(UnlockType, int, bool) = win 0x1e2c00, imac 0x77450, m1 0x6ad1c, ios 0x3362b8;
    void tryFixPathBug() = win 0x1d1810, m1 0x5f61c, imac 0x6ba70;
    void trySelectActivePath() = m1 0x5f0c4, imac 0x6b5e0;
    void uncompleteLevel(GJGameLevel*) = win 0x1dbbc0;
    void unlockGauntletChest(int);
    GJRewardItem* unlockGoldChest(int) = win inline, m1 0x7f8d8, imac 0x8bc50, ios 0x33e16c {
        if (!this->isSecretChestUnlocked(p0)) {
            if (auto reward = this->getRewardForSecretChest(p0)) {
                auto keys = this->getStat("43");
                if (keys > 0) {
                    this->setStat("43", keys - 1);
                    this->preProcessReward(reward);
                    this->registerRewardsFromItem(reward);
                    m_treasureRoomChests->setObject(reward, cocos2d::CCString::createWithFormat("%i", p0)->getCString());
                    return reward;
                }
            }
        }
        return nullptr;
    }
    void unlockOnlineChest(gd::string) = win 0x1e7410;
    TodoReturn unlockPathChest(int);
    GJRewardItem* unlockSecretChest(int) = win 0x1e75a0, m1 0x7f6f4, imac 0x8ba60, ios 0x33e00c;
    GJRewardItem* unlockSpecialChest(gd::string) = win 0x1e7250, m1 0x6b8c8, imac 0x77ff0, ios 0x336884;
    TodoReturn updateActivePath(StatKey);
    gd::string usernameForAccountID(int);
    void verifyPathAchievements() = win 0x1d1f80, m1 0x601c0, imac 0x6c680;
    void verifyUserCoins() = win 0x1dcc30;

    bool m_usePlayerStatsCCDictionary;
    cocos2d::CCString* m_trueString;
    cocos2d::CCDictionary* m_allStoreItems;
    cocos2d::CCDictionary* m_storeItems;
    cocos2d::CCDictionary* m_allTreasureRoomChests;
    cocos2d::CCDictionary* m_allTreasureRoomChestItems;
    cocos2d::CCDictionary* m_allSpecialChests;
    cocos2d::CCDictionary* m_allSpecialChestItems;
    gd::unordered_map<int, gd::string> m_specialRewardDescriptions;
    gd::unordered_map<int, gd::string> m_createSpecialChestItemsMap;
    cocos2d::CCDictionary* m_specialChestsLite;
    cocos2d::CCArray* m_storeItemArray;
    cocos2d::CCDictionary* m_rewardItems;
    cocos2d::CCDictionary* m_dailyChests;
    cocos2d::CCDictionary* m_worldAdvertChests;
    cocos2d::CCDictionary* m_activeChallenges;
    cocos2d::CCDictionary* m_upcomingChallenges;
    double m_challengeTime;
    cocos2d::CCDictionary* m_playerStats;
    gd::unordered_map<int, int> m_playerStatsRandMap;
    gd::unordered_map<int, int> m_playerStatsSeedMap;
    cocos2d::CCDictionary* m_completedLevels;
    cocos2d::CCDictionary* m_verifiedUserCoins;
    cocos2d::CCDictionary* m_pendingUserCoins;
    cocos2d::CCDictionary* m_purchasedItems;
    cocos2d::CCDictionary* m_onlineCurrencyScores;
    cocos2d::CCDictionary* m_mainCurrencyScores;
    cocos2d::CCDictionary* m_gauntletCurrencyScores;
    cocos2d::CCDictionary* m_timelyCurrencyScores;
    cocos2d::CCDictionary* m_onlineStars;
    cocos2d::CCDictionary* m_timelyStars;
    cocos2d::CCDictionary* m_gauntletDiamondScores;
    cocos2d::CCDictionary* m_timelyDiamondScores;
    cocos2d::CCDictionary* m_unusedCurrencyAwardDict;
    cocos2d::CCDictionary* m_challengeDiamonds;
    cocos2d::CCDictionary* m_completedMappacks;
    cocos2d::CCDictionary* m_completedLists;
    cocos2d::CCDictionary* m_weeklyChest;
    cocos2d::CCDictionary* m_eventChest;
    cocos2d::CCDictionary* m_treasureRoomChests;
    geode::SeedValueSRV m_bonusKey;
    cocos2d::CCDictionary* m_miscChests;
    cocos2d::CCDictionary* m_enabledItems;
    cocos2d::CCDictionary* m_wraithChests;
    bool m_skipIncrementChallenge;
    cocos2d::CCDictionary* m_unkDict;
    cocos2d::CCDictionary* m_unlockedItems;
    gd::map<std::pair<int, UnlockType>, int> m_accountIDForIcon;
    gd::map<int, gd::string> m_usernameForAccountID;
    gd::set<std::pair<UnlockType, int>> m_wraithIcons;
    bool m_pathBugFixed;
    bool m_tryFixPathBug;
    int m_activePath;
}

[[link(android)]]
class GameToolbox {
    static void addBackButton(cocos2d::CCLayer*, cocos2d::CCMenuItem*) = ios 0x4829c, win 0x65010, imac 0x4dc890, m1 0x43f944;
    static void addRThumbScrollButton(cocos2d::CCLayer*) = ios 0x48380, win 0x650f0, m1 0x43fa2c, imac 0x4dc960;
    static void alignItemsHorisontally(cocos2d::CCArray*, float, cocos2d::CCPoint, bool) = win 0x64110, m1 0x43e460, imac 0x4db280, ios 0x47414;
    static void alignItemsVertically(cocos2d::CCArray*, float, cocos2d::CCPoint);
    static TodoReturn bounceTime(float);
    static TodoReturn colorToSepia(cocos2d::ccColor3B, float);
    static cocos2d::CCRect contentScaleClipRect(cocos2d::CCRect&);
    static TodoReturn createHashString(gd::string const&, int);
    static CCMenuItemToggler* createToggleButton(gd::string label, cocos2d::SEL_MenuHandler selector, bool state, cocos2d::CCMenu* menu, cocos2d::CCPoint position, cocos2d::CCNode* parent, cocos2d::CCNode* labelParent, cocos2d::CCArray* container) = win inline, m1 0x43ee18, imac 0x4dbd60, ios 0x47a98 {
        return GameToolbox::createToggleButton(label, selector, state, menu, position, parent, labelParent, .7f, .5f, 80.f, { 8.f, 0.f }, "bigFont.fnt", false, 0, container);
    }
    static CCMenuItemToggler* createToggleButton(gd::string label, cocos2d::SEL_MenuHandler selector, bool state, cocos2d::CCMenu* menu, cocos2d::CCPoint position, cocos2d::CCNode* parent, cocos2d::CCNode* labelParent, float buttonScale, float maxLabelScale, float maxLabelWidth, cocos2d::CCPoint labelOffset, char const* font, bool labelTop, int labelTag, cocos2d::CCArray* container) = win 0x64670, imac 0x4dbe90, m1 0x43ef50, ios 0x47bcc;
    static bool doWeHaveInternet() = win inline, m1 0x43e8a8, imac 0x4db770, ios 0x4776c {
        return true;
    }
    static gd::string easeToText(int easingType) = win 0x68570, m1 0x445748, imac 0x4e34f0, ios 0x4b720;
    static uint64_t fast_rand() = win inline, m1 0x441848, imac 0x4dea50, ios inline {
        auto value = GameToolbox::getfast_srand() * 214013 + 2531011;
        GameToolbox::fast_srand(value);
        return value >> 16 & 32767;
    }
    static float fast_rand_0_1() = win inline, imac 0x4dea80, m1 0x441870, ios 0x49540 {
        return GameToolbox::fast_rand() / 32767.f;
    }
    static float fast_rand_minus1_1() = win inline, m1 0x4418ac, imac 0x4deac0, ios 0x49578 {
        return GameToolbox::fast_rand_0_1() * 2.f - 1.f;
    }
    static void fast_srand(uint64_t) = win inline, ios 0x49534, m1 0x441830, imac 0x4dea30 {
        *reinterpret_cast<uint64_t*>(geode::base::get() + 0x6a4e20) = p0;
    }
    static gd::string gen_random(int) = m1 0x464058, imac 0x504920;
    static TodoReturn getDropActionWDelay(float, float, float, cocos2d::CCNode*, cocos2d::SEL_CallFunc);
    static TodoReturn getDropActionWEnd(float, float, float, cocos2d::CCAction*, float);
    static cocos2d::CCActionEase* getEasedAction(cocos2d::CCActionInterval*, int, float) = imac 0x4de7b0, m1 0x4415e8;
    static float getEasedValue(float, int, float) = win 0x68b40;
    static uint64_t getfast_srand() = win inline, m1 0x44183c, imac 0x4dea40, ios inline {
        return *reinterpret_cast<uint64_t*>(geode::base::get() + GEODE_WINDOWS(0x6a4e20) GEODE_IOS(0x85d890));
    }
    static TodoReturn getInvertedEasing(int);
    static TodoReturn getLargestMergedIntDicts(cocos2d::CCDictionary*, cocos2d::CCDictionary*);
    static TodoReturn getMultipliedHSV(cocos2d::ccHSVValue const&, float);
    static cocos2d::CCPoint getRelativeOffset(GameObject*, cocos2d::CCPoint) = win 0x64970, m1 0x43f1f4, imac 0x4dc100, ios 0x47e70;
    static gd::string getResponse(cocos2d::extension::CCHttpResponse*) = win 0x64310, imac 0x4dba00, m1 0x43eb40;
    static gd::string getTimeString(int, bool) = win 0x65e20, imac 0x4de620, m1 0x44145c, ios 0x49338;
    static cocos2d::ccHSVValue hsvFromString(gd::string const& str, char const* delim) = win 0x654e0, m1 0x44007c, imac 0x4dd030, ios 0x487fc; // on windows, 2nd param is ignored and assumed to be "a"
    static gd::string intToShortString(int) = win 0x69120, imac 0x4e4250, m1 0x4465bc, ios 0x4bd08;
    static gd::string intToString(int) = win 0x69060, imac 0x4e3f30, m1 0x446284, ios 0x4bc24;
    static bool isIOS();
    static bool isRateEasing(int);
    static void mergeDictsSaveLargestInt(cocos2d::CCDictionary*, cocos2d::CCDictionary*) = win 0x64b70, m1 0x43f440, imac 0x4dc370, ios 0x48050;
    static void mergeDictsSkipConflict(cocos2d::CCDictionary*, cocos2d::CCDictionary*) = win 0x64dd0, m1 0x43f6d0, imac 0x4dc610, ios 0x48188;
    static gd::string msToTimeString(int milliseconds, int formattingMode) = win 0x69630, m1 0x446c04, imac 0x4e48b0, ios 0x4c158;
    static TodoReturn multipliedColorValue(cocos2d::ccColor3B, cocos2d::ccColor3B, float);
    static TodoReturn openAppPage();
    static TodoReturn openRateURL(gd::string, gd::string) = m1 0x43ea18, imac 0x4db8e0;
    static cocos2d::CCParticleSystemQuad* particleFromString(gd::string const& str, cocos2d::CCParticleSystemQuad* system, bool p2) = win inline, imac 0x4e2ed0, m1 0x4451a0, ios 0x4b190 {
        cocos2d::ParticleStruct ret;
        GameToolbox::particleStringToStruct(str, ret);
        return GameToolbox::particleFromStruct(ret, system, p2);
    }
    static cocos2d::CCParticleSystemQuad* particleFromStruct(cocos2d::ParticleStruct const&, cocos2d::CCParticleSystemQuad*, bool) = ios 0x4b264, win 0x68000, imac 0x4e2fe0, m1 0x44528c;
    static void particleStringToStruct(gd::string const&, cocos2d::ParticleStruct&) = win 0x67540, imac 0x4e1f80, m1 0x444354, ios 0x4a7fc;
    static gd::string pointsToString(int) = win 0x69760, m1 0x446d4c, imac 0x4e49f0;
    static void postClipVisit() = win inline, m1 0x43ee10, imac 0x4dbd50, ios 0x47a90 {
        glDisable(GL_SCISSOR_TEST);
    }
    static void preVisitWithClippingRect(cocos2d::CCNode*, cocos2d::CCRect) = ios 0x479ac, win 0x645c0, imac 0x4dbc50, m1 0x43ed28;
    static TodoReturn preVisitWithClipRect(cocos2d::CCRect);
    static gd::string saveParticleToString(cocos2d::CCParticleSystemQuad*) = win 0x662d0, imac 0x4deb00, m1 0x4418f4, ios 0x495bc;
    static TodoReturn saveStringToFile(gd::string const&, gd::string const&);
    static gd::string stringFromHSV(cocos2d::ccHSVValue, char const*) = win 0x656f0;
    static cocos2d::CCDictionary* stringSetupToDict(gd::string const&, char const*) = win 0x65c30, m1 0x440d54, imac 0x4dded0, ios 0x48f84;
    static void stringSetupToMap(gd::string const&, char const*, gd::map<gd::string, gd::string>&) = win 0x65890;
    static TodoReturn strongColor(cocos2d::ccColor3B);
    static TodoReturn timestampToHumanReadable(long) = m1 0x4469a4, imac 0x4e4690;
    static cocos2d::ccColor3B transformColor(cocos2d::ccColor3B const&, cocos2d::ccHSVValue) = ios 0x4854c, win 0x65290, m1 0x43fbfc, imac 0x4dcb20;
    static cocos2d::ccColor3B transformColor(cocos2d::ccColor3B const&, float, float, float) = m1 0x43fbe0, imac 0x4dcaf0;
}

[[link(android)]]
class GauntletLayer : cocos2d::CCLayer, LevelManagerDelegate {
    GauntletLayer() {
        m_levels = nullptr;
        m_loadingCircle = nullptr;
        m_backgroundSprite = nullptr;
        m_unkPtr = nullptr;
        m_activeItemButton = nullptr;
        m_activeObjects = nullptr;
        m_tryAgainText = nullptr;
    }
    ~GauntletLayer() = win inline, m1 0x30f864, imac 0x37f200, ios 0x231f14 {
        auto glm = GameLevelManager::sharedState();
        if (glm->m_levelManagerDelegate == this) glm->m_levelManagerDelegate = nullptr;
        CC_SAFE_RELEASE(m_activeObjects);
    }

    static GauntletLayer* create(GauntletType gauntletType) = win inline, imac 0x37f700, m1 0x30fc28 {
        auto ret = new GauntletLayer();
        if (ret->init(gauntletType)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(GauntletType) = win 0x1f2920, m1 0x30fb40, imac 0x37f5f0;

    virtual void keyBackClicked() = win 0x1f4f50, imac 0x381960, m1 0x311db0, ios 0x233c90;
    virtual void loadLevelsFinished(cocos2d::CCArray*, char const*, int) = win 0x1f3440, imac 0x380f10, m1 0x311274, ios 0x2335f0;
    virtual void loadLevelsFailed(char const*, int) = win 0x1f3650, m1 0x31141c, imac 0x3810b0, ios 0x2336c4;

    bool init(GauntletType) = ios 0x2320d4, win 0x1f2c50, m1 0x30fcf0, imac 0x37f7e0;
    void onBack(cocos2d::CCObject* sender) = win 0x1f4f00, m1 0x31034c, imac 0x37fe50;
    void onLevel(cocos2d::CCObject* sender) = win 0x1f4880, imac 0x381320, m1 0x3116ec, ios 0x233854;
    void setupGauntlet(cocos2d::CCArray*) = win 0x1f3850, imac 0x37fea0, m1 0x310394, ios 0x23273c;
    void unlockActiveItem() = ios 0x233898, win 0x1f48f0, imac 0x381360, m1 0x311730;

    cocos2d::CCArray* m_levels;
    LoadingCircle* m_loadingCircle;
    GauntletType m_gauntletType;
    cocos2d::CCSprite* m_backgroundSprite;
    void* m_unkPtr;
    CCMenuItemSpriteExtra* m_activeItemButton;
    cocos2d::CCArray* m_activeObjects;
    TextArea* m_tryAgainText;
}

[[link(android)]]
class GauntletNode : cocos2d::CCNode {
    // virtual ~GauntletNode();
    GauntletNode() {
        m_gauntletInfoNode = nullptr;
        m_rewardNode = nullptr;
    }

    static GauntletNode* create(GJMapPack* gauntlet) = win inline, m1 0x4b2728, imac 0x55c250 {
        auto ret = new GauntletNode();
        if (ret->init(gauntlet)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    static gd::string frameForType(GauntletType) = win 0x1f9030, m1 0x4b4e50, imac 0x55e760, ios 0x1c333c;
    static gd::string nameForType(GauntletType) = win 0x1fa250, m1 0x4b46dc, imac 0x55e210, ios 0x1c330c;
    bool init(GJMapPack*) = ios 0x1c1e04, win 0x1f7970, imac 0x55cb50, m1 0x4b2fdc;
    void onClaimReward() = win 0x1f8ff0, imac 0x55ca80, m1 0x4b2f30;

    cocos2d::CCNode* m_gauntletInfoNode;
    cocos2d::CCNode* m_rewardNode;
}

[[link(android)]]
class GauntletSelectLayer : cocos2d::CCLayer, BoomScrollLayerDelegate, LevelManagerDelegate {
    GauntletSelectLayer() {
        m_backgroundSprite = nullptr;
        m_scrollLayer = nullptr;
        m_refreshButton = nullptr;
        m_exiting = false;
        m_playing = false;
        m_tryAgainText = nullptr;
        m_loadingCircle = nullptr;
        m_gauntlets = nullptr;
        m_playBlocked = false;
    }
    ~GauntletSelectLayer() = win inline, m1 0x4b0e70, imac 0x55a680, ios 0x1c0340 {
        auto glm = GameLevelManager::sharedState();
        if (glm->m_levelManagerDelegate == this) glm->m_levelManagerDelegate = nullptr;
        CC_SAFE_RELEASE(m_gauntlets);
    }

    static GauntletSelectLayer* create(int p0) = win inline, imac 0x55abc0, m1 0x4b1248, ios 0x1c0448 {
        auto ret = new GauntletSelectLayer();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(int) = win 0x1f5570, imac 0x55aaa0, m1 0x4b1168, ios 0x1c03fc;

    virtual void onExit() = win 0x1f7920, m1 0x4b2f70, imac 0x55cac0, ios 0x1c1d9c;
    virtual void keyBackClicked() = win 0x1f7180, m1 0x4b2e44, imac 0x55c990, ios 0x1c1d50;
    virtual void scrollLayerWillScrollToPage(BoomScrollLayer*, int) = win 0x1f7090, m1 0x4b2da4, imac 0x55c8f0, ios 0x1c1cb0;
    virtual void scrollLayerScrolledToPage(BoomScrollLayer*, int) = win 0x1f7090, m1 0x4b2d04, imac 0x55c850, ios 0x1c1c10;
    virtual void loadLevelsFinished(cocos2d::CCArray*, char const*, int) = win 0x1f6470, imac 0x55bf10, m1 0x4b2414, ios 0x1c1520;
    virtual void loadLevelsFailed(char const*, int) = win 0x1f6620, m1 0x4b25bc, imac 0x55c0d0, ios 0x1c1624;

    void goToPage(int, bool) = win 0x1f6f20, m1 0x4b2c08, imac 0x55c750, ios 0x1c1b18;
    bool init(int) = ios 0x1c0504, win 0x1f56a0, m1 0x4b1310, imac 0x55acb0;
    void onBack(cocos2d::CCObject* sender) = win 0x1f70d0, imac 0x55b7c0, m1 0x4b1d5c, ios 0x1c0f30;
    void onInfo(cocos2d::CCObject* sender) = win 0x1f6210, m1 0x4b1dd0, imac 0x55b830;
    void onNext(cocos2d::CCObject* sender) = win 0x1f6ee0, imac 0x55b7a0, m1 0x4b1d48, ios 0x1c0f1c;
    void onPlay(cocos2d::CCObject* sender) = win 0x1f7190, imac 0x55c2d0, m1 0x4b27b8, ios 0x1c176c;
    void onPrev(cocos2d::CCObject* sender) = win 0x1f6f00, imac 0x55b780, m1 0x4b1d34, ios 0x1c0f08;
    void onRefresh(cocos2d::CCObject* sender) = win 0x1f6350, imac 0x55b8e0, m1 0x4b1e88;
    void setupGauntlets() = ios 0x1c10e4, win 0x1f6790, m1 0x4b1f30, imac 0x55b9a0;
    void unblockPlay() = win 0x1f7080, m1 0x4b2cfc, imac 0x55c840;
    void updateArrows() = win inline, m1 0x4b23c4, imac 0x55bec0 {
        m_leftButton->setVisible(m_scrollLayer != nullptr);
        m_rightButton->setVisible(m_scrollLayer != nullptr);
    }

    cocos2d::CCSprite* m_backgroundSprite;
    BoomScrollLayer* m_scrollLayer;
    CCMenuItemSpriteExtra* m_leftButton;
    CCMenuItemSpriteExtra* m_rightButton;
    CCMenuItemSpriteExtra* m_refreshButton;
    bool m_exiting;
    bool m_playing;
    TextArea* m_tryAgainText;
    LoadingCircle* m_loadingCircle;
    cocos2d::CCDictionary* m_gauntlets;
    bool m_playBlocked;
}

[[link(android)]]
class GauntletSprite : cocos2d::CCNode {
    // virtual ~GauntletSprite();
    GauntletSprite() {}

    static GauntletSprite* create(GauntletType gauntletType, bool locked) = win inline, imac 0x381250, m1 0x3115c8, ios 0x233794 {
        auto ret = new GauntletSprite();
        if (ret->init(gauntletType, locked)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    void addLockedSprite() = win 0x1f4fe0, imac 0x381b50, m1 0x311fe8;
    void addNormalSprite() = win inline, imac 0x381a80, m1 0x311eec {
        auto normalSprite = cocos2d::CCSprite::createWithSpriteFrameName(GauntletNode::frameForType(m_gauntletType).c_str());
        this->addChild(normalSprite);
        normalSprite->setPosition(this->getContentSize() / 2);
    }
    cocos2d::ccColor3B colorForType(GauntletType gauntletType) = win inline, m1 0x312314, imac 0x381e70 {
        switch (gauntletType) {
            case GauntletType::Fire: return { 255, 200, 200 };
            case GauntletType::Lava: return { 200, 200, 200 };
            case GauntletType::Bonus: return { 225, 225, 100 };
            case GauntletType::Monster: return { 200, 200, 200 };
            case GauntletType::Doom: return { 200, 200, 200 };
            default: return { 225, 225, 225 };
        }
    }
    bool init(GauntletType gauntletType, bool locked) = win inline, m1 0x311e44, imac 0x381a00 {
        if (!CCNode::init()) return false;

        m_gauntletType = gauntletType;
        this->setContentSize({ 60.0f, 60.0f });
        this->toggleLockedSprite(locked);

        return true;
    }
    float luminanceForType(GauntletType gauntletType) = win inline, imac 0x381e40, m1 0x3122f4 {
        switch (gauntletType) {
            case GauntletType::Fire: return 1.1f;
            case GauntletType::Ice: return 0.9f;
            case GauntletType::Shadow: return 1.6f;
            case GauntletType::Lava: return 1.3f;
            case GauntletType::Bonus: return 0.9f;
            case GauntletType::Chaos: return 1.5f;
            case GauntletType::Spike: return 0.8f;
            default: return 1.0f;
        }
    }
    void toggleLockedSprite(bool) = win 0x1f5310, imac 0x381930, m1 0x311d70;

    GauntletType m_gauntletType;
}

[[link(android)]]
class GhostTrailEffect : cocos2d::CCNode {
    // virtual ~GhostTrailEffect();
    //GhostTrailEffect() = ios 0x305d20;

    static GhostTrailEffect* create() = win 0x69fd0, m1 0x5148f0, imac 0x5e22a0;

    virtual bool init() = win 0x6a0b0, imac 0x5e2370, m1 0x5149c0, ios 0x2f4eec;
    virtual void draw() = m1 0x514f28, imac 0x5e2920, ios 0x2f5450 {}

    void doBlendAdditive() = win inline, m1 0x514f18, imac 0x5e2900 {
        m_blendFunc.src = GL_SRC_ALPHA;
        m_blendFunc.dst = GL_ONE;
    }
    void runWithTarget(cocos2d::CCSprite*, float, float, float, float, bool) = win inline, m1 0x514a1c, imac 0x5e23d0, ios 0x2f4f48 {
        m_iconSprite = p0;
        m_snapshotInterval = p1;
        m_fadeInterval = p2;
        if (p4 <= .1f) p4 = .1f;
        m_scaleTwice = p5;
        m_ghostScale = p4;
        this->schedule(schedule_selector(GhostTrailEffect::trailSnapshot), p1);
        if (p3 > 0.f) this->runAction(cocos2d::CCSequence::create(
            cocos2d::CCDelayTime::create(p3),
            cocos2d::CCCallFunc::create(this, callfunc_selector(GhostTrailEffect::stopTrail)),
            nullptr
        ));
    }
    void stopTrail() = win inline, m1 0x514ec8, imac 0x5e28c0, ios 0x2f53f0 {
        this->unscheduleAllSelectors();
        this->stopAllActions();
        this->removeMeAndCleanup();
    }
    void trailSnapshot(float) = win 0x6a110, m1 0x514ad0, imac 0x5e2470, ios 0x2f4ff8;

    float m_snapshotInterval;
    float m_fadeInterval;
    float m_ghostScale;
    bool m_scaleTwice;
    float m_playerScale;
    cocos2d::_ccBlendFunc m_blendFunc;
    cocos2d::CCSprite* m_iconSprite;
    PlayerObject* m_playerObject;
    cocos2d::CCLayer* m_objectLayer;
    float m_opacity;
    void* m_delegate;
    cocos2d::ccColor3B m_color;
    cocos2d::CCPoint m_position;
    bool m_unk194;
}

[[link(android)]]
class GJAccountBackupDelegate {
    virtual void backupAccountFinished() {}
    virtual void backupAccountFailed(BackupAccountError, int) {}
}

[[link(android)]]
class GJAccountDelegate {
    virtual void accountStatusChanged() {}
}

[[link(android)]]
class GJAccountLoginDelegate {
    virtual void loginAccountFinished(int, int) {}
    virtual void loginAccountFailed(AccountError) {}
}

[[link(android)]]
class GJAccountManager : cocos2d::CCNode {
    // virtual ~GJAccountManager();
    // GJAccountManager();

    static GJAccountManager* get() {
        return GJAccountManager::sharedState();
    }

    static GJAccountManager* sharedState() = ios 0x3977dc, win 0x1faf50, imac 0xcf8d0, m1 0xb8518;

    virtual bool init() = win 0x1fb510, imac 0xd2340, m1 0xbab8c, ios 0x399040;

    void addDLToActive(char const* tag, cocos2d::CCObject* object) = win inline, m1 0xbad04, imac 0xd24b0, ios 0x3990e4 {
        m_activeDownloads->setObject(object, tag);
    }
    void addDLToActive(char const* tag) = win inline, m1 0xbacd4, imac 0xd2480, ios inline {
        this->addDLToActive(tag, cocos2d::CCNode::create());
    }
    bool backupAccount(gd::string url) = win 0x1fc8f0, m1 0xbbce4, imac 0xd34c0, ios 0x3999b0;
    void dataLoaded(DS_Dictionary* dict) = win inline, m1 0xbcd78, imac 0xd4730, ios 0x39a538 {
        m_username = dict->getStringForKey("GJA_001");
        m_accountID = dict->getIntegerForKey("GJA_003");
        m_password = dict->getStringForKey("GJA_002");
        m_GJP2 = dict->getStringForKey("GJA_005");
        if (!m_password.empty() && m_GJP2.empty()) {
            m_GJP2 = this->getShaPassword(m_password);
        }
    }
    void encodeDataTo(DS_Dictionary* dict) = win inline, imac 0xd46d0, m1 0xbcd20, ios 0x39a4e0 {
        dict->setStringForKey("GJA_001", m_username);
        dict->setIntegerForKey("GJA_003", m_accountID);
        dict->setStringForKey("GJA_005", m_GJP2);
    }
    void firstSetup() = win inline, m1 0xbcd1c, imac 0xd46c0, ios inline {}
    bool getAccountBackupURL() = win 0x1fc2d0, m1 0xbb9b0, imac 0xd3180, ios 0x3997ec;
    bool getAccountSyncURL() = win 0x1fd230, m1 0xbc19c, imac 0xd3a10, ios 0x399d24;
    cocos2d::CCObject* getDLObject(char const* tag) = win inline, m1 0xbabe0, imac 0xd2390, ios 0x399078 {
        return m_activeDownloads->objectForKey(tag);
    }
    gd::string getShaPassword(gd::string password) = win 0x1feee0, m1 0xbcf34, imac 0xd48f0, ios 0x39a6e4;
    void handleIt(bool success, gd::string response, gd::string tag, GJHttpType type) = win 0x1fb2c0, m1 0xb8918, imac 0xcfd00, ios 0x397ad0;
    void handleItDelayed(bool success, gd::string response, gd::string tag, GJHttpType type) = m1 0xb8f70, imac 0xd0500;
    void handleItND(cocos2d::CCNode* node, void* data) = m1 0xb90dc, imac 0xd0640;
    bool isDLActive(char const* tag) = win inline, m1 0xbabc4, imac 0xd2370, ios inline {
        return this->getDLObject(tag) != nullptr;
    }
    void linkToAccount(gd::string username, gd::string gjp2, int accountID, int userID) = win 0x1fe820, m1 0xbc794, imac 0xd4020, ios 0x39a0c8;
    void loginAccount(gd::string username, gd::string gjp2) = win 0x1fba80, m1 0xbb1b8, imac 0xd2940, ios 0x399368;
    void onBackupAccountCompleted(gd::string response, gd::string tag) = win 0x1fce20, m1 0xb9664, imac 0xd0bc0, ios 0x3982a0;
    void onGetAccountBackupURLCompleted(gd::string response, gd::string tag) = win 0x1fc620, m1 0xba684, imac 0xd1e40, ios 0x398cc8;
    void onGetAccountSyncURLCompleted(gd::string response, gd::string tag) = win 0x1fd570, m1 0xba8b0, imac 0xd2050, ios 0x398e3c;
    void onLoginAccountCompleted(gd::string response, gd::string tag) = win 0x1fbee0, m1 0xb92e4, imac 0xd0820, ios 0x3980b8;
    void onProcessHttpRequestCompleted(cocos2d::extension::CCHttpClient* client, cocos2d::extension::CCHttpResponse* response) = win 0x1fb1c0, m1 0xb871c, imac 0xcfb40, ios 0x3979b8;
    void onRegisterAccountCompleted(gd::string response, gd::string tag) = win 0x1fb8f0, m1 0xb9208, imac 0xd0760, ios 0x398000;
    void onSyncAccountCompleted(gd::string response, gd::string tag) = win 0x1fdab0, imac 0xd0e80, m1 0xb9924, ios 0x39847c;
    void onUpdateAccountSettingsCompleted(gd::string response, gd::string tag) = win 0x1fed80, m1 0xba5c8, imac 0xd1da0, ios 0x398c3c;
    void ProcessHttpRequest(gd::string url, gd::string params, gd::string tag, GJHttpType type) = win 0x1fb070, m1 0xb85c4, imac 0xcf9a0, ios 0x397860;
    void registerAccount(gd::string response, gd::string tag, gd::string data) = win 0x1fb620, m1 0xbaf14, imac 0xd2690, ios 0x3991b4;
    void removeDLFromActive(char const* tag) = win inline, m1 0xbae10, imac 0xd25b0, ios 0x399150 {
        m_activeDownloads->removeObjectForKey(tag);
    }
    bool syncAccount(gd::string url) = win 0x1fd840, m1 0xbc4d8, imac 0xd3d60, ios 0x399ee8;
    void unlinkFromAccount() = win inline, m1 0xbc8b0, imac 0xd4150, ios 0x39a1e4 {
        m_GJP2 = "";
        m_password = "";
        m_username = "";
        m_accountID = 0;
        auto gameManager = GameManager::sharedState();
        gameManager->m_shouldLoadUnlockValueKeeper = true;
        gameManager->firstLoad();
        gameManager->m_shouldLoadUnlockValueKeeper = false;
        LocalLevelManager::sharedState()->firstLoad();
        if (m_accountDelegate) m_accountDelegate->accountStatusChanged();
        gameManager->accountStatusChanged();
    }
    void updateAccountSettings(int messageStatus, int friendRequestStatus, int commentStatus, gd::string youtube, gd::string twitter, gd::string twitch) = win 0x1fea30, m1 0xbc948, imac 0xd4200, ios 0x39a27c;

    cocos2d::CCDictionary* m_activeDownloads;
    gd::string m_username;
    int m_accountID;
    int m_unkInt1; // likely VRS for account ID but unimplemented
    int m_unkInt2; // likely VRS for account ID but unimplemented
    gd::string m_GJP2;
    GJAccountRegisterDelegate* m_accountRegisterDelegate;
    GJAccountLoginDelegate* m_accountLoginDelegate;
    GJAccountDelegate* m_accountDelegate;
    GJAccountBackupDelegate* m_backupDelegate;
    GJAccountSyncDelegate* m_syncDelegate;
    GJAccountSettingsDelegate* m_accountSettingsDelegate;
    int m_gameManagerSize;
    int m_localLevelsSize;
    gd::string m_password;
}

[[link(android)]]
class GJAccountRegisterDelegate {
    virtual void registerAccountFinished() {}
    virtual void registerAccountFailed(AccountError) {}
}

[[link(android)]]
class GJAccountSettingsDelegate {
    virtual void updateSettingsFinished() {}
    virtual void updateSettingsFailed() {}
}

[[link(android)]]
class GJAccountSettingsLayer : FLAlertLayer, TextInputDelegate {
    GJAccountSettingsLayer() {
        m_accountID = 0;
        m_messageStatus = 0;
        m_friendStatus = 0;
        m_commentHistoryStatus = 0;
        m_youtubeInput = nullptr;
        m_twitterInput = nullptr;
        m_twitchInput = nullptr;
        m_messageSettings = nullptr;
        m_friendRequestSettings = nullptr;
        m_commentSettings = nullptr;
    }
    ~GJAccountSettingsLayer() = win inline, m1 0x235ba8, imac 0x28d120, ios 0x2d56c4 {
        CC_SAFE_RELEASE(m_messageSettings);
        CC_SAFE_RELEASE(m_friendRequestSettings);
        CC_SAFE_RELEASE(m_commentSettings);
    }

    static GJAccountSettingsLayer* create(int a1) = win inline, imac 0x28d2c0, m1 0x235cbc, ios 0x2d57b8 {
        GJAccountSettingsLayer* pRet = new GJAccountSettingsLayer();
        if (pRet && pRet->init(a1)) {
            pRet->autorelease();
            return pRet;
        }

        CC_SAFE_DELETE(pRet);

        return nullptr;
    }

    virtual void keyBackClicked() = win 0x28d1f0, imac 0x28f970, m1 0x238098, ios 0x2d7798;
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, imac 0x28f380, m1 0x237af0, ios 0x2d734c;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, imac 0x28f440, m1 0x237bc0, ios 0x2d73b8;

    CCMenuItemToggler* createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, float, float) = m1 0x237388, imac 0x28ec10;
    bool init(int) = win 0x28a850, m1 0x235dd4, imac 0x28d440, ios 0x2d5888;
    void onClose(cocos2d::CCObject* sender) = m1 0x237744, imac 0x28ef80;
    void onCommentSetting(cocos2d::CCObject* sender);
    void onFriendRequests(cocos2d::CCObject* sender);
    void onMessageSetting(cocos2d::CCObject* sender);
    void onUpdate(cocos2d::CCObject* sender) = win 0x28cd70, m1 0x23785c, imac 0x28f0a0, ios 0x2d70f8;
    TodoReturn updateScoreValues();

    int m_accountID;
    int m_messageStatus;
    int m_friendStatus;
    int m_commentHistoryStatus;
    gd::string m_youtubeURL;
    gd::string m_twitterURL;
    gd::string m_twitchURL;
    CCTextInputNode* m_youtubeInput;
    CCTextInputNode* m_twitterInput;
    CCTextInputNode* m_twitchInput;
    cocos2d::CCArray* m_messageSettings;
    cocos2d::CCArray* m_friendRequestSettings;
    cocos2d::CCArray* m_commentSettings;
}

[[link(android)]]
class GJAccountSyncDelegate {
    virtual void syncAccountFinished() {}
    virtual void syncAccountFailed(BackupAccountError, int) {}
}

[[link(android)]]
class GJActionManager : cocos2d::CCNode {
    GJActionManager() {
        m_internalActions = nullptr;
    }
    ~GJActionManager() = win inline, m1 0x521940, imac 0x5f1cf0, ios 0x2fe564 {
        CC_SAFE_RELEASE(m_internalActions);
    }

    static GJActionManager* create() = win inline, m1 0x5219f8, imac 0x5f1dc0, ios 0x2fe5b8 {
        auto ret = new GJActionManager();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x1fb510, m1 0x521a8c, imac 0x5f1e50, ios 0x2fe634;

    cocos2d::CCAction* getInternalAction(int);
    void runInternalAction(cocos2d::CCAction*, cocos2d::CCNode*) = m1 0x521ac4, imac 0x5f1e80;
    void stopAllInternalActions();
    void stopInternalAction(int id) = win inline, m1 0x521b0c, imac 0x5f1ed0, ios 0x2fe6a8 {
        if (auto action = static_cast<cocos2d::CCAction*>(m_internalActions->objectForKey(id))) {
            action->stop();
            m_internalActions->removeObjectForKey(id);
        }
    }
    void updateInternalActions(float, bool);

    cocos2d::CCDictionary* m_internalActions;
}

[[link(android)]]
class GJAssetDownloadAction {
    int m_id;
    GJAssetType m_assetType;
    int m_status;
}

[[link(android), depends(GJGameState), depends(PlayerButtonCommand)]]
class GJBaseGameLayer : cocos2d::CCLayer, TriggerEffectDelegate {
    GJBaseGameLayer() = win 0x2c7b10;
    ~GJBaseGameLayer() = win 0x200540, m1 0xe02d8, imac 0xfd6a0, ios 0x1dae3c;
    // GJBaseGameLayer() = ios 0x1256b4;

    static GJBaseGameLayer* get() {
        return GameManager::get()->m_gameLayer;
    }

    virtual void update(float) = win 0x232100, imac 0x141f90, m1 0x119128, ios 0x200aec;
    virtual bool init() = win 0x201cc0, imac 0xfe730, m1 0xe0fb8, ios 0x1db7ec;
    virtual void visit() = win 0x240950, imac 0x152a70, m1 0x126ac4, ios 0x20a398;
    virtual void postUpdate(float) {}
    virtual void checkForEnd() {}
    virtual void testTime() {}
    virtual void updateVerifyDamage() {}
    virtual void updateAttemptTime(float) {}
    virtual void updateVisibility(float) {}
    virtual void playerTookDamage(PlayerObject*) {}
    virtual float opacityForObject(GameObject*) = win 0x231ce0, imac 0x141d40, m1 0x118f10, ios 0x200918;
    virtual void addToSpeedObjects(EffectGameObject*) {}
    virtual void objectsCollided(int, int) = win 0x213c90, imac 0x11b120, m1 0xf9cf8, ios 0x1ecfb0;
    virtual void updateColor(cocos2d::ccColor3B& color, float fadeTime, int colorID, bool blending, float opacity, cocos2d::ccHSVValue& copyHSV, int colorIDToCopy, bool copyOpacity, EffectGameObject* callerObject, int unk1, int unk2) = win 0x21e5c0, imac 0x12c570, m1 0x1076d8, ios 0x1f3a00;
    virtual void toggleGroupTriggered(int group, bool activate, gd::vector<int> const& remapKeys, int triggerID, int controlID) = win 0x21e7a0, imac 0x12c710, m1 0x107844, ios 0x1f3b6c;
    virtual void spawnGroup(int group, bool ordered, double delay, gd::vector<int> const& remapKeys, int triggerID, int controlID) = win 0x2156a0, imac 0x11c510, m1 0xfad48, ios 0x1edbbc;
    virtual void spawnObject(GameObject* object, double delay, gd::vector<int> const& remapKeys) = win 0x215b50, imac 0x11c8b0, m1 0xfb108, ios 0x1ede3c;
    virtual void activateEndTrigger(int, bool, bool) {}
    virtual void activatePlatformerEndTrigger(EndTriggerGameObject*, gd::vector<int> const&) {}
    virtual void toggleGlitter(bool) {}
    virtual void destroyPlayer(PlayerObject*, GameObject*) {}
    virtual void updateDebugDraw() = win 0x20b4d0, imac 0x111270, m1 0xf0e34, ios 0x1e5dcc;
    virtual void addToSection(GameObject*) = win 0x221220, imac 0x12e930, m1 0x1096bc, ios 0x1f5108;
    virtual void addToGroup(GameObject*, int, bool) = win 0x21ec20, imac 0x12cca0, m1 0x107d50, ios 0x1f3fb0;
    virtual void removeFromGroup(GameObject*, int) = win 0x21eda0, imac 0x12ced0, m1 0x107fa0, ios 0x1f4158;
    virtual void updateObjectSection(GameObject*) = win 0x222c70, imac 0x130780, m1 0x10ae68, ios 0x1f60bc;
    virtual void updateDisabledObjectsLastPos(cocos2d::CCArray*) {}
    virtual void toggleGroundVisibility(bool) = m1 0x116b60, imac 0x13efe0, ios 0x1fef2c {}
    virtual void toggleMGVisibility(bool) = m1 0x116b64, imac 0x13eff0, ios 0x1fef30 {}
    virtual void toggleHideAttempts(bool) = m1 0x116b68, imac 0x13f000, ios 0x1fef34 {}
    virtual float timeForPos(cocos2d::CCPoint position, int order, int channel, bool songTriggers, int id) { return 0.f; }
    virtual cocos2d::CCPoint posForTime(float time) { return { 0.f, 0.f }; }
    virtual void resetSPTriggered() {}
    virtual void updateScreenRotation(float, bool, bool, float, int, float, int, int) = win 0x230720, imac 0x13f1a0, m1 0x116cb0, ios 0x1ff018;
    virtual void reverseDirection(EffectGameObject*) = win 0x212c80, m1 0xf8e6c, imac 0x11a1f0, ios 0x1ec3d4;
    virtual void rotateGameplay(RotateGameplayGameObject*) = win 0x212ce0, imac 0x11a230, m1 0xf8eb0, ios 0x1ec418;
    virtual void didRotateGameplay() {}
    virtual void updateTimeWarp(float) = win 0x230a00, imac 0x13f940, m1 0x11730c, ios 0x1ff468;
    virtual void updateTimeWarp(GameObject*, float) = win 0x2309f0, m1 0x117300, imac 0x13f920, ios 0x1ff45c;
    virtual void applyTimeWarp(float) = win 0x230a50, imac 0x13f990, m1 0x11734c, ios 0x1ff4a4;
    virtual void playGravityEffect(bool) {}
    virtual void manualUpdateObjectColors(GameObject*) {}
    virtual cocos2d::CCParticleSystemQuad* createCustomParticle(gd::string const&, cocos2d::ParticleStruct const&, int, bool) = win 0x23a7f0, imac 0x14cf30, m1 0x122170, ios 0x206ed8;
    virtual cocos2d::CCParticleSystemQuad* claimCustomParticle(gd::string const&, cocos2d::ParticleStruct const&, int, int, int, bool) = win 0x23aaf0, imac 0x14d2c0, m1 0x122520, ios 0x207108;
    virtual void unclaimCustomParticle(gd::string const&, cocos2d::CCParticleSystemQuad*) = win 0x23acf0, imac 0x14d4c0, m1 0x122760, ios 0x207348;
    virtual void activatedAudioTrigger(SFXTriggerGameObject*) = win 0x23c8a0, imac 0x14e3e0, m1 0x123474, ios 0x207e14;
    virtual void checkpointActivated(CheckpointGameObject*) = win 0x240530, imac 0x152790, m1 0x126808, ios 0x20a194;
    virtual void flipArt(bool) = m1 0x126804, imac 0x152780, ios 0x20a190 {}
    virtual void addKeyframe(KeyframeGameObject*) = win 0x22e420, imac 0x13b940, m1 0x113f9c, ios 0x1fd18c;
    virtual void updateTimeLabel(int, int, bool) {}
    virtual void checkSnapshot() {}
    virtual void toggleProgressbar() {}
    virtual void toggleInfoLabel() {}
    virtual void removeAllCheckpoints() {}
    virtual void toggleMusicInPractice() {}

    void activateCustomRing(RingObject*);
    void activatedAudioTrigger(SFXTriggerGameObject*, float) = ios 0x207e20, imac 0x14e400, m1 0x123480, win 0x23c8c0;
    void activateEventTrigger(EventLinkTrigger*, gd::vector<int> const&) = win 0x22c9c0;
    void activateItemCompareTrigger(ItemTriggerGameObject*, gd::vector<int> const&) = win 0x22eed0;
    void activateItemEditTrigger(ItemTriggerGameObject*) = win 0x22eaf0, imac 0x13c800, m1 0x114c0c;
    void activateObjectControlTrigger(ObjectControlGameObject*);
    void activatePersistentItemTrigger(ItemTriggerGameObject* trigger) = win 0x22f2e0;
    void activatePlayerControlTrigger(PlayerControlGameObject*);
    void activateResetTrigger(EffectGameObject*);
    void activateSFXEditTrigger(SFXTriggerGameObject*) = win 0x23b8c0;
    void activateSFXTrigger(SFXTriggerGameObject*) = win 0x23b6c0, m1 0x11f100, imac 0x149850, ios 0x204ff0;
    void activateSongEditTrigger(SongTriggerGameObject*) = win 0x23b3b0, m1 0x11eec4, imac 0x1495f0, ios 0x204e8c;
    void activateSongTrigger(SongTriggerGameObject*) = win 0x23b030, m1 0x11ec1c, imac 0x1492c0;
    void activateTimerTrigger(TimerTriggerGameObject*, gd::vector<int> const&) = win 0x22f700;
    void addAreaEffect(EnterEffectObject*, gd::vector<EnterEffectInstance>*, GJAreaActionType) = win 0x2221a0;
    void addCustomEnterEffect(EnterEffectObject*, bool);
    bool addGuideArt(GameObject*) = win 0x23f940, imac 0x151740, m1 0x125938, ios 0x2097dc;
    void addObjectCounter(LabelGameObject*);
    TodoReturn addPickupTrigger(CountTriggerGameObject*);
    TodoReturn addPoints(int);
    void addProximityVolumeEffect(int, int, SFXTriggerGameObject*) = win 0x23bea0;
    void addRemapTargets(gd::set<int>&) = m1 0xe7178, imac 0x105880, win 0x2088a0;
    void addToGroupParents(GameObject*) = m1 0x108628, imac 0x12d580;
    void addToGroups(GameObject*, bool) = win 0x21eb90, imac 0x12cc30, m1 0x107cdc, ios 0x1f3f3c;
    TodoReturn addToObjectsToShow(GameObject*);
    void addUIObject(GameObject*) = win 0x220c70;
    void animateInDualGroundNew(GameObject*, float, bool, float) = win 0x20deb0, m1 0xf3ca8, imac 0x1144f0;
    TodoReturn animateInGroundNew(bool, float, bool);
    void animateOutGroundNew(bool) = m1 0xf3f2c, imac 0x1147e0;
    TodoReturn animatePortalY(float, float, float, float);
    void applyLevelSettings(GameObject*) = m1 0x11da0c, imac 0x147ac0;
    void applyRemap(EffectGameObject*, gd::vector<int> const&, gd::unordered_map<int, int>&) = win 0x215ce0;
    void applySFXEditTrigger(int, int, SFXTriggerGameObject*) = win 0x23bba0;
    void applyShake(cocos2d::CCPoint&) = win inline, m1 0x11fba4, imac 0x14a4a0, ios 0x20574c {
        if (m_gameState.m_unkUint64_1 < 0.0 || m_gameState.m_unkUint16 <= 0.f && m_gameState.m_unkUint16 < m_gameState.m_totalTime - m_gameState.m_unkUint64_1) {
            m_gameState.m_unkUint64_1 = m_gameState.m_totalTime;
            auto xFactor = 0.f;
            auto yFactor = 0.f;
            if (m_staticCameraShake) {
                xFactor = ((float)rand() / (float)RAND_MAX) > .5f ? 1.f : -1.f;
                yFactor = ((float)rand() / (float)RAND_MAX) > .5f ? 1.f : -1.f;
            }
            else {
                xFactor = ((float)rand() / (float)RAND_MAX) * 2.f - 1.f;
                yFactor = ((float)rand() / (float)RAND_MAX) * 2.f - 1.f;
            }
            m_gameState.m_unkPoint34.x = xFactor * m_gameState.m_unkUint15;
            m_gameState.m_unkPoint34.y = yFactor * m_gameState.m_unkUint15;
        }

        p0.x += m_gameState.m_unkPoint34.x;
        p0.y += m_gameState.m_unkPoint34.y;
    }
    void assignNewStickyGroups(cocos2d::CCArray*) = win 0x21f990, imac 0x12dd80, ios 0x1f4a50, m1 0x108d18;
    TodoReturn asyncBGLoaded(int);
    TodoReturn asyncGLoaded(int);
    TodoReturn asyncMGLoaded(int);
    TodoReturn atlasValue(int);
    void bumpPlayer(PlayerObject*, EffectGameObject*) = ios 0x1eab1c, win 0x2124f0, imac 0x117ce0, m1 0xf6b04;
    TodoReturn buttonIDToButton(int);
    TodoReturn calculateColorGroups();
    
    void cameraMoveX(float value, float duration, float rate, bool) {
        float x = m_gameState.m_cameraPosition.x;
        m_gameState.m_unkBool4 = true;
        m_gameState.tweenValue(x, value, 1, duration, 1, rate, -1, -1);
    }

    void cameraMoveY(float value, float duration, float rate, bool force) {
        if (!m_gameState.m_unkBool5 || m_gameState.m_unkInt13 != value || force) {
            float y = m_gameState.m_cameraPosition.y;
            m_gameState.m_unkBool5 = true;
            m_gameState.m_unkInt13 = value;
            m_gameState.tweenValue(y, value, 2, duration, 1, rate, -1, -1);
        }
    }

    bool canBeActivatedByPlayer(PlayerObject*, EffectGameObject*) = ios 0x1ea898, win 0x2123e0, imac 0x117880, m1 0xf6710;
    bool canProcessSFX(SFXTriggerState&, gd::unordered_map<int, int>&, gd::unordered_map<int, float>&, gd::vector<SFXTriggerState>&) = win 0x23cc10, m1 0x12379c, imac 0x14e7d0, ios 0x20811c;
    TodoReturn canTouchObject(GameObject*);
    void checkCameraLimitAfterTeleport(PlayerObject*, float) = ios 0x1e5b9c, win 0x2340b0, imac 0x110df0, m1 0xf0a1c;
    TodoReturn checkCollision(int, int);
    void checkCollisionBlocks(EffectGameObject*, gd::vector<EffectGameObject*>*, int) = win 0x2139e0;
    int checkCollisions(PlayerObject*, float, bool) = ios 0x1e87c8, win 0x20e330, imac 0x114fe0, m1 0xf45f0;
    void checkRepellPlayer() = ios 0x201988, win 0x233de0, m1 0x11a550, imac 0x143830;
    void checkSpawnObjects() = ios 0x1ed910, win 0x215410, m1 0xfaa7c, imac 0x11c1f0;
    cocos2d::CCPoint claimMoveAction(int, bool) = win 0x228900;
    TodoReturn claimParticle(gd::string, int);
    void claimRotationAction(int, int, float&, float&, bool, bool) = win 0x2286c0;
    void clearActivatedAudioTriggers() = win inline, ios 0x204818, imac 0x148ac0, m1 0x11e644 {
        m_gameState.m_songChannelStates.clear();
        m_gameState.m_songTriggerStateVectors.clear();
    }
    TodoReturn clearPickedUpItems();
    void collectedObject(EffectGameObject*) = win inline, m1 0x114340, imac 0x13bd30, ios 0x1fd4b8 {
        m_effectManager->addCountToItem(p0->m_itemID, p0->m_subtractCount ? -1 : 1);
        this->updateCounters(p0->m_itemID, m_effectManager->countForItem(p0->m_itemID));
    }
    void collisionCheckObjects(PlayerObject*, gd::vector<GameObject*>*, int, float) = win 0x20f480, imac 0x116130, m1 0xf5554, ios 0x1e9420;
    TodoReturn controlAdvancedFollowCommand(AdvancedFollowTriggerObject*, int, GJActionCommand);
    TodoReturn controlAreaEffect(EnterEffectObject*, gd::vector<EnterEffectInstance>*, GJActionCommand);
    TodoReturn controlAreaEffectWithID(int, int, GJActionCommand);
    TodoReturn controlDynamicCommand(EffectGameObject*, int, gd::vector<DynamicObjectAction>&, GJActionCommand);
    TodoReturn controlDynamicMoveCommand(EffectGameObject*, int, GJActionCommand);
    TodoReturn controlDynamicRotateCommand(EffectGameObject*, int, GJActionCommand);
    TodoReturn controlEventLink(int, int, GJActionCommand);
    TodoReturn controlGradientTrigger(GradientTriggerObject*, GJActionCommand);
    void controlTriggersInGroup(int, GJActionCommand) = win 0x218de0;
    void controlTriggersWithControlID(int, GJActionCommand) = win 0x219370;
    static float convertToClosestDirection(float, float) = win 0x2295d0;
    void createBackground(int) = ios 0x1dea24, win 0x2064e0, imac 0x1030e0, m1 0xe4ed4;
    void createGroundLayer(int, int) = ios 0x1def60, win 0x206920, imac 0x103660, m1 0xe5410;
    void createMiddleground(int) = ios 0x1df0e8, win 0x2067a0, imac 0x103870, m1 0xe55f4;
    TodoReturn createNewKeyframeAnim();
    cocos2d::CCParticleSystemQuad* createParticle(int, char const*, int, cocos2d::tCCPositionType) = win 0x23a060, imac 0x14c650, m1 0x12165c, ios 0x2068c0;
    void createPlayer() = ios 0x1de6e4, win 0x205fd0, m1 0xe4b94, imac 0x102d80;
    void createPlayerCollisionBlock() = ios 0x1ec548, win 0x212e90, m1 0xf9014, imac 0x11a410;
    void createTextLayers() = ios 0x1e4644, win 0x209960, imac 0x10f2e0, m1 0xee828;
    TodoReturn damagingObjectsInRect(cocos2d::CCRect, bool);
    void destroyObject(GameObject*) = ios 0x1eb004, win 0x210bb0, imac 0x118390, m1 0xf71e8;
    void enterDualMode(GameObject*, bool) = imac 0x119720, m1 0xf84b0;
    void exitStaticCamera(bool exitX, bool exitY, float time, int easingType, float easingRate, bool smoothVelocity, float smoothVelocityMod, bool exitInstant) = win 0x2390e0;
    void flipFinished() = win inline, m1 0x11c834, imac 0x1466b0, ios 0x2036ac {
        m_player1->levelFlipFinished();
        if (m_gameState.m_isDualMode) m_player2->levelFlipFinished();
        m_gameState.m_unkBool11 = false;
        m_gameState.m_unkBool12 = false;
    }
    void flipGravity(PlayerObject*, bool, bool) = ios 0x1e7c68, win 0x20d640, imac 0x114040, m1 0xf3874;
    TodoReturn flipObjects();
    TodoReturn gameEventToString(GJGameEvent);
    void gameEventTriggered(GJGameEvent, int, int) = ios 0x1e5c54, win 0x22c8a0, imac 0x110ea0, m1 0xf0ae8;
    int generateEnterEasingBuffer(int, float) = win 0x209710, m1 0xee104, imac 0x10ea30, ios 0x1e421c;
    void generateEnterEasingBuffers(EnterEffectObject* object) = win inline, m1 0xee07c, imac 0x10e9a0, ios 0x1e41d8 {
        object->m_easingInBuffer = this->generateEnterEasingBuffer((int)object->m_easingInType, object->m_easingInRate);
        object->m_easingOutBuffer = this->generateEnterEasingBuffer((int)object->m_easingOutType, object->m_easingOutRate);
    }
    TodoReturn generatePickupAnimRandVal(GameObject*, float&, float&);
    void generateSpawnRemap() = win 0x218c00, m1 0xe7b50, imac 0x106400, ios 0x1e0ce0;
    void generateTargetGroups() = ios 0x1e219c, win 0x21fab0, m1 0xea698, imac 0x109d00;
    void generateVisibilityGroups() = ios 0x1e306c, imac 0x10c170, m1 0xec074, win 0x22c1e0;
    TodoReturn getActiveOrderSpawnObjects();
    float getAreaObjectValue(EnterEffectInstance*, GameObject*, cocos2d::CCPoint&, bool&) = win 0x222d90;
    float getBumpMod(PlayerObject* player, int type) = win inline, m1 0xf87c4, imac 0x119a80, ios 0x1ec028 {
        if (static_cast<GameObjectType>(type) == GameObjectType::PinkJumpPad) {
            if (player->m_isShip) return .35f;
            if (player->m_isBird) return .4f;
            if (player->m_isBall || player->m_isSpider) return .7f;
            return .65f;
        }
        if (static_cast<GameObjectType>(type) == GameObjectType::RedJumpPad) {
            if (player->m_isShip) return (player->m_vehicleSize < 1.f) ? .95f : .63f;            
            if (player->m_isBird) return (player->m_vehicleSize < 1.f) ? .98f : .6f;
            return 1.25f;
        }
        return 1.f;
    }
    float getCameraEdgeValue(int) = win inline, ios 0x1ff2e4, imac 0x13f630, m1 0x117070 {
        switch (p0 - 1) {
            case 0: {
                if (auto mainObject = this->tryGetMainObject(m_gameState.m_cameraEdgeValue0)) {
                    return mainObject->getRealPosition().x;
                }
                return 0.f;
            }
            case 1: {
                if (auto mainObject = this->tryGetMainObject(m_gameState.m_cameraEdgeValue1)) {
                    return mainObject->getRealPosition().x;
                }
                return 0.f;
            }
            case 2: {
                if (auto mainObject = this->tryGetMainObject(m_gameState.m_cameraEdgeValue2)) {
                    return mainObject->getRealPosition().y;
                }
                return 0.f;
            }
            case 3: {
                if (auto mainObject = this->tryGetMainObject(m_gameState.m_cameraEdgeValue3)) {
                    return mainObject->getRealPosition().y;
                }
                return 0.f;
            }
            default: {
                return 0.f;
            }
        }
    }
    TodoReturn getCapacityString();
    TodoReturn getCenterGroupObject(int, int);
    TodoReturn getCustomEnterEffects(int, bool);
    float getEasedAreaValue(GameObject*, EnterEffectInstance*, float, bool, int) = win 0x222f80;
    TodoReturn getEnterEasingKey(int, float);
    TodoReturn getEnterEasingValue(float, int, float, int);
    cocos2d::CCPoint getFollowSpeedVal(GameObject*, int, int, float, float) = win 0x229670;
    float getGroundHeight(PlayerObject*, int);
    float getGroundHeightForMode(int) = win 0x20c890, m1 0xf2104, imac 0x112730, ios inline {
        while (true) {
            switch (p0) {
                case 5: case 19: case 26: case 41: {
                    return 300.f;
                }
                case 16: {
                    return 240.f;
                }
                case 23: case 24: {
                    p0 = m_gameState.m_dualRelated;
                    if (p0 == 23 || p0 == 24) {
                        return 270.f;
                    }
                    break;
                }
            }
        }
        return 270.f;
    }
    cocos2d::CCArray* getGroup(int) = ios 0x1e39cc, imac 0x10d760, m1 0xed194, win 0x21eed0;
    GameObject* getGroupParent(int groupId) {
        return static_cast<GameObject*>(m_parentGroupsDict->objectForKey(groupId));
    }
    TodoReturn getGroupParentsString(GameObject*);
    double getItemValue(int, int) = win 0x22ea60;
    float getMaxPortalY() = ios 0x1e8750, imac 0x114f30, m1 0xf4544, win 0x20e2b0;
    float getMinDistance(cocos2d::CCPoint, cocos2d::CCArray*, float, int) = win 0x23c430, m1 0x12308c, imac 0x14def0, ios 0x207a48;
    float getMinPortalY() = ios 0x1e8680, imac 0x114e50, m1 0xf4468, win 0x20e1d0;
    float getModifiedDelta(float) = ios 0x200a54, win 0x232060, imac 0x141ee0, m1 0x119084;
    TodoReturn getMoveTargetDelta(EffectGameObject*, bool);
    cocos2d::CCArray* getOptimizedGroup(int groupID) = ios 0x1f4024, imac 0x12cd90, m1 0x107e44, win inline {
        groupID = std::clamp(groupID, 0, 9999);
        auto group = m_optimizedGroups[groupID];
        if (group) return group;
        group = cocos2d::CCArray::create();
        m_optimizedGroupDict->setObject(group, groupID);
        m_optimizedGroups[groupID] = group;
        return group;
    }
    PlayerObject* getOtherPlayer(PlayerObject*) = m1 0xf228c, imac 0x1128b0;
    TodoReturn getParticleKey(int, char const*, int, cocos2d::tCCPositionType);
    TodoReturn getParticleKey2(gd::string);
    TodoReturn getPlayerButtonID(int, bool);
    TodoReturn getPlayTimerFullSeconds();
    TodoReturn getPlayTimerMilli();
    TeleportPortalObject* getPortalTarget(TeleportPortalObject*);
    cocos2d::CCPoint getPortalTargetPos(TeleportPortalObject*, GameObject*, PlayerObject*);
    TodoReturn getRecordString();
    TodoReturn getRotateCommandTargets(EnhancedTriggerObject*, GameObject*&, GameObject*&, GameObject*&);
    cocos2d::CCPoint getSavedPosition(int, float) = win 0x213dc0;
    TodoReturn getScaledGroundHeight(float);
    TodoReturn getSingleGroupObject(int);
    TodoReturn getSpecialKey(int, bool, bool);
    cocos2d::CCArray* getStaticGroup(int groupID) = ios 0x1f4088, imac 0x12ce00, m1 0x107ebc, win inline {
        groupID = std::clamp(groupID, 0, 9999);
        auto group = m_staticGroups[groupID];
        if (group) return group;
        group = cocos2d::CCArray::create();
        m_staticGroupDict->setObject(group, groupID);
        m_staticGroups[groupID] = group;
        return group;
    }
    cocos2d::CCArray* getStickyGroup(int group) = win inline {
        return static_cast<cocos2d::CCArray*>(m_linkedGroupDict->objectForKey(group));
    }
    TodoReturn getTargetFlyCameraY(GameObject*);
    TodoReturn getTargetGroup(int, int);
    TodoReturn getTargetGroupOrigin(int, int);
    void gravBumpPlayer(PlayerObject* player, EffectGameObject* object) = win inline, ios 0x1eac54, imac 0x117ef0, m1 0xf6d28 {
        auto flip = player->m_isSideways ? !object->isFacingLeft() : !object->isFacingDown();
        if (player->m_isUpsideDown != flip && this->canBeActivatedByPlayer(player, object)) {
            if (object->m_isReverse) player->reversePlayer(object);
            if (!object->m_hasNoEffects) this->playGravityEffect(flip);
            player->m_lastPortalPos = object->getPosition() - cocos2d::CCPoint { 0.f, 10.f };
            object->activatedByPlayer(player);
            player->m_lastActivatedPortal = object;
            player->propellPlayer(.8f, object->m_hasNoEffects, 10);
            this->flipGravity(player, flip, true);
            player->m_padRingRelated = true;
            this->gameEventTriggered(GJGameEvent::GravityPad, 0, 0);
        }
    }
    void groupStickyObjects(cocos2d::CCArray*) = win 0x21f7b0;
    void handleButton(bool down, int button, bool isPlayer1) = ios 0x1fcb90, win 0x22e190, imac 0x13afc0, m1 0x1136ec;
    bool hasItem(int);
    bool hasUniqueCoin(EffectGameObject*) = ios 0x1eb0e8, win 0x211220, imac 0x118460, m1 0xf72cc;
    void increaseBatchNodeCapacity() = ios 0x1df834, imac 0x104150, m1 0xe5e08, win 0x2078e0;
    bool isFlipping() {
        return m_gameState.m_levelFlipping != 0.f && m_gameState.m_levelFlipping != 1.f;
    }
    bool isPlayer2Button(int);
    void lightningFlash(cocos2d::CCPoint to, cocos2d::ccColor3B color);
    void lightningFlash(cocos2d::CCPoint from, cocos2d::CCPoint to, cocos2d::ccColor3B color, float lineWidth, float duration, int displacement, bool flash, float opacity) = ios 0x1e5a24, win 0x240770, imac 0x110c50, m1 0xf089c;
    void loadGroupParentsFromString(GameObject* object, gd::string groupList) = win 0x21f4b0, m1 0x108974, imac 0x12d9a0, ios 0x1f47a8;
    void loadLevelSettings() = ios 0x203d78, win 0x234770, imac 0x147920, m1 0x11d8c0;
    void loadStartPosObject() = ios 0x1feaec, win 0x230000, imac 0x13e9f0, m1 0x116658;
    void loadUpToPosition(float position, int order, int channel) = win 0x2301a0;
    TodoReturn maxZOrderForShaderZ(int);
    TodoReturn minZOrderForShaderZ(int);
    TodoReturn modifyGroupPhysics(AdvancedFollowEditObject*, cocos2d::CCArray*);
    TodoReturn modifyObjectPhysics(AdvancedFollowEditObject*, GameObjectPhysics&);
    void moveAreaObject(GameObject*, float, float) = win 0x2257d0;
    void moveCameraToPos(cocos2d::CCPoint pos) {
        this->cameraMoveX(pos.x, 1.2f, 1.8f, false);
        this->cameraMoveY(pos.y, 1.2f, 1.8f, false);
    }
    void moveObject(GameObject*, double, double, bool);
    void moveObjects(cocos2d::CCArray*, double, double, bool) = win 0x228a70, m1 0x111020, imac 0x137c20, ios 0x1fb324;
    void moveObjectsSilent(int groupId, double dx, double dy) {
        auto group = this->getGroup(groupId);
        if (group != nullptr) {
            size_t count = group->count();

            // no ccarrayext in bindings :(

            for (size_t i = 0; i < count; i++) {
                auto obj = static_cast<GameObject*>(group->objectAtIndex(i));

                if (!obj->m_tempOffsetXRelated) {
                    obj->m_positionX += dx;
                }
                obj->m_positionY += dy;
                obj->dirtifyObjectRect();
                obj->dirtifyObjectPos();
                this->updateObjectSection(obj);
                obj->m_lastPosition.x = obj->m_positionX;
                obj->m_lastPosition.y = obj->m_positionY;
            }
        }

        m_effectManager->saveCompletedMove(groupId, dx, dy);
    }
    void moveObjectToStaticGroup(GameObject*) = win 0x22c060, m1 0x1133c0, imac 0x13ac40, ios 0x1fc900;
    TodoReturn objectIntersectsCircle(GameObject*, GameObject*);
    GJGameEvent objectTypeToGameEvent(int) = ios 0x1e804c, win 0x22ce10, m1 0xf3c84, imac 0x1144d0;
    void optimizeMoveGroups() = ios 0x1e109c, win 0x22b740, m1 0xe81a4, imac 0x106b60;
    void orderSpawnObjects() = ios 0x209744, imac 0x151690, m1 0x1258a0, win 0x23f7e0;
    cocos2d::CCNode* parentForZLayer(int zLayer, bool blending, int parentMode, int uiObject) = imac 0x10f720, win 0x209e30, ios 0x1e4a2c, m1 0xeec10;
    void pauseAudio() = ios 0x2009a4, win 0x231d60, m1 0x118fb0, imac 0x141de0;
    TodoReturn performMathOperation(double, double, int);
    TodoReturn performMathRounding(double, int);
    void pickupItem(EffectGameObject*) = ios 0x1eb1e4, win 0x210cd0, imac 0x118560, m1 0xf7400;
    TodoReturn playAnimationCommand(int, int);
    bool playerCircleCollision(PlayerObject*, GameObject*) = win 0x20c930;
    TodoReturn playerIntersectsCircle(PlayerObject*, GameObject*);
    void playerTouchedObject(PlayerObject*, GameObject*);
    void playerTouchedRing(PlayerObject*, RingObject*) = ios 0x1eadac, win 0x212960, imac 0x118040, m1 0xf6eb0;
    void playerTouchedTrigger(PlayerObject*, EffectGameObject*) = ios 0x1eae70, win 0x212a70, m1 0xf6f88, imac 0x1180f0;
    TodoReturn playerWasTouchingObject(PlayerObject*, GameObject*);
    void playerWillSwitchMode(PlayerObject*, GameObject*) = ios 0x1e7e38, win 0x20da30, imac 0x114200, m1 0xf3a44;
    void playExitDualEffect(PlayerObject*) = ios 0x1eb9b0, win 0x2119a0, m1 0xf7ff0, imac 0x119250;
    TodoReturn playFlashEffect(float, int, float);
    void playKeyframeAnimation(KeyframeAnimTriggerObject*, gd::vector<int> const&) = win 0x2126e0;
    void playSpeedParticle(float timeMod) = win inline, m1 0x121058, imac 0x14c000, ios 0x20656c {
        if (GameManager::sharedState()->m_performanceMode || m_skipArtReload) return;
        const char* particleFile;
        if (timeMod == .7f) particleFile = "speedEffect_slow.plist";
        else if (timeMod == 1.1f) particleFile = "speedEffect_fast.plist";
        else if (timeMod == 1.3f) particleFile = "speedEffect_vfast.plist";
        else if (timeMod == 1.6f) particleFile = "speedEffect_vvfast.plist";
        else particleFile = "speedEffect_normal.plist";
        auto director = cocos2d::CCDirector::sharedDirector();
        auto winSize = director->getWinSize();
        auto particle = cocos2d::CCParticleSystemQuad::create(particleFile, false);
        particle->setPositionType(cocos2d::tCCPositionType::kCCPositionTypeGrouped);
        particle->setAutoRemoveOnFinish(true);
        this->addChild(particle, 100);
        particle->setPosition({ director->getScreenRight() + 10.f, winSize.height / 2.f });
        particle->setPosVar({ 10.f, director->getScreenScaleFactorH() * 160.f });
        particle->resetSystem();
    }
    cocos2d::CCPoint positionForShaderTarget(int) = win 0x21e1a0, m1 0x107208, imac 0x12c0b0, ios 0x1f360c;
    void positionUIObjects() = ios 0x1e2c9c, win 0x220d90, imac 0x10bbf0, m1 0xebbe0;
    void prepareSavePositionObjects() = ios 0x1e13c4, imac 0x107450, m1 0xe89ec, win 0x2142d0;
    TodoReturn prepareTransformParent(bool);
    void preResumeGame() = win inline, ios 0x200998, imac 0x141dd0, m1 0x118fa4 {
        m_resumeTimer = 2;
    }
    void preUpdateVisibility(float) = win 0x230ab0;
    void processActivatedAudioTriggers(float) = ios 0x208724, win 0x23d3e0, m1 0x12402c, imac 0x14f3a0;
    void processAdvancedFollowAction(AdvancedFollowInstance&, bool, float) = win 0x22a020;
    void processAdvancedFollowActions(float) = win 0x229e00, m1 0x110348, imac 0x136c60, ios 0x1fa914;
    void processAreaActions(float, bool) = win 0x223ce0, m1 0x10d458, imac 0x133460, ios 0x1f822c;
    void processAreaEffects(gd::vector<EnterEffectInstance>*, GJAreaActionType, float, bool) = win 0x223100, imac 0x1308e0, m1 0x10afe8, ios 0x1f61f4;
    void processAreaFadeGroupAction(cocos2d::CCArray*, EnterEffectInstance*, cocos2d::CCPoint, bool);
    void processAreaMoveGroupAction(cocos2d::CCArray*, EnterEffectInstance*, cocos2d::CCPoint, int, int, int, int, int, bool, bool) = win 0x2251f0, m1 0x10c484, imac 0x132070;
    void processAreaRotateGroupAction(cocos2d::CCArray*, EnterEffectInstance*, cocos2d::CCPoint, int, int, int, int, int, bool, bool) = win 0x224ab0;
    void processAreaTintGroupAction(cocos2d::CCArray*, EnterEffectInstance*, cocos2d::CCPoint, bool) = win 0x2258c0;
    void processAreaTransformGroupAction(cocos2d::CCArray*, EnterEffectInstance*, cocos2d::CCPoint, int, int, int, int, int, bool, bool) = win 0x223f40;
    void processAreaVisualActions(float) = imac 0x1339e0, m1 0x10d908;
    GameObject* processCameraObject(GameObject* object, PlayerObject* player) = win inline, imac 0x112ba0, m1 0xf2584, ios 0x1e7138 {
        if (object) {
            player->m_lastPortalPos = object->getPosition();
            player->m_lastActivatedPortal = object;
        }
        auto ret = object;
        if (m_gameState.m_isDualMode && m_gameState.m_lastActivatedPortal2) ret = m_gameState.m_lastActivatedPortal2;
        if (object) m_gameState.m_lastActivatedPortal1 = object;
        return ret;
    }
    void processCommands(float) = ios 0x201880, win 0x234170, imac 0x1435a0, m1 0x11a2d0;
    void processDynamicObjectActions(int, float) = win 0x228fa0, m1 0x10e6e4, imac 0x1348e0, ios 0x1f91ac;
    void processFollowActions() = win 0x22b2a0, m1 0x110514, imac 0x136e50, ios 0x1faabc;
    void processItems() = ios 0x1eb7a4, imac 0x118f50, m1 0xf7d44, win 0x210db0;
    void processMoveActions() = win 0x2282d0, m1 0x10ffa0, imac 0x136810, ios 0x1fa624;
    void processMoveActionsStep(float, bool) = ios 0x1f9088, win 0x2262f0, m1 0x10e5b8, imac 0x1347b0;
    void processOptionsTrigger(GameOptionsTrigger*) = win 0x21e9a0, imac 0x12c930, m1 0x107a5c, ios 0x1f3d50;
    void processPlayerFollowActions(float) = win 0x228bf0, m1 0x110124, imac 0x1369f0, ios 0x1fa734;
    void processQueuedAudioTriggers() = ios 0x204bdc, win 0x235550, m1 0x11eb60, imac 0x1491f0;
    void processQueuedButtons() = ios 0x1fcb04, win 0x22c7f0, imac 0x13af40, m1 0x113650;
    void processRotationActions() = win 0x226510, m1 0x10f80c, imac 0x135f40, ios 0x1fa040;
    void processSFXObjects() = ios 0x1e36b8, win 0x23b480, m1 0xecce8, imac 0x10d2f0;
    void processSFXState(SFXTriggerState*, SFXTriggerState*, int, float) = win 0x23e880, m1 0x123afc, imac 0x14ec60, ios 0x2082e0;
    bool processSongState(int, float, float, int, float, float, gd::vector<SongTriggerState>*, SongTriggerGameObject*) = win 0x23edc0, m1 0x125454, imac 0x151010, ios 0x209364;
    void processStateObjects() = win inline, m1 0xf8dd0, imac 0x11a140, ios 0x1ec358 {
        for (auto it = m_gameState.m_stateObjects.begin(); it != m_gameState.m_stateObjects.end();) {
            auto obj = it->second;
            obj->updateState(m_gameState.m_unkUint2);
            if (obj->m_isRingPoweredOn) ++it;
            else {
                obj->stateSensitiveOff(this);
                it = m_gameState.m_stateObjects.erase(it);
            }
        }
    }
    void processTransformActions(bool) = win 0x2273a0, m1 0x10ecc4, imac 0x135010, ios 0x1f9698;
    void queueButton(int button, bool push, bool isPlayer2) = ios 0x1fc9b8, win inline, imac 0x13ad90, m1 0x1134ec {
        if (button <= 0 || button > 3) {
            return;
        }
        PlayerButtonCommand command = {};
        command.m_button = (PlayerButton) button;
        command.m_isPush = push;
        command.m_isPlayer2 = isPlayer2;
        m_queuedButtons.push_back(command);
    }
    void reAddToStickyGroup(GameObject*) = m1 0x108eb4, imac 0x12df20;
    void recordAction(int, bool, bool) = win inline, m1 0x113dd0, imac 0x13b730, ios 0x1fcfd8 {
        if (m_recordInputs && !m_useReplay) {
            PlayerButtonCommand command;
            command.m_button = (PlayerButton)p0;
            command.m_isPush = p1;
            command.m_isPlayer2 = p2;
            command.m_step = 0;
            m_queuedRecordedButtons.push_back(command);
        }
    }
    TodoReturn rectIntersectsCircle(cocos2d::CCRect, cocos2d::CCPoint, float);
    void refreshCounterLabels() = win 0x22fe50, m1 0x116204, imac 0x13e4c0;
    void refreshKeyframeAnims() = ios 0x1e34f4, win 0x22e580, m1 0xecb14, imac 0x10d100;
    void regenerateEnterEasingBuffers() = win inline, m1 0xe7cb0, imac 0x106590, ios 0x1e0dd0 {
        m_enterEasingValues.clear();
        m_enterEasingIndices.clear();
        m_enterEasingValuesIndex = 0;
        CCObject* obj;
        CCARRAY_FOREACH(m_objects, obj) {
            auto object = static_cast<EnterEffectObject*>(obj);
            if (object->m_objectID >= 3006 && object->m_objectID <= 3021 && object->m_objectID != 3016) {
                this->generateEnterEasingBuffers(object);
            }
        }
    }
    int registerSpawnRemap(gd::vector<ChanceObject>&);
    TodoReturn registerStateObject(EffectGameObject*);
    TodoReturn removeBackground();
    TodoReturn removeCustomEnterEffects(int, bool);
    void removeFromGroupParents(GameObject*) = m1 0x108584, imac 0x12d4c0;
    void removeFromGroups(GameObject*) = win 0x21ed10, imac 0x12ce70, m1 0x107f34, ios 0x1f40ec;
    void removeFromStickyGroup(GameObject*) = m1 0x108e28, imac 0x12de90;
    void removeGroundLayer() = m1 0xe5734, imac 0x1039d0;
    void removeGroupParent(int groupID) = win 0x21f3e0, m1 0x1080e8, imac 0x12d030, ios 0x1f4208;
    void removeKeyframe(KeyframeGameObject*) = m1 0x11410c, imac 0x13bae0;
    TodoReturn removeMiddleground();
    void removeObjectFromSection(GameObject*) = win 0x221a80, imac 0x12e500, m1 0x109388, ios 0x1f4e48;
    void removePlayer2() = win inline, m1 0xf8454, imac 0x1196c0, ios 0x1ebe04 {
        m_player2->removeFromParentAndCleanup(true);
        m_player2->setOpacity(0);
        m_player2->releaseAllButtons();
        m_player2->removeAllParticles();
        m_player2->deactivateStreak(true);
    }
    void removeTemporaryParticles() = win inline, imac 0x148cb0, m1 0x11e718, ios 0x20484c {
        for (int i = 0; i < m_temporaryParticles->count();) {
            auto particle = static_cast<cocos2d::CCParticleSystem*>(m_temporaryParticles->objectAtIndex(i));
            if (particle->isAutoRemoveOnFinish()) {
                particle->removeMeAndCleanup();
                m_customParticlesUIDs.erase(particle->m_uID);
                m_temporaryParticles->fastRemoveObjectAtIndex(i);
            }
            else i++;
        }
    }
    void reorderObjectSection(GameObject*) = win inline, m1 0xf9434, imac 0x11a880, ios 0x1ec7f4 {
        this->removeObjectFromSection(p0);
        this->addToSection(p0);
    }
    TodoReturn reparentObject(cocos2d::CCNode*, cocos2d::CCNode*);
    void resetActiveEnterEffects() = ios 0x1e3a30, win 0x209060, imac 0x10d800, m1 0xed248;
    bool resetAreaObjectValues(GameObject*, bool) = win 0x222950;
    void resetAudio() = ios 0x2009f8, win 0x231fc0, m1 0x119004, imac 0x141e50;
    void resetCamera() = ios 0x2048f8, win 0x239570, m1 0x11e7d4, imac 0x148d80;
    void resetGradientLayers() = win 0x21bbf0;
    void resetGroupCounters(bool reset) = win inline, ios 0x1fe998, imac 0x13e800, m1 0x1164a0 {
        for (auto& pair : m_labelObjects) {
            for (auto label : pair.second) {
                if (reset) label->updateLabel("0");
                else label->updatePreviewLabel();
            }
        }

        for (auto& pair : m_timeLabelObjects) {
            for (auto label : pair.second) {
                if (reset) label->updateLabel(label->m_showSecondsOnly ? "0" : "0.00");
                else label->updatePreviewLabel();
            }
        }
    }
    void resetLevelVariables() = ios 0x2040bc, win 0x234ab0, imac 0x147d80, m1 0x11dcf0;
    TodoReturn resetMoveOptimizedValue();
    void resetPlayer() = ios 0x1e71bc, win 0x20cbf0, m1 0xf2608, imac 0x112c30;
    void resetSongTriggerValues();
    void resetSpawnChannelIndex() = ios 0x204b10, win 0x23f890, m1 0x11ea94, imac 0x149100;
    void resetStaticCamera(bool, bool) = win 0x239850;
    TodoReturn resetStoppedAreaObjects();
    TodoReturn restoreAllUIObjects();
    TodoReturn restoreDefaultGameplayOffsetX();
    TodoReturn restoreDefaultGameplayOffsetY();
    void restoreRemap(EffectGameObject*, gd::unordered_map<int, int>&) = win 0x217b70;
    void resumeAudio() = win 0x231eb0, m1 0x118fdc, imac 0x141e20, ios 0x2009d0 {
        FMODAudioEngine::sharedEngine()->resumeAllAudio();
        FMODAudioEngine::sharedEngine()->resumeAllMusic();
        FMODAudioEngine::sharedEngine()->m_system->update();
    }
    void rotateAreaObjects(GameObject*, cocos2d::CCArray*, float, bool) = win 0x224e20;
    void rotateObject(GameObject*, float) = win 0x226e20, m1 0x110b6c, imac 0x1376d0, ios 0x1faee4;
    void rotateObjects(cocos2d::CCArray*, float, cocos2d::CCPoint, cocos2d::CCPoint, bool, bool) = win 0x226ec0;
    void setGroupParent(GameObject* object, int groupID) = win 0x21f2d0, m1 0x10842c, imac 0x12d370, ios 0x1f4398;
    void setStartPosObject(StartPosObject* startPos) = ios 0x1e7374, win inline, imac 0x112ed0, m1 0xf2870 {
        if (startPos != m_startPosObject) {
            if (startPos) {
                startPos->retain();
            }
            if (m_startPosObject) {
                m_startPosObject->release();
            }
            m_startPosObject = startPos;
        }
    }
    void setupLayers() = win 0x203760, imac 0x1003c0, m1 0xe24c4, ios 0x1dc590;
    void setupLevelStart(LevelSettingsObject*) = ios 0x1e73bc, win 0x20cd60, imac 0x112f20, m1 0xf28b8;
    void setupReplay(gd::string) = win 0x234360, m1 0x11cd28, imac 0x146c20;
    void shakeCamera(float duration, float strength, float interval) = win 0x2356c0, m1 0x11f9ac, imac 0x14a270, ios 0x205614;
    bool shouldExitHackedLevel() = ios 0x1de628, win 0x205d10, imac 0x102b90, m1 0xe49d0;
    TodoReturn sortAllGroupsX();
    void sortGroups() = win 0x21ef40, m1 0xe7d98, imac 0x106740, ios 0x1e0e5c;
    void sortSectionVector() = win 0x221cc0, imac 0x12faf0, m1 0x10a4a8;
    void sortStickyGroups() = ios 0x1e2084, imac 0x109bb0, m1 0xea574, win 0x21f650;
    void spawnGroupTriggered(int groupID, float, bool, gd::vector<int> const&, int, int);
    void spawnObjectsInOrder(cocos2d::CCArray*, double, gd::vector<int> const&, int, int) = win 0x215920;
    cocos2d::CCParticleSystemQuad* spawnParticle(char const* plist, int zOrder, cocos2d::tCCPositionType positionType, cocos2d::CCPoint position) = win 0x239d50, imac 0x14bf50, m1 0x120f7c, ios 0x2064a4;
    void spawnParticleTrigger(int, cocos2d::CCPoint, float, float) = win 0x239920;
    void spawnParticleTrigger(SpawnParticleGameObject*) = m1 0xf7520, imac 0x118670;
    void spawnPlayer2() = win inline, m1 0xf7f74, imac 0x1191d0, ios 0x1eb934 {
        auto parent = m_player2->getParent();
        if (!parent) {
            m_player1->getParent()->addChild(m_player2, 59);
            if (!m_isEditor) m_player2->addAllParticles();
        }
        m_player2->spawnFromPlayer(m_player1, m_gameState.m_unkBool31);
    }
    cocos2d::CCPoint speedForShaderTarget(int) = win 0x21e250, m1 0x107334, imac 0x12c1d0, ios 0x1f36d4;
    cocos2d::CCArray* staticObjectsInRect(cocos2d::CCRect, bool) = win 0x20bda0;
    TodoReturn stopAllGroundActions();
    void stopCameraShake() = win inline, ios 0x20569c, imac 0x14a310, m1 0x11fa34 {
        m_gameState.m_cameraShakeEnabled = false;
        m_gameState.m_cameraShakeFactor = 0.f;
    }
    TodoReturn stopCustomEnterEffect(EnterEffectObject*, bool);
    TodoReturn stopCustomEnterEffect(EnterEffectObject*);
    TodoReturn stopSFXTrigger(SFXTriggerGameObject*);
    TodoReturn swapBackground(int);
    TodoReturn swapGround(int);
    TodoReturn swapMiddleground(int);
    void switchToFlyMode(PlayerObject* player, GameObject* object, bool unused, int type) = ios 0x1e7904, win inline, imac 0x113ad0, m1 0xf3300 {
        player->switchedToMode((GameObjectType)type);
        auto cameraObject = this->processCameraObject(object, player);
        auto noEffects = cameraObject && cameraObject->m_hasNoEffects;
        switch (type) {
            case 5:
                player->toggleFlyMode(true, noEffects);
                break;
            case 19:
                player->toggleBirdMode(true, noEffects);
                break;
            case 26:
                player->toggleDartMode(true, noEffects);
                break;
            case 41:
                player->toggleSwingMode(true, noEffects);
                break;
        }
        this->toggleGlitter(true);
    }
    void switchToRobotMode(PlayerObject*, GameObject*, bool) = win 0x20d760, imac 0x113cd0, m1 0xf3504, ios 0x1e7a7c;
    void switchToRollMode(PlayerObject*, GameObject*, bool) = win 0x20d940, imac 0x113c20, m1 0xf3458, ios 0x1e7a14;
    void switchToSpiderMode(PlayerObject*, GameObject*, bool) = win 0x20d850, imac 0x113d80, m1 0xf35b0, ios 0x1e7ae4;
    void syncBGTextures() = ios 0x204004, win 0x234a10, imac 0x147c70, m1 0x11dbd8;
    void teleportPlayer(TeleportPortalObject*, PlayerObject*) = win 0x20aa80, imac 0x110400, m1 0xf00d8, ios 0x1e53a8;
    TodoReturn testInstantCountTrigger(int, int, int, bool, int, gd::vector<int> const&, int, int);
    void toggleAudioVisualizer(bool) = ios 0x1dc3c8, win 0x242550, m1 0xe2354, imac 0x100250;
    void toggleDualMode(GameObject*, bool, PlayerObject*, bool) = ios 0x1e76c4, win 0x2113f0, imac 0x113770, m1 0xf2fe8;
    void toggleFlipped(bool, bool) = ios 0x1ea9b8, win 0x240240, m1 0xf6954, imac 0x117af0;
    void toggleGroup(int, bool) = win 0x21e810, m1 0x1078c4, imac 0x12c780;
    void toggleLockPlayer(bool disable, bool p2) = win inline, imac 0x12cbe0, m1 0x107cb0, ios inline {
        auto player = p2 ? m_player2 : m_player1;
        if (disable) player->disablePlayerControls();
        else player->enablePlayerControls();
    }
    void togglePlayerStreakBlend(bool) = imac 0x12cb50, m1 0x107c3c;
    void togglePlayerVisibility(bool visible, bool player1) = win inline, m1 0x107c88, imac 0x12cba0, ios inline {
        if (player1)
            this->m_player1->toggleVisibility(visible);
        else
            this->m_player2->toggleVisibility(visible);
    }
    void togglePlayerVisibility(bool visible) = ios 0x1feee8, imac 0x13efa0, m1 0x116b1c, win inline {
        this->togglePlayerVisibility(visible, true);
        this->togglePlayerVisibility(visible, false);
    }
    void transformAreaObjects(GameObject*, cocos2d::CCArray*, float, float, bool) = win 0x224440;
    TodoReturn triggerAdvancedFollowCommand(AdvancedFollowTriggerObject*);
    void triggerAdvancedFollowEditCommand(AdvancedFollowEditObject*) = win 0x2297e0, m1 0x111470, imac 0x138110, ios 0x1fb640;
    void triggerAreaEffect(EnterEffectObject*) = win 0x221ee0;
    TodoReturn triggerAreaEffectAnimation(EnterEffectObject*);
    TodoReturn triggerDynamicMoveCommand(EffectGameObject*);
    TodoReturn triggerDynamicRotateCommand(EnhancedTriggerObject*);
    void triggerGradientCommand(GradientTriggerObject*) = win 0x21a3a0, imac 0x128bc0, m1 0x104294;
    TodoReturn triggerGravityChange(EffectGameObject*, int);
    void triggerMoveCommand(EffectGameObject*) = win 0x219690;
    TodoReturn triggerRotateCommand(EnhancedTriggerObject*);
    void triggerShaderCommand(ShaderGameObject*) = win 0x21bc80, m1 0x105a4c, imac 0x12a6a0, ios 0x1f27b0;
    void triggerTransformCommand(TransformTriggerGameObject*) = win 0x21a110;
    TodoReturn tryGetGroupParent(int);
    GameObject* tryGetMainObject(int) = ios 0x1ec2b4, win 0x21f170, imac 0x11a040, m1 0xf8cc4;
    GameObject* tryGetObject(int) = win 0x21f1e0, m1 0xf2730, imac 0x112d90, ios 0x1e72e4;
    void tryResumeAudio() = m1 0x119024, imac 0x141e80;
    TodoReturn unclaimParticle(char const*, cocos2d::CCParticleSystemQuad*);
    void ungroupStickyObjects(cocos2d::CCArray*) = win 0x21f8d0, m1 0x108c70, imac 0x12dcc0;
    TodoReturn unlinkAllEvents();
    TodoReturn updateActiveEnterEffect(EnterEffectObject*);
    TodoReturn updateAllObjectSection();
    void updateAreaObjectLastValues(GameObject*) = win 0x222bd0;
    void updateAudioVisualizer() = ios 0x201760, win 0x2422f0, imac 0x143430, m1 0x11a1b0;
    void updateBGArtSpeed(float, float) = m1 0x11e5e0, imac 0x148a40;
    void updateCamera(float) = ios 0x201b6c, win 0x235760, imac 0x143a60, m1 0x11a738;
    void updateCameraBGArt(cocos2d::CCPoint, float) = imac 0x14a5c0, m1 0x11fc80, win 0x237ec0;
    TodoReturn updateCameraEdge(int, int);
    void updateCameraMode(EffectGameObject* obj, bool updateDual) = ios 0x1e7dc8, win inline, m1 0xf39d4, imac 0x114180 {
        auto cameraFree = obj->m_cameraIsFreeMode;
        auto freeMode = m_gameState.m_unkBool8;
        m_gameState.m_unkBool8 = cameraFree;
        m_gameState.m_unkBool9 = obj->m_cameraDisableGridSnap;
        if (obj->m_cameraEditCameraSettings) {
            m_gameState.m_unkFloat3 = std::clamp(obj->m_cameraEasingValue, 1.f, 40.f);
            m_gameState.m_unkFloat2 = std::clamp(obj->m_cameraPaddingValue, 0.f, 1.f);
        }
        if (cameraFree != freeMode && updateDual) this->updateDualGround(m_player1, m_gameState.m_dualRelated, false, 0.f);
    }
    void updateCameraOffsetX(float, float, int, float, int, int) = ios 0x1ff1a0, win 0x230810, m1 0x116e8c, imac 0x13f3e0;
    void updateCameraOffsetY(float, float, int, float, int, int) = ios 0x1ff220, win 0x2308b0, m1 0x116f5c, imac 0x13f4e0;
    void updateCollisionBlocks() = ios 0x1ec828, imac 0x11a8b0, m1 0xf9468, win 0x2132f0;
    void updateCounters(int itemId, int value) = win 0x22e760, m1 0x114398, imac 0x13bd80, ios 0x1fd510;
    void updateDualGround(PlayerObject* object, int mode, bool instant, float duration) = ios 0x1e7b4c, win 0x20dcc0, imac 0x113e30, m1 0xf365c;
    void updateEnterEffects(float) = win 0x209630, imac 0x10e8e0, m1 0xedfd4;
    TodoReturn updateExtendedCollision(GameObject*, bool);
    void updateExtraGameLayers() = imac 0x12c410, m1 0x107578, win 0x21e4a0;
    TodoReturn updateGameplayOffsetX(int, bool);
    TodoReturn updateGameplayOffsetY(int, bool);
    void updateGradientLayers() = ios 0x1f1910, win 0x21a830, m1 0x104930, imac 0x129310;
    void updateGroundShadows() = win 0x206a20;
    void updateGuideArt() = win 0x240130, m1 0x11a0e0, imac 0x143360, ios 0x201694;
    TodoReturn updateInternalCamOffsetX(float, float, float);
    TodoReturn updateInternalCamOffsetY(float, float, float);
    void updateKeyframeOrder(int) = ios 0x1fd218, imac 0x13b9d0, m1 0x11403c, win 0x22e4b0;
    void updateLayerCapacity(gd::string) = ios 0x1df99c, imac 0x1042f0, m1 0xe5f78, win 0x2079c0;
    TodoReturn updateLegacyLayerCapacity(int, int, int, int);
    void updateLevelColors() = ios 0x1dec94, win 0x207150, m1 0xe5144, imac 0x103350;
    void updateMaxGameplayY() = ios 0x203ec4, win 0x234930, m1 0x11da78, imac 0x147b20;
    TodoReturn updateMGArtSpeed(float, float);
    void updateMGOffsetY(float, float, int, float, int, int) = win 0x230950;
    TodoReturn updateOBB2(cocos2d::CCRect);
    void updateParticles(float);
    void updatePlatformerTime() = ios 0x203714, imac 0x146740, m1 0x11c8ac, win 0x233bd0;
    void updatePlayerCollisionBlocks() = win 0x2130c0;
    void updateProximityVolumeEffects() = ios 0x2035d4, win 0x23bd90, imac 0x1465c0, m1 0x11c754;
    void updateQueuedLabels() = win inline, m1 0x116170, imac 0x13e400, ios 0x1fe760 {
        for (auto& pair : m_labelObjects) {
            for (auto label : pair.second) {
                if (label->m_isActivated) label->updateLabelIfDirty();
            }
        }
        for (auto& pair : m_timeLabelObjects) {
            for (auto label : pair.second) {
                if (label->m_isActivated) label->updateLabelIfDirty();
            }
        }
    }
    TodoReturn updateReplay();
    void updateSavePositionObjects() = win inline, ios 0x1ed350, imac 0x11b8b0, m1 0xfa338 {
        if (m_gameState.m_unkUint4 != 0 && m_gameState.m_unkUint4 + 1000 > m_gameState.m_unkUint5) return;
        m_gameState.m_unkUint4 = m_gameState.m_unkUint5;
        m_gameState.m_unkUint11++;
        for (auto& pair : m_savePositionValues) {
            cocos2d::CCPoint position;
            auto type = pair.first;
            auto value = pair.second;
            auto offset = 0;
            if (type < 1) {
                switch (type) {
                    case -1:
                        offset = m_player1->m_unk52C;
                        position = m_player1->m_lastPosition;
                        break;
                    case -2:
                        offset = m_player2->m_unk52C;
                        position = m_player2->m_lastPosition;
                        break;
                    case -3:
                        offset = m_gameState.m_unkUint12;
                        position = m_gameState.m_cameraPosition2;
                        break;
                }
            }
            else {
                auto object = m_savePositionObjects[type];
                offset = object->m_unk52C;
                position = object->m_lastPosition;
            }
            auto index = (m_gameState.m_unkUint11 % value + offset) * 2;
            m_gameState.m_unkVecFloat1[index] = position.x;
            m_gameState.m_unkVecFloat1[index + 1] = position.y;
        }
    }
    void updateShaderLayer(float) = ios 0x1f2de8, win 0x21cf00, imac 0x12b040, m1 0x1060a8;
    void updateSpecialGroupData() = ios 0x1e0c74, win 0x208c00, imac 0x106390, m1 0xe7ae4;
    void updateSpecialLabels() = ios 0x20334c, win 0x2338f0, m1 0x11c338, imac 0x146070;
    void updateStaticCameraPos(cocos2d::CCPoint pos, bool staticX, bool staticY, bool followOrSmoothEase, float time, int easingType, float easingRate) = ios 0x1e8330, win 0x238ca0, imac 0x114990, m1 0xf40c8;
    void updateStaticCameraPosToGroup(int, bool, bool, bool, float, float, int, float, bool, float) = win 0x2388b0, m1 0x1207f0, imac 0x14b440, ios 0x205ea4;
    void updateTimeMod(float, bool, bool) = win inline, m1 0xf3800, imac 0x113fc0, ios 0x1e7bf4 {
        if (p1) {
            m_gameState.m_timeModRelated = 0;
            m_gameState.m_timeModRelated2 = false;
            m_player1->updateTimeMod(p0, p2);
            if (m_gameState.m_isDualMode) m_player2->updateTimeMod(p0, p2);
        }
        else {
            m_gameState.m_timeModRelated = p0;
            m_gameState.m_timeModRelated2 = p2;
        }
    }
    void updateTimerLabels() = ios 0x1fe480, win 0x22fae0, m1 0x115c94, imac 0x13dda0;
    void updateZoom(float zoom, float duration, int easing, float rate, int uniqueID, int controlID) = win 0x230590, m1 0x116b6c, imac 0x13f010, ios 0x1fef38;
    void visitWithColorFlash() = win 0x241d30, m1 0x127f6c, imac 0x154340;
    float volumeForProximityEffect(SFXTriggerInstance&) = win 0x23c060;

    PAD = win 0x8, android 0x8, mac 0x8, ios 0x8;
    GJGameState m_gameState;
    GJGameLevel* m_level;
    PlaybackMode m_playbackMode;
    bool m_lowDetailMode;
    bool m_extraLDM;
    bool m_ignoreDamage;
    bool m_enable22Changes;
    bool m_allowStaticRotate;
    bool m_fixNegativeScale;
    bool m_startingFromBeginning;
    gd::vector<SFXTriggerGameObject*> m_activeSfxTriggers;
    gd::vector<void*> m_unk8a0;
    cocos2d::CCNode* m_hoverNode;
    cocos2d::CCNode* m_areaTransformNode;
    cocos2d::CCNode* m_areaSkewNode;
    cocos2d::CCNode* m_areaScaleNode;
    cocos2d::CCNode* m_areaRotateNode;
    cocos2d::CCNode* m_areaTransformNode2;
    OBB2D* m_obb2;
    gd::vector<gd::unordered_map<int,int>> m_spawnRemapTriggers;
    gd::unordered_map<int, cocos2d::CCPoint> m_uiObjectPositions;
    GJEffectManager* m_effectManager;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerT5;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerT5;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerT5;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerT5;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerT5;
    cocos2d::CCSpriteBatchNode* m_gameLayerT4;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerT4;
    cocos2d::CCSpriteBatchNode* m_glowLayerT4;
    CCNodeContainer* m_specialLayerT4;
    cocos2d::CCSpriteBatchNode* m_textLayerT4;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerT4;
    cocos2d::CCSpriteBatchNode* m_fireLayerT4;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerT4;
    cocos2d::CCSpriteBatchNode* m_pixelLayerT4;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerT4;
    cocos2d::CCSpriteBatchNode* m_particleLayerT4;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerT4;
    cocos2d::CCSpriteBatchNode* m_game2LayerT4;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerT4;
    cocos2d::CCSpriteBatchNode* m_gameLayerT3;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerT3;
    cocos2d::CCSpriteBatchNode* m_glowLayerT3;
    CCNodeContainer* m_specialLayerT3;
    cocos2d::CCSpriteBatchNode* m_textLayerT3;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerT3;
    cocos2d::CCSpriteBatchNode* m_fireLayerT3;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerT3;
    cocos2d::CCSpriteBatchNode* m_pixelLayerT3;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerT3;
    cocos2d::CCSpriteBatchNode* m_particleLayerT3;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerT3;
    cocos2d::CCSpriteBatchNode* m_game2LayerT3;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerT3;
    cocos2d::CCSpriteBatchNode* m_gameLayerT2;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerT2;
    cocos2d::CCSpriteBatchNode* m_glowLayerT2;
    CCNodeContainer* m_specialLayerT2;
    cocos2d::CCSpriteBatchNode* m_textLayerT2;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerT2;
    cocos2d::CCSpriteBatchNode* m_fireLayerT2;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerT2;
    cocos2d::CCSpriteBatchNode* m_pixelLayerT2;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerT2;
    cocos2d::CCSpriteBatchNode* m_particleLayerT2;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerT2;
    cocos2d::CCSpriteBatchNode* m_game2LayerT2;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerT2;
    cocos2d::CCSpriteBatchNode* m_gameLayerT1;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerT1;
    cocos2d::CCSpriteBatchNode* m_glowLayerT1;
    CCNodeContainer* m_specialLayerT1;
    cocos2d::CCSpriteBatchNode* m_textLayerT1;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerT1;
    cocos2d::CCSpriteBatchNode* m_fireLayerT1;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerT1;
    cocos2d::CCSpriteBatchNode* m_pixelLayerT1;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerT1;
    cocos2d::CCSpriteBatchNode* m_particleLayerT1;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerT1;
    cocos2d::CCSpriteBatchNode* m_game2LayerT1;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerT1;
    cocos2d::CCSpriteBatchNode* m_game2LayerB0;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerB0;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerB0;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerB0;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerB0;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerB0;
    cocos2d::CCSpriteBatchNode* m_gameLayerB1;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerB1;
    cocos2d::CCSpriteBatchNode* m_glowLayerB1;
    CCNodeContainer* m_specialLayerB1;
    cocos2d::CCSpriteBatchNode* m_textLayerB1;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerB1;
    cocos2d::CCSpriteBatchNode* m_fireLayerB1;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerB1;
    cocos2d::CCSpriteBatchNode* m_pixelLayerB1;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerB1;
    cocos2d::CCSpriteBatchNode* m_particleLayerB1;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerB1;
    cocos2d::CCSpriteBatchNode* m_game2LayerB1;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerB1;
    cocos2d::CCSpriteBatchNode* m_gameLayerB2;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerB2;
    cocos2d::CCSpriteBatchNode* m_glowLayerB2;
    CCNodeContainer* m_specialLayerB2;
    cocos2d::CCSpriteBatchNode* m_textLayerB2;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerB2;
    cocos2d::CCSpriteBatchNode* m_fireLayerB2;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerB2;
    cocos2d::CCSpriteBatchNode* m_pixelLayerB2;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerB2;
    cocos2d::CCSpriteBatchNode* m_particleLayerB2;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerB2;
    cocos2d::CCSpriteBatchNode* m_game2LayerB2;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerB2;
    cocos2d::CCSpriteBatchNode* m_gameLayerB3;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerB3;
    cocos2d::CCSpriteBatchNode* m_glowLayerB3;
    CCNodeContainer* m_specialLayerB3;
    cocos2d::CCSpriteBatchNode* m_textLayerB3;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerB3;
    cocos2d::CCSpriteBatchNode* m_fireLayerB3;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerB3;
    cocos2d::CCSpriteBatchNode* m_pixelLayerB3;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerB3;
    cocos2d::CCSpriteBatchNode* m_particleLayerB3;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerB3;
    cocos2d::CCSpriteBatchNode* m_game2LayerB3;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerB3;
    cocos2d::CCSpriteBatchNode* m_gameLayerB4;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerB4;
    cocos2d::CCSpriteBatchNode* m_glowLayerB4;
    CCNodeContainer* m_specialLayerB4;
    cocos2d::CCSpriteBatchNode* m_textLayerB4;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerB4;
    cocos2d::CCSpriteBatchNode* m_fireLayerB4;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerB4;
    cocos2d::CCSpriteBatchNode* m_pixelLayerB4;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerB4;
    cocos2d::CCSpriteBatchNode* m_particleLayerB4;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerB4;
    cocos2d::CCSpriteBatchNode* m_game2LayerB4;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerB4;
    cocos2d::CCSpriteBatchNode* m_gameLayerB5;
    cocos2d::CCSpriteBatchNode* m_gameBlendingLayerB5;
    cocos2d::CCSpriteBatchNode* m_glowLayerB5;
    CCNodeContainer* m_specialLayerB5;
    cocos2d::CCSpriteBatchNode* m_textLayerB5;
    cocos2d::CCSpriteBatchNode* m_textBlendingLayerB5;
    cocos2d::CCSpriteBatchNode* m_fireLayerB5;
    cocos2d::CCSpriteBatchNode* m_fireBlendingLayerB5;
    cocos2d::CCSpriteBatchNode* m_pixelLayerB5;
    cocos2d::CCSpriteBatchNode* m_pixelBlendingLayerB5;
    cocos2d::CCSpriteBatchNode* m_particleLayerB5;
    cocos2d::CCSpriteBatchNode* m_particleBlendingLayerB5;
    cocos2d::CCSpriteBatchNode* m_game2LayerB5;
    cocos2d::CCSpriteBatchNode* m_game2BlendingLayerB5;
    PlayerObject* m_player1;
    PlayerObject* m_player2;
    LevelSettingsObject* m_levelSettings;
    cocos2d::CCArray* m_objects;
    cocos2d::CCArray* m_collisionBlocks;
    cocos2d::CCArray* m_spawnObjectsArray;
    cocos2d::CCDictionary* m_spawnObjects;
    cocos2d::CCNode* m_unkdd0;
    gd::vector<GameObject*> m_unkdd8;
    gd::vector<GameObject*> m_disabledObjects;
    gd::vector<GameObject*> m_unke08;
    gd::vector<GameObject*> m_areaObjects;
    gd::vector<GameObject*> m_processedAreaObjects;
    gd::unordered_map<int, gd::vector<GameObject*>> m_visibilityGroups;
    gd::vector<GameObject*> m_visibleObjects;
    int m_visibleObjectsCount;
    int m_visibleObjectsIndex;
    gd::vector<GameObject*> m_visibleObjects2;
    int m_visibleObjects2Count;
    int m_visibleObjects2Index;
    int m_unked0;
    int m_disabledObjectsCount;
    int m_unked8;
    int m_areaObjectsCount;
    int m_processedAreaObjectsCount;
    int m_unkee4;
    int m_disabledObjectsIndex;
    int m_unkeec;
    int m_areaObjectsIndex;
    int m_processedAreaObjectsIndex;
    cocos2d::CCDictionary* m_groupDict;
    cocos2d::CCDictionary* m_staticGroupDict;
    cocos2d::CCDictionary* m_optimizedGroupDict;
    gd::vector<cocos2d::CCArray*> m_groups;
    gd::vector<cocos2d::CCArray*> m_staticGroups;
    gd::vector<cocos2d::CCArray*> m_optimizedGroups;
    cocos2d::CCDictionary* m_parentGroupsDict;
    cocos2d::CCDictionary* m_parentGroupIDs;
    cocos2d::CCDictionary* m_removedParentGroupIDs;
    cocos2d::CCArray* m_targetGroupsArray;
    gd::unordered_map<int, std::pair<int, int>> m_targetGroups;
    cocos2d::CCDictionary* m_linkedGroupDict;
    int m_lastUsedLinkedID;
    cocos2d::CCNode* m_objectParent;
    cocos2d::CCNode* m_inShaderParent;
    cocos2d::CCNode* m_aboveShaderParent;
    cocos2d::CCLayer* m_objectLayer;
    cocos2d::CCLayer* m_inShaderObjectLayer;
    cocos2d::CCLayer* m_aboveShaderObjectLayer;
    cocos2d::CCSprite* m_background;
    void* m_unk1000;
    GJGroundLayer* m_groundLayer;
    GJGroundLayer* m_groundLayer2;
    GJMGLayer* m_middleground;
    cocos2d::CCArray* m_batchNodes;
    cocos2d::CCDictionary* m_objectsToDeactivate;

    gd::unordered_map<int, gd::vector<LabelGameObject*>> m_labelObjects;
    gd::unordered_map<int, gd::vector<LabelGameObject*>> m_timeLabelObjects;
    gd::set<std::tuple<int, int, int>> m_spawnTuples;
    bool m_increasedLayerCapacity;
    std::array<float, 2000> m_varianceValues;

    gd::map<std::pair<int, int>, std::pair<float, float>> m_destroyObjectValues;
    gd::vector<float> m_enterEasingValues;
    gd::unordered_map<int, int> m_enterEasingIndices;
    int m_enterEasingValuesIndex;
    bool m_dualTouchTrigger;
    int m_clicks;

    int m_attempts;
    bool m_jumping;
    int m_leftSectionIndex;
    int m_rightSectionIndex;
    int m_bottomSectionIndex;
    int m_topSectionIndex;
    bool m_isEditor;
    bool m_blending;
    bool m_isPlatformer;
    GameObject* m_player1CollisionBlock;
    GameObject* m_player2CollisionBlock;
    int m_particleCount;
    int m_customParticleCount;
    int m_particleSystemLimit;
    cocos2d::CCDictionary* m_particlesDict;
    cocos2d::CCDictionary* m_customParticles;
    cocos2d::CCArray* m_unclaimedParticles;
    gd::unordered_map<int, gd::string> m_particleCountToParticleString;
    cocos2d::CCDictionary* m_claimedParticles;
    cocos2d::CCArray* m_temporaryParticles;
    gd::unordered_set<int> m_customParticlesUIDs;
    cocos2d::CCDictionary* m_gradientLayers;
    int m_activeGradients;
    ShaderLayer* m_shaderLayer;
    bool m_objectsDeactivated;
    bool m_areaObjectsUpdated;
    StartPosObject* m_startPosObject;
    bool m_useReplay;
    bool m_unk3189;
    int m_solidCollisionObjectsCount;
    int m_solidCollisionObjectsIndex;
    gd::vector<GameObject*> m_solidCollisionObjects;
    int m_hazardCollisionObjectsCount;
    int m_hazardCollisionObjectsIndex;
    gd::vector<GameObject*> m_hazardCollisionObjects;
    gd::vector<SequenceTriggerGameObject*> m_sequenceTriggers;
    bool m_isPracticeMode;
    bool m_practiceMusicSync;
    float m_loadingProgress;
    cocos2d::CCNode* m_flashNode;
    float m_unk31f8;
    float m_cameraFlip;
    float m_cameraWidthOffset;
    float m_cameraHeightOffset;
    bool m_updateGroundShadows;
    cocos2d::CCDictionary* m_collectedItems;
    float m_levelLength;
    bool m_resetActiveObjects;
    bool m_skipArtReload;
    EndPortalObject* m_endPortal;
    bool m_isTestMode;
    bool m_freezeStartCamera;
    bool m_unk322a;
    float m_cameraUnzoomedHeightOffset;
    float m_targetCameraHeightOffset;
    bool m_calculateTargetHeightOffset;
    cocos2d::CCParticleSystemQuad* m_glitterParticles;
    bool m_staticCameraShake;
    bool m_skipCameraShake;
    bool m_playerDied;
    double m_extraDelta;
    bool m_started;
    bool m_unk3251;
    float m_cameraWidth;
    float m_cameraHeight;
    float m_cameraUnzoomedX;
    float m_halfCameraWidth;
    AudioEffectsLayer* m_audioEffectsLayer;
    OBB2D* m_cameraObb2;
    gd::vector<GameObject*> m_activeObjects;
    int m_activeObjectsCount;
    int m_activeObjectsIndex;
    cocos2d::ccColor3B m_lightBGColor;
    int m_resumeTimer;
    bool m_recordInputs;
    bool m_unk32a1;
    bool m_unk32a2;
    bool m_unk32a3;
    bool m_unk32a4;
    gd::string m_recordString;
    cocos2d::CCObject* m_unk32c8;
    int m_unk32d0;
    bool m_unk32d4;
    double m_queueInterval;
    uint64_t m_coinsCollected;
    int m_replayRandSeed;
    int m_unk32ec;
    int m_currentStep;
    gd::vector<PlayerButtonCommand> m_queuedButtons;
    gd::vector<PlayerButtonCommand> m_queuedRecordedButtons;
    gd::vector<PlayerButtonCommand> m_queuedReplayButtons;
    gd::vector<void*> m_unk3340;
    gd::vector<void*> m_unk3358;
    int m_queuedRecordedButtonsSize;
    bool m_portalIndicators;
    bool m_orbIndicators;
    cocos2d::CCArray* m_indicatorSprites;
    float m_unk3380;
    gd::vector<int> m_unk3388;
    gd::vector<int> m_unk33a0;
    bool m_hideGround;
    cocos2d::CCArray* m_unk33c0;
    cocos2d::CCArray* m_objectsToMove;
    gd::unordered_map<int, GameObject*> m_savePositionObjects;
    gd::unordered_map<int, int> m_savePositionValues;
    bool m_keepGroupParents;
    cocos2d::CCDictionary* m_keyframeGroups;
    int m_keyframeGroup;
    UILayer* m_uiLayer;
    cocos2d::CCArray* m_uiObjects;
    cocos2d::CCDictionary* m_uiObjectLayers;
    cocos2d::CCNode* m_uiTriggerUI;
    double m_timePlayed;
    bool m_levelEndAnimationStarted;
    int m_points;
    gd::string m_pointsString;
    gd::vector<gd::vector<gd::vector<GameObject*>*>*> m_sections;
    gd::vector<gd::vector<gd::vector<GameObject*>*>*> m_nonEffectObjects;
    gd::vector<gd::vector<GameObject*>*> m_collisionBlockSections;
    gd::vector<GameObject*> m_calcNonEffectObjects;
    int m_calcNonEffectObjectsSize;
    gd::vector<GameObject*> m_calcCollisionBlockObjects;
    int m_calcCollisionBlockObjectsSize;
    gd::vector<GameObject*> m_calcCollisionBlockObjects2;
    int m_calcCollisionBlockObjects2Size;
    gd::vector<gd::vector<int>*> m_sectionSizes;
    gd::vector<gd::vector<int>*> m_nonEffectObjectsSizes;
    gd::vector<gd::vector<int>*> m_collisionBlockSectionSizes;
    gd::vector<gd::vector<bool>*> m_nonEffectObjectsFlags;
    float m_sectionXFactor;
    float m_sectionYFactor;
    float m_maxGameplayY;
    float m_songTriggerInterval;
    gd::unordered_map<int, int> m_stickyGroups;
    FMODLevelVisualizer* m_audioVisualizerBG;
    FMODLevelVisualizer* m_audioVisualizerSFX;
    bool m_showAudioVisualizer;

    int m_areaMovedCount;
    int m_areaScaledCount;
    int m_areaRotatedCount;
    int m_areaColorCount;
    int m_areaMovedCountTotal;
    int m_areaScaledCountTotal;
    int m_areaRotatedCountTotal;
    int m_areaColorCountTotal;
    int m_movedCount;
    int m_scaledCount;
    int m_rotatedCount;
    int m_followedCount;
    int m_areaMovedCountDisplay;
    int m_areaScaledCountDisplay;
    int m_areaRotatedCountDisplay;
    int m_areaColorCountDisplay;
    int m_areaMovedCountTotalDisplay;
    int m_areaScaledCountTotalDisplay;
    int m_areaRotatedCountTotalDisplay;
    int m_areaColorCountTotalDisplay;
    int m_movedCountDisplay;
    int m_scaledCountDisplay;
    int m_rotatedCountDisplay;
    int m_followedCountDisplay;

    bool m_loadingStartPosition;
    bool m_processingAudioTriggers;
    bool m_audioPaused;
    bool m_startOptimization;
    GJGameLoadingLayer* m_loadingLayer;
    cocos2d::CCDrawNode* m_debugDrawNode;
    std::array<cocos2d::CCPoint, 400>* m_debugDrawPoints;
    bool m_isDebugDrawEnabled;
    bool m_disablePlayerHitbox;
    GameObject* m_anticheatSpike;
}

[[link(android)]]
class GJBigSprite : cocos2d::CCNode {
    // virtual ~GJBigSprite();

    static GJBigSprite* create();

    virtual bool init() = imac 0x257ec0, m1 0x204a04;

    void finishedLoadingSpriteAsync(cocos2d::CCObject*);
    void loadSpriteAsync(gd::string, int);
    void unloadAll();
    void unloadSprite(gd::string, int);
    void updateSpriteVisibility();

    gd::vector<bool> m_spritesLoaded;
    cocos2d::CCArray* m_spriteNodes;
    float m_scaleX;
    float m_scaleY;
    bool m_loadSprites;
    bool m_unloadingAll;
}

[[link(android)]]
class GJBigSpriteNode : cocos2d::CCNode {
    // virtual ~GJBigSpriteNode();

    static GJBigSpriteNode* create();

    virtual bool init() = imac 0x257eb0, m1 0x204a00;

    gd::string m_spriteName;
    cocos2d::CCSprite* m_sprite;
    cocos2d::CCRect m_spriteRect;
    bool m_spriteVisible;
}

[[link(android)]]
class GJChallengeDelegate {
    virtual void challengeStatusFinished() {}
    virtual void challengeStatusFailed() {}
}

[[link(android)]]
class GJChallengeItem : cocos2d::CCObject {
    // virtual ~GJChallengeItem();

    static GJChallengeItem* create() = win inline, m1 0x829cc, imac 0x8f260, ios 0x340484 {
        return create(GJChallengeType::Unknown, 0, 0, 0, "");
    }
    static GJChallengeItem* create(GJChallengeType challengeType, int goal, int reward, int timeLeft, gd::string questName) = win 0x1f1520, imac 0x8f100, m1 0x8286c, ios 0x340380;

    static GJChallengeItem* createFromString(gd::string string) = m1 0x82678, imac 0x8ef00;
    static GJChallengeItem* createWithCoder(DS_Dictionary* dsdict) = win inline, imac 0x8f320, m1 0x82a9c, ios 0x340598 {
        auto ret = GJChallengeItem::create();
        ret->dataLoaded(dsdict);
        return ret;
    }

    virtual void encodeWithCoder(DS_Dictionary* dsdict) = win 0x1f16a0, imac 0x8f4c0, m1 0x82c58, ios 0x340730;
    virtual bool canEncode() = m1 0x82d34, imac 0x8f590, ios 0x34080c { return true; }
    void dataLoaded(DS_Dictionary* dsdict) = win inline, imac 0x8f360, m1 0x82af0 {
        m_challengeType = (GJChallengeType)dsdict->getIntegerForKey("1");
        m_timeLeft = dsdict->getIntegerForKey("5");
        m_canClaim = dsdict->getBoolForKey("6");
        m_name = dsdict->getStringForKey("7");
        m_count = dsdict->getIntegerForKey("2");
        m_goal = dsdict->getIntegerForKey("3");
        m_reward = dsdict->getIntegerForKey("4");
        m_position = dsdict->getIntegerForKey("8");
    }
    void incrementCount(int add);
    bool init(GJChallengeType challengeType, int goal, int reward, int timeLeft, gd::string questName);
    void setCount(int value);

    GJChallengeType m_challengeType;
    geode::SeedValueRSV m_count;
    geode::SeedValueRSV m_reward;
    geode::SeedValueRSV m_goal;
    int m_timeLeft;
    bool m_canClaim;
    int m_position;
    gd::string m_name;
}

[[link(android)]]
class GJChestSprite : cocos2d::CCSprite {
    // virtual ~GJChestSprite();

    static GJChestSprite* create(int) = win 0x3ba270, imac 0x20b1d0, m1 0x1bfc94;

    virtual void setOpacity(unsigned char) = win 0x3ba400, imac 0x20df10, m1 0x1c2724, ios 0x1c8f68;
    virtual void setColor(cocos2d::ccColor3B const&) = win 0x3ba340, imac 0x20de20, m1 0x1c2650, ios 0x1c8e98;

    bool init(int chestType) = win inline, m1 0x1c25ec, imac 0x20ddc0 {
        if (!cocos2d::CCSprite::init()) return false;
        m_chestType = chestType;
        this->setContentSize({ 0, 0 });
        this->switchToState(ChestSpriteState::Closed, false);
        return true;
    }
    void switchToState(ChestSpriteState, bool) = ios 0x1c7a00, win 0x3ba470, m1 0x1c103c, imac 0x20c800;

    int m_chestType;
    ChestSpriteState m_spriteState;
    bool m_dark;
}

[[link(android)]]
class GJColorSetupLayer : FLAlertLayer, ColorSelectDelegate, FLAlertLayerProtocol {
    // virtual ~GJColorSetupLayer();

    static GJColorSetupLayer* create(LevelSettingsObject*) = win 0x24ef80, imac 0x1f9510, m1 0x1aeb44, ios 0x1912c0;

    virtual void keyBackClicked() = win 0x24fda0, m1 0x1af784, imac 0x1fa230, ios 0x191cf8;
    virtual void colorSelectClosed(cocos2d::CCNode*) = win 0x24fcd0, imac 0x1fa200, m1 0x1af778, ios 0x191cec;

    bool init(LevelSettingsObject*) = win 0x24f0c0, imac 0x1f96a0, m1 0x1aec70, ios 0x191334;
    void onClose(cocos2d::CCObject* sender) = win 0x24fd50;
    void onColor(cocos2d::CCObject* sender) = win 0x24fc00, imac 0x1f9db0, m1 0x1af318, ios 0x191990;
    void onPage(cocos2d::CCObject* sender) = win 0x24fbb0, m1 0x1af574, imac 0x1fa000;
    void showPage(int) = win 0x24fce0, imac 0x1fa0f0, m1 0x1af66c;
    void updateSpriteColor(ColorChannelSprite*, cocos2d::CCLabelBMFont*, int) = win 0x24fa40, m1 0x1af6d0, imac 0x1fa160, ios 0x191c58;
    void updateSpriteColors() = win 0x24f920, m1 0x1af3dc, imac 0x1f9e70, ios 0x191a18;

    LevelSettingsObject* m_settingsObject;
    cocos2d::CCDictionary* m_unk290;
    cocos2d::CCDictionary* m_unk298;
    cocos2d::CCArray* m_colorLabels;
    cocos2d::CCArray* m_colorSprites;
    int m_page;
    int m_colorsPerPage;
    int m_totalPages;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
    bool m_closeOnSelect;
    ColorSetupDelegate* m_delegate;
    int m_colorID;
}

[[link(android)]]
class GJComment : cocos2d::CCNode {
    // virtual ~GJComment();

    static GJComment* create();
    static GJComment* create(cocos2d::CCDictionary*) = win 0x172290;

    virtual bool init() = win 0x172e30, imac 0x54b160, m1 0x4a34d4, ios 0xb41fc;

    gd::string m_commentString;
    gd::string m_userName;
    int m_commentID;
    int m_userID;
    int m_likeCount;
    int m_levelID;
    bool m_isSpam;
    int m_accountID;
    gd::string m_uploadDate;
    bool m_commentDeleted;
    int m_percentage;
    int m_modBadge;
    cocos2d::ccColor3B m_color;
    bool m_hasLevelID;
    bool m_unkMultiplayerBool;
    GJUserScore* m_userScore;
}

[[link(android)]]
class GJCommentListLayer : cocos2d::CCLayerColor {
    // virtual ~GJCommentListLayer();

    static GJCommentListLayer* create(BoomListView* listView, char const* title, cocos2d::ccColor4B color, float width, float height, bool blueBorder) = ios 0x2d519c, win 0x28a320, imac 0x28c900, m1 0x235434;

    bool init(BoomListView* listView, char const* title, cocos2d::ccColor4B color, float width, float height, bool blueBorder) = ios 0x2d5280, win 0x28a440, imac 0x28ca10, m1 0x23552c;

    BoomListView* m_list;
}

[[link(android)]]
class GJDailyLevelDelegate {
    virtual void dailyStatusFinished(GJTimedLevelType) {}
    virtual void dailyStatusFailed(GJTimedLevelType, GJErrorCode) {}
}

[[link(android)]]
class GJDifficultySprite : cocos2d::CCSprite {
    // virtual ~GJDifficultySprite();

    static GJDifficultySprite* create(int, GJDifficultyName) = ios 0x2e5348, win 0x29d8d0, imac 0x2a3530, m1 0x24a2c0;

    static gd::string getDifficultyFrame(int, GJDifficultyName) = win 0x29d9b0, imac 0x2a3680, m1 0x24a464, ios 0x2e5474;
    bool init(int, GJDifficultyName) = imac 0x2a3610, m1 0x24a3cc;
    void updateDifficultyFrame(int, GJDifficultyName) = ios 0x2e5534, win 0x29da90, imac 0x2a37c0, m1 0x24a5b0;
    void updateFeatureState(GJFeatureState) = ios 0x2e56ac, win 0x29dbb0, imac 0x2a3940, m1 0x24a728;
    void updateFeatureStateFromLevel(GJGameLevel* level) = win inline, ios 0x2e5674, m1 0x24a6f0, imac 0x2a38f0 {
        if (!level) return;

        GJFeatureState featureState;

        if (level->m_isEpic >= 3) {
            featureState = GJFeatureState::Mythic;
        } else if (level->m_isEpic == 2) {
            featureState = GJFeatureState::Legendary;
        } else if (level->m_isEpic == 1) {
            featureState = GJFeatureState::Epic;
        } else if (level->m_featured >= 1) {
            featureState = GJFeatureState::Featured;
        } else {
            featureState = GJFeatureState::None;
        }

        this->updateFeatureState(featureState);
    }

    GJFeatureState m_featureState;
}

[[link(android)]]
class GJDropDownLayer : cocos2d::CCLayerColor {
    // virtual ~GJDropDownLayer();
    GJDropDownLayer() {
        m_buttonMenu = nullptr;
        m_listLayer = nullptr;
        m_mainLayer = nullptr;
        m_closeOnHide = false;
        m_delegate = nullptr;
        m_fastMenu = false;
    }

    static GJDropDownLayer* create(const char* title, float height, bool) = win inline, imac 0x5cfc90, m1 0x503e08, ios inline {
        auto ret = new GJDropDownLayer();
        if (ret->init(title, height, p2)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static GJDropDownLayer* create(const char* title) = win inline, m1 0x50432c, imac 0x5d01d0, ios inline {
        return create(title, 220.0f, false);
    }

    virtual void draw() = win 0x426f0, m1 0x5046c0, imac 0x5d05d0, ios 0x3ab0a0;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x5046fc, imac 0x5d0600, ios 0x3ab0dc { return true; }
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x50471c, imac 0x5d0660, ios 0x3ab0fc {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x50470c, imac 0x5d0620, ios 0x3ab0ec {}
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x504714, imac 0x5d0640, ios 0x3ab0f4 {}
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x5043b0, imac 0x5d0290, ios 0x3aad90;
    virtual void keyBackClicked() = win 0x250330, m1 0x5043e8, imac 0x5d02d0, ios 0x3aadc8;
    virtual void customSetup() = m1 0x50434c, imac 0x5d0210, ios 0x3aad2c {}
    virtual void enterLayer() = win 0x425a0, m1 0x504378, imac 0x5d0260, ios 0x3aad58;
    virtual void exitLayer(cocos2d::CCObject*) = win 0x250350, imac 0x5d0310, m1 0x50440c, ios 0x3aadec;
    virtual void showLayer(bool) = win 0x250390, m1 0x504458, imac 0x5d0350, ios 0x3aae38;
    virtual void hideLayer(bool) = win 0x2504e0, imac 0x5d0460, m1 0x50455c, ios 0x3aaf3c;
    virtual void layerVisible() = win 0x426a0, m1 0x504660, imac 0x5d0570, ios 0x3ab040;
    virtual void layerHidden() = win 0x250630, m1 0x504670, imac 0x5d0590, ios 0x3ab050;
    virtual void enterAnimFinished() = m1 0x50465c, imac 0x5d0560, ios 0x3ab03c {}
    virtual void disableUI() = win 0x2502f0, m1 0x504350, imac 0x5d0220, ios 0x3aad30;
    virtual void enableUI() = win 0x250310, m1 0x504364, imac 0x5d0240, ios 0x3aad44;

    bool init(char const*, float, bool) = ios 0x3aa920, win 0x24feb0, imac 0x5cfdd0, m1 0x503f2c;
    bool init(char const* title) = win inline, m1 0x50433c, imac 0x5d01f0, ios 0x3aad1c {
        return init(title, 220.0f, false);
    }

    cocos2d::CCPoint m_endPosition;
    cocos2d::CCPoint m_startPosition;
    cocos2d::CCMenu* m_buttonMenu;
    GJListLayer* m_listLayer;
    cocos2d::CCLayer* m_mainLayer;
    bool m_closeOnHide;
    GJDropDownLayerDelegate* m_delegate;
    bool m_fastMenu;
}

[[link(android)]]
class GJDropDownLayerDelegate {
    virtual void dropDownLayerWillClose(GJDropDownLayer*) {}
}

[[link(android), depends(DynamicMoveCalculation), depends(PulseEffectAction), depends(TouchToggleAction), depends(CollisionTriggerAction), depends(ToggleTriggerAction), depends(SpawnTriggerAction), depends(GroupCommandObject2), depends(OpacityEffectAction), depends(CountTriggerAction), depends(TimerItem), depends(TimerTriggerAction)]]
class GJEffectManager : cocos2d::CCNode {
    // virtual ~GJEffectManager();
    // GJEffectManager();

    static GJEffectManager* create() = win 0x2538f0;

    virtual bool init() = win 0x253950, imac 0x2c8f30, m1 0x26c924, ios 0x125e8;

    cocos2d::ccColor3B activeColorForIndex(int) = m1 0x26d510, imac 0x2ca350;
    float activeOpacityForIndex(int) = m1 0x26d668, imac 0x2ca4b0;
    TodoReturn addAllInheritedColorActions(cocos2d::CCArray*);
    void addCountToItem(int itemId, int value) = win inline, m1 0x2778a8, imac 0x2d6aa0, ios 0x196d4 {
        itemId = std::clamp(itemId, 0, 9999);
        this->updateCountForItem(itemId, value + m_itemCountMap[itemId]);
    }
    TodoReturn addMoveCalculation(CCMoveCNode*, cocos2d::CCPoint, GameObject*);
    void calculateBaseActiveColors() = win 0x2540d0;
    void calculateInheritedColor(int, ColorAction*) = win 0x2544b0;
    void calculateLightBGColor(cocos2d::ccColor3B) = win 0x25c090, m1 0x2792bc, imac 0x2d8f40, ios 0x1a4e8;
    TodoReturn checkCollision(int const&, int const&);
    void colorActionChanged(ColorAction*) = m1 0x26e59c, imac 0x2cb670;
    bool colorExists(int col) = win inline, m1 0x26e578, imac 0x2cb640, ios 0x13770 {
        return m_colorActionVector[(std::min)((std::max)(col, 0), 1101)] != nullptr;
    }
    TodoReturn colorForEffect(cocos2d::ccColor3B, cocos2d::ccHSVValue);
    cocos2d::ccColor3B colorForGroupID(int, cocos2d::ccColor3B const&, bool) = win 0x25a780, m1 0x2767c0, imac 0x2d5730, ios 0x18ca8;
    TodoReturn colorForIndex(int);
    cocos2d::ccColor3B colorForPulseEffect(cocos2d::ccColor3B const&, PulseEffectAction*) = win 0x25a3d0, ios 0x13580, imac 0x2cb400, m1 0x26e320;
    void controlActionsForControlID(int, GJActionCommand) = win 0x2566c0;
    void controlActionsForTrigger(EffectGameObject*, GJActionCommand) = win 0x257020;
    int countForItem(int) = win 0x25b060, imac 0x2d6930, m1 0x2777b8, ios 0x19694;
    TodoReturn createFollowCommand(float, float, float, int, int, int, int);
    GroupCommandObject2* createKeyframeCommand(int, cocos2d::CCArray*, GameObject*, int, int, bool, float, float, float, float, float, float, gd::vector<int> const&) = win 0x255980;
    void createMoveCommand(cocos2d::CCPoint pt, int groupID, float duration, int easingType, float easingRate, bool lockPlayerX, bool lockPlayerY, bool lockCameraX, bool lockCameraY, float moveModX, float moveModY, int uniqueID, int controlID) = win 0x255370;
    void createPlayerFollowCommand(float, float, int, float, float, int, int, int) = win 0x255860;
    void createRotateCommand(float, float, int, int, int, float, bool, bool, bool, int, int) = win 0x255620;
    TodoReturn createTransformCommand(double, double, double, double, bool, float, int, int, int, float, bool, bool, int, int);
    cocos2d::CCArray* getAllColorActions() = win 0x253f40;
    TodoReturn getAllColorSprites();
    ColorAction* getColorAction(int) = ios 0x12b80, win 0x254870, imac 0x2ca1e0, m1 0x26d3c4;
    ColorActionSprite* getColorSprite(int) = win 0x254930, m1 0x26d56c, imac 0x2ca3a0, ios 0x12c50;
    TodoReturn getLoadedMoveOffset(gd::unordered_map<int, std::pair<double, double>>&);
    static cocos2d::ccColor3B getMixedColor(cocos2d::ccColor3B color1, cocos2d::ccColor3B color2, float ratio) = win inline, imac 0x2d90d0, m1 0x279460, ios 0x1a5d4 {
        auto r = color1.r * ratio + color2.r * (1.f - ratio);
        auto g = color1.g * ratio + color2.g * (1.f - ratio);
        auto b = color1.b * ratio + color2.b * (1.f - ratio);
        return { std::clamp<uint8_t>(r, 0, 255), std::clamp<uint8_t>(g, 0, 255), std::clamp<uint8_t>(b, 0, 255) };
    }
    CCMoveCNode* getMoveCommandNode(GroupCommandObject2*) = win 0x257c40;
    CCMoveCNode* getMoveCommandObject() = win 0x257b40;
    TodoReturn getOpacityActionForGroup(int);
    gd::string getSaveString() = m1 0x279654, imac 0x2d9360;
    GroupCommandObject2* getTempGroupCommand() = win 0x257ee0;
    void handleObjectCollision(bool, int, int) = win 0x2551b0;
    TodoReturn hasActiveDualTouch();
    bool hasBeenTriggered(int, int) = m1 0x276f60, imac 0x2d5fd0;
    TodoReturn hasPulseEffectForGroupID(int);
    bool isGroupEnabled(int);
    TodoReturn keyForGroupIDColor(int, cocos2d::ccColor3B const&, bool);
    void loadFromState(EffectManagerState&) = win 0x25cb40, m1 0x27a3c0, imac 0x2da290;
    void objectsCollided(int, int) = m1 0x26f310, imac 0x2cc680;
    void onRewardedVideo(cocos2d::CCObject* sender);
    TodoReturn opacityForIndex(int);
    TodoReturn opacityModForGroup(int);
    TodoReturn pauseTimer(int);
    void playerButton(bool, bool) = win 0x25ae00, imac 0x2d61b0, m1 0x277110, ios 0x1921c;
    void playerDied();
    void postCollisionCheck() = ios 0x13cbc, win 0x254f50, m1 0x26f040, imac 0x2cc390;
    void postMoveActions() = win 0x259470, m1 0x275628, imac 0x2d4110, ios 0x180fc;
    void preCollisionCheck() = win inline, ios 0x13ca4, imac 0x2cc370, m1 0x26f028 {
        for (auto& pair : m_unkMap288) {
            pair.second = false;
        }
    }
    void prepareMoveActions(float, bool) = win 0x258060, m1 0x27353c, imac 0x2d16c0, ios 0x16a74;
    void processColors() = ios 0x12d30, win 0x253fb0, m1 0x26d6d0, imac 0x2ca520;
    void processCopyColorPulseActions() = m1 0x26dc58, imac 0x2cabf0;
    void processInheritedColors() = m1 0x26d980, imac 0x2ca840, win 0x254190;
    TodoReturn processMoveCalculations();
    TodoReturn processPulseActions();
    TodoReturn registerCollisionTrigger(int, int, int, bool, bool, gd::vector<int> const&, int, int);
    TodoReturn registerRotationCommand(GroupCommandObject2*, bool);
    TodoReturn removeAllPulseActions();
    TodoReturn removeColorAction(int);
    void removePersistentFromAllItems() = win inline, ios 0x19ab4, imac 0x2d7520, m1 0x2780a0 {
        m_persistentItemCountMap.clear();
    }
    TodoReturn removePersistentFromAllTimers();
    void removeTriggeredID(int objectUniqueID, int playerUniqueID) = win 0x25ad50, imac 0x2d5ef0, m1 0x276e68, ios 0x190a4;
    void reset() = ios 0x128dc, win 0x253d10, imac 0x2c9190, m1 0x26cb18;
    void resetEffects() = ios 0x12994, win 0x254c90, m1 0x26cc10, imac 0x2c93a0;
    TodoReturn resetMoveActions();
    TodoReturn resetTempGroupCommands(bool);
    TodoReturn resetToggledGroups();
    TodoReturn resetTriggeredIDs();
    TodoReturn resumeTimer(int);
    TodoReturn runCountTrigger(int, int, bool, int, bool, gd::vector<int> const&, int, int);
    TodoReturn runDeathTrigger(int, bool, gd::vector<int> const&, int, int);
    TodoReturn runOpacityActionOnGroup(int, float, float, int, int);
    PulseEffectAction* runPulseEffect(int, bool, float, float, float, PulseEffectType, cocos2d::ccColor3B, cocos2d::ccHSVValue, int, bool, bool, bool, bool, int, int) = win 0x2598b0;
    TodoReturn runTimerTrigger(int, double, bool, int, gd::vector<int> const&, int, int);
    TodoReturn runTouchTriggerCommand(int, bool, TouchTriggerType, TouchTriggerControl, bool, gd::vector<int> const&, int, int);
    inline void saveCompletedMove(int groupId, double dx, double dy) {
        auto& entry = m_unkMap578[groupId];
        entry.first += dx;
        entry.second += dy;
    }
    void saveToState(EffectManagerState&) = win 0x25c520;
    void setColorAction(ColorAction*, int) = win 0x254a90, m1 0x26e4cc, imac 0x2cb570;
    void setFollowing(int, int, bool);
    void setupFromString(gd::string) = win 0x25c290;
    bool shouldBlend(int) = m1 0x26d69c, imac 0x2ca4e0;
    void spawnGroup(int, float, bool, gd::vector<int> const&, int, int) = win 0x25a920, m1 0x275528, imac 0x2d3ff0, ios 0x18068;
    TodoReturn spawnObject(GameObject*, float, gd::vector<int> const&, int, int);
    void startTimer(int, double, double, bool, bool, bool, float, bool, int, gd::vector<int> const&, int, int) = win 0x25b5f0;
    void storeTriggeredID(int objectUniqueID, int playerUniqueID) = win 0x25ac60, m1 0x276d94, imac 0x2d5e20, ios 0x19070;
    double timeForItem(int) = win 0x25bfd0, m1 0x2791cc, imac 0x2d8de0, ios 0x1a4a0;
    TodoReturn timerExists(int);
    TodoReturn toggleGroup(int, bool);
    void toggleItemPersistent(int, bool);
    void toggleTimerPersistent(int, bool);
    TodoReturn transferPersistentItems();
    TodoReturn traverseInheritanceChain(InheritanceNode*);
    CCMoveCNode* tryGetMoveCommandNode(int) = win inline, m1 0x272cb0, imac 0x2d0bd0, ios 0x1667c {
        auto it = m_unkMap618.find(p0);
        return it != m_unkMap618.end() ? it->second : nullptr;
    }
    TodoReturn updateActiveOpacityEffects();
    TodoReturn updateColorAction(ColorAction*);
    void updateColorEffects(float) = imac 0x2cb7d0, m1 0x26e6c0;
    void updateColors(cocos2d::ccColor3B, cocos2d::ccColor3B);
    void updateCountForItem(int, int) = win 0x25b120, imac 0x2d6b10, m1 0x27791c, ios 0x19748;
    void updateEffects(float) = ios 0x137b4, win 0x254b10, imac 0x2cb6a0, m1 0x26e5bc;
    void updateOpacityAction(OpacityEffectAction*);
    void updateOpacityEffects(float);
    void updatePulseEffects(float) = win 0x259e30, imac 0x2cb9a0, m1 0x26e850;
    void updateSpawnTriggers(float) = ios 0x18e14, imac 0x2d5a80, m1 0x276a7c, win 0x25aa10;
    void updateTimer(int, double) = win 0x25b850;
    void updateTimers(float, float) = win 0x25b9e0, m1 0x2789fc, imac 0x2d82a0, ios 0x19fcc;
    TodoReturn wasFollowing(int, int);
    bool wouldCreateLoop(InheritanceNode*, int) = win 0x254850;

    TriggerEffectDelegate* m_triggerEffectDelegate;
    cocos2d::CCDictionary* m_unkObject148;
    cocos2d::CCDictionary* m_unkDict150;
    gd::vector<PulseEffectAction> m_pulseEffectVector;
    gd::unordered_map<int, gd::vector<PulseEffectAction>> m_pulseEffectMap;
    gd::unordered_map<int, OpacityEffectAction> m_opacityEffectMap;
    gd::vector<TouchToggleAction> m_unkVector1e0;
    gd::unordered_map<int, gd::vector<CountTriggerAction>> m_countTriggerActions;
    gd::vector<CollisionTriggerAction> m_unkVector230;
    gd::vector<ToggleTriggerAction> m_unkVector248;
    cocos2d::CCDictionary* m_colorActionDict;
    cocos2d::CCDictionary* m_unkDict268;
    gd::vector<InheritanceNode*> m_unkVector270;
    gd::unordered_map<int, bool> m_unkMap288;
    gd::vector<ColorAction*> m_colorActionVector;
    gd::vector<ColorActionSprite*> m_colorActionSpriteVector;
    gd::vector<bool> m_unkVector2f0;
    gd::unordered_map<int, int> m_itemCountMap;
    gd::unordered_map<int, int> m_persistentItemCountMap;
    gd::unordered_set<int> m_persistentTimerItemSet;
    gd::unordered_map<int, TimerItem> m_timerItemMap;
    gd::unordered_map<int, gd::vector<TimerTriggerAction>> m_unkMap3f8;
    cocos2d::CCArray* m_unkArray430;
    gd::vector<bool> m_unkVector438;
    gd::unordered_set<int> m_unkMap460;
    gd::map<int, int> m_unkMap498;
    gd::unordered_set<int> m_unkMap4c8;
    gd::vector<SpawnTriggerAction> m_spawnTriggerActions;
    gd::vector<GroupCommandObject2*> m_unkVector518;
    gd::vector<GroupCommandObject2*> m_unkVector530;
    gd::vector<cocos2d::CCObject*> m_unkVector548;
    gd::vector<GroupCommandObject2> m_unkVector560;
    gd::unordered_map<int, std::pair<double, double>> m_unkMap578;
    gd::vector<GroupCommandObject2*> m_unkVector5b0;
    gd::unordered_map<int, gd::vector<GroupCommandObject2*>> m_unkMap5c8;
    gd::vector<GroupCommandObject2*> m_unkVector600;
    gd::unordered_map<int, CCMoveCNode*> m_unkMap618;
    gd::unordered_map<int, CCMoveCNode*> m_unkMap650;
    gd::unordered_map<int, CCMoveCNode*> m_unkMap688;
    gd::vector<CCMoveCNode*> m_unkVector6c0;
    gd::vector<CCMoveCNode*> m_unkVector6d8;
    gd::vector<CCMoveCNode*> m_unkVector6f0;
    gd::vector<DynamicMoveCalculation> m_unkVector708;
    gd::map<std::pair<int, int>, gd::vector<GroupCommandObject2*>> m_unkMap770;
    float m_unk780;
    float m_unk784;
    float m_unk788;
    float m_unk78C;
    float m_unk790;
    float m_unk794;
    bool m_unk798;
}

[[link(android)]]
class GJFlyGroundLayer : GJGroundLayer {
    // virtual ~GJFlyGroundLayer();

    static GJFlyGroundLayer* create();

    virtual bool init() = m1 0x50757c, imac 0x5d3a00;
}

[[link(android)]]
class GJFollowCommandLayer : SetupTriggerPopup {
    // virtual ~GJFollowCommandLayer();

    static GJFollowCommandLayer* create(EffectGameObject*, cocos2d::CCArray*) = win 0x268d00;

    virtual void determineStartValues() = win 0x26a130, imac 0x2c39d0, m1 0x267ae4, ios 0x13a72c;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x26b1a0, imac 0x2c45a0, m1 0x268494, ios 0x13aed4;
    virtual void textChanged(CCTextInputNode*) = win 0x26a850, imac 0x2c3fe0, m1 0x268044, ios 0x13ac1c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x268e30, m1 0x2661e4, imac 0x2c1fb0, ios 0x139368;
    void onUpdateGroupID(cocos2d::CCObject* sender) = win 0x26a790, m1 0x267498, imac 0x2c33a0, ios 0x13a3b8;
    void onUpdateGroupID2(cocos2d::CCObject* sender) = win 0x26a7f0, m1 0x267554, imac 0x2c3460, ios 0x13a420;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x26a440;
    void sliderXModChanged(cocos2d::CCObject* sender) = win 0x26a5d0;
    void sliderYModChanged(cocos2d::CCObject* sender) = win 0x26a610;
    void updateDuration() = win 0x26b120, m1 0x267df4, imac 0x2c3d20, ios 0x13a9e4;
    void updateDurLabel(bool) = win 0x26a500;
    void updateTargetGroupID() = win 0x26ae80, m1 0x267f44, imac 0x2c3ea0, ios 0x13ab1c;
    void updateTargetGroupID2() = win 0x26af50, m1 0x267fc4, imac 0x2c3f40, ios 0x13ab9c;
    void updateTextInputLabel() = win 0x26ad60;
    void updateTextInputLabel2() = win 0x26adf0;
    void updateXMod() = win 0x26b020, m1 0x267e64, imac 0x2c3da0, ios 0x13aa4c;
    void updateXModLabel() = win 0x26a650;
    void updateYMod() = win 0x26b0a0, m1 0x267ed4, imac 0x2c3e20, ios 0x13aab4;
    void updateYModLabel() = win 0x26a6f0;

    CCTextInputNode* m_moveTimeInput;
    Slider* m_moveTimeSlider;
    float m_moveTime;
    CCTextInputNode* m_xModInput;
    CCTextInputNode* m_yModInput;
    Slider* m_xModSlider;
    Slider* m_yModSlider;
    float m_xMod;
    float m_yMod;
    CCTextInputNode* m_targetIDInput;
    int m_targetGroupID;
    CCTextInputNode* m_followIDInput;
    int m_followGroupID;
}

[[link(android)]]
class GJFriendRequest : cocos2d::CCNode {
    // virtual ~GJFriendRequest();
    GJFriendRequest() {
        m_requestID = 0;
        m_accountID = 0;
        m_unusedToAccountID = 0;
        m_isRead = false;
    }

    static GJFriendRequest* create() = win inline, m1 0x4a23ec, imac 0x549cf0, ios 0xb342c {
        auto ret = new GJFriendRequest();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static GJFriendRequest* create(cocos2d::CCDictionary*) = win 0x16fc70, m1 0x490504, imac 0x536a90, ios 0xa7da4;

    virtual bool init() = win 0x77db0, m1 0x4a2484, imac 0x549d80, ios 0xb34b8;

    int m_requestID;
    int m_accountID;
    int m_unusedToAccountID;
    gd::string m_message;
    gd::string m_uploadDate;
    bool m_isRead;
}

[[link(android)]]
class GJGameLevel : cocos2d::CCNode {
    /*inline static GJGameLevel* createWithCoder(DS_Dictionary* dict) {
        //inlined on windows
        auto level = GJGameLevel::create();
        level->dataLoaded(dict);
        return level;
    }*/
    // virtual ~GJGameLevel();
    GJGameLevel() = win 0x13f6d0;

    static GJGameLevel* create() = ios 0x9637c, win 0x169b40, imac 0x5168e0, m1 0x473d34;
    static GJGameLevel* create(cocos2d::CCDictionary*, bool) = win 0x1683e0, m1 0x4760f0, imac 0x519030, ios 0x978ec;
    static gd::string lengthKeyToString(int key) = win 0x16a0d0, imac 0x5457e0, m1 0x49e59c, ios 0xb0008;

    virtual void encodeWithCoder(DS_Dictionary*) = win 0x16c090, imac 0x5482f0, m1 0x4a0bd0, ios 0xb2118;
    virtual bool canEncode() = m1 0x4a1674, imac 0x548e40, ios 0xb2bb0 { return true; }
    virtual bool init() = win 0x169ba0, imac 0x544f30, m1 0x49de78, ios 0xaf984;

    bool areCoinsVerified();
    void copyLevelInfo(GJGameLevel*) = win 0x16aaa0, m1 0x49f54c, imac 0x5468b0, ios 0xb0cf8;
    static GJGameLevel* createWithCoder(DS_Dictionary* dict) = win inline, ios 0xb12c4, m1 0x49fcbc, imac 0x547250 {
        auto level = GJGameLevel::create();
        level->dataLoaded(dict);
        return level;
    }
    void dataLoaded(DS_Dictionary*) = ios 0xb12f4, win 0x16b150, imac 0x5472c0, m1 0x49fd40;
    int demonIconForDifficulty(DemonDifficultyType) = imac 0x548f50, m1 0x4a1794;
    TodoReturn generateSettingsString();
    gd::string getAudioFileName() = win 0x16a3f0, imac 0x545b00, m1 0x49e8d8, ios 0xb0188;
    int getAverageDifficulty() = win 0x16a230, imac 0x545880, m1 0x49e674, ios 0xb0034;
    char const* getCoinKey(int coinNumber) = win 0x16a2a0, imac 0x535eb0, m1 0x48f96c, ios 0xa76cc;
    int getLastBuildPageForTab(int) = win 0x16a320, ios 0xb0060, imac 0x5458d0, m1 0x49e6a0;
    const char* getLengthKey(int length, bool platformer) = imac 0x5457a0, m1 0x49e560;
    GJGameLevel* getListSnapshot() = win 0x16adc0;
    int getNormalPercent();
    TodoReturn getSongName();
    gd::string getUnpackedLevelDescription() = win 0x16d150, m1 0x4a16d8, imac 0x548eb0, ios 0xb2c14;
    void handleStatsConflict(GJGameLevel*) = ios 0x9f82c, win 0x16cc80, imac 0x526870, m1 0x482228;
    inline bool isPlatformer() {
        return m_levelLength == 5;
    }
    void levelWasAltered() = m1 0x49e000, imac 0x545150;
    TodoReturn levelWasSubmitted();
    TodoReturn parseSettingsString(gd::string);
    void saveNewScore(int, int) = win inline, m1 0x49ebbc, imac 0x545dc0, ios 0xb0314 {
        if (p1 == 0) {
            if (p0 > 0 && (m_bestTime > p0 || m_bestTime == 0)) m_bestTime = p0;
        }
        else {
            if (m_bestPoints < p0 || m_bestPoints == 0) m_bestPoints = p0;
        }
        uint32_t seed = (((m_bestTime + 7890) % 34567) * 601 + ((abs(m_bestPoints) + 3456) % 78901) * 967 + 94819) % 94433;
        m_platformerSeed = (int)(((int)seed >> 16 ^ seed) * 829) % 77849;
        storeNewLocalScore(p0, p1);
    }
    void savePercentage(int percent, bool isPracticeMode, int clicks, int attempts, bool isChkValid) = ios 0xafc44, win 0x169db0, m1 0x49e170, imac 0x545320;
    void scoreStringToVector(gd::string&, gd::vector<int>&) = win 0x16a910;
    TodoReturn scoreVectorToString(gd::vector<int>&, int);
    void setAccountID(int);
    void setAttempts(int);
    void setAttemptTime(int);
    void setClicks(int);
    void setCoinsVerified(int);
    void setDailyID(int);
    void setDemon(int);
    void setJumps(int);
    void setLastBuildPageForTab(int, int);
    void setLevelID(int);
    void setNewNormalPercent(int);
    void setNewNormalPercent2(int);
    void setNormalPercent(int);
    void setObjectCount(int);
    void setOriginalLevel(int);
    void setPassword(int);
    void setStars(int);
    TodoReturn shouldCheatReset();
    void storeNewLocalScore(int, int) = win 0x16a690, m1 0x49ed44, imac 0x545f50, ios 0xb049c;
    TodoReturn unverifyCoins();

    cocos2d::CCDictionary* m_lastBuildSave;
    geode::SeedValueRSV m_levelID;
    gd::string m_levelName;
    gd::string m_levelDesc;
    gd::string m_levelString;
    gd::string m_creatorName;
    gd::string m_recordString;
    gd::string m_uploadDate;
    gd::string m_updateDate;
    gd::string m_lockedEditorLayers;
    gd::string m_savedCameraPositions;

    cocos2d::CCPoint m_previewLock;
    geode::SeedValueRSV m_userID;
    geode::SeedValueRSV m_accountID;
    GJDifficulty m_difficulty;
    int m_audioTrack;
    int m_songID;
    int m_levelRev;
    bool m_unlisted;
    bool m_friendsOnly;
    geode::SeedValueRSV m_objectCount;
    int m_levelIndex;
    int m_ratings;
    int m_ratingsSum;
    int m_downloads;
    bool m_isEditable;
    bool m_gauntletLevel;
    bool m_gauntletLevel2;
    int m_workingTime;
    int m_workingTime2;
    bool m_lowDetailMode;
    bool m_lowDetailModeToggled;
    bool m_disableShakeToggled;
    bool m_selected;
    bool m_localOrSaved;
    bool m_disableShake;
    geode::SeedValueRS m_isVerified;
    bool m_isVerifiedRaw;
    bool m_isUploaded;
    bool m_hasBeenModified;
    int m_levelVersion;
    int m_gameVersion;

    geode::SeedValueRSV m_attempts;
    geode::SeedValueRSV m_jumps;
    geode::SeedValueRSV m_clicks;
    geode::SeedValueRSV m_attemptTime;
    int m_chk;
    bool m_isChkValid;
    bool m_isCompletionLegitimate;
    geode::SeedValueVSR m_normalPercent;
    geode::SeedValueRSV m_orbCompletion;
    geode::SeedValueRSV m_newNormalPercent2;
    int m_practicePercent;
    int m_likes;
    int m_dislikes;
    int m_levelLength;
    int m_featured;
    int m_isEpic;
    bool m_levelFavorited;
    int m_levelFolder;
    geode::SeedValueRSV m_dailyID;
    geode::SeedValueRSV m_demon;
    int m_demonDifficulty;
    geode::SeedValueRSV m_stars;
    bool m_autoLevel;
    int m_coins;
    geode::SeedValueRSV m_coinsVerified;
    geode::SeedValueRS m_password;
    geode::SeedValueRSV m_originalLevel;
    bool m_twoPlayerMode;
    int m_failedPasswordAttempts;
    geode::SeedValueRSV m_firstCoinVerified;
    geode::SeedValueRSV m_secondCoinVerified;
    geode::SeedValueRSV m_thirdCoinVerified;
    int m_starsRequested;
    bool m_showedSongWarning;
    int m_starRatings;
    int m_starRatingsSum;
    int m_maxStarRatings;
    int m_minStarRatings;
    int m_demonVotes;
    int m_rateStars;
    int m_rateFeature;
    gd::string m_rateUser;
    bool m_dontSave;
    bool m_levelNotDownloaded;
    int m_requiredCoins;
    bool m_isUnlocked;
    cocos2d::CCPoint m_lastCameraPos;
    float m_lastEditorZoom;
    int m_lastBuildTab;
    int m_lastBuildPage;
    int m_lastBuildGroupID;
    GJLevelType m_levelType;
    int m_M_ID;
    gd::string m_tempName;
    gd::string m_capacityString;
    bool m_highObjectsEnabled;
    bool m_unlimitedObjectsEnabled;
    gd::string m_personalBests;
    int m_timestamp;
    int m_listPosition;
    gd::string m_songIDs;
    gd::string m_sfxIDs;
    int m_54; //aka k106
    int m_bestTime;
    int m_bestPoints;
    int m_platformerSeed;
    gd::string m_localBestTimes;
    gd::string m_localBestPoints;
}

[[link(android)]]
class GJGameLoadingLayer : cocos2d::CCLayer {
    // virtual ~GJGameLoadingLayer();
    GJGameLoadingLayer() {
        m_level = nullptr;
        m_editor = false;
    }

    static GJGameLoadingLayer* create(GJGameLevel* level, bool editor) = ios 0x20b54c, imac 0x1546e0, m1 0x1282f4, win inline {
        auto ret = new GJGameLoadingLayer();
        if (ret->init(level, editor)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static GJGameLoadingLayer* transitionToLoadingLayer(GJGameLevel* level, bool editor) = ios 0x20b4c0, imac 0x1545c0, m1 0x1281e8, win 0x242890;

    virtual void onEnter() = win 0x52db0, m1 0x1286f4, imac 0x154bb0, ios 0x20b7f4;
    virtual void onEnterTransitionDidFinish() = win 0x242b20, m1 0x1286f0, imac 0x154ba0, ios 0x20b7f0;

    void gameLayerDidUnload() = win inline, m1 0xe0f48, imac 0xfe6a0, ios 0x1db780 {
        this->runAction(cocos2d::CCSequence::create(
            cocos2d::CCDelayTime::create(.01f),
            cocos2d::CCCallFunc::create(this, callfunc_selector(GJGameLoadingLayer::loadLevel)),
            nullptr
        ));
    }
    bool init(GJGameLevel* level, bool editor) = ios 0x20b698, imac 0x154a40, m1 0x128590, win inline {
        if (!cocos2d::CCLayer::init()) return false;

        if (level) {
            m_level = level;
            level->retain();
        }
        m_editor = editor;

        auto winSize = cocos2d::CCDirector::sharedDirector()->getWinSize();
        auto loadingLabel = cocos2d::CCLabelBMFont::create("Loading...", "bigFont.fnt");
        loadingLabel->setScale(.7f);
        this->addChild(loadingLabel, 1);
        loadingLabel->setAnchorPoint({ 1.f, 0.f });
        loadingLabel->setPosition({ winSize.width - 20.f, 20.f });

        return true;
    }
    void loadLevel() = win 0x242a80, imac 0x154b40, m1 0x12868c, ios 0x20b790;

    GJGameLevel* m_level;
    bool m_editor;
}

[[link(android), depends(EventTriggerInstance), depends(SongChannelState), depends(DynamicObjectAction), depends(AdvancedFollowInstance), depends(EnterEffectInstance), depends(GameObjectPhysics), depends(GJValueTween), depends(SFXTriggerInstance), depends(SFXTriggerState), depends(SongTriggerState), depends(EnterEffectAnimValue)]]
class GJGameState {
    // ~GJGameState();
    // GJGameState();

    TodoReturn controlTweenAction(int, int, GJActionCommand);
    GameObjectPhysics& getGameObjectPhysics(GameObject*) = win 0x200400;
    void processStateTriggers() = ios 0x1dacdc, imac 0xfd2b0, m1 0xdff70, win 0x200290;
    void stopTweenAction(int action) = win inline, m1 0xdfb0c, imac 0xfcd00, ios inline {
        m_tweenActions.erase(action);
    }
    void tweenValue(float from, float to, int action, float duration, int easing, float rate, int uniqueID, int controlID) = win 0x200140, m1 0xdfa70, imac 0xfcc50, ios 0x1daa70;
    void updateTweenAction(float value, int action) = win inline {
        switch (action) {
            case 1: m_cameraPosition.x = value; break;
            case 2: m_cameraPosition.y = value; break;
            case 7: m_levelFlipping = value; break;
            case 9: m_portalY = value; break;
            case 10: m_unkPoint6.x = value; break;
            case 11: m_unkPoint6.y = value; break;
            case 12: m_unkPoint8.x = value; break;
            case 13: m_unkPoint8.y = value; break;
            case 14: m_cameraZoom = value; break;
            case 15: m_cameraOffset.x = value; break;
            case 16: m_cameraOffset.y = value; break;
            case 17: m_cameraAngle = value; break;
            case 18: m_unkPoint26.x = value; break;
            case 19: m_unkPoint26.y = value; break;
            case 20: m_middleGroundOffsetY = value; break;
            case 21: m_unkPoint12.x = value; break;
            case 22: m_unkPoint12.y = value; break;
            case 25: m_unkFloat9 = value; break;
        }
    }
    void updateTweenActions(float tweenValue) = win inline, m1 0xdfca4, imac 0xfcea0, ios 0x1daba8 {
        for (auto it = m_tweenActions.begin(); it != m_tweenActions.end();) {
            it->second.step(tweenValue);
            this->updateTweenAction(it->second.m_currentValue, it->first);
            if (it->second.m_finished) it = m_tweenActions.erase(it);
            else ++it;
        }
    }

    float m_cameraZoom;
    float m_targetCameraZoom;
    cocos2d::CCPoint m_cameraOffset;
    cocos2d::CCPoint m_unkPoint1;
    cocos2d::CCPoint m_unkPoint2;
    cocos2d::CCPoint m_unkPoint3;
    cocos2d::CCPoint m_unkPoint4;
    cocos2d::CCPoint m_unkPoint5;
    cocos2d::CCPoint m_unkPoint6;
    cocos2d::CCPoint m_unkPoint7;
    cocos2d::CCPoint m_unkPoint8;
    cocos2d::CCPoint m_unkPoint9;
    cocos2d::CCPoint m_unkPoint10;
    cocos2d::CCPoint m_unkPoint11;
    cocos2d::CCPoint m_unkPoint12;
    cocos2d::CCPoint m_unkPoint13;
    cocos2d::CCPoint m_unkPoint14;
    cocos2d::CCPoint m_unkPoint15;
    cocos2d::CCPoint m_unkPoint16;
    cocos2d::CCPoint m_unkPoint17;
    cocos2d::CCPoint m_unkPoint18;
    cocos2d::CCPoint m_unkPoint19;
    cocos2d::CCPoint m_unkPoint20;
    cocos2d::CCPoint m_unkPoint21;
    cocos2d::CCPoint m_unkPoint22;
    cocos2d::CCPoint m_unkPoint23;
    cocos2d::CCPoint m_unkPoint24;
    cocos2d::CCPoint m_unkPoint25;
    cocos2d::CCPoint m_unkPoint26;
    cocos2d::CCPoint m_unkPoint27;
    cocos2d::CCPoint m_unkPoint28;
    cocos2d::CCPoint m_unkPoint29;
    bool m_unkBool1;
    int m_unkInt1;
    bool m_unkBool2;
    int m_unkInt2;
    bool m_unkBool3;
    cocos2d::CCPoint m_unkPoint30;
    float m_middleGroundOffsetY;
    int m_unkInt3;
    int m_unkInt4;
    bool m_unkBool4;
    bool m_unkBool5;
    float m_unkFloat2;
    float m_unkFloat3;
    int m_unkInt5;
    int m_unkInt6;
    int m_unkInt7;
    int m_unkInt8;
    int m_unkInt9;
    int m_unkInt10;
    int m_unkInt11;
    float m_unkFloat4;
    float m_unkUint1;
    float m_portalY;
    bool m_unkBool6;
    bool m_gravityRelated;
    int m_unkInt12;
    float m_unkInt13;
    int m_unkInt14;
    int m_unkInt15;
    bool m_unkBool7;
    bool m_unkBool8;
    bool m_unkBool9;
    float m_unkFloat5;
    float m_unkFloat6;
    float m_unkFloat7;
    float m_unkFloat8;
    float m_cameraAngle;
    float m_targetCameraAngle;
    bool m_playerStreakBlend;
    float m_timeWarp;
    float m_timeWarpRelated;
    int m_currentChannel;
    int m_rotateChannel;
    gd::unordered_map<int, int> m_spawnChannelRelated0;
    gd::unordered_map<int, bool> m_spawnChannelRelated1;
    double m_totalTime;
    double m_levelTime;
    double m_unkDouble3;
    int m_unkUint2;
    float m_unkUint3;
    int m_currentProgress;
    int m_unkUint4;
    int m_unkUint5;
    int m_unkUint6;
    float m_unkUint7;
    GameObject* m_lastActivatedPortal1;
    GameObject* m_lastActivatedPortal2;
    cocos2d::CCPoint m_cameraPosition;
    bool m_unkBool10;
    float m_levelFlipping;
    bool m_unkBool11;
    bool m_unkBool12;
    bool m_isDualMode;
    float m_unkFloat9;
    gd::unordered_map<int, GJValueTween> m_tweenActions;
    int m_cameraEdgeValue0;
    int m_cameraEdgeValue1;
    int m_cameraEdgeValue2;
    int m_cameraEdgeValue3;
    gd::unordered_map<int, GameObjectPhysics> m_gameObjectPhysics;
    gd::vector<float> m_unkVecFloat1;
    float m_unkUint10;
    int m_unkUint11;
    int m_unkUint12;
    cocos2d::CCPoint m_cameraStepDiff;
    float m_unkFloat10;
    unsigned int m_timeModRelated;
    bool m_timeModRelated2;
    gd::map<std::pair<int, int>, int> m_unkMapPairIntIntInt;
    float m_unkUint13;
    cocos2d::CCPoint m_unkPoint32;
    // same as m_cameraPosition but still updates in the editor when not playtesting?
    cocos2d::CCPoint m_cameraPosition2;
    bool m_unkBool20;
    bool m_unkBool21;
    bool m_unkBool22;
    float m_unkUint14;
    bool m_unkBool26;
    bool m_cameraShakeEnabled;
    float m_cameraShakeFactor;
    float m_unkUint15;
    float m_unkUint16;
    double m_unkUint64_1;
    cocos2d::CCPoint m_unkPoint34;
    unsigned int m_dualRelated;
    gd::unordered_map<int, EnhancedGameObject*> m_stateObjects;
    gd::map<std::pair<GJGameEvent, int>, gd::vector<EventTriggerInstance>> m_unkMapPairGJGameEventIntVectorEventTriggerInstance;
    gd::map<std::pair<GJGameEvent, int>, int> m_unkMapPairGJGameEventIntInt;
    gd::unordered_map<int, gd::vector<EnterEffectInstance>> m_enterEffectInstanceVectors;
    gd::unordered_map<int, gd::vector<EnterEffectInstance>> m_exitEffectInstanceVectors;
    gd::vector<int> m_enterChannelMap;
    gd::vector<int> m_exitChannelMap;
    gd::vector<EnterEffectInstance> m_moveEffectInstances;
    gd::vector<EnterEffectInstance> m_rotateEffectInstances;
    gd::vector<EnterEffectInstance> m_scaleEffectInstances;
    gd::vector<EnterEffectInstance> m_fadeEffectInstances;
    gd::vector<EnterEffectInstance> m_tintEffectInstances;
    gd::unordered_set<int> m_unsortedAreaEffects;
    bool m_unkBool27;
    gd::vector<AdvancedFollowInstance> m_advanceFollowInstances;
    gd::vector<DynamicObjectAction> m_dynamicObjActions1;
    gd::vector<DynamicObjectAction> m_dynamicObjActions2;
    bool m_unkBool28;
    bool m_unkBool29;
    float m_unkUint17;
    gd::unordered_map<int, gd::vector<int>> m_unkUMap8;
    gd::map<std::pair<int,int>, SFXTriggerInstance> m_proximityVolumeRelated;
    gd::unordered_map<int, SongChannelState> m_songChannelStates;
    gd::unordered_map<int, gd::vector<SongTriggerState>> m_songTriggerStateVectors;
    gd::vector<SFXTriggerState> m_sfxTriggerStates;
    bool m_unkBool30;
    int m_background;
    int m_ground;
    int m_middleground;
    bool m_unkBool31;
    int m_points;
    bool m_unkBool32;
    unsigned int m_pauseCounter;
    unsigned int m_pauseBufferTimer;
}

[[link(android)]]
class GJGarageLayer : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, GameRateDelegate, ListButtonBarDelegate, DialogDelegate, CharacterColorDelegate, RewardedVideoDelegate {
    GJGarageLayer() = ios 0x309620 {
        m_playerObject = nullptr;
        m_unknown = nullptr;
        m_supporter = nullptr;
        m_hasClosed = false;
        m_cursor2 = nullptr;
        m_currentIcon = nullptr;
        m_iconSelection = nullptr;
        m_iconID = 0;
        m_selectedIconType = IconType::Cube;
        m_videoPlaying = false;
    }
    ~GJGarageLayer() = win inline, m1 0x2e9268, imac 0x355830, ios 0x301c44 {
        auto gm = GameManager::sharedState();
        gm->m_gameRateDelegate1 = nullptr;
        CC_SAFE_RELEASE(m_tabButtons);
        CC_SAFE_RELEASE(m_pageButtons);
        if (gm->m_rewardedVideoDelegate == this) gm->m_rewardedVideoDelegate = nullptr;
    }

    static GJGarageLayer* node() = ios 0x301d84, win inline, imac 0x355a30, m1 0x2e93a8, android64 inline {
        auto ret = new GJGarageLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene() = ios 0x301d40, win 0x26b5b0, imac 0x3559f0, m1 0x2e9364;

    virtual bool init() = win 0x26b770, m1 0x2e94a8, imac 0x355ba0, ios 0x301df8;
    virtual void keyBackClicked() = win 0x2718f0, imac 0x35c850, m1 0x2efc68, ios 0x3071f4;
    virtual void textInputOpened(CCTextInputNode*) = win 0x26d390, imac 0x3590e0, m1 0x2ec848, ios 0x304944;
    virtual void textInputClosed(CCTextInputNode*) = win 0x26d580, imac 0x359210, m1 0x2ec9a0, ios 0x304a74;
    virtual void textChanged(CCTextInputNode*) = win 0xc3060, imac 0x3593d0, m1 0x2ecb88, ios 0x304bdc;
    virtual void listButtonBarSwitchedPage(ListButtonBar*, int) = win 0xc3110, m1 0x2eecb4, imac 0x35b7f0, ios 0x306730;
    virtual void showUnlockPopup(int, UnlockType) = win 0x270320, imac 0x35b980, m1 0x2eee0c, ios 0x306818;
    virtual void updateRate() = win 0x270ff0, imac 0x35c600, m1 0x2efa54, ios 0x30706c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x270bc0, imac 0x35c390, m1 0x2ef81c, ios 0x306e34;
    virtual void dialogClosed(DialogLayer*) = win 0x270e20, imac 0x35c4a0, m1 0x2ef918, ios 0x306f30;
    virtual void playerColorChanged() = win 0x270170, imac 0x35b6f0, m1 0x2eebd4, ios 0x306698;
    virtual void rewardedVideoFinished() = win 0x26d380, m1 0x2ec838, imac 0x3590c0, ios 0x304934;

    static gd::string achievementForUnlock(int id, UnlockType type) = win inline, m1 0x2ef6f4, imac 0x35c290, ios inline {
        auto achievementManager = AchievementManager::sharedState();
        auto achievement = achievementManager->achievementForUnlock(id, type);
        return achievementManager->isAchievementAvailable(achievement) ? achievement : "";
    }
    static gd::string descriptionForUnlock(int id, UnlockType type) = win 0x270a30, m1 0x2ef554, imac 0x35c100, ios 0x306d48;
    cocos2d::CCArray* getItems(IconType type) = win 0x26ee50, m1 0x2edef8, imac 0x35a7b0, ios 0x305b10;
    cocos2d::CCArray* getItems(int count, int page, IconType type, int current) = ios 0x3058b8, imac 0x35a440, m1 0x2edb68, win 0x26ef10;
    gd::string getLockFrame(int id, UnlockType type) = win inline, m1 0x2eeb40, imac 0x35b650, ios inline {
        return "GJ_lock_001";
    }
    void onArrow(cocos2d::CCObject* sender) = win 0x26e590, imac 0x359460, m1 0x2ecc3c, ios 0x304c48;
    void onBack(cocos2d::CCObject* sender) = win 0x271750, imac 0x3588c0, m1 0x2ec048, ios 0x304604;
    void onInfo(cocos2d::CCObject* sender) = win 0x26d190, m1 0x2ec28c, imac 0x358b10, ios 0x304838;
    void onNavigate(cocos2d::CCObject* sender) = ios 0x305378, win 0x26e690, imac 0x359d50, m1 0x2ed4c8;
    void onPaint(cocos2d::CCObject* sender) = win 0x271570, m1 0x2ec234, imac 0x358ab0, ios 0x3047e0;
    void onRewardedVideo(cocos2d::CCObject* sender) = m1 0x2ec4b0, imac 0x358d10;
    void onSelect(cocos2d::CCObject* sender) = ios 0x305b88, win 0x26f890, imac 0x35a860, m1 0x2edf90;
    void onSelectTab(cocos2d::CCObject* sender) = win 0x26e6c0, imac 0x359430, m1 0x2ecc08, ios 0x304c14;
    void onShards(cocos2d::CCObject* sender) = ios 0x3047b4, win 0x271420, m1 0x2ec208, imac 0x358a80;
    void onShop(cocos2d::CCObject* sender) = ios 0x304754, win 0x2716f0, m1 0x2ec1a8, imac 0x358a20;
    void onSpecial(cocos2d::CCObject* sender) = ios 0x305af4, win 0x270120, m1 0x2ededc, imac 0x35a790;
    void onToggleItem(cocos2d::CCObject* sender) = win 0x26ff30, imac 0x35b0c0, m1 0x2ee60c, ios 0x30621c;
    void playRainbowEffect() = win 0x271230, imac 0x35b4b0, m1 0x2ee9a4, ios 0x3064fc;
    void playShadowEffect() = win inline, m1 0x2efbdc, imac 0x35c7c0, ios inline {
        auto circleWave = CCCircleWave::create(20.f, 60.f, .3f, false);
        circleWave->m_color.r = 0;
        circleWave->m_color.g = 0;
        circleWave->m_color.b = 0;
        circleWave->m_opacityMod = .5f;
        circleWave->m_blendAdditive = false;
        circleWave->setPosition(m_playerObject->getPosition());
        this->addChild(circleWave, -1);
    }
    void selectTab(IconType type) = ios 0x304d0c, win 0x26e6f0, imac 0x3595c0, m1 0x2ecd78;
    void setupIconSelect() = ios 0x303b74, win 0x26d930, m1 0x2eb53c, imac 0x357db0;
    void setupPage(int page, IconType type) = ios 0x304de4, win 0x26e7b0, imac 0x359700, m1 0x2ecea8;
    void setupSpecialPage() = ios 0x3053b0, win 0x26f1e0, imac 0x359d80, m1 0x2ed500;
    void showUnlockPopupNew(int id, UnlockType type) = win inline, m1 0x2eecd4, imac 0x35b810, ios inline {
        ItemInfoPopup::create(id, type)->show();
    }
    static gd::string titleForUnlock(int id, UnlockType type) = win inline, m1 0x2ef3bc, imac 0x35bf80, ios 0x306c5c {
        auto achievementManager = AchievementManager::sharedState();
        return achievementManager->getAchievementsWithID(achievementManager->achievementForUnlock(id, type).c_str())->valueForKey("title")->getCString();
    }
    void toggleGlow() = win inline, m1 0x2eeb6c, imac 0x35b680, ios inline {
        auto gameManager = GameManager::sharedState();
        gameManager->m_playerGlow = !gameManager->m_playerGlow;
        m_playerObject->m_hasGlowOutline = gameManager->m_playerGlow;
        m_playerObject->updateColors();
        if (gameManager->m_playerGlow) this->playRainbowEffect();
    }
    void updatePlayerColors() = win 0x2701a0, m1 0x2eaef4, imac 0x3577a0, ios 0x3035e8;
    void updatePlayerName(char const* name) = win inline, m1 0x2ec998, imac 0x3591f0, ios inline {}

    CCTextInputNode* m_usernameInput;
    SimplePlayer* m_playerObject;
    cocos2d::CCArray* m_tabButtons;
    cocos2d::CCArray* m_pageButtons;
    cocos2d::CCNode* m_unknown;
    cocos2d::CCSprite* m_supporter;
    bool m_hasClosed;
    IconType m_iconType;
    gd::map<IconType, int> m_iconPages;
    cocos2d::CCSprite* m_cursor1;
    cocos2d::CCSprite* m_cursor2;
    CCMenuItemSpriteExtra* m_currentIcon;
    ListButtonBar* m_iconSelection;
    CCMenuItemSpriteExtra* m_leftArrow;
    CCMenuItemSpriteExtra* m_rightArrow;
    cocos2d::CCMenu* m_navDotMenu;
    int m_iconID;
    IconType m_selectedIconType;
    bool m_videoPlaying;
}

[[link(android)]]
class GJGradientLayer : cocos2d::CCLayerGradient {
    // virtual ~GJGradientLayer();
    GJGradientLayer() {
        m_baseColor = 0;
        m_detailColor = 0;
        m_triggerObject = nullptr;
        m_noScale = false;
        m_blendingMode = 0;
        m_blendingLayer = 0;
        m_gradientID = 0;
    }

    static GJGradientLayer* create() = win inline, m1 0x104788, imac 0x1290e0 {
        auto ret = new GJGradientLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x242810, imac 0x154550, m1 0x128178, ios 0x20b450;

    int m_baseColor;
    int m_detailColor;
    cocos2d::CCPoint m_gradientPosition;
    GradientTriggerObject* m_triggerObject;
    bool m_noScale;
    int m_blendingMode;
    int m_blendingLayer;
    int m_gradientID;
}

[[link(android)]]
class GJGroundLayer : cocos2d::CCLayer {
    // virtual ~GJGroundLayer();

    static GJGroundLayer* create(int groundID, int lineType) = ios 0x2fddc, win 0x276870, m1 0x50636c, imac 0x5d2760;

    virtual void draw() = m1 0x50745c, imac 0x5d38a0, ios 0x30c08 {}
    virtual void showGround() = win 0x2774c0, m1 0x507250, imac 0x5d36c0, ios 0x30aa0;
    virtual void fadeInGround(float) = win 0x2774d0, imac 0x5d36d0, m1 0x50725c, ios 0x30aac;
    virtual void fadeOutGround(float) = win 0x2776c0, m1 0x507430, imac 0x5d3870, ios 0x30c00;

    void createLine(int lineType) = win 0x277120, m1 0x506958, imac 0x5d2d50;
    void deactivateGround() = win inline, m1 0x507438, imac 0x5d3880 {
        this->stopAllActions();
        m_showGround = false;
    }
    void fadeInFinished() = win 0x2774c0, m1 0x5072dc, imac 0x5d3740;
    float getGroundY() = win inline, m1 0x5074a8, imac 0x5d38f0 {
        return 0.f;
    }
    void hideShadows() = win inline, m1 0x5072e8, imac 0x5d3750 {
        if (auto leftShadow = this->getChildByTag(0)) leftShadow->setVisible(false);
        if (auto rightShadow = this->getChildByTag(1)) rightShadow->setVisible(false);
    }
    bool init(int groundID, int lineType) = ios 0x2fe60, win 0x2768f0, imac 0x5d2870, m1 0x506450;
    void loadGroundSprites(int, bool) = win 0x276e60, m1 0x506af4, imac 0x5d2f10;
    void positionGround(float y) = win inline, m1 0x507460, imac 0x5d38b0 {
        this->setPosition(0.f, y);
    }
    float scaleGround(float) = win 0x277310, m1 0x506f20, imac 0x5d3350;
    void toggleVisible01(bool visible) = win inline, m1 0x506df0, imac 0x5d31f0 {
        if (m_showGround1 == visible) return;
        m_showGround1 = visible;
        this->setVisible(visible && m_showGround2);
    }
    void toggleVisible02(bool visible) = win inline, m1 0x506e20, imac 0x5d3230 {
        if (m_showGround2 == visible) return;
        m_showGround2 = visible;
        this->setVisible(visible && m_showGround1);
    }
    void updateGround01Color(cocos2d::ccColor3B color) = win inline, m1 0x506d70, imac 0x5d3170 {
        if (auto children = m_ground1Sprite->getChildren()) {
            for (int i = 0; i < children->count(); i++) {
                static_cast<cocos2d::CCSprite*>(children->objectAtIndex(i))->setColor(color);
            }
        }
    }
    void updateGround02Color(cocos2d::ccColor3B color) = win inline, m1 0x506e9c, imac 0x5d32c0 {
        if (!m_ground2Sprite) return;
        if (auto children = m_ground2Sprite->getChildren()) {
            for (int i = 0; i < children->count(); i++) {
                static_cast<cocos2d::CCSprite*>(children->objectAtIndex(i))->setColor(color);
            }
        }
    }
    void updateGroundPos(cocos2d::CCPoint pos) = win inline, m1 0x506e4c, imac 0x5d3270 {
        m_ground1Sprite->setPosition(pos);
        if (m_ground2Sprite) m_ground2Sprite->setPosition(pos);
    }
    void updateGroundWidth(bool) = m1 0x507014, imac 0x5d3460;
    void updateLineBlend(bool blend) = win inline, imac 0x5d3670, m1 0x507214 {
        if (m_blendLine == blend) return;
        m_blendLine = blend;
        if (blend) m_lineSprite->setBlendFunc({ GL_SRC_ALPHA, GL_ONE });
        else m_lineSprite->setBlendFunc({ GL_ONE, GL_ONE_MINUS_SRC_ALPHA });
    }
    void updateShadows() = win 0x277550, m1 0x507180, imac 0x5d35e0;
    void updateShadowXPos(float, float) = win 0x2775f0, m1 0x507368, imac 0x5d37b0;

    cocos2d::CCSprite* m_ground1Sprite;
    cocos2d::CCSprite* m_ground2Sprite;
    float m_textureWidth;
    cocos2d::CCSprite* m_lineSprite;
    bool m_showGround;
    bool m_blendLine;
    float m_ground1Offset;
    int m_lineType;
    float m_groundWidth;
    bool m_showGround1;
    bool m_showGround2;
    float m_unk1cc;
    bool m_cameraRotated;
}

[[link(android)]]
class GJHttpResult : cocos2d::CCNode {
    // virtual ~GJHttpResult();

    static GJHttpResult* create(bool, gd::string, gd::string, GJHttpType);

    bool init(bool, gd::string, gd::string, GJHttpType);

    bool m_success;
    gd::string m_response;
    gd::string m_requestTag;
    GJHttpType m_httpType;
}

[[link(android)]]
class GJItemIcon : cocos2d::CCSprite {
    GJItemIcon() = ios 0x3096bc {
        m_player = nullptr;
        m_iconRequestID = 0;
        m_isIcon = false;
        m_unlockID = 0;
        m_unlockType = (UnlockType)0;
    }
    ~GJItemIcon() = win inline, m1 0x2f0a9c, imac 0x35d7f0, ios 0x307b58 {
        GameManager::sharedState()->unloadIcons(m_iconRequestID);
    }

    static GJItemIcon* create(UnlockType p0, int p1, cocos2d::ccColor3B p2, cocos2d::ccColor3B p3, bool p4, bool p5, bool p6, cocos2d::ccColor3B p7) = win inline, imac 0x35d940, m1 0x2f0ba0, ios 0x307bd8 {
        auto ret = new GJItemIcon();
        if (ret->init(p0, p1, p2, p3, p4, p5, p6, p7)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static GJItemIcon* createBrowserItem(UnlockType unlockType, int itemID) = ios inline, win 0x273070, imac 0x35a800, m1 0x2edf50 {
        return create(unlockType, itemID, { 175, 175, 175 }, { 255, 255, 255 }, false, true, true, { 255, 255, 255 });
    }
    static GJItemIcon* createStoreItem(UnlockType, int, bool, cocos2d::ccColor3B) = win 0x272f40, imac 0x35d910, m1 0x2f0b84, ios 0x307bbc;
    static float scaleForType(UnlockType) = ios 0x305b68, win 0x273d90, imac 0x35a830, m1 0x2edf70;
    static cocos2d::ccColor3B unlockedColorForType(int) = win inline, imac 0x35e100, m1 0x2f130c, ios 0x3081e4 {
        switch (p0) {
            case 1: return { 10, 30, 20 };
            case 2: return { 33, 22, 66 };
            case 3: return { 20, 20, 40 };
            case 4: return { 20, 30, 50 };
            case 5: return { 50, 50, 50 };
            default: return { 60, 30, 20 };
        }
    }

    virtual void setOpacity(unsigned char) = win 0x2738a0, imac 0x35dfc0, m1 0x2f11e0, ios 0x308148;
    void changeToLockedState(float) = ios 0x306088, win 0x273cb0, imac 0x35af50, m1 0x2ee474;
    void darkenStoreItem(cocos2d::ccColor3B) = win 0x2739c0, imac 0x35e160, m1 0x2f1374, ios 0x308248;
    void darkenStoreItem(ShopType) = win 0x273940, m1 0x2ee44c, imac 0x35aee0, ios 0x306060;
    bool init(UnlockType, int, cocos2d::ccColor3B, cocos2d::ccColor3B, bool, bool, bool, cocos2d::ccColor3B) = ios 0x307c98, win 0x273190, m1 0x2f0cb0, imac 0x35da60;
    void toggleEnabledState(bool) = win 0x273bf0, m1 0x2ee554, imac 0x35b000, ios 0x306164;

    cocos2d::CCSprite* m_player;
    int m_iconRequestID;
    cocos2d::CCSize m_playerSize;
    bool m_isIcon;
    int m_unlockID;
    UnlockType m_unlockType;
}

[[link(android)]]
class GJLevelList : cocos2d::CCNode {
    // virtual ~GJLevelList();

    static GJLevelList* create() = win 0x173760, imac 0x517750, m1 0x474a98, ios 0x96cac;
    static GJLevelList* create(cocos2d::CCDictionary*) = win 0x172e70, imac 0x51bac0, m1 0x478394, ios 0x99114;

    virtual void encodeWithCoder(DS_Dictionary*) = win 0x174ff0, imac 0x54d230, m1 0x4a5298, ios 0xb5668;
    virtual bool canEncode() = m1 0x4a54d0, imac 0x54d4a0, ios 0xb58a0 { return true; }
    virtual bool init() = win 0x1738f0, m1 0x4a3784, imac 0x54b420, ios 0xb42e0;

    void addLevelToList(GJGameLevel* level) = win 0x173ee0, m1 0x4a3fbc, imac 0x54bdf0, ios 0xb4874;
    int completedLevels() = imac 0x54ca00, m1 0x4a4a48, ios 0xb4fa4, win 0x174860;
    static GJLevelList* createWithCoder(DS_Dictionary* dict) = win inline, ios 0xb533c, m1 0x4a4f38, imac 0x54cec0 {
        auto ret = GJLevelList::create();
        ret->dataLoaded(dict);
        return ret;
    }
    void dataLoaded(DS_Dictionary*) = ios 0xb536c, win 0x174cd0, imac 0x54cef0, m1 0x4a4f68;
    TodoReturn duplicateListLevels(GJLevelList*);
    static gd::string frameForListDifficulty(int diff, DifficultyIconType type) = win inline, imac 0x54d4b0, m1 0x4a54d8, ios 0xb58a8 {
        if (diff == 0) return type == DifficultyIconType::NoText ? "diffIcon_auto_btn_001.png" : "difficulty_auto_btn_001.png";

        if (diff > 10) diff = 0;
        switch (diff) {
            case 6: diff = 7; break;
            case 7: diff = 8; break;
            case 8: diff = 6; break;
        }

        if (type == DifficultyIconType::NoText) {
            return cocos2d::CCString::createWithFormat("diffIcon_%02d_btn_001.png", diff)->getCString();
        }
        else if (type == DifficultyIconType::DefaultText && diff > 5) {
            return cocos2d::CCString::createWithFormat("difficulty_%02d_btn2_001.png", diff)->getCString();
        }
        else {
            return cocos2d::CCString::createWithFormat("difficulty_%02d_btn_001.png", diff)->getCString();
        }
    }
    cocos2d::CCArray* getListLevelsArray(cocos2d::CCArray*) = win 0x174160;
    gd::string getUnpackedDescription() = win 0x173b80, imac 0x54b670, m1 0x4a39d0, ios 0xb44a8;
    void handleStatsConflict(GJLevelList*) = imac 0x54b4a0, m1 0x4a37fc;
    bool hasMatchingLevels(GJLevelList*) = ios 0xb4390, win 0x173970, imac 0x54b4c0, m1 0x4a3814;
    TodoReturn orderForLevel(int);
    void parseListLevels(gd::string) = win 0x173c40, imac 0x52ca10, m1 0x487a60, ios 0xa2ab4;
    TodoReturn removeLevelFromList(int);
    void reorderLevel(int levelID, int newPosition) = win 0x174070, m1 0x4a44e0, imac 0x54c400;
    TodoReturn reorderLevelStep(int, bool);
    void showListInfo() = ios 0xb4ff8, win 0x174900, imac 0x54ca50, m1 0x4a4aac;
    int totalLevels() = win inline, imac 0x54c9e0, m1 0x4a4a38, ios 0xb4f94 {
        return m_levels.size();
    }
    TodoReturn updateLevelsString();

    gd::vector<int> m_levels;
    int m_listID;
    int m_listVersion;
    int m_downloads;
    int m_likes;
    int m_difficulty;
    int m_accountID;
    int m_folder;
    int m_listRevision;
    int m_listOrder;
    int m_original;
    int m_diamonds;
    int m_levelsToClaim;
    bool m_isEditable;
    bool m_unlisted;
    bool m_friendsOnly;
    bool m_uploaded;
    bool m_favorite;
    bool m_featured;
    bool m_onlineLevelsLoaded;
    gd::string m_creatorName;
    gd::string m_listName;
    gd::string m_unkString;
    gd::string m_levelsString;
    gd::string m_listDesc;
    int m_uploadDate;
    int m_updateDate;
    cocos2d::CCDictionary* m_levelsDict;
    GJLevelType m_listType;
    int m_M_ID;
}

[[link(android)]]
class GJLevelScoreCell : TableViewCell {
    // virtual ~GJLevelScoreCell();
    GJLevelScoreCell(char const*, float, float);

    virtual bool init() = win 0x3c7f0, m1 0x1f2e24, imac 0x243de0, ios 0x11405c;
    virtual void draw() = win 0xad710, imac 0x243e30, m1 0x1f2e6c, ios 0x1140a4;

    void loadFromScore(GJUserScore*) = ios 0x10b8d4, win 0xb93d0, imac 0x238d60, m1 0x1e8cec;
    void onViewProfile(cocos2d::CCObject* sender) = win 0xb9e30;
    void updateBGColor(int);

    GJUserScore* m_userScore;
}

[[link(android)]]
class GJListLayer : cocos2d::CCLayerColor {
    // virtual ~GJListLayer();

    static GJListLayer* create(BoomListView*, char const*, cocos2d::ccColor4B, float, float, int) = ios 0x838dc, win 0x277e70, imac 0x5b9e00, m1 0x4eff60;

    bool init(BoomListView*, char const*, cocos2d::ccColor4B, float, float, int) = ios 0x839d0, win 0x277fa0, imac 0x5b9f10, m1 0x4f0054;

    BoomListView* m_listView;
}

[[link(android)]]
class GJLocalLevelScoreCell : TableViewCell {
    // virtual ~GJLocalLevelScoreCell();
    GJLocalLevelScoreCell(char const*, float, float);

    virtual bool init() = win 0x3c7f0, m1 0x1f2cec, imac 0x243bf0, ios 0x113f6c;
    virtual void draw() = win 0xad710, imac 0x243c10, m1 0x1f2cf8, ios 0x113f78;

    void loadFromScore(GJLocalScore*) = win 0xb8fd0, m1 0x1e96ac, imac 0x239740;
    void updateBGColor(int);

    GJLocalScore* m_localScore;
}

[[link(android)]]
class GJLocalScore : cocos2d::CCObject {
    // virtual ~GJLocalScore();

    static GJLocalScore* create(int, int) = m1 0x4a1ebc, imac 0x5496e0;

    bool init(int, int);

    int m_points;
    LevelLeaderboardType m_type;
    bool m_unk040;
}

[[link(android)]]
class GJMapObject : cocos2d::CCNode {
    // virtual ~GJMapObject();

    static GJMapObject* create(cocos2d::CCNode*);

    static GJMapObject* createMonster(int);
    bool init(cocos2d::CCNode*);
    void monsterIdle();
    void monsterJump();
    void moveFinished();
    void moveMonster();
    void moveMonster(cocos2d::CCPoint, float);
    void playerJump();
    void setObjectOrigin(cocos2d::CCPoint, float);
    void startMonsterJumpLoop();
    void startPlayerJumpLoop();
    void touchMonster();
    void updateShadow(float, float, cocos2d::CCPoint);

    float m_jumpStopTime;
    cocos2d::CCNode* m_mainNode;
    cocos2d::CCSprite* m_shadowSprite;
    cocos2d::CCPoint m_objectOrigin;
    float m_objectOffset;
    bool m_monsterIdle;
    bool m_monsterMoving;
    float m_moveStopTime;
    int m_monstersTouched;
}

[[link(android)]]
class GJMapPack : cocos2d::CCNode {
    GJMapPack() = ios 0xb64a0 {
        m_levels = nullptr;
        m_packID = 0;
        m_difficulty = GJDifficulty::Auto;
        m_stars = 0;
        m_coins = 0;
        m_MId = 0;
        m_isGauntlet = false;
    }
    ~GJMapPack() = win inline, m1 0x4a17ac, imac 0x548f70, ios 0xb2cdc {
        CC_SAFE_RELEASE(m_levels);
    }

    static GJMapPack* create(cocos2d::CCDictionary*) = win 0x16d210, m1 0x478e24, imac 0x51c560, ios 0x99770;

    static GJMapPack* create() = win inline, m1 0x4a1910, imac 0x5490c0, ios 0xb2d50 {
        auto ret = new GJMapPack();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x16dd70, imac 0x549550, m1 0x4a1d4c, ios 0xb2fdc;

    int completedMaps() = ios 0xb303c, win 0x16e080, imac 0x5495d0, m1 0x4a1dac;
    bool hasCompletedMapPack() = ios 0xb30d4, win inline, imac 0x549680, m1 0x4a1e70 {
        auto total = this->totalMaps();
        if (total > 0) return this->completedMaps() >= total;
        else return 0;
    }
    void parsePackColors(gd::string, gd::string) = win 0x16ddd0, m1 0x4a1ac8, imac 0x5492a0;
    void parsePackLevels(gd::string) = imac 0x549180, m1 0x4a19b4;
    int totalMaps() = win inline {
        if (this->m_levels) {
            return this->m_levels->count();
        }

        return 0;
    }

    cocos2d::CCArray* m_levels;
    int m_packID;
    GJDifficulty m_difficulty;
    int m_stars;
    int m_coins;
    gd::string m_packName;
    gd::string m_levelStrings;
    cocos2d::ccColor3B m_textColour;
    cocos2d::ccColor3B m_barColour;
    int m_MId;
    bool m_isGauntlet;
}

[[link(android)]]
class GJMessageCell : TableViewCell, FLAlertLayerProtocol, UploadPopupDelegate, UploadActionDelegate {
    // virtual ~GJMessageCell();
    GJMessageCell(char const*, float, float);

    virtual bool init() = win 0xbb620, m1 0x1f4e7c, imac 0x2464b0, ios 0x11530c;
    virtual void draw() = win 0xad710, imac 0x2467c0, m1 0x1f5164, ios 0x115538;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xbd440, imac 0x246890, m1 0x1f5210, ios 0x1155e4;
    virtual void uploadActionFinished(int, int) = win 0xbd5e0, imac 0x246a20, m1 0x1f5374, ios 0x1156cc;
    virtual void uploadActionFailed(int, int) = win 0xbd760, m1 0x1f5568, imac 0x246c10, ios 0x1157d0;
    virtual void onClosePopup(UploadActionPopup*) = win 0xbb4b0, imac 0x246d80, m1 0x1f56d0, ios 0x115868;

    void loadFromMessage(GJUserMessage*) = ios 0x10d474, win 0xbc7e0, m1 0x1ea9f8, imac 0x23aa30;
    TodoReturn markAsRead();
    void onDeleteMessage(cocos2d::CCObject* sender);
    void onToggle(cocos2d::CCObject* sender);
    void onViewMessage(cocos2d::CCObject* sender);
    void onViewProfile(cocos2d::CCObject* sender);
    void updateBGColor(int);
    TodoReturn updateToggle();

    GJUserMessage* m_message;
    UploadActionPopup* m_popup;
    CCMenuItemToggler* m_toggler;
}

[[link(android)]]
class GJMessagePopup : FLAlertLayer, UploadActionDelegate, UploadPopupDelegate, FLAlertLayerProtocol, DownloadMessageDelegate {
    // virtual ~GJMessagePopup();

    static GJMessagePopup* create(GJUserMessage*) = win 0x28fd10;

    virtual void keyBackClicked() = win 0x84650, m1 0x23ce50, imac 0x294c90, ios 0x2db374;
    virtual void downloadMessageFinished(GJUserMessage*) = win 0x2914b0, imac 0x294d00, m1 0x23cecc, ios 0x2db3f0;
    virtual void downloadMessageFailed(int) = win 0x291500, imac 0x294dc0, m1 0x23cfa4, ios 0x2db464;
    virtual void uploadActionFinished(int, int) = win 0x291540, imac 0x294e60, m1 0x23d05c, ios 0x2db51c;
    virtual void uploadActionFailed(int, int) = win 0x2916d0, imac 0x295030, m1 0x23d250, ios 0x2db640;
    virtual void onClosePopup(UploadActionPopup*) = win 0x2917a0, imac 0x295180, m1 0x23d3c0, ios 0x2db6dc;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x291820, imac 0x295280, m1 0x23d4e4, ios 0x2db774;

    void blockUser();
    bool init(GJUserMessage*) = win 0x28fe50;
    void loadFromGJMessage(GJUserMessage*) = ios 0x2da894, win 0x290760, m1 0x23c0a8, imac 0x293e60;
    void onBlock(cocos2d::CCObject* sender) = win 0x291280;
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onRemove(cocos2d::CCObject* sender) = win 0x2910f0;
    void onReply(cocos2d::CCObject* sender) = win 0x290db0;

    bool m_actionSuccess;
    cocos2d::CCLabelBMFont* m_errorLabel;
    GJUserMessage* m_message;
    LoadingCircle* m_loadingCircle;
    CCMenuItemSpriteExtra* m_closeButton;
    UploadActionPopup* m_uploadPopup;
}

[[link(android)]]
class GJMGLayer : cocos2d::CCLayer {
    // virtual ~GJMGLayer();
    GJMGLayer() {
        m_ground1Sprite = nullptr;
        m_ground2Sprite = nullptr;
        m_textureWidth = 0.f;
        m_unk1b0 = nullptr;
        m_showGround = false;
        m_groundWidth = 0.f;
        m_showGround1 = true;
        m_showGround2 = true;
        m_unk1c4 = 0.f;
        m_cameraRotated = false;
        m_blendMG1 = false;
        m_blendMG2 = false;
        m_mg1BatchNode = nullptr;
        m_mg2BatchNode = nullptr;
        m_groundScale = 0.f;
        m_ground2Offset = 0.f;
    }

    static GJMGLayer* create(int) = win inline, m1 0x5075c4, imac 0x5d3a40 {
        auto ret = new GJMGLayer();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void draw() = m1 0x508038, imac 0x5d4520, ios 0x31548 {}
    virtual void showGround() = win 0x2774c0, m1 0x508008, imac 0x5d44f0, ios 0x3153c;

    void deactivateGround() = win inline, m1 0x508014, imac 0x5d4500 {
        this->stopAllActions();
        m_showGround = false;
    }
    static float defaultYOffsetForBG2(int) = win inline, m1 0x5075a4, imac 0x5d3a20 {
        switch (p0) {
            case 1: return 25.f;
            case 2: case 3: return 30.f;
            default: return 0.f;
        }
    }
    bool init(int) = win 0x2776d0, m1 0x5076a0, imac 0x5d3b50;
    void loadGroundSprites(int, bool) = win 0x277bd0, m1 0x507b28, imac 0x5d4000;
    float scaleGround(float) = m1 0x507ea8, imac 0x5d4380;
    void toggleVisible01(bool visible) = win inline, m1 0x507d74, imac 0x5d4230 {
        if (m_showGround1 == visible) return;
        m_showGround1 = visible;
        this->setVisible(visible && m_showGround2);
    }
    void toggleVisible02(bool visible) = win inline, m1 0x507da4, imac 0x5d4270 {
        if (m_showGround2 == visible) return;
        m_showGround2 = visible;
        this->setVisible(visible && m_showGround1);
    }
    void updateGroundColor(cocos2d::ccColor3B color, bool ground2) = win inline, m1 0x507ce4, imac 0x5d41a0 {
        auto groundSprite = ground2 ? m_ground2Sprite : m_ground1Sprite;
        if (!groundSprite) return;
        if (auto children = groundSprite->getChildren()) {
            for (int i = 0; i < children->count(); i++) {
                static_cast<cocos2d::CCSprite*>(children->objectAtIndex(i))->setColor(color);
            }
        }
    }
    void updateGroundOpacity(unsigned char opacity, bool ground2) = win inline, m1 0x507e20, imac 0x5d4300 {
        auto groundSprite = ground2 ? m_ground2Sprite : m_ground1Sprite;
        if (!groundSprite) return;
        if (auto children = groundSprite->getChildren()) {
            for (int i = 0; i < children->count(); i++) {
                static_cast<cocos2d::CCSprite*>(children->objectAtIndex(i))->setOpacity(opacity);
            }
        }
    }
    void updateGroundPos(cocos2d::CCPoint pos) = win inline, m1 0x507dd0, imac 0x5d42b0 {
        m_ground1Sprite->setPosition(pos);
        if (m_ground2Sprite) m_ground2Sprite->setPosition(pos);
    }
    void updateGroundWidth(bool) = m1 0x507f24, imac 0x5d4410;
    void updateMG01Blend(bool blend) = win inline, m1 0x50803c, imac 0x5d4530 {
        if (m_blendMG1 == blend) return;
        m_blendMG1 = blend;
        if (blend) m_mg1BatchNode->setBlendFunc({ GL_SRC_ALPHA, GL_ONE });
        else m_mg1BatchNode->setBlendFunc({ GL_ONE, GL_ONE_MINUS_SRC_ALPHA });
    }
    void updateMG02Blend(bool blend) = win inline, m1 0x508078, imac 0x5d4580 {
        if (m_blendMG2 == blend) return;
        m_blendMG2 = blend;
        if (blend) m_mg2BatchNode->setBlendFunc({ GL_SRC_ALPHA, GL_ONE });
        else m_mg2BatchNode->setBlendFunc({ GL_ONE, GL_ONE_MINUS_SRC_ALPHA });
    }

    cocos2d::CCSprite* m_ground1Sprite;
    cocos2d::CCSprite* m_ground2Sprite;
    float m_textureWidth;
    void* m_unk1b0;
    bool m_showGround;
    float m_groundWidth;
    bool m_showGround1;
    bool m_showGround2;
    float m_unk1c4;
    bool m_cameraRotated;
    bool m_blendMG1;
    bool m_blendMG2;
    cocos2d::CCSpriteBatchNode* m_mg1BatchNode;
    cocos2d::CCSpriteBatchNode* m_mg2BatchNode;
    float m_groundScale;
    float m_ground2Offset;
}

[[link(android)]]
class GJMoreGamesLayer : GJDropDownLayer {
    // virtual ~GJMoreGamesLayer();
    // GJMoreGamesLayer();

    static GJMoreGamesLayer* create() = win 0x278610, m1 0x69376c, imac 0x77eca0;

    virtual void customSetup() = win 0x278cf0, imac 0x77f500, m1 0x693ed4, ios 0x6911c;

    cocos2d::CCArray* getMoreGamesList() = win 0x278950, m1 0x693ac8, imac 0x77f0f0;

    cocos2d::CCArray* m_moreGamesList;
}

[[link(android)]]
class GJMPDelegate {
    virtual void joinLobbyFinished(int) {}
    virtual void joinLobbyFailed(int, GJMPErrorCode) {}
    virtual void didUploadMPComment(int) {}
    virtual void updateComments() {}
}

[[link(android)]]
class GJMultiplayerManager : cocos2d::CCNode {
    // virtual ~GJMultiplayerManager();

    static GJMultiplayerManager* sharedState() = win 0x27acc0, imac 0x642870, m1 0x56b350;

    virtual bool init() = win 0x27b410, m1 0x56c9a8, imac 0x643ff0, ios 0x1cfeac;

    void addComment(gd::string, int);
    void addDLToActive(char const* tag, cocos2d::CCObject* obj);
    void addDLToActive(char const* tag);
    void createAndAddComment(gd::string, int) = m1 0x56e2b4, imac 0x645ae0;
    void dataLoaded(DS_Dictionary*);
    void encodeDataTo(DS_Dictionary*);
    bool exitLobby(int) = m1 0x56d7f8, imac 0x644e40;
    void firstSetup();
    gd::string getBasePostString() = m1 0x56d0b4, imac 0x644700;
    cocos2d::CCObject* getDLObject(char const*);
    int getLastCommentIDForGame(int) = m1 0x56d1bc, imac 0x6447f0;
    void handleIt(bool, gd::string, gd::string, GJHttpType);
    void handleItDelayed(bool, gd::string, gd::string, GJHttpType);
    void handleItND(cocos2d::CCNode*, void*);
    bool isDLActive(char const* tag);
    bool joinLobby(int) = m1 0x56cd54, imac 0x644380;
    void onExitLobbyCompleted(gd::string, gd::string);
    void onJoinLobbyCompleted(gd::string, gd::string);
    void onProcessHttpRequestCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*);
    void onUploadCommentCompleted(gd::string, gd::string);
    void ProcessHttpRequest(gd::string, gd::string, gd::string, GJHttpType);
    void removeDLFromActive(char const*);
    void uploadComment(gd::string, int) = m1 0x56dad4, imac 0x645130;

    cocos2d::CCDictionary* m_activeDownloads;
    cocos2d::CCDictionary* m_lobbyScores;
    cocos2d::CCDictionary* m_scoreArrays;
    cocos2d::CCDictionary* m_lobbyComments;
    GJMPDelegate* m_mpDelegate;
    UploadActionDelegate* m_uploadDelegate;
}

[[link(android)]]
class GJObjectDecoder : cocos2d::CCNode, ObjectDecoderDelegate {
    // virtual ~GJObjectDecoder();

    static GJObjectDecoder* sharedDecoder() = win 0x27c690, m1 0x62d42c, imac 0x70e4e0;

    virtual bool init() = win 0x77db0, m1 0x62d4d4, imac 0x70e560, ios 0x217784;
    virtual cocos2d::CCObject* getDecodedObject(int, DS_Dictionary*) = win 0x27c730, imac 0x70e570, m1 0x62d4d8, ios 0x217788;
}

[[link(android)]]
class GJOnlineRewardDelegate {
    virtual void onlineRewardStatusFinished(gd::string) {}
    virtual void onlineRewardStatusFailed() {}
}

[[link(android)]]
class GJOptionsLayer : SetupTriggerPopup {
    // virtual ~GJOptionsLayer();
    GJOptionsLayer() = win 0x285940;

    static GJOptionsLayer* create(int) = m1 0x232af8, imac 0x289c00;

    virtual void setupOptions() = m1 0x2333c8, imac 0x28a640, ios 0x2d3b84 {}
    virtual void didToggleGV(gd::string variable) = win 0x1f2810 {}
    virtual void didToggle(int toggle) {}

    void addGVToggle(char const* title, char const* variable, char const* description) = win 0x288470, imac 0x28a650, m1 0x2333cc;
    void addToggle(char const* title, int id, bool initial, char const* description) = win inline, m1 0x2339d0, imac 0x28ac90, ios 0x2d3c4c {
        addToggleInternal(title, id, initial, description);
    }
    void addToggleInternal(char const* title, int id, bool initial, char const* description) = win 0x2885b0, m1 0x233518, imac 0x28a780;
    int countForPage(int) = m1 0x234378, imac 0x28b620;
    void goToPage(int);
    void incrementCountForPage(int) = win 0x288b80;
    const char* infoKey(int);
    bool init(int) = win 0x288130, imac 0x289e50, m1 0x232c90;
    cocos2d::CCLayer* layerForPage(int) = m1 0x233acc, imac 0x28ada0, win 0x288e10;
    const char* layerKey(int);
    cocos2d::CCPoint nextPosition(int) = imac 0x28aca0, m1 0x2339d4;
    const char* objectKey(int);
    cocos2d::CCArray* objectsForPage(int);
    void offsetToNextPage() = win inline, imac 0x28a610, m1 0x2333a4 {
        m_toggleCount += m_togglesPerPage - m_toggleCount % m_togglesPerPage;
    }
    void onInfo(cocos2d::CCObject* sender);
    void onNextPage(cocos2d::CCObject* sender);
    void onPrevPage(cocos2d::CCObject* sender);
    void onToggle(cocos2d::CCObject* sender) = win 0x2893e0, imac 0x28afa0, m1 0x233cb8;
    const char* pageKey(int);

    float m_gap;
    int m_page;
    int m_togglesPerPage;
    int m_toggleCount;
    int m_maxPage;
    float m_maxLabelScale;
    float m_maxLabelWidth;
    cocos2d::CCDictionary* m_values;
    cocos2d::CCDictionary* m_variables;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
    float m_offset;
}

[[link(android)]]
class GJPathPage : FLAlertLayer, FLAlertLayerProtocol, GJPurchaseDelegate {
    // virtual ~GJPathPage();

    static GJPathPage* create(int, GJPathsLayer*) = win 0x27db80, imac 0x2ea7c0, m1 0x284d30, ios 0x3b0e84;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x288950, imac 0x2ee860, ios 0x3b3c68;
    virtual void keyBackClicked() = win 0x281710, m1 0x2887ec, imac 0x2ee720, ios 0x3b3c5c;
    virtual void show() = win 0x867a0, m1 0x288988, imac 0x2ee8a0, ios 0x3b3ca0;
    virtual void didPurchaseItem(GJStoreItem*) = win 0x27fb40, m1 0x286f08, imac 0x2ecb40, ios 0x3b2b2c;

    bool init(int, GJPathsLayer*) = win 0x27dcb0, m1 0x285220, imac 0x2eada0, ios 0x3b1208;
    void onActivatePath(cocos2d::CCObject* sender) = win 0x27f8e0, imac 0x2ecb10, m1 0x286ee0;
    void onBack(cocos2d::CCObject* sender) = win 0x281670;
    void onIconInfo(cocos2d::CCObject* sender) = win 0x27f950;
    void onUnlock(cocos2d::CCObject* sender) = win 0x27fb50, imac 0x2eca20, m1 0x286dd4;
    void playUnlockAnimation() = win 0x280400, m1 0x286f0c, imac 0x2ecb50;
    void showCantAffordMessage(GJStoreItem*) = win 0x27fd30, m1 0x2874bc, imac 0x2ed200;
    void unlockAnimationFinished() = win 0x281540, imac 0x2edb90, m1 0x287dd0;
    void unlockAnimationStep2() = win 0x280a50, m1 0x287b88, imac 0x2ed8b0;
    void unlockAnimationStep3() = win 0x280cd0, imac 0x2edcf0, m1 0x287f2c;

    GJPathsLayer* m_pathsLayer;
    int m_pathNumber;
    bool m_animationPlaying;
    int m_dialogIndex;
}

[[link(android)]]
class GJPathRewardPopup : FLAlertLayer {
    // virtual ~GJPathRewardPopup();
    GJPathRewardPopup() {
        m_pathNumber = 0;
    }

    static GJPathRewardPopup* create(int p0) = m1 0x284e5c, imac 0x2ea940, ios 0x3b0f64, win inline {
        auto ret = new GJPathRewardPopup();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = m1 0x289388, imac 0x2ef260, ios 0x3b45c0 {}

    void closePopup() = win 0x27dac0;
    bool init(int) = win 0x2825f0, imac 0x2eec40, m1 0x288d28, ios 0x3b3fb4;
    void onClaim(cocos2d::CCObject* sender) = win 0x282ad0, m1 0x2891c4, imac 0x2ef0d0, ios 0x3b4448;

    int m_pathNumber;
}

[[link(android)]]
class GJPathsLayer : FLAlertLayer, FLAlertLayerProtocol {
    // virtual ~GJPathsLayer();

    static GJPathsLayer* create() = win 0x27d1d0, m1 0x28446c, imac 0x2e9ed0;
    static gd::string nameForPath(int) = win 0x27cf60, imac 0x2e9d30, m1 0x2842bc, ios 0x3b068c;

    virtual bool init() = win 0x27d2d0, m1 0x28456c, imac 0x2ea020, ios 0x3b07ac;
    virtual void onExit() = win 0x27d830, m1 0x284c94, imac 0x2ea730, ios 0x3b0e34;
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x285028, imac 0x2eab50, ios 0x3b1024;
    virtual void keyBackClicked() = win 0x27db20, m1 0x284f58, imac 0x2eaa80, ios 0x3b1018;
    virtual void show() = win 0x867a0, m1 0x285060, imac 0x2eab90, ios 0x3b105c;

    void darkenButtons(bool) = imac 0x2ea780, m1 0x284ce4;
    void onClose(cocos2d::CCObject* sender) = win 0x27dac0, imac 0x2ea530, m1 0x284a6c, ios 0x3b0c18;
    void onPath(cocos2d::CCObject* sender) = win 0x27d880, imac 0x2ea6b0, m1 0x284c04, ios 0x3b0da4;

    cocos2d::CCSprite* m_closeSprite;
    bool m_exiting;
}

[[link(android)]]
class GJPathSprite : CCSpriteCOpacity {
    // virtual ~GJPathSprite();

    static GJPathSprite* create(int) = win 0x281720, m1 0x284ad4, imac 0x2ea590, ios 0x3b0c80;

    void addRankLabel(int) = win inline, m1 0x288c2c, imac 0x2eeb50, ios 0x3b3ebc {
        auto rankLabel = cocos2d::CCLabelBMFont::create(GameToolbox::intToString(p0).c_str(), "bigFont.fnt");
        rankLabel->setScale(0.55f);
        this->addChild(rankLabel, 1);
        rankLabel->setPosition(this->convertToNodeSpace({ 0.f, 0.f }) + cocos2d::CCPoint { 0.f, 1.f });
    }
    void addShardSprite() = win 0x281d90, imac 0x2ee610, m1 0x2886c0, ios 0x3b3b44;
    void changeToLockedArt() = win 0x281ad0, imac 0x2ed5b0, m1 0x287840, ios 0x3b3298;
    bool init(int) = win inline, m1 0x288b0c, imac 0x2eea20, ios 0x3b3e14 {
        if (!cocos2d::CCSprite::initWithSpriteFrameName(cocos2d::CCString::createWithFormat("pathIcon_%02d_001.png", p0)->getCString())) return false;
        m_pathNumber = p0;
        return true;
    }
    void updateState() = win 0x2818f0, m1 0x284b80, imac 0x2ea630, ios 0x3b0d20;

    int m_pathNumber;
}

[[link(android)]]
class GJPFollowCommandLayer : SetupTriggerPopup {
    // virtual ~GJPFollowCommandLayer();

    static GJPFollowCommandLayer* create(EffectGameObject*, cocos2d::CCArray*) = win 0x282da0;

    virtual void determineStartValues() = win 0x284790, imac 0x353270, m1 0x2e7324, ios 0x16384c;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x2855f0, imac 0x354000, m1 0x2e7e78, ios 0x16412c;
    virtual void textChanged(CCTextInputNode*) = win 0x284d20, imac 0x353890, m1 0x2e78a0, ios 0x163d48;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x282ed0, m1 0x2e54c8, imac 0x351320, ios 0x161fb0;
    void onUpdateGroupID(cocos2d::CCObject* sender) = win 0x284cc0, m1 0x2e6c28, imac 0x352bb0, ios 0x163474;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x26a440;
    void sliderXModChanged(cocos2d::CCObject* sender) = win 0x284b20;
    void sliderYModChanged(cocos2d::CCObject* sender) = win 0x284b50;
    void updateDuration() = win 0x26b120;
    void updateDurLabel(bool) = win 0x26a500;
    void updateMaxSpeed();
    void updateMaxSpeedLabel();
    void updateOffsetLabel();
    void updatePlayerOffset();
    void updateTargetGroupID() = win 0x285420;
    void updateTextInputLabel() = win 0x285390;
    void updateXMod() = win 0x2854f0;
    void updateXModLabel() = win 0x284b80;
    void updateYMod() = win 0x285570;
    void updateYModLabel() = win 0x284c20;

    CCTextInputNode* m_moveTimeInput;
    Slider* m_moveTimeSlider;
    float m_moveTime;
    CCTextInputNode* m_speedInput;
    CCTextInputNode* m_delayInput;
    CCTextInputNode* m_offsetInput;
    CCTextInputNode* m_maxSpeedInput;
    Slider* m_speedSlider;
    Slider* m_delaySlider;
    float m_delay;
    float m_speed;
    int m_offset;
    float m_maxSpeed;
    CCTextInputNode* m_targetIDInput;
    int m_targetGroupID;
}

[[link(android)]]
class GJPromoPopup : FLAlertLayer {
    // virtual ~GJPromoPopup();
    GJPromoPopup() {}

    static GJPromoPopup* create(gd::string) = win inline, m1 0x249be0, imac 0x2a2de0, ios 0x2e4d9c {
        auto ret = new GJPromoPopup();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void onExit() = win 0x29d890, m1 0x249ff4, imac 0x2a3260, ios 0x2e515c;
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x24a104, imac 0x2a3370, ios 0x2e519c;
    virtual void keyBackClicked() = win 0x27db20, m1 0x24a034, imac 0x2a32a0, ios 0x2e5190;
    virtual void show() = win 0x867a0, m1 0x24a13c, imac 0x2a33b0, ios 0x2e51d4;

    bool init(gd::string) = win 0x29d590, m1 0x249d48, imac 0x2a2f80, ios 0x2e4eb4;
    void onClose(cocos2d::CCObject* sender) = win 0x27dac0, m1 0x249f8c, imac 0x2a3200, ios 0x2e50f4;

    gd::string m_promoFrame;
}

[[link(android)]]
class GJPurchaseDelegate {
    virtual void didPurchaseItem(GJStoreItem*) {}
}

[[link(android)]]
class GJRequestCell : TableViewCell, FLAlertLayerProtocol, UploadPopupDelegate, UploadActionDelegate {
    // virtual ~GJRequestCell();
    GJRequestCell(char const*, float, float);

    virtual bool init() = win 0xbb620, m1 0x1f4348, imac 0x2456f0, ios 0x114c30;
    virtual void draw() = win 0xad710, imac 0x245a00, m1 0x1f4624, ios 0x114e74;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xbc1f0, imac 0x245ad0, m1 0x1f46d0, ios 0x114f20;
    virtual void uploadActionFinished(int, int) = win 0xbc3a0, imac 0x245ca0, m1 0x1f485c, ios 0x115014;
    virtual void uploadActionFailed(int, int) = win 0xbc580, imac 0x245ec0, m1 0x1f4a6c, ios 0x115134;
    virtual void onClosePopup(UploadActionPopup*) = win 0xbb4b0, imac 0x245fd0, m1 0x1f4b44, ios 0x1151e8;

    void loadFromScore(GJUserScore*) = ios 0x10cd28, win 0xbb640, m1 0x1ea280, imac 0x23a250;
    void markAsRead() = ios 0x114de4, win 0xbbf50, m1 0x1f4594, imac 0x245960; // inlined on macos
    void onDeleteRequest(cocos2d::CCObject* sender) = win 0xbc030, m1 0x1f4470, imac 0x245830;
    void onToggle(cocos2d::CCObject* sender);
    void onViewFriendRequest(cocos2d::CCObject* sender) = ios 0x114c80, win 0xbbea0, m1 0x1f4398, imac 0x245740;
    void onViewProfile(cocos2d::CCObject* sender);
    void updateBGColor(int index) = win inline, m1 0x1ea200, imac 0x23a1f0, ios 0x10cca8 {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        m_backgroundLayer->setOpacity(255);
    }
    TodoReturn updateToggle();

    GJUserScore* m_score;
    UploadActionPopup* m_popup;
    CCMenuItemToggler* m_toggler;
}

[[link(android)]]
class GJRewardDelegate {
    virtual void rewardsStatusFinished(int) {}
    virtual void rewardsStatusFailed() {}
}

[[link(android)]]
class GJRewardItem : cocos2d::CCObject {
    // virtual ~GJRewardItem();

    static GJRewardItem* create() = ios 0x33feac, win 0x1f0980, imac 0x8ea60, m1 0x821c4;
    static GJRewardItem* create(int chestID, int timeRemaining, gd::string) = win 0x1f0cc0;
    static GJRewardItem* createSpecial(GJRewardType, int, int, SpecialRewardItem, int, SpecialRewardItem, int, int, int) = win 0x1f0ad0, imac 0x774e0, m1 0x6add0;
    static GJRewardItem* createWithCoder(DS_Dictionary* dict) = win inline, imac 0x8ed80, m1 0x824d0, ios 0x34011c {
        auto ret = create();
        ret->dataLoaded(dict);
        return ret;
    }
    static GJRewardItem* createWithObject(GJRewardType, GJRewardObject*) = win 0x1f09c0, imac 0x8be90, m1 0x7fad0;
    static GJRewardItem* createWithObjects(GJRewardType type, cocos2d::CCArray* objects) = win 0x1f0a50, imac 0x71cf0, m1 0x65720, ios inline {
        auto ret = create();
        if (ret->m_rewardObjects != objects) {
            CC_SAFE_RETAIN(objects);
            CC_SAFE_RELEASE(ret->m_rewardObjects);
            ret->m_rewardObjects = objects;
        }
        return ret;
    }
    static SpecialRewardItem getNextShardType(SpecialRewardItem type) = win inline {
        switch (type) {
            case SpecialRewardItem::FireShard: return SpecialRewardItem::IceShard;
            case SpecialRewardItem::IceShard: return SpecialRewardItem::PoisonShard;
            case SpecialRewardItem::PoisonShard: return SpecialRewardItem::ShadowShard;
            case SpecialRewardItem::ShadowShard: return SpecialRewardItem::LavaShard;
            case SpecialRewardItem::LavaShard: return SpecialRewardItem::EarthShard;
            case SpecialRewardItem::EarthShard: return SpecialRewardItem::BloodShard;
            case SpecialRewardItem::BloodShard: return SpecialRewardItem::MetalShard;
            case SpecialRewardItem::MetalShard: return SpecialRewardItem::LightShard;
            case SpecialRewardItem::LightShard: return SpecialRewardItem::SoulShard;
            case SpecialRewardItem::SoulShard: return SpecialRewardItem::FireShard;
            default: return (SpecialRewardItem)0;
        }
    }
    static SpecialRewardItem getRandomNonMaxShardType() = win inline, m1 0x67cb0, imac 0x74100 {
        auto type = getRandomShardType();
        for (int i = 10; i > 0; i--) {
            if (GameStatsManager::sharedState()->getStat(rewardItemToStat(type).c_str()) < 100) return type;
            type = getNextShardType(type);
        }
        return (SpecialRewardItem)0;
    }
    static SpecialRewardItem getRandomShardType() = win inline, m1 0x82470, imac 0x8ed30 {
        int randomValue = floorf((rand() / (float)RAND_MAX) * 10.f) + 1.f;
        switch (randomValue) {
            case 2: return SpecialRewardItem::IceShard;
            case 3: return SpecialRewardItem::PoisonShard;
            case 4: return SpecialRewardItem::ShadowShard;
            case 5: return SpecialRewardItem::LavaShard;
            case 6: return SpecialRewardItem::EarthShard;
            case 7: return SpecialRewardItem::BloodShard;
            case 8: return SpecialRewardItem::MetalShard;
            case 9: return SpecialRewardItem::LightShard;
            case 10: return SpecialRewardItem::SoulShard;
            default: return SpecialRewardItem::FireShard;
        }
    }
    static bool isShardType(SpecialRewardItem type) = win inline, imac 0x72720, m1 0x6610c {
        return type == SpecialRewardItem::FireShard || type == SpecialRewardItem::IceShard || type == SpecialRewardItem::PoisonShard
            || type == SpecialRewardItem::ShadowShard || type == SpecialRewardItem::LavaShard || type == SpecialRewardItem::EarthShard
            || type == SpecialRewardItem::BloodShard || type == SpecialRewardItem::MetalShard || type == SpecialRewardItem::LightShard
            || type == SpecialRewardItem::SoulShard;
    }
    static gd::string rewardItemToStat(SpecialRewardItem) = win 0x1f0ff0;


    virtual void encodeWithCoder(DS_Dictionary*) = win 0x1f1250, imac 0x8ee90, m1 0x82604, ios 0x3401b0;
    virtual bool canEncode() = win inline, m1 0x82670, imac 0x8eef0, ios 0x34021c {
        return true;
    }

    void dataLoaded(DS_Dictionary* dict) = win inline {
        m_chestID = dict->getIntegerForKey("1");
        m_rewardType = (GJRewardType)dict->getIntegerForKey("2");
        auto rewardObjects = dict->getArrayForKey("3", false);
        CC_SAFE_RETAIN(rewardObjects);
        CC_SAFE_RELEASE(m_rewardObjects);
        m_rewardObjects = rewardObjects;
    }
    int getRewardCount(SpecialRewardItem type) = win inline, imac 0x769d0, m1 0x6a208 {
        if (!m_rewardObjects) return 0;

        int count = 0;
        for (int i = 0; i < m_rewardObjects->count(); i++) {
            auto obj = static_cast<GJRewardObject*>(m_rewardObjects->objectAtIndex(i));
            if (obj->m_specialRewardItem == type) count += obj->m_total;
        }

        return count;
    }
    GJRewardObject* getRewardObjectForType(SpecialRewardItem type) = win inline, imac 0x72840, m1 0x66274 {
        if (!m_rewardObjects) {
            auto rewardObjects = cocos2d::CCArray::create();
            CC_SAFE_RETAIN(rewardObjects);
            CC_SAFE_RELEASE(m_rewardObjects);
            m_rewardObjects = rewardObjects;
        }

        for (int i = 0; i < m_rewardObjects->count(); i++) {
            auto obj = static_cast<GJRewardObject*>(m_rewardObjects->objectAtIndex(i));
            if (obj->m_specialRewardItem == type) return obj;
        }

        auto obj = GJRewardObject::create(type, 0, 0);
        m_rewardObjects->addObject(obj);
        return obj;
    }
    bool init(int chestID, int timeRemaining, gd::string) = win 0x1f0d90, imac 0x8ea90, m1 0x821f4;

    int m_chestID;
    int m_timeRemaining;
    GJRewardType m_rewardType;
    cocos2d::CCArray* m_rewardObjects;
    bool m_unk;
}

[[link(android)]]
class GJRewardObject : cocos2d::CCObject {
    static GJRewardObject* create(SpecialRewardItem, int, int) = ios 0x33315c, win 0x1f0880, imac 0x71c80, m1 0x656b0;
    // virtual ~GJRewardObject();

    static GJRewardObject* create() = win inline, m1 0x81edc, imac 0x8e760 {
        auto ret = create(SpecialRewardItem::FireShard, 0, 0); // the first param is meant to be 0
        return ret;
    }
    static GJRewardObject* createItemUnlock(UnlockType type, int id) = win 0x1f0810, imac 0x71c10, m1 0x65638, ios inline {
        auto ret = create(SpecialRewardItem::CustomItem, 1, id);
        ret->m_unlockType = type;
        return ret;
    }

    static GJRewardObject* createWithCoder(DS_Dictionary* dict) = win inline, imac 0x8e800, m1 0x81f64, ios 0x33fd24 {
        auto ret = create();
        ret->dataLoaded(dict);
        return ret;
    }
    virtual void encodeWithCoder(DS_Dictionary*) = win 0x1f08f0, imac 0x8e910, m1 0x82084, ios 0x33fdd0;
    virtual bool canEncode() = win inline, m1 0x82104, imac 0x8e990, ios 0x33fe50 {
        return true;
    }
    void dataLoaded(DS_Dictionary* dict) = win inline {
        m_specialRewardItem = (SpecialRewardItem)dict->getIntegerForKey("1");
        m_itemID = dict->getIntegerForKey("2");
        m_total = dict->getIntegerForKey("3");
        m_unlockType = (UnlockType)dict->getIntegerForKey("4");
    }
    bool init(SpecialRewardItem specialRewardItem, int total, int itemID) = win inline, imac 0x8e7c0, m1 0x81f38 {
        this->m_specialRewardItem = specialRewardItem;
        this->m_total = total;
        this->m_itemID = itemID;
        return true;
    }
    bool isSpecialType() = win inline, m1 0x81f48, imac 0x8e7e0 {
        auto type = m_specialRewardItem;
        return type == SpecialRewardItem::FireShard || type == SpecialRewardItem::IceShard || type == SpecialRewardItem::PoisonShard
            || type == SpecialRewardItem::ShadowShard || type == SpecialRewardItem::LavaShard || type == SpecialRewardItem::BonusKey
            || type == SpecialRewardItem::EarthShard || type == SpecialRewardItem::BloodShard || type == SpecialRewardItem::MetalShard
            || type == SpecialRewardItem::LightShard || type == SpecialRewardItem::SoulShard;
    }

    SpecialRewardItem m_specialRewardItem;
    UnlockType m_unlockType;
    int m_itemID;
    int m_total;
}

[[link(android)]]
class GJRobotSprite : CCAnimatedSprite {
    // virtual ~GJRobotSprite();
    // GJRobotSprite();

    static GJRobotSprite* create(int) = win 0x29efd0, m1 0x4f8c84, imac 0x5c3a10, ios 0x23eff0;

    virtual void setOpacity(unsigned char) = win 0x29fcc0, m1 0x4f9e1c, imac 0x5c4dd0, ios 0x23fe10;
    virtual void hideSecondary() = win 0x2a03b0, m1 0x4f9f00, imac 0x5c4ee0, ios 0x23fef4;

    void hideGlow() = win inline, m1 0x4f9ad0, imac 0x5c49e0, ios 0x23fac8 {
        m_glowSprite->setVisible(false);
    }
    bool init(int, gd::string) = win 0x29f080, m1 0x4f8e44, imac 0x5c3bc0, ios 0x23f13c;
    bool init(int) = win inline, m1 0x4f8db4, imac 0x5c3b50, ios 0x23f0b8 {
        return GJRobotSprite::init(p0, "Robot");
    }
    void showGlow() = win inline, m1 0x4f9abc, imac 0x5c49c0, ios 0x23fab4 {
        m_glowSprite->setVisible(true);
    }
    void updateColor01(cocos2d::ccColor3B) = win inline, m1 0x4f9ae4, imac 0x5c4a00, ios 0x23fadc {
        m_color = p0;
        this->updateColors();
    }
    void updateColor02(cocos2d::ccColor3B) = win inline, m1 0x4f9d90, imac 0x5c4d30, ios 0x23fd84 {
        m_secondColor = p0;
        this->updateColors();
    }
    void updateColors() = win 0x29f810, m1 0x4f9af8, imac 0x5c4a20, ios 0x23faf0;
    void updateFrame(int) = ios 0x23f5ec, win 0x29fdc0, imac 0x5c4140, m1 0x4f9378;
    void updateGlowColor(cocos2d::ccColor3B, bool) = win inline, imac 0x5c4d50, m1 0x4f9da0, ios 0x23fd94 {
        auto children = m_glowSprite->getChildren();
        for (int i = 0; i < children->count(); i++) {
            static_cast<cocos2d::CCSprite*>(children->objectAtIndex(i))->setColor(p0);
        }
    }

    cocos2d::CCArray* m_unkArray;
    bool m_hasExtra;
    cocos2d::ccColor3B m_color;
    cocos2d::ccColor3B m_secondColor;
    cocos2d::CCArray* m_secondArray;
    cocos2d::CCSprite* m_glowSprite;
    cocos2d::CCSprite* m_extraSprite;
    IconType m_iconType;
    int m_iconRequestID;
    CCSpritePart* m_headSprite;
    CCSpritePart* m_footSprite;
}

[[link(android)]]
class GJRotateCommandLayer : SetupTriggerPopup {
    // virtual ~GJRotateCommandLayer();

    static GJRotateCommandLayer* create(EffectGameObject*, cocos2d::CCArray*);

    virtual void determineStartValues() = imac 0x45d0, m1 0x6cc8;
    virtual void onClose(cocos2d::CCObject* sender) = m1 0x7988, imac 0x5520;
    virtual void textChanged(CCTextInputNode*) = imac 0x4f80, m1 0x7534;
    virtual void valuePopupClosed(ConfigureValuePopup*, float) = m1 0x7148, imac 0x4af0;

    bool init(EffectGameObject*, cocos2d::CCArray*) = m1 0x461c, imac 0x1d60;
    void onEasing(cocos2d::CCObject* sender);
    void onEasingRate(cocos2d::CCObject* sender);
    void onFollowRotation(cocos2d::CCObject* sender);
    void onLockRotation(cocos2d::CCObject* sender);
    void onUpdateGroupID(cocos2d::CCObject* sender);
    void onUpdateGroupID2(cocos2d::CCObject* sender);
    void sliderChanged(cocos2d::CCObject* sender);
    void sliderDegreesChanged(cocos2d::CCObject* sender);
    void sliderTimesChanged(cocos2d::CCObject* sender);
    void toggleEasingRateVisibility();
    void updateCommandDegrees();
    void updateCommandTimes();
    void updateDegreesLabel();
    void updateDuration();
    void updateDurLabel(bool);
    void updateEasingLabel();
    void updateEasingRateLabel();
    void updateMoveCommandEasing();
    void updateMoveCommandEasingRate();
    void updateTargetGroupID();
    void updateTargetGroupID2();
    void updateTextInputLabel();
    void updateTextInputLabel2();
    void updateTimesLabel();

    CCTextInputNode* m_moveTimeInput;
    Slider* m_moveTimeSlider;
    float m_moveTime;
    cocos2d::CCLabelBMFont* m_rotateEasingLabel;
    EasingType m_rotateEasingType;
    float m_rotateEasingRate;
    CCMenuItemSpriteExtra* m_rotateEasingRateButton;
    cocos2d::CCLabelBMFont* m_rotateEasingRateLabel;
    CCTextInputNode* m_degreesInput;
    CCTextInputNode* m_timesInput;
    Slider* m_degreesSlider;
    Slider* m_timesSlider;
    float m_degrees;
    int m_times360;
    CCTextInputNode* m_targetIDInput;
    bool m_disableTextChanged;
    int m_targetGroupID;
    CCTextInputNode* m_centerIDInput;
    int m_centerGroupID;
    bool m_lockObjectRotation;
    bool m_followP1;
    bool m_followP2;
    CCMenuItemToggler* m_followP1Toggler;
    CCMenuItemToggler* m_followP2Toggler;
}

[[link(android)]]
class GJRotationControl : cocos2d::CCLayer {
    // virtual ~GJRotationControl();
    GJRotationControl() = ios 0x3f4734 {
        m_controlSprite = nullptr;
        m_startingRotation = 0.0f;
        m_currentRotation = 0.0f;
        m_touchID = -1;
        m_delegate = nullptr;
    }

    static GJRotationControl* create() = win inline, m1 0xd254, imac 0xbe40, ios 0x3bf3bc {
        auto ret = new GJRotationControl();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x1277e0, m1 0x49058, imac 0x51c10, ios 0x3f27d4;
    virtual void draw() = win 0x127c40, imac 0x52210, m1 0x49620, ios 0x3f2ba8;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x127980, imac 0x51e80, m1 0x492bc, ios 0x3f29dc;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x127a80, imac 0x51fa0, m1 0x493d0, ios 0x3f2adc;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x127c20, imac 0x52100, m1 0x4950c, ios 0x3f2b58;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x49604, imac 0x521d0, ios 0x3f2b8c;

    void finishTouch() = win 0x127900, m1 0x46460, imac 0x4e840, ios 0x3f0188;
    void setAngle(float) = imac 0x51d00, m1 0x4914c;
    void updateSliderPosition(cocos2d::CCPoint) = imac 0x51d80, m1 0x491cc;

    cocos2d::CCPoint m_cursorDifference;
    cocos2d::CCPoint m_controlPosition;
    cocos2d::CCSprite* m_controlSprite;
    float m_startingRotation;
    float m_currentRotation;
    int m_touchID;
    GJRotationControlDelegate* m_delegate;
}

[[link(android)]]
class GJRotationControlDelegate {
    virtual void angleChanged(float angle) {}
    virtual void angleChangeBegin() {}
    virtual void angleChangeEnded() {}
}

[[link(android)]]
class GJScaleControl : cocos2d::CCLayer {
    // virtual ~GJScaleControl();
    GJScaleControl() {
        m_sliderX = nullptr;
        m_sliderY = nullptr;
        m_sliderXY = nullptr;
        m_touchID = -1;
        m_valueX = 0.0f;
        m_valueY = 0.0f;
        m_unkSize4 = 0;
        m_changedValueX = 0.0f;
        m_changedValueY = 0.0f;
        m_scale1Lock = false;
        m_scaleButtonType = 0;
        m_delegate = nullptr;
        m_upperBound = 2.0f;
        m_lowerBound = 0.5f;
        m_senderTag = 0;
        m_scaleLockButton = nullptr;
        m_scaleLocked = false;
    }

    static GJScaleControl* create() = win inline, imac 0xbfe0, m1 0xd3e0 {
        auto ret = new GJScaleControl();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x127cc0, m1 0x49688, imac 0x52280, ios 0x3f2c10;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x1287b0, imac 0x52930, m1 0x49cc0, ios 0x3f31a4;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x1289c0, imac 0x52b20, m1 0x49e5c, ios 0x3f3330;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x128de0, imac 0x52ff0, m1 0x4a2a0, ios 0x3f3684;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x4a3c8, imac 0x53150, ios 0x3f37ac;

    void finishTouch();
    void loadValues(GameObject*, cocos2d::CCArray*, gd::unordered_map<int, GameObjectEditorState>&) = win 0x128190, m1 0x3a07c, imac 0x3f670, ios 0x3e76f0;
    void onToggleLockScale(cocos2d::CCObject* sender) = ios 0x3f2ff4, win 0x128100, m1 0x49a6c, imac 0x52690;
    float scaleFromValue(float value) = win inline, imac 0x52860, m1 0x49c44, ios inline {
        return (m_upperBound - m_lowerBound) * value + m_lowerBound;
    }
    float skewFromValue(float) = m1 0x49c80, imac 0x528a0;
    void sliderChanged(cocos2d::CCObject* sender) = ios 0x3f3064, win 0x1287a0, m1 0x49adc, imac 0x526f0;
    void updateLabelX(float value) = ios 0x3f306c, win 0x128f20, m1 0x49b0c, imac 0x52740;
    void updateLabelXY(float value) = win 0x129020, m1 0x49bdc, imac 0x52800, ios 0x3f313c;
    void updateLabelY(float value) = ios 0x3f30d4, win 0x128fa0, m1 0x49b74, imac 0x527a0;
    float valueFromScale(float scale) = win inline, m1 0x49c98, imac 0x528f0, ios inline {
        auto value = (scale - m_lowerBound) / (m_upperBound - m_lowerBound);
        return value < 0 ? 0 : (value > 1 ? 1 : value);
    }
    float valueFromSkew(float);

    Slider* m_sliderX;
    Slider* m_sliderY;
    Slider* m_sliderXY;
    int m_touchID;
    float m_valueX;
    float m_valueY;
    int m_unkSize4;
    float m_changedValueX;
    float m_changedValueY;
    bool m_scale1Lock;
    short m_scaleButtonType;
    cocos2d::CCLabelBMFont* m_scaleXLabel;
    cocos2d::CCLabelBMFont* m_scaleYLabel;
    cocos2d::CCLabelBMFont* m_scaleLabel;
    GJScaleControlDelegate* m_delegate;
    float m_upperBound;
    float m_lowerBound;
    int m_senderTag;
    CCMenuItemSpriteExtra* m_scaleLockButton;
    bool m_scaleLocked;
}

[[link(android)]]
class GJScaleControlDelegate {
    virtual void scaleXChanged(float scaleX, bool lock) {}
    virtual void scaleYChanged(float scaleY, bool lock) {}
    virtual void scaleXYChanged(float scaleX, float scaleY, bool lock) {}
    virtual void scaleChangeBegin() {}
    virtual void scaleChangeEnded() {}
    virtual void updateScaleControl() {}
    virtual void anchorPointMoved(cocos2d::CCPoint newAnchor) {}
}

[[link(android)]]
class GJScoreCell : TableViewCell, FLAlertLayerProtocol {
    // virtual ~GJScoreCell();
    GJScoreCell(char const*, float, float);

    virtual bool init() = win 0xb3f00, m1 0x1f2910, imac 0x243750, ios 0x113ce4;
    virtual void draw() = win 0xad710, imac 0x243a20, m1 0x1f2bc0, ios 0x113e88;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xb8ee0, imac 0x243960, m1 0x1f2af8, ios 0x113e30;

    void loadFromScore(GJUserScore*) = ios 0x10a7a0, win 0xb7c80, m1 0x1e7b58, imac 0x237bc0;
    void onBan(cocos2d::CCObject* sender);
    void onCheck(cocos2d::CCObject* sender);
    void onMoreLevels(cocos2d::CCObject* sender);
    void onViewProfile(cocos2d::CCObject* sender) = ios 0x113cf0, win 0xb8d60, imac 0x243770, m1 0x1f291c;
    void updateBGColor(int index) = win inline, m1 0x1e7ad8, imac 0x237b60, ios 0x10a720 {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        m_backgroundLayer->setOpacity(255);
    }

    GJUserScore* m_score;
}

[[link(android)]]
class GJSearchObject : cocos2d::CCNode {
    // virtual ~GJSearchObject();

    static GJSearchObject* create(SearchType searchType, gd::string searchQuery, gd::string difficulty, gd::string length, int page, bool star, bool uncompleted, bool featured, int songID, bool original, bool twoPlayer, bool customSong, bool songFilter, bool noStar, bool coins, bool epic, bool legendary, bool mythic, bool onlyCompleted, int demonFilter, int folder, int searchMode) = win 0x171900, m1 0x4a2868, imac 0x54a1a0;
    static GJSearchObject* create(SearchType searchType, gd::string searchQuery) = win 0x1717d0, imac 0x54a530, m1 0x4a2b7c, ios 0xb39a4;
    static GJSearchObject* create(SearchType searchType) = win 0x1716f0, imac 0x54a4c0, m1 0x4a2b10, ios 0xb3894;
    static GJSearchObject* createFromKey(char const* key) = win 0x170ff0, imac 0x522e20, m1 0x47eddc, ios 0x9d57c;

    char const* getKey() = win 0x171c40, m1 0x4857e8, imac 0x52a470, ios 0xa1778;
    char const* getNextPageKey();
    GJSearchObject* getNextPageObject() = m1 0x4a3120, imac 0x54ac80;
    GJSearchObject* getPageObject(int page) = win 0x171d90, imac 0x54aca0, m1 0x4a312c;
    GJSearchObject* getPrevPageObject() = m1 0x4a331c, imac 0x54af60;
    static char const* getSearchKey(SearchType searchType, gd::string searchQuery, gd::string difficulty, gd::string length, int page, bool star, bool uncompleted, bool featured, int songID, bool original, bool twoPlayer, bool customSong, bool songFilter, bool noStar, bool coins, bool epic, bool legendary, bool mythic, bool onlyCompleted, int demonFilter, int folder, int searchMode) = win 0x171f00, m1 0x4a2da8, imac 0x54a780;
    bool init(SearchType searchType, gd::string searchQuery, gd::string difficulty, gd::string length, int page, bool star, bool uncompleted, bool featured, int songID, bool original, bool twoPlayer, bool customSong, bool songFilter, bool noStar, bool coins, bool epic, bool legendary, bool mythic, bool onlyCompleted, int demonFilter, int folder, int searchMode);
    bool isLevelSearchObject() = win 0x1721e0, imac 0x54af80, m1 0x4a3330, ios 0xb4078;

    SearchType m_searchType;
    gd::string m_searchQuery;
    gd::string m_difficulty;
    gd::string m_length;
    int m_page;
    bool m_starFilter;
    bool m_noStarFilter;
    int m_total;
    bool m_uncompletedFilter;
    bool m_completedFilter;
    bool m_featuredFilter;
    bool m_originalFilter;
    bool m_twoPlayerFilter;
    bool m_coinsFilter;
    bool m_epicFilter;
    bool m_legendaryFilter;
    bool m_mythicFilter;
    GJDifficulty m_demonFilter;
    int m_folder;
    int m_songID;
    bool m_customSongFilter;
    bool m_songFilter;
    bool m_searchIsOverlay;
    int m_searchMode;
}

[[link(android), depends(GJValueTween)]]
class GJShaderState {
    GJShaderState() = win 0x38db00, m1 0xb43b8, imac 0xcae30, ios 0x12ab94 {
        m_time = 0.0;
        m_prevTime = -1.0;
        m_textureScaleX = 1.f;
        m_textureScaleY = 1.f;
        m_blurRefChannel = 0;
        m_shockWaveStartTime = 0.f;
        m_shockWaveSpeed = 0.f;
        m_shockLineStartTime = 0.0;
        m_shockLineTargetID = 0;
        m_shockLineTarget = false;
        m_glitchStrength = 0.f;
        m_chromaticTargetX = 0.f;
        m_chromaticTargetY = 0.f;
        m_cGRGBOffset = 0.f;
        m_cGStrength = 0.f;
        m_cGSegmentHeight = 1.f;
        m_cGLineThickness = 0.f;
        m_cGLineStrength = 0.f;
        m_cGEnable = false;
        m_cGActive = false;
        m_pixelateTargetX = 1.f;
        m_pixelateTargetY = 1.f;
        m_pixelateSnapGrid = false;
        m_pixelatePixelating = false;
        m_lensCircleSize = 1.f;
        m_lensCircleFade = 0.f;
        m_lensCircleStrength = 0.f;
        m_lensCircleTargetID = 0;
        m_lensCircleTintChannel = 0;
        m_lensCircleRelative = false;
        m_lensCircleAdditive = false;
        m_radialBlurSize = 0.f;
        m_radialBlurFade = 0.f;
        m_motionBlurTargetX = 0.f;
        m_motionBlurTargetY = 0.f;
        m_motionBlurSpeedX = 0.f;
        m_motionBlurSpeedY = 0.f;
        m_motionBlurFollowEaseX = 1.f;
        m_motionBlurFollowEaseY = 1.f;
        m_motionBlurTargetIDX = 0;
        m_motionBlurTargetIDY = 0;
        m_motionBlurDual = false;
        m_bulgeValue = 0.f;
        m_bulgeRelative = false;
        m_bulgeTargetID = 0;
        m_bulgeRadius = 0.f;
        m_pinchTargetX = 0.f;
        m_pinchTargetY = 0.f;
        m_pinchTargetEnabledX = false;
        m_pinchTargetEnabledY = false;
        m_pinchTargetIDX = 0;
        m_pinchTargetIDY = 0;
        m_pinchRadius = 0.f;
        m_grayscaleValue = 0.f;
        m_grayscaleTintChannel = 0;
        m_sepiaValue = 0.f;
        m_invertColorEditRGB = 0.f;
        m_invertColorR = 1.f;
        m_invertColorG = 1.f;
        m_invertColorB = 1.f;
        m_invertColorClampRGB = false;
        m_hueShiftDegrees = 0.f;
        m_colorChangeCR = 1.f;
        m_colorChangeCG = 1.f;
        m_colorChangeCB = 1.f;
        m_colorChangeBR = 0.f;
        m_colorChangeBG = 0.f;
        m_colorChangeBB = 0.f;
        m_splitTargetRows = 0.f;
        m_splitTargetCols = 0.f;
        m_splitActive = false;
        m_minBlendingLayer = 0;
        m_maxBlendingLayer = 0;
        m_zLayerDirty = false;
        m_noPlayerParticles = false;
        m_usesShaders = false;
    }

    void reset() = win inline, m1 0x34278c, imac 0x3b73f0, ios 0x26caf4 {
        m_cGSegmentHeight = 1.f;
        m_shockWaveStartTime = 0.f;
        m_shockLineStartTime = 0.0;
        m_glitchStrength = 0.f;
        m_chromaticTargetX = 0.f;
        m_chromaticTargetY = 0.f;
        m_blurIntensity = 0.f;
        m_cGEnable = false;
        m_cGSpeed = 0.f;
        m_cGRGBOffset = 0.f;
        m_cGStrength = 0.f;
        m_cGLineThickness = 0.f;
        m_cGLineStrength = 0.f;
        m_pixelateTargetX = 0.f;
        m_pixelateTargetY = 0.f;
        m_pixelateSnapGrid = false;
        m_lensCircleStrength = 0.f;
        m_lensCircleTargetID = 0;
        m_lensCircleTintChannel = 0;
        m_radialBlurSize = 0.f;
        m_motionBlurTargetX = 0.f;
        m_motionBlurTargetY = 0.f;
        m_motionBlurTargetIDX = 0;
        m_motionBlurTargetIDY = 0;
        m_motionBlurSpeedX = 0.f;
        m_motionBlurSpeedY = 0.f;
        m_textureScaleX = 1.f;
        m_textureScaleY = 1.f;
        m_lensCircleSize = 1.f;
        m_lensCircleFade = 0.f;
        m_radialBlurCenter.x = 0.f;
        m_radialBlurCenter.y = 0.f;
        m_bulgeValue = 0.f;
        m_pinchTargetX = 0.f;
        m_pinchTargetY = 0.f;
        m_pinchTargetIDX = 0;
        m_pinchTargetIDY = 0;
        m_pinchTargetEnabledX = false;
        m_pinchTargetEnabledY = false;
        m_pinchScreenOffset.x = 0.f;
        m_pinchScreenOffset.y = 0.f;
        m_grayscaleValue = 0.f;
        m_prevTime = -1.f;
        m_sepiaValue = 0.f;
        m_invertColorEditRGB = 0.f;
        m_hueShiftDegrees = 0.f;
        m_invertColorR = 1.f;
        m_invertColorG = 1.f;
        m_invertColorB = 1.f;
        m_colorChangeCR = 1.f;
        m_colorChangeCG = 1.f;
        m_colorChangeCB = 1.f;
        m_colorChangeBR = 0.f;
        m_colorChangeBG = 0.f;
        m_colorChangeBB = 0.f;
        m_invertColorClampRGB = false;
        m_splitTargetRows = 0.f;
        m_splitTargetCols = 0.f;
        m_zLayerDirty = false;
        m_noPlayerParticles = false;
        m_minBlendingLayer = 0;
        m_maxBlendingLayer = 0;
    }
    void stopTweenAction(int action) = win inline, m1 0x3422dc, imac 0x3b6c70, ios inline {
        m_tweenActions.erase(action);
    }
    void timesyncShaderAction(int action) = win 0x4696c0, m1 0x342628, imac 0x3b7210, ios 0x26ca64;
    void timesyncShaderActions() = win inline, m1 0x3425f0, imac 0x3b71d0, ios 0x26ca2c {
        for (auto& pair : m_tweenTimes) {
            this->timesyncShaderAction(pair.first);
        }
    }
    void tweenValue(float fromValue, float toValue, int action, float duration, int easingType, float easingRate) = win inline, m1 0x3421f8, imac 0x3b6b80, ios 0x26c680 {
        this->stopTweenAction(action);
        if (duration <= 0.f) {
            this->updateTweenAction(toValue, action);
            return;
        }
        GJValueTween tween;
        tween.m_easingRate = easingRate;
        tween.m_duration = duration;
        tween.m_deltaTime = 0.f;
        tween.m_currentValue = 0.f;
        tween.m_finished = false;
        tween.m_disabled = false;
        tween.m_easingType = easingType;
        tween.m_uniqueID = -1;
        tween.m_controlID = -1;
        tween.m_fromValue = fromValue;
        tween.m_toValue = toValue;
        m_tweenActions.emplace(action, tween);
        m_tweenTimes[action] = m_time;
    }
    void updateTweenAction(float value, int actionID) = win 0x469300, m1 0x342300, imac 0x3b6c90, ios 0x26c764;
    void updateTweenActions(float tweenValue) = win inline, m1 0x342554, imac 0x3b7130, ios 0x26c9b8 {
        for (auto it = m_tweenActions.begin(); it != m_tweenActions.end();) {
            it->second.step(tweenValue);
            this->updateTweenAction(it->second.m_currentValue, it->first);
            if (it->second.m_finished) it = m_tweenActions.erase(it);
            else ++it;
        }
    }

    gd::unordered_map<int, GJValueTween> m_tweenActions;
    gd::unordered_map<int, double> m_tweenTimes;
    double m_time;
    double m_prevTime;
    double m_startTime;
    float m_textureScaleX;
    float m_textureScaleY;
    cocos2d::ccColor3B m_blurRefColor;
    float m_blurIntensity;
    int m_blurRefChannel;
    bool m_blurOnlyEmpty;
    float m_shockWaveStartTime;
    float m_shockWaveTime;
    float m_shockWaveTimeOffset;
    float m_shockWaveSpeed;
    float m_shockWaveThickness;
    float m_shockWaveStrength;
    float m_shockWaveWidth;
    float m_shockWaveFadeIn;
    float m_shockWaveFadeOut;
    bool m_shockWaveInvert;
    float m_shockWaveInner;
    float m_shockWaveOuter;
    int m_shockWaveTargetID;
    bool m_shockWaveTarget;
    bool m_shockWaveCenterMoving;
    bool m_shockWaveRelative;
    float m_shockWaveMaxSize;
    cocos2d::CCPoint m_shockWaveScreenOffset;
    bool m_shockWaveCenterDirty;
    cocos2d::CCPoint m_shockWaveCenter;
    double m_shockLineStartTime;
    float m_shockLineTime;
    float m_shockLineTimeOffset;
    float m_shockLineSpeed;
    bool m_shockLineAxis;
    bool m_shockLineDirection;
    bool m_shockLineDual;
    bool m_shockLineInvert;
    float m_shockLineScreenOffset;
    float m_shockLineStrength;
    float m_shockLineWidth;
    float m_shockLineFadeIn;
    float m_shockLineFadeOut;
    float m_shockLineThickness;
    int m_shockLineTargetID;
    bool m_shockLineTarget;
    bool m_shockLineCenterMoving;
    bool m_shockLineRelative;
    float m_shockLineMaxSize;
    cocos2d::CCPoint m_shockLineScreenOffset2;
    bool m_shockLineCenterDirty;
    cocos2d::CCPoint m_shockLineCenter;
    float m_glitchStrength;
    float m_glitchSpeed;
    float m_glitchSliceHeight;
    float m_glitchMaxSliceXOff;
    float m_glitchMaxColXOff;
    float m_glitchMaxColYOff;
    bool m_glitchRelative;
    float m_chromaticTargetX;
    float m_chromaticTargetY;
    bool m_chromaticRelative;
    float m_cGStartTime;
    float m_cGTime;
    float m_cGSpeed;
    float m_cGRGBOffset;
    float m_cGStrength;
    float m_cGSegmentHeight;
    float m_cGLineThickness;
    float m_cGLineStrength;
    bool m_cGEnable;
    bool m_cGActive;
    bool m_cGRelative;
    bool m_cGRelativePos;
    float m_pixelateTargetX;
    float m_pixelateTargetY;
    bool m_pixelateSnapGrid;
    bool m_pixelatePixelating;
    bool m_pixelateRelative;
    bool m_pixelateHardEdges;
    float m_lensCircleSize;
    float m_lensCircleFade;
    float m_lensCircleStrength;
    int m_lensCircleTargetID;
    int m_lensCircleTintChannel;
    bool m_lensCircleRelative;
    bool m_lensCircleAdditive;
    cocos2d::ccColor3B m_lensCircleTint;
    cocos2d::CCPoint m_lensCircleCenter;
    cocos2d::CCPoint m_lensCircleScreenOffset;
    float m_radialBlurSize;
    float m_radialBlurFade;
    bool m_radialBlurTarget;
    int m_radialBlurTargetID;
    cocos2d::CCPoint m_radialBlurCenter;
    cocos2d::CCPoint m_radialBlurScreenOffset;
    float m_motionBlurTargetX;
    float m_motionBlurTargetY;
    float m_motionBlurSpeedX;
    float m_motionBlurSpeedY;
    float m_motionBlurFollowEaseX;
    float m_motionBlurFollowEaseY;
    int m_motionBlurTargetIDX;
    int m_motionBlurTargetIDY;
    bool m_motionBlurDual;
    bool m_motionBlurRelative;
    float m_bulgeValue;
    bool m_bulgeRelative;
    int m_bulgeTargetID;
    float m_bulgeRadius;
    cocos2d::CCPoint m_bulgeCenter;
    cocos2d::CCPoint m_bulgeScreenOffset;
    float m_pinchTargetX;
    float m_pinchTargetY;
    bool m_pinchTargetEnabledX;
    bool m_pinchTargetEnabledY;
    int m_pinchTargetIDX;
    int m_pinchTargetIDY;
    cocos2d::CCPoint m_pinchCenter;
    cocos2d::CCPoint m_pinchScreenOffset;
    bool m_pinchRelative;
    float m_pinchRadius;
    cocos2d::CCPoint m_pinchModifier;
    float m_grayscaleValue;
    bool m_grayscaleUseLum;
    int m_grayscaleTintChannel;
    cocos2d::ccColor3B m_grayscaleTint;
    float m_sepiaValue;
    float m_invertColorEditRGB;
    float m_invertColorR;
    float m_invertColorG;
    float m_invertColorB;
    bool m_invertColorClampRGB;
    float m_hueShiftDegrees;
    float m_colorChangeCR;
    float m_colorChangeCG;
    float m_colorChangeCB;
    float m_colorChangeBR;
    float m_colorChangeBG;
    float m_colorChangeBB;
    float m_splitTargetRows;
    float m_splitTargetCols;
    bool m_splitActive;
    int m_minBlendingLayer;
    int m_maxBlendingLayer;
    bool m_zLayerDirty;
    bool m_noPlayerParticles;
    bool m_usesShaders;
}

[[link(android)]]
class GJShopLayer : cocos2d::CCLayer, GJPurchaseDelegate, DialogDelegate, RewardedVideoDelegate {
    // virtual ~GJShopLayer();
    GJShopLayer() {
        m_closing = false;
        m_currencyLabel = nullptr;
        m_shopItems = nullptr;
        m_type = ShopType::Normal;
        m_unkNode1 = nullptr;
        m_unkNode2 = nullptr;
        m_videoPlaying = false;
        m_unkBool = false;
        m_shopKeeper = nullptr;
        m_zolgurothDialogIndex = 0;
        m_affordDialogIndex = 0;
    }
    ~GJShopLayer() = win inline, m1 0x2a5160, imac 0x30e6c0, ios 0x14db54 {
        cocos2d::CCDirector::sharedDirector()->getTouchDispatcher()->unregisterForcePrio(this);
        auto gm = GameManager::sharedState();
        if (gm->m_rewardedVideoDelegate == this) gm->m_rewardedVideoDelegate = nullptr;
        CC_SAFE_RELEASE(m_shopItems);
    }

    static GJShopLayer* create(ShopType type) = win inline, m1 0x2a536c, imac 0x30e990, ios 0x14dc8c {
        auto ret = new GJShopLayer();
        if (ret->init(type)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(ShopType) = win 0x2a1ef0, m1 0x2a5268, imac 0x30e850, ios 0x14dc40;

    virtual void onExit() = win 0x2a4160, m1 0x2a7074, imac 0x310710, ios 0x14f518;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x2a7290, imac 0x312d20, m1 0x2a91d0, ios 0x150e28;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x2a9590, imac 0x3130c0, ios 0x151120 {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x2a9598, imac 0x3130e0, ios 0x151128 {}
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x2a95a0, imac 0x313100, ios 0x151130;
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x2a95bc, imac 0x313140, ios 0x15114c;
    virtual void keyBackClicked() = win 0x2a58d0, imac 0x311710, m1 0x2a7f40, ios 0x15003c;
    virtual void didPurchaseItem(GJStoreItem*) = win 0x2a4ed0, m1 0x2a78d4, imac 0x311010, ios 0x14fb3c;
    virtual void rewardedVideoFinished() = win 0x2a4520, imac 0x310a30, m1 0x2a7360, ios 0x14f6b4;
    virtual void dialogClosed(DialogLayer*) = win 0x2a6f60, imac 0x312b60, m1 0x2a8fec, ios 0x150c68;

    void exitVideoAdItems() = imac 0x310960, m1 0x2a7298;
    bool init(ShopType) = win 0x2a2070, imac 0x30eaa0, m1 0x2a5450, ios 0x14dd64;
    void onBack(cocos2d::CCObject* sender) = win 0x2a56b0, imac 0x310450, m1 0x2a6d78, ios 0x14f27c;
    void onCommunityCredits(cocos2d::CCObject* sender) = win 0x2a43e0, m1 0x2a6d00, imac 0x3103d0, ios 0x14f250;
    void onPlushies(cocos2d::CCObject* sender);
    void onSelectItem(cocos2d::CCObject* sender) = win 0x2a45f0, imac 0x310600, m1 0x2a6f30, ios 0x14f408;
    void onVideoAd(cocos2d::CCObject* sender) = imac 0x310400, m1 0x2a6d2c;
    void showCantAffordMessage(GJStoreItem*) = m1 0x2a744c, imac 0x310b20, ios 0x14f74c, win 0x2a4800;
    void showReactMessage() = win 0x2a58e0, m1 0x2a7f4c, imac 0x311740;
    void updateCurrencyCounter() = m1 0x2a73bc, imac 0x310a80, win 0x2a4580;

    bool m_closing;
    CCCounterLabel* m_currencyLabel;
    cocos2d::CCDictionary* m_shopItems;
    ShopType m_type;
    gd::string m_sheetName;
    cocos2d::CCNode* m_unkNode1;
    cocos2d::CCNode* m_unkNode2;
    bool m_videoPlaying;
    bool m_unkBool;
    AnimatedShopKeeper* m_shopKeeper;
    int m_zolgurothDialogIndex;
    int m_affordDialogIndex;
}

[[link(android), depends(SmartPrefabResult)]]
class GJSmartBlockPreview : cocos2d::CCNode {
    // virtual ~GJSmartBlockPreview();

    static GJSmartBlockPreview* create(gd::string) = win 0x2ae310;

    void addChance(int, int) = win 0x2af0b0, m1 0x392550, imac 0x416ac0;
    void addCount(int);
    void addPreview(gd::string, gd::string, LevelEditorLayer*) = win 0x2aef30;
    void addTemplateGuide(gd::string, int) = win 0x2ae450;
    cocos2d::CCArray* addTemplateGuide(SmartPrefabResult, float) = win 0x2ae6e0;
    void createInfoLabel();
    bool init(gd::string key) = win inline {
        if (!cocos2d::CCNode::init()) return false;
        this->setContentSize({ 90.f, 90.f });
        m_prefabKey = key;
        return true;
    }
    void toggleSelectItem(bool);

    gd::string m_prefabKey;
    cocos2d::CCLabelBMFont* m_infoLabel;
    cocos2d::CCSprite* m_selectSprite;
    bool m_selected;
}

[[link(android)]]
class GJSmartBlockPreviewSprite : cocos2d::CCNode {
    // virtual ~GJSmartBlockPreviewSprite();

    static GJSmartBlockPreviewSprite* create();

    virtual bool init() = win 0x77db0, m1 0x3927f0, imac 0x416d80, ios 0xd46c;
    virtual void visit() = win 0x2af2b0, imac 0x416d90, m1 0x3927f4, ios 0xd470;
}

[[link(android)]]
class GJSmartPrefab : cocos2d::CCObject {
    // virtual ~GJSmartPrefab();

    static GJSmartPrefab* create() = win 0x2ae230;

    virtual void encodeWithCoder(DS_Dictionary*) = win 0x2ae2b0, imac 0x415c60, m1 0x391654, ios 0xc604;
    virtual bool canEncode() = m1 0x3914f4, imac 0x415b10, ios 0xc550 { return true; }

    static GJSmartPrefab* createWithCoder(DS_Dictionary* dict) = win inline, imac 0x415b20, m1 0x3914fc, ios 0xc558 {
        auto ret = GJSmartPrefab::create();
        ret->dataLoaded(dict);
        return ret;
    }
    void dataLoaded(DS_Dictionary* dict) = win inline {
        m_prefabData = dict->getStringForKey("1");
        m_prefabChance = dict->getIntegerForKey("2");
    }
    bool init();

    gd::string m_prefabKey;
    gd::string m_prefabData;
    int m_prefabID;
    int m_prefabChance;
}

[[link(android), depends(SmartPrefabResult)]]
class GJSmartTemplate : cocos2d::CCObject {
    // virtual ~GJSmartTemplate();

    static GJSmartTemplate* create() = win 0x2a92e0;

    virtual void encodeWithCoder(DS_Dictionary*) = win 0x2ae150, imac 0x415960, m1 0x3912e8, ios 0xc430;
    virtual bool canEncode() = m1 0x390f40, imac 0x415580, ios 0xc1c4 { return true; }

    static void applyTransformationsForType(SmartBlockType, cocos2d::CCSprite*) = win 0x2ac080, m1 0x38fb80, imac 0x413f70, ios 0xb83c;
    static GJSmartTemplate* createWithCoder(DS_Dictionary* dict) = win inline, imac 0x415590, m1 0x390f48, ios 0xc1cc {
        auto ret = GJSmartTemplate::create();
        ret->dataLoaded(dict);
        return ret;
    }
    void dataLoaded(DS_Dictionary*) = win 0x2ade80;
    static SmartBlockType flipBlockType(SmartBlockType, bool, bool) = win 0x2ac9b0;
    static SmartBlockType flipBlockTypeX(SmartBlockType);
    static SmartBlockType flipBlockTypeY(SmartBlockType);
    static gd::string flipKey(gd::string, bool, bool) = win 0x2acfc0;
    cocos2d::CCDictionary* generateRemapDict();
    gd::string getNoCornerKey(gd::string) = win 0x2aa300;
    GJSmartPrefab* getPrefab(cocos2d::CCPoint, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*);
    GJSmartPrefab* getPrefab(gd::string, bool, bool) = win 0x2ab4e0, m1 0x38e528, imac 0x412600;
    cocos2d::CCArray* getPrefabs(gd::string);
    GJSmartPrefab* getPrefabWithID(gd::string, int) = win 0x2abdd0, m1 0x38f514, imac 0x4138e0, ios 0xb2a8;
    GJSmartPrefab* getRandomPrefab(gd::string) = win 0x2ab370;
    static gd::string getSimplifiedKey(gd::string) = win 0x2a9a10;
    static SmartBlockType getSimplifiedType(SmartBlockType, bool&);
    void getTemplateState(gd::vector<SmartPrefabResult>&) = win 0x2ad890;
    int getTotalChanceForPrefab(gd::string) = win 0x2ab2b0;
    static gd::string getVerySimplifiedKey(gd::string) = win 0x2aa1f0, m1 0x38d238, imac 0x411170;
    bool init() = win inline {
        CC_SAFE_RELEASE(m_prefabArrays);
        m_prefabArrays = cocos2d::CCDictionary::create();
        m_prefabArrays->retain();
        m_remapDict1 = cocos2d::CCDictionary::create();
        m_remapDict1->retain();
        m_remapDict2 = cocos2d::CCDictionary::create();
        m_remapDict2->retain();
        m_remapDict3 = cocos2d::CCDictionary::create();
        m_remapDict3->retain();
        m_remapDict4 = cocos2d::CCDictionary::create();
        m_remapDict4->retain();
        m_remapDict5 = cocos2d::CCDictionary::create();
        m_remapDict5->retain();
        m_remapDict6 = cocos2d::CCDictionary::create();
        m_remapDict6->retain();
        return true;
    }
    bool isUnrequired(gd::string) = win 0x2ad6f0;
    static gd::string keyFromNeighbors(cocos2d::CCPoint, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*, SmartGameObject*) = win 0x2ac450;
    static gd::string keyFromNeighbors(SmartBlockType, SmartBlockType, SmartBlockType, SmartBlockType, SmartBlockType, SmartBlockType, SmartBlockType, SmartBlockType, SmartBlockType);
    static gd::string keyFromNeighborsOld(bool, bool, bool, bool, bool, bool, bool, bool);
    gd::string logTemplateStatus(bool) = win 0x2ad2f0, m1 0x390450, imac 0x4148f0;
    static cocos2d::CCPoint offsetForDir(GJSmartDirection, int) = win 0x2abe90;
    static cocos2d::CCPoint offsetForObject(SmartGameObject*);
    static cocos2d::CCPoint offsetForType(SmartBlockType) = win 0x2abf90, m1 0x38fa8c, imac 0x413df0, ios 0xb754;
    void removePrefab(gd::string, int);
    void resetScannedPrefabs();
    static SmartBlockType rotateBlockType(SmartBlockType, int) = win 0x2ac840;
    static SmartBlockType rotateBlockType90(SmartBlockType);
    static gd::string rotateKey(gd::string, int) = win 0x2acc60;
    void savePrefab(gd::string, gd::string);
    void saveRemap(gd::string) = win 0x2a9460;
    void saveRemapToDict(gd::string, gd::string, cocos2d::CCDictionary*) = win 0x2a9830, m1 0x38cf00, imac 0x410e20;
    SmartPrefabResult scanForPrefab(gd::string) = win 0x2aa480;
    static bool shouldDiscardObject(SmartBlockType, GJSmartDirection);
    static SmartBlockType smartObjectToType(SmartGameObject*, cocos2d::CCPoint) = win 0x2ac1c0;
    static int smartTypeToObjectKey(SmartBlockType) = win inline, m1 0x38fc84, imac 0x4140a0, ios 0xb910 {
        switch (p0) {
            case SmartBlockType::NormalSlope1:
            case SmartBlockType::NormalSlope2:
            case SmartBlockType::NormalSlope3:
            case SmartBlockType::NormalSlope4:
                return 2896;
            case SmartBlockType::WideSlope1:
            case SmartBlockType::WideSlope2:
            case SmartBlockType::WideSlope3:
            case SmartBlockType::WideSlope4:
            case SmartBlockType::WideSlope5:
            case SmartBlockType::WideSlope6:
            case SmartBlockType::WideSlope7:
            case SmartBlockType::WideSlope8:
            case SmartBlockType::WideSlope9:
            case SmartBlockType::WideSlope10:
            case SmartBlockType::WideSlope11:
            case SmartBlockType::WideSlope12:
            case SmartBlockType::WideSlope13:
            case SmartBlockType::WideSlope14:
            case SmartBlockType::WideSlope15:
            case SmartBlockType::WideSlope16:
                return 2897;
            default:
                return 2895;
        }
    }

    cocos2d::CCDictionary* m_prefabArrays;
    cocos2d::CCDictionary* m_remapDict1;
    cocos2d::CCDictionary* m_remapDict2;
    cocos2d::CCDictionary* m_remapDict3;
    cocos2d::CCDictionary* m_remapDict4;
    cocos2d::CCDictionary* m_remapDict5;
    cocos2d::CCDictionary* m_remapDict6;
    gd::map<gd::string, SmartPrefabResult> m_prefabResults;
    bool m_allowFlipX;
    bool m_allowFlipY;
    bool m_allowRotation;
    bool m_ignoreCorners;
    gd::string m_templateName;
    gd::string m_unk0a8;
    int m_nameIndex;
    int m_prefabIndex;
}

[[link(android)]]
class GJSongBrowser : GJDropDownLayer, FLAlertLayerProtocol, TableViewCellDelegate {
    // virtual ~GJSongBrowser();

    static GJSongBrowser* create() = ios 0x2649ac, win 0x2afab0, m1 0x518ed0, imac 0x5e7120;

    virtual bool init() = win 0x2afc30, imac 0x5e7530, m1 0x5191bc, ios 0x264ad4;
    virtual void customSetup() = win 0x2afd30, m1 0x519468, imac 0x5e7800, ios 0x264cb4;
    virtual void exitLayer(cocos2d::CCObject*) = win 0x2afc70, m1 0x519434, imac 0x5e77d0, ios 0x264c80;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x2b0470, imac 0x5e7d80, m1 0x519990, ios 0x2651e8;
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) = win 0x2b0570, imac 0x5e7e60, m1 0x519a4c, ios 0x2652a4;
    virtual int getSelectedCellIdx() = win 0x2b05a0, m1 0x519aac, imac 0x5e7ec0, ios 0x265304;

    void loadPage(int) = win 0x2b00b0;
    void onDeleteAll(cocos2d::CCObject* sender) = win 0x2b0360, m1 0x519790, imac 0x5e7b90;
    void onNextPage(cocos2d::CCObject* sender) = win 0x2b0340;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x2b0350;
    void setupPageInfo(int, int, int);
    void setupSongBrowser(cocos2d::CCArray*);

    int m_page;
    int m_songID;
    bool m_selected;
    CCMenuItemSpriteExtra* m_rightArrow;
    CCMenuItemSpriteExtra* m_leftArrow;
    cocos2d::CCLabelBMFont* m_countText;
    cocos2d::CCPoint m_unk298;
    cocos2d::CCArray* m_downloadedSongs;
    CustomListView* m_listView;
}

[[link(android)]]
class GJSpecialColorSelect : FLAlertLayer {
    // virtual ~GJSpecialColorSelect();

    static GJSpecialColorSelect* create(int, GJSpecialColorSelectDelegate*, ColorSelectType) = win 0x2b0670, m1 0x53a934, imac 0x60dd40;
    static const char* textForColorIdx(int) = ios 0x1b37b0, win 0x2b13c0, imac 0x610110, m1 0x53c684;

    virtual void keyBackClicked() = win 0x2b1370, m1 0x53c8cc, imac 0x610360, ios 0x1b38d8;

    ButtonSprite* getButtonByTag(int);
    void highlightSelected(ButtonSprite*);
    bool init(int, GJSpecialColorSelectDelegate*, ColorSelectType) = ios 0x1b2268, win 0x2b0780, imac 0x60deb0, m1 0x53aa54;
    void onClose(cocos2d::CCObject* sender) = win 0x2b1320;
    void onSelectColor(cocos2d::CCObject* sender) = win 0x2b1240, imac 0x610140, m1 0x53c6ac;

    GJSpecialColorSelectDelegate* m_delegate;
    int m_colorID;
    cocos2d::CCArray* m_buttonSprites;
}

[[link(android)]]
class GJSpecialColorSelectDelegate {
    virtual void colorSelectClosed(GJSpecialColorSelect*, int) {}
}

[[link(android)]]
class GJSpiderSprite : GJRobotSprite {
    // virtual ~GJSpiderSprite();

    static GJSpiderSprite* create(int) = win 0x2a0420, m1 0x4fa09c, imac 0x5c50e0, ios 0x23ff78;

    bool init(int) = win inline, m1 0x4fa1d0, imac 0x5c5230, ios 0x240040 {
        return GJRobotSprite::init(p0, "Spider");
    }
}

[[link(android)]]
class GJSpriteColor {
    GJSpriteColor() {
        m_colorID = 0;
        m_defaultColorID = 0;
        m_opacity = 1.f;
        m_baseOpacity = 1.f;
        m_hsv.h = 0.f;
        m_hsv.s = 1.f;
        m_hsv.v = 1.f;
        m_hsv.absoluteSaturation = false;
        m_hsv.absoluteBrightness = false;
        m_usesHSV = false;
        m_usesCustomBlend = false;
        m_customColor.r = 255;
        m_customColor.g = 255;
        m_customColor.b = 255;
    }

    int getColorMode() {
        return m_defaultColorID == m_colorID || m_colorID != 0 ? m_colorID : m_defaultColorID;
    }

    int m_colorID;
    int m_defaultColorID;
    float m_opacity;
    float m_baseOpacity;
    cocos2d::ccHSVValue m_hsv;
    bool m_usesHSV;
    bool m_usesCustomBlend;
    cocos2d::ccColor3B m_customColor;
}

[[link(android)]]
class GJStoreItem : cocos2d::CCNode {
    // virtual ~GJStoreItem();
    GJStoreItem() {
        m_index = 0;
        m_typeID = 0;
        m_unlockType = 0;
        m_price = 0;
        m_shopType = ShopType::Normal;
    }

    static GJStoreItem* create(int index, int typeID, int unlockType, int price, ShopType shopType) = win inline, imac 0x66200, m1 0x5a890, ios 0x32bc54 {
        auto ret = new GJStoreItem();
        if (ret->init(index, typeID, unlockType, price, shopType)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    gd::string getCurrencyKey() = win inline, imac 0x665e0, m1 0x5ac78 {
        return m_shopType == ShopType::Diamond ? "29" : "14";
    }
    bool init(int index, int typeID, int unlockType, int price, ShopType shopType) = win inline, imac 0x8f5a0, m1 0x82d3c {
        if (!CCNode::init()) return false;
        m_index = index;
        m_typeID = typeID;
        m_unlockType = unlockType;
        m_price = price;
        m_shopType = shopType;
        return true;
    }

    geode::SeedValueRSV m_index;
    geode::SeedValueRSV m_typeID;
    geode::SeedValueRSV m_unlockType;
    geode::SeedValueRSV m_price;
    ShopType m_shopType;
}

[[link(android)]]
class GJTransformControl : cocos2d::CCLayer {
    GJTransformControl() = m1 0x4bdb4, imac 0x55060, ios 0x3f4830 {
        m_objects = nullptr;
        m_touchID = -1;
        m_transformButtonType = 0;
        m_delegate = nullptr;
        m_warpSprites = nullptr;
        m_warpLockButton = nullptr;
        m_scaleX = 1.0f;
        m_scaleY = 1.0f;
        m_warpLocked = false;
        m_rotationX = 0.0f;
        m_rotationY = 0.0f;
        m_rotation = 0.0f;
        m_buttonScale = 1.0f;
    }
    ~GJTransformControl() = win inline, m1 0x4a3e4, imac 0x53190, ios 0x3f37c8 {
        CC_SAFE_RELEASE(m_warpSprites);
        CC_SAFE_RELEASE(m_objects);
    }

    static GJTransformControl* create() = win inline {
        auto ret = new GJTransformControl();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x1290a0, m1 0x4a5fc, imac 0x534a0, ios 0x3f3868;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x12a730, imac 0x53940, m1 0x4aa70, ios 0x3f3c00;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x12a900, imac 0x53dc0, m1 0x4ae6c, ios 0x3f3da8;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x12ae60, imac 0x54360, m1 0x4b374, ios 0x3f42a4;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x4b54c, imac 0x54570, ios 0x3f447c;

    void applyRotation(float) = win inline, m1 0x3bb0c, imac 0x41470, ios 0x3e894c {
        if (m_rotationY != p0) {
            m_rotationY = p0;
            m_mainNode->setRotation(p0);
            if (m_delegate) m_delegate->transformRotationChanged(p0);
        }
        this->updateButtons(false, false);
    }
    TodoReturn calculateRotationOffset();
    void finishTouch();
    void loadFromState(GJTransformState&);
    void loadValues(GameObject*, cocos2d::CCArray*, gd::unordered_map<int, GameObjectEditorState>&);
    TodoReturn logCurrentZeroPos();
    void onToggleLockScale(cocos2d::CCObject* sender) = win 0x129780, m1 0x4a8fc, imac 0x537b0, ios 0x3f3ae4;
    void refreshControl() = win 0x1295f0, m1 0x43948, imac 0x4ab90, ios 0x3ee31c;
    void saveToState(GJTransformState&);
    void scaleButtons(float) = win 0x129810, m1 0x38e08, imac 0x3e380, ios 0x3e6b10;
    cocos2d::CCSprite* spriteByTag(int tag) {
        return static_cast<cocos2d::CCSprite*>(m_warpSprites->objectAtIndex(tag - 1));
    }
    TodoReturn updateAnchorSprite(cocos2d::CCPoint);
    void updateButtons(bool, bool) = win 0x1298d0, m1 0x43f04, imac 0x4b1b0, ios 0x3ee8a8;
    TodoReturn updateMinMaxPositions();

    cocos2d::CCNode* m_mainNodeParent;
    cocos2d::CCNode* m_mainNode;
    cocos2d::CCArray* m_objects;
    int m_touchID;
    short m_transformButtonType;
    GJTransformControlDelegate* m_delegate;
    cocos2d::CCPoint m_cursorDifference;
    cocos2d::CCPoint m_topRight;
    cocos2d::CCPoint m_bottomLeft;
    cocos2d::CCPoint m_topRightPosition;
    cocos2d::CCPoint m_bottomLeftPosition;
    cocos2d::CCPoint m_topRightOrigin;
    cocos2d::CCPoint m_bottomLeftOrigin;
    cocos2d::CCArray* m_warpSprites;
    cocos2d::CCPoint m_rotatePosition;
    CCMenuItemSpriteExtra* m_warpLockButton;
    float m_scaleX;
    float m_scaleY;
    bool m_warpLocked;
    float m_rotationX;
    float m_rotationY;
    float m_rotation;
    float m_buttonScale;
}

[[link(android)]]
class GJTransformControlDelegate {
    virtual void transformScaleXChanged(float) {}
    virtual void transformScaleYChanged(float) {}
    virtual void transformScaleXYChanged(float, float) {}
    virtual void transformRotationXChanged(float) {}
    virtual void transformRotationYChanged(float) {}
    virtual void transformRotationChanged(float) {}
    virtual void transformResetRotation() {}
    virtual void transformRestoreRotation() {}
    virtual void transformSkewXChanged(float) {}
    virtual void transformSkewYChanged(float) {}
    virtual void transformChangeBegin() {}
    virtual void transformChangeEnded() {}
    virtual void updateTransformControl() {}
    virtual void anchorPointMoved(cocos2d::CCPoint) {}
    virtual cocos2d::CCNode* getTransformNode() { return nullptr; }
    virtual EditorUI* getUI() { return nullptr; }
}

[[link(android)]]
class GJUINode : cocos2d::CCNode {
    // virtual ~GJUINode();

    static GJUINode* create(UIButtonConfig&) = win 0x4b5d30, m1 0x41d2c0, imac 0x4b5100, ios 0x4d0f0;

    virtual void draw() = win 0x4b6870, imac 0x4b8390, m1 0x4200f4, ios 0x4ed2c;

    int activeRangeTouchTest(cocos2d::CCPoint);
    int activeTouchTest(cocos2d::CCPoint) = win 0x4b6540;
    float getButtonScale();
    int getOpacity();
    void highlightButton(int) = win inline, imac 0x4b7150, m1 0x41f110, ios 0x4e370 {
        if (m_modeB) return;
        this->toggleHighlight(p0, true);
        this->toggleHighlight(p0 == 2 ? 3 : 2, false);
    }
    bool init(UIButtonConfig&) = win 0x4b5e10, m1 0x41f568, imac 0x4b76c0;
    void loadFromConfig(UIButtonConfig&);
    void resetState();
    void saveToConfig(UIButtonConfig&) = win 0x4b60c0;
    void setOpacity(unsigned char);
    void toggleHighlight(int, bool) = win 0x4b67e0, m1 0x41f018, imac 0x4b7070, ios inline {
        if (m_modeB) {
            if (m_firstSprite) m_firstSprite->setColor({ 255, 255, 255 });
        }
        else {
            auto sprite = p0 == 3 ? m_secondSprite : m_firstSprite;
            if (sprite) sprite->setColor(p1 ? cocos2d::ccColor3B { 150, 150, 150 } : cocos2d::ccColor3B { 255, 255, 255 });
        }
    }
    void toggleModeB(bool);
    void touchEnded() = win 0x4b6720;
    int touchTest(cocos2d::CCPoint) = win 0x4b6430;
    void updateButtonFrames() = win 0x4b6170, m1 0x41fdb8, imac 0x4b8000, ios 0x4ea84;
    void updateButtonPositions() = win 0x4b6330;
    void updateButtonScale(float);
    void updateDeadzone(int);
    void updateDragRadius(float);
    void updateHeight(float) = win 0x4b62c0;
    void updateRangePos(cocos2d::CCPoint);
    void updateSize(float, float);
    void updateWidth(float) = win 0x4b6250;

    cocos2d::CCSprite* m_firstSprite;
    cocos2d::CCSprite* m_secondSprite;
    cocos2d::CCRect m_rect;
    int m_touchID;
    cocos2d::CCPoint m_touchDelta;
    cocos2d::CCPoint m_touchPosition;
    float m_radius;
    float m_deadzone;
    bool m_drawLines;
    bool m_modeB;
    bool m_snap;
    bool m_swiping;
    bool m_moving;
    bool m_player2;
    bool m_oneButton;
    bool m_split;
    PlayerButton m_currentButton;
}

[[link(android)]]
class GJUnlockableItem : cocos2d::CCObject {
    // virtual ~GJUnlockableItem();

    static GJUnlockableItem* create();

    bool init();
}

[[link(android)]]
class GJUserCell : TableViewCell, FLAlertLayerProtocol, UploadPopupDelegate, UploadActionDelegate {
    // virtual ~GJUserCell();
    GJUserCell(char const*, float, float);

    virtual bool init() = win 0xb9f50, imac 0x2443a0, m1 0x1f31f8, ios 0x114208;
    virtual void draw() = win 0xad710, imac 0x244b10, m1 0x1f399c, ios 0x11469c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xbae70, imac 0x244be0, m1 0x1f3a48, ios 0x114748;
    virtual void uploadActionFinished(int, int) = win 0xbb230, imac 0x244e90, m1 0x1f3c94, ios 0x114950;
    virtual void uploadActionFailed(int, int) = win 0xbb3e0, m1 0x1f3ea8, imac 0x2450a0, ios 0x114a74;
    virtual void onClosePopup(UploadActionPopup*) = win 0xbb4b0, imac 0x245210, m1 0x1f4010, ios 0x114b0c;

    void loadFromScore(GJUserScore*) = ios 0x10c530, win 0xb9f70, imac 0x239a60, m1 0x1e9a54;
    void onCancelFriendRequest(cocos2d::CCObject* sender) = win 0xbaa50, m1 0x1f34f4, imac 0x244680, ios 0x1143e4;
    void onRemoveFriend(cocos2d::CCObject* sender) = win 0xbabf0, m1 0x1f3644, imac 0x2447c0, ios 0x114504;
    void onSendMessage(cocos2d::CCObject* sender) = win 0xbae30, m1 0x1f3608, imac 0x244790, ios 0x1144c8;
    void onUnblockUser(cocos2d::CCObject* sender) = ios 0x114254, win 0xba840, m1 0x1f3244, imac 0x2443f0;
    void onViewFriendRequest(cocos2d::CCObject* sender);
    void onViewProfile(cocos2d::CCObject* sender) = win 0xba800, m1 0x1f3208, imac 0x2443c0, ios 0x114218;
    void updateBGColor(int index) = win inline, m1 0x1e99d4, imac 0x239a00, ios 0x10c4b0 {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        m_backgroundLayer->setOpacity(255);
    }

    GJUserScore* m_userScore;
    UploadActionPopup* m_uploadPopup;
}

[[link(android)]]
class GJUserMessage : cocos2d::CCNode {
    // virtual ~GJUserMessage();

    static GJUserMessage* create() = win 0x170ec0, imac 0x549f70, m1 0x4a264c, ios 0xb3540;
    static GJUserMessage* create(cocos2d::CCDictionary*) = win 0x170380, m1 0x490df0, imac 0x537410, ios 0xa8330;

    virtual bool init() = win 0x77db0, m1 0x4a26e8, imac 0x54a010, ios 0xb35d0;

    int m_messageID;
    int m_accountID;
    int m_userID;
    gd::string m_title;
    gd::string m_content;
    gd::string m_username;
    gd::string m_uploadDate;
    bool m_read;
    bool m_outgoing;
    bool m_toggled;
}

[[link(android)]]
class GJUserScore : cocos2d::CCNode {
    GJUserScore() = win 0x1401d0;
    static GJUserScore* create(cocos2d::CCDictionary*) = ios 0x99f28, win 0x16e1a0, m1 0x479a1c, imac 0x51d290;
    // virtual ~GJUserScore();

    static GJUserScore* create() = win inline, m1 0x4a205c, imac 0x549900, ios 0xb3264 { // ?
        auto ret = new GJUserScore();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }

        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x16fb40, m1 0x4a2144, imac 0x549a60, ios 0xb32d8;

    bool isCurrentUser() = win 0x16fb90, m1 0x4a21b8, imac 0x549af0, ios 0xb3320;
    TodoReturn mergeWithScore(GJUserScore*);

    gd::string m_userName;
    gd::string m_userUDID;
    int m_scoreType;
    int m_userID;
    int m_accountID;
    int m_stars;
    int m_moons;
    int m_diamonds;
    int m_demons;
    int m_playerRank;
    int m_creatorPoints;
    int m_secretCoins;
    int m_userCoins;
    int m_iconID;
    int m_color1;
    int m_color2;
    int m_color3;
    int m_special;
    IconType m_iconType;
    int m_messageState;
    int m_friendStatus;
    int m_commentHistoryStatus;
    gd::string m_youtubeURL;
    gd::string m_twitterURL;
    gd::string m_twitchURL;
    int m_playerCube;
    int m_playerShip;
    int m_playerBall;
    int m_playerUfo;
    int m_playerWave;
    int m_playerRobot;
    int m_playerSpider;
    int m_playerSwing;
    int m_playerJetpack;
    int m_playerStreak;
    bool m_glowEnabled;
    int m_playerExplosion;
    int m_modBadge;
    int m_globalRank;
    int m_friendReqStatus;
    int m_newMsgCount;
    int m_friendReqCount;
    int m_newFriendCount;
    bool m_newFriendRequest;
    gd::string m_unkString;
    int m_unkInt;
    int m_unkInt2;
    gd::string m_demonInfo;
    gd::string m_starsInfo;
    gd::string m_platformerInfo;
    int m_levelMode;
    LevelLeaderboardMode m_leaderboardMode;
}

[[link(android)]]
class GJValueTween {
    void step(float delta) = win 0x2000b0;

    float m_fromValue;
    float m_toValue;
    float m_duration;
    float m_deltaTime;
    float m_currentValue;
    int m_easingType;
    float m_easingRate;
    bool m_finished;
    bool m_disabled;
    int m_uniqueID;
    int m_controlID;
}

[[link(android)]]
class GJWorldNode : cocos2d::CCNode {
    // virtual ~GJWorldNode();

    static GJWorldNode* create(int, WorldSelectLayer*);

    float addDotsToLevel(int, bool) = m1 0x33d2d0, imac 0x3b1940;
    cocos2d::CCPoint dotPositionForLevel(int, int);
    bool init(int, WorldSelectLayer*) = m1 0x33c8b8, imac 0x3b0e80;
    void onLevel(cocos2d::CCObject* sender);
    void playStep1();
    void playStep2();
    void playStep3();
    cocos2d::CCPoint positionForLevelButton(int);
    void unlockActiveItem();

    cocos2d::CCArray* m_activeObjects;
    CCMenuItemSpriteExtra* m_activeButton;
    GJGameLevel* m_level;
    WorldSelectLayer* m_selectLayer;
    bool m_unlocked;
    cocos2d::CCPoint m_levelPosition;
    cocos2d::ccColor3B m_particleColor;
    int m_islandType;
    bool m_islandUnlocked;
    cocos2d::CCSprite* m_arrowSprite;
}

[[link(android)]]
class GJWriteMessagePopup : FLAlertLayer, TextInputDelegate, UploadMessageDelegate, UploadPopupDelegate, FLAlertLayerProtocol {
    // virtual ~GJWriteMessagePopup();

    static GJWriteMessagePopup* create(int, int) = win 0x291a50, m1 0x23cc88, imac 0x294a70, ios 0x2db258;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x23ebbc, imac 0x296b90, ios 0x2dccd0;
    virtual void keyBackClicked() = win 0x2930d0, imac 0x296b60, m1 0x23eba8, ios 0x2dccbc;
    virtual void textInputOpened(CCTextInputNode*) = m1 0x23ec10, imac 0x296c10, ios 0x2dcd24 {}
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x23ebf4, imac 0x296bd0, ios 0x2dcd08;
    virtual void textChanged(CCTextInputNode*) = win 0x2930e0, imac 0x296c30, m1 0x23ec18, ios 0x2dcd2c;
    virtual void uploadMessageFinished(int) = win 0x2936c0, imac 0x297300, m1 0x23f2bc, ios 0x2dd168;
    virtual void uploadMessageFailed(int) = win 0x293740, imac 0x2973c0, m1 0x23f394, ios 0x2dd1f8;
    virtual void onClosePopup(UploadActionPopup*) = win 0x2937f0, imac 0x2974f0, m1 0x23f4d4, ios 0x2dd27c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x293890, imac 0x297640, m1 0x23f658, ios 0x2dd2f8;
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, imac 0x297720, m1 0x23f778, ios 0x2dd38c;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, imac 0x2977e0, m1 0x23f848, ios 0x2dd3f8;

    void closeMessagePopup(bool) = win 0x292ef0, m1 0x23e9f4, imac 0x296990, ios 0x2dcb10;
    bool init(int, int) = win 0x291be0, m1 0x23d718, imac 0x295560, ios 0x2db95c;
    void onClearBody(cocos2d::CCObject* sender) = win 0x292d50, m1 0x23e900, imac 0x2968a0, ios 0x2dca40;
    void onClose(cocos2d::CCObject* sender) = win 0x292ee0, m1 0x23e4d8, imac 0x296440, ios 0x2dc67c;
    void onSend(cocos2d::CCObject* sender) = win 0x292a80, m1 0x23e4e0, imac 0x296450, ios 0x2dc684;
    void updateBody(gd::string body) = win 0x2932c0, ios 0x2dc9b4, m1 0x23e864, imac 0x296820;
    void updateCharCountLabel(int type) = win inline, m1 0x23f188, imac 0x2971d0, ios 0x2dd044 {
        cocos2d::CCLabelBMFont* label;
        int count;
        int maxCount;
        if (type == 0) {
            label = m_subjectCountLabel;
            count = m_subjectText.size();
            maxCount = 35;
        }
        else {
            label = m_messageCountLabel;
            count = m_messageText.size();
            maxCount = 200;
        }
        if (maxCount * .9f <= count) {
            label->setOpacity(255);
            label->setColor({ 255, 0, 0 });
        }
        else if (maxCount * .7f <= count) {
            label->setOpacity(255);
            label->setColor({ 255, 255, 255 });
        }
        else {
            label->setOpacity(100);
            label->setColor({ 255, 255, 255 });
        }
        label->setString(cocos2d::CCString::createWithFormat("%i", maxCount - count)->getCString());
    }
    void updateSubject(gd::string subject) = win 0x293260, ios 0x2dc928, m1 0x23e7c8, imac 0x2967a0;
    void updateText(gd::string, int) = win 0x293330, m1 0x23ef14, imac 0x296f50, ios 0x2dce50;

    int m_unk298;
    int m_messageID;
    int m_accountID;
    CCTextInputNode* m_messageInput;
    CCTextInputNode* m_subjectInput;
    gd::string m_messageText;
    gd::string m_subjectText;
    cocos2d::CCLabelBMFont* m_messageCountLabel;
    cocos2d::CCLabelBMFont* m_subjectCountLabel;
    UploadActionPopup* m_uploadPopup;
    bool m_uploadSuccess;
}

[[link(android)]]
class GManager : cocos2d::CCNode {
    GManager() = win 0x515d0 {
        m_setup = false;
        m_saved = false;
        m_quickSave = false;
    }

    virtual bool init() = win 0x6a7c0, imac 0x498f00, m1 0x404d70, ios 0x249774;
    virtual void setup() = win 0x6a7d0, imac 0x498f20, m1 0x404d80, ios 0x249784;
    virtual void encodeDataTo(DS_Dictionary*) = m1 0x405280, imac 0x499400, ios 0x249bb8 {}
    virtual void dataLoaded(DS_Dictionary*) = m1 0x4058bc, imac 0x499ab0, ios 0x249ffc {}
    virtual void firstLoad() = m1 0x4058c0, imac 0x499ac0, ios 0x24a000 {}

    gd::string getCompressedSaveString() = win 0x6a7f0, m1 0x404e1c, imac 0x498ff0, ios 0x249818;
    gd::string getSaveString() = win inline, m1 0x404d98, imac 0x498f60, ios 0x249794 {
        auto dict = new DS_Dictionary();
        this->encodeDataTo(dict);
        auto str = dict->saveRootSubDictToString();
        delete dict;
        return str;
    }
    void load() = win inline, m1 0x404d90, imac 0x498f40, ios inline {
        this->loadDataFromFile(m_fileName);
    }
    void loadDataFromFile(gd::string const& filename) = win 0x6aa90, imac 0x499410, m1 0x405284, ios 0x249bbc;
    void loadFromCompressedString(gd::string& str) = win 0x6a8c0, m1 0x404f44, imac 0x499110, ios 0x249930;
    void loadFromString(gd::string& str) = win inline, m1 0x404e98, imac 0x499060, ios 0x249884 {
        auto dict = new DS_Dictionary();
        auto loaded = dict->loadRootSubDictFromString(str.c_str());
        str.clear();
        if (loaded) this->dataLoaded(dict);
        delete dict;
    }
    void save() = ios 0x2499c4, win 0x6a9a0, imac 0x499190, m1 0x404fe8;
    void saveData(DS_Dictionary* dict, gd::string filename) = win inline, m1 0x4051f4, imac 0x499390, ios 0x249b3c {
        dict->saveRootSubDictToCompressedFile(filename.c_str());
    }
    void saveGMTo(gd::string filename) = win inline, m1 0x405090, imac 0x499230, ios 0x249a5c {
        auto dict = new DS_Dictionary();
        this->encodeDataTo(dict);
        this->saveData(dict, filename);
        m_saved = false;
        delete dict;
    }
    bool tryLoadData(DS_Dictionary* dict, gd::string const& filename) = win inline, m1 0x405530, imac 0x499680, ios 0x249d4c {
        return dict->loadRootSubDictFromCompressedFile(filename.c_str());
    }

    gd::string m_fileName;
    bool m_setup;
    bool m_saved;
    bool m_quickSave;
}

[[link(android)]]
class GooglePlayDelegate {
    virtual void googlePlaySignedIn() {}
}

[[link(android)]]
class GooglePlayManager : cocos2d::CCNode {
    // virtual ~GooglePlayManager();

    static GooglePlayManager* sharedState() = win 0x6ac50, m1 0x3d5188, imac 0x4651e0, ios 0x458d8;

    virtual bool init() = m1 0x3d51f8, imac 0x465240, ios 0x45938 { return true; }

    void googlePlaySignedIn() = win inline {
        if (m_delegate1) m_delegate1->googlePlaySignedIn();
        if (m_delegate2) m_delegate2->googlePlaySignedIn();
    }

    GooglePlayDelegate* m_delegate1;
    GooglePlayDelegate* m_delegate2;
}

[[link(android)]]
class GradientTriggerObject : EffectGameObject {
    // virtual ~GradientTriggerObject();
    GradientTriggerObject() {
        m_blendingLayer = 0;
        m_blendingMode = 0;
        m_gradientID = 0;
        m_upBottomLeftID = 0;
        m_downBottomRightID = 0;
        m_leftTopLeftID = 0;
        m_rightTopRightID = 0;
        m_vertexMode = false;
        m_disable = false;
        m_disableAll = false;
        m_previewOpacity = 1.f;
    }

    static GradientTriggerObject* create() = win inline, m1 0x151ee4, imac 0x18ab00 {
        auto ret = new GradientTriggerObject();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x480b40, m1 0x151fc0, imac 0x18abe0, ios 0x373678;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4811d0, imac 0x18c520, m1 0x1533c4, ios 0x373c10;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x480bc0, imac 0x18ac40, m1 0x152014, ios 0x3736cc;

    // property 202
    int m_blendingLayer;
    // property 174
    int m_blendingMode;
    // property 209
    int m_gradientID;
    // property 203
    int m_upBottomLeftID;
    // property 204
    int m_downBottomRightID;
    // property 205
    int m_leftTopLeftID;
    // property 206
    int m_rightTopRightID;
    // property 207
    bool m_vertexMode;
    // property 208
    bool m_disable;
    // property 508
    bool m_disableAll;
    // property 456
    float m_previewOpacity;
}

[[link(android)]]
class GraphicsReloadLayer : cocos2d::CCLayer {
    // virtual ~GraphicsReloadLayer();
    GraphicsReloadLayer() {}

    static GraphicsReloadLayer* create(cocos2d::TextureQuality quality, cocos2d::CCSize resolution, bool windowed, bool borderless, bool fix, bool changedResolution) = win inline {
        auto ret = new GraphicsReloadLayer();
        if (ret->init(quality, resolution, windowed, borderless, fix, changedResolution)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(cocos2d::TextureQuality quality, cocos2d::CCSize resolution, bool windowed, bool borderless, bool fix, bool changedResolution) = win inline {
        auto scene = cocos2d::CCScene::create();
        auto layer = GraphicsReloadLayer::create(quality, resolution, windowed, borderless, fix, changedResolution);
        scene->addChild(layer);
        return scene;
    }

    bool init(cocos2d::TextureQuality quality, cocos2d::CCSize resolution, bool windowed, bool borderless, bool fix, bool changedResolution) = win inline {
        if (!CCLayer::init()) return false;
        m_quality = quality;
        m_resolution = resolution;
        m_changedResolution = changedResolution;
        m_windowed = windowed;
        m_borderless = borderless;
        m_fix = fix;
        this->runAction(cocos2d::CCSequence::create(
            cocos2d::CCDelayTime::create(.1f),
            cocos2d::CCCallFunc::create(this, callfunc_selector(GraphicsReloadLayer::performReload)),
            nullptr
        ));
        return true;
    }
    void performReload() = win 0x366490;

    cocos2d::TextureQuality m_quality;
    cocos2d::CCSize m_resolution;
    bool m_windowed;
    bool m_borderless;
    bool m_fix;
    bool m_changedResolution;
}

[[link(android)]]
class GravityEffectSprite : cocos2d::CCSprite {
    // virtual ~GravityEffectSprite();
    GravityEffectSprite() {}

    static GravityEffectSprite* create() = win inline, m1 0x9d8c0, imac 0xacad0, ios 0x119108 {
        auto ret = new GravityEffectSprite();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x3a4390, imac 0xbfa30, m1 0xae348, ios 0x126114;
    virtual void draw() = m1 0xae56c, imac 0xbfc90, ios 0x126338 {}

    void updateSpritesColor(cocos2d::ccColor3B color) = win inline, m1 0xa97a4, imac 0xba240, ios 0x121f34 {
        if (auto gravityBatchNode = this->getChildByTag(1)) {
            auto children = gravityBatchNode->getChildren();
            for (int i = 0; i < children->count(); i++) {
                static_cast<cocos2d::CCSprite*>(children->objectAtIndex(i))->setColor(color);
            }
        }
    }
}

[[link(android), depends(KeyframeObject)]]
class GroupCommandObject2 {
    // ~GroupCommandObject2();
    // GroupCommandObject2();
    // GroupCommandObject2(GroupCommandObject2 const&);

    TodoReturn reset();
    TodoReturn resetDelta(bool);
    TodoReturn runFollowCommand(double, double, double);
    TodoReturn runMoveCommand(cocos2d::CCPoint, double, int, double, bool, bool, bool, bool, double, double);
    TodoReturn runPlayerFollowCommand(double, double, int, double, double);
    TodoReturn runRotateCommand(double, double, int, double, bool, int);
    TodoReturn runTransformCommand(double, int, double);
    void step(float) = win 0x250930;
    TodoReturn stepTransformCommand(float, bool, bool);
    void updateAction(int, float) = win 0x250a00;
    TodoReturn updateEffectAction(float, int);

    int m_groupCommandUniqueID;
    cocos2d::CCPoint m_moveOffset;
    EasingType m_easingType;
    double m_easingRate;
    double m_duration;
    double m_deltaTime;
    int m_targetGroupID;
    int m_centerGroupID;
    double m_currentXOffset;
    double m_currentYOffset;
    double m_deltaX;
    double m_deltaY;
    double m_oldDeltaX;
    double m_oldDeltaY;
    double m_lockedCurrentXOffset;
    double m_lockedCurrentYOffset;
    bool m_finished;
    bool m_disabled;
    bool m_finishRelated;
    bool m_lockToPlayerX;
    bool m_lockToPlayerY;
    bool m_lockToCameraX;
    bool m_lockToCameraY;
    bool m_lockedInX;
    bool m_lockedInY;
    double m_moveModX;
    double m_moveModY;
    double m_currentRotateOrTransformValue;
    double m_currentRotateOrTransformDelta;
    double m_someInterpValue1RelatedOne;
    double m_someInterpValue2RelatedOne;
    double m_rotationOffset;
    bool m_lockObjectRotation;
    int m_targetPlayer;
    double m_followXMod;
    double m_followYMod;
    int m_commandType;
    double m_someInterpValue1;
    double m_someInterpValue2;
    double m_keyframeRelated;
    double m_targetScaleX;
    double m_targetScaleY;
    double m_transformTriggerProperty450;
    double m_transformTriggerProperty451;
    double m_someInterpValue1RelatedZero;
    double m_someInterpValue2RelatedZero;
    bool m_onlyMove;
    bool m_transformRelatedFalse;
    bool m_relativeRotation;
    double m_someInterpValue1Related;
    double m_someInterpValue2Related;
    double m_followYSpeed;
    double m_followYDelay;
    int m_followYOffset;
    double m_followYMaxSpeed;
    int m_triggerUniqueID;
    int m_controlID;
    double m_deltaX_3;
    double m_deltaY_3;
    double m_oldDeltaX_3;
    double m_oldDeltaY_3;
    double m_Delta_3_Related;
    double m_unkDoubleMaybeUnused;
    int m_actionType1;
    int m_actionType2;
    double m_actionValue1;
    double m_actionValue2;
    bool m_someInterpValue1RelatedFalse;
    float m_deltaTimeInFloat;
    bool m_alreadyUpdated;
    bool m_doUpdate;
    gd::vector<KeyframeObject> m_keyframes;
    cocos2d::CCPoint m_splineRelated;
    GameObject* m_gameObject;
    float m_gameObjectRotation;
    gd::vector<int> m_remapKeys;
    bool m_someInterpValue2RelatedTrue;
    int m_unkInt204; // formerly m_unkFloat204
}

[[link(android)]]
class HardStreak : cocos2d::CCDrawNode {
    // virtual ~HardStreak();

    static HardStreak* create() = ios 0x61464, imac 0x9c9b0, m1 0x8f63c, win 0x2b1680;

    virtual bool init() = win 0x2b1740, m1 0x8f704, imac 0x9ca80, ios 0x614d8;

    void addPoint(cocos2d::CCPoint p0) = win 0x2b2130, imac 0x9d500, m1 0x8ffec, ios 0x61c40;
    TodoReturn clearAboveXPos(float);
    TodoReturn clearBehindXPos(float);
    HardStreak* createDuplicate() = ios 0x61f30, m1 0x90354, imac 0x9d850, win inline {
        auto ret = HardStreak::create();
        ret->setBlendFunc(this->getBlendFunc());
        ret->m_currentPoint = m_currentPoint;
        ret->m_isSolid = m_isSolid;
        ret->m_waveSize = m_waveSize;
        ret->m_isSolid = m_isSolid;
        ret->m_isFlipped = m_isFlipped;
        ret->m_pulseSize = m_pulseSize;
        ret->setOpacity(this->getOpacity());
        ret->setColor(this->getColor());

        CCObject* obj;
        CCARRAY_FOREACH(m_pointArray, obj){
            auto nodePoint = static_cast<PointNode*>(obj);
            ret->addPoint(nodePoint->m_point);
        }

        return ret;
    }
    void firstSetup() = win inline, m1 0x8f7c4, imac 0x9cb60, ios 0x61518 {
        this->addPoint({ 0.f, 0.f });
        m_currentPoint.x = 10.f;
        m_currentPoint.y = 10.f;
        this->updateStroke(0.f);
        this->visit();
        this->reset();
    }
    TodoReturn normalizeAngle(double);
    TodoReturn quadCornerOffset(cocos2d::CCPoint, cocos2d::CCPoint, float);
    void reset() = win inline, imac 0x9d4e0, m1 0x8ffc8, ios 0x61c1c {
        this->clear();
        m_pointArray->removeAllObjects();
    }
    void resumeStroke() = ios 0x61bd4, m1 0x8ff80, imac 0x9d480, win inline {
        this->m_drawStreak = true;
        updateStroke(0.f);
    }
    TodoReturn scheduleAutoUpdate();
    void stopStroke() = win 0x2b17f0, m1 0x8ff8c, imac 0x9d4a0, ios 0x61be0;
    callback void updateStroke(float) = ios 0x615ac, win 0x2b1830, m1 0x8f870, imac 0x9cc30;

    cocos2d::CCArray* m_pointArray;
    cocos2d::CCPoint m_currentPoint;
    float m_waveSize;
    float m_pulseSize;
    bool m_isSolid;
    bool m_isFlipped;
    bool m_drawStreak;
}

[[link(android)]]
class HSVLiveOverlay : FLAlertLayer, HSVWidgetDelegate {
    HSVLiveOverlay() {
        m_object = nullptr;
        m_objects = nullptr;
        m_controls = nullptr;
        m_unkArray = nullptr;
        m_delegate = nullptr;
        m_activeTab = -1;
        m_widget = nullptr;
        m_unkBool1 = false;
        m_unkBool2 = false;
        m_unkBool3 = false;
    }
    ~HSVLiveOverlay() = win inline, m1 0x205158, imac 0x258690, ios 0x1a2a7c {
        CCNode::removeAllChildrenWithCleanup(true);
        CC_SAFE_RELEASE(m_unkArray);
        CC_SAFE_RELEASE(m_controls);
        CC_SAFE_RELEASE(m_object);
        CC_SAFE_RELEASE(m_objects);
    }

    static HSVLiveOverlay* create(GameObject* object, cocos2d::CCArray* objects) = win inline, imac 0x258800, m1 0x205230 {
        auto ret = new HSVLiveOverlay();
        if (ret->init(object, objects)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x2b2bb0, m1 0x205a40, imac 0x259080, ios 0x1a3304;
    virtual void show() = win 0x8ba30, m1 0x205af8, imac 0x259130, ios 0x1a3318;
    virtual void hsvChanged(ConfigureHSVWidget*) = win 0x2b2c00, imac 0x259200, m1 0x205bac, ios 0x1a3364;

    void closeColorSelect(cocos2d::CCObject* sender);
    void createHSVWidget(int) = win 0x2b2a10, imac 0x258f00, m1 0x2058e0;
    void determineStartValues() = win 0x2b2790, imac 0x258dd0, m1 0x2057b4;
    bool init(GameObject*, cocos2d::CCArray*) = win 0x2b22f0, imac 0x258980, m1 0x205364, ios 0x1a2c40;
    void onSelectTab(cocos2d::CCObject* sender) = win 0x2b29e0, imac 0x258ec0, m1 0x205894, ios 0x1a315c;
    void toggleControls(bool);

    GameObject* m_object;
    cocos2d::CCArray* m_objects;
    cocos2d::CCArray* m_controls;
    cocos2d::CCArray* m_unkArray;
    ColorSelectDelegate* m_delegate;
    int m_activeTab;
    ConfigureHSVWidget* m_widget;
    bool m_unkBool1;
    bool m_unkBool2;
    bool m_unkBool3;
}

[[link(android)]]
class HSVWidgetDelegate {
    virtual void hsvPopupClosed(HSVWidgetPopup*, cocos2d::ccHSVValue) {}
    virtual void hsvChanged(ConfigureHSVWidget*) {}
}

[[link(android)]]
class HSVWidgetPopup : FLAlertLayer {
    // virtual ~HSVWidgetPopup();

    static HSVWidgetPopup* create(cocos2d::ccHSVValue, HSVWidgetDelegate*, gd::string) = win 0x96410;

    virtual void keyBackClicked() = win 0x96940, m1 0x398990, imac 0x41d0a0, ios 0x1020a8;

    bool init(cocos2d::ccHSVValue hsv, HSVWidgetDelegate* delegate, gd::string title) = win 0x96530, imac 0x41cb40, m1 0x398494, ios 0x101c80;
    void onClose(cocos2d::CCObject* sender) = win 0x96860;

    ConfigureHSVWidget* m_widget;
    HSVWidgetDelegate* m_delegate;
}

[[link(android)]]
class InfoAlertButton : CCMenuItemSpriteExtra {
    // virtual ~InfoAlertButton();

    static InfoAlertButton* create(gd::string title, gd::string desc, float spriteScale) = win 0x2b2d80, m1 0x4b57b8, imac 0x55ec10, ios 0x16e934;

    virtual void activate() = win 0x2b2f80, imac 0x55ee90, m1 0x4b5a48, ios 0x16eb48;

    bool init(gd::string title, gd::string desc, float spriteScale) = imac 0x55edf0, m1 0x4b59a4;

    gd::string m_title;
    gd::string m_description;
    float m_textScale;
    bool m_scroll;
}

[[link(android)]]
class InfoLayer : FLAlertLayer, LevelCommentDelegate, CommentUploadDelegate, FLAlertLayerProtocol {
    // virtual ~InfoLayer();

    static InfoLayer* create(GJGameLevel*, GJUserScore*, GJLevelList*) = ios 0x34f230, win 0x2b3200, imac 0x798c50, m1 0x6ab724;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x6af438, imac 0x79ce80, ios 0x3524c0;
    virtual void keyBackClicked() = win 0x2b6b40, m1 0x6af34c, imac 0x79cd70, ios 0x3524b4;
    virtual void show() = win 0x2b7fd0, imac 0x79dd40, m1 0x6b0218, ios 0x352ce8;
    virtual void loadCommentsFinished(cocos2d::CCArray*, char const*) = win 0x2b7480, imac 0x79cff0, m1 0x6af588, ios 0x352548;
    virtual void loadCommentsFailed(char const*) = win 0x2b74f0, imac 0x79d0c0, m1 0x6af66c, ios 0x3525b8;
    virtual void setupPageInfo(gd::string, char const*) = win 0x2b7540, imac 0x79d160, m1 0x6af718, ios 0x352614;
    virtual void commentUploadFinished(int) = win 0x2b7880, imac 0x79d8f0, m1 0x6afe38, ios 0x352a18;
    virtual void commentUploadFailed(int, CommentError) = win 0x2b7950, imac 0x79da40, m1 0x6aff50, ios 0x352aa8;
    virtual void updateUserScoreFinished() = win 0x2b7730, imac 0x79d750, m1 0x6afcb0, ios 0x35294c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x2b5ce0, imac 0x79cb10, m1 0x6af108, ios 0x3523c0;

    void confirmReport(cocos2d::CCObject*) = win 0x2b5780, m1 0x6add08, imac 0x79b630, ios 0x3513b8;
    int getAccountID();
    int getID() {
        if(m_score) return m_score->m_userID;
        if(m_levelList) return - m_levelList->m_listID;
        if(m_level) return m_level->m_levelID;
        return 0;
    }
    int getRealID();
    CCMenuItemSpriteExtra* getSpriteButton(char const*, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*, float, cocos2d::CCPoint) = win 0x2b52e0, m1 0x6ae08c, imac 0x79b9d0, ios 0x351610;
    bool init(GJGameLevel*, GJUserScore*, GJLevelList*) = ios 0x34f334, win 0x2b33a0, m1 0x6ab874, imac 0x798e00;
    bool isCorrect(char const*);
    void loadPage(int, bool) = ios 0x3518ac, win 0x2b6c80, imac 0x79bd10, m1 0x6ae3e8;
    void onClose(cocos2d::CCObject* sender) = win 0x2b6ac0, m1 0x6adff8, imac 0x79b910, ios 0x35157c;
    void onComment(cocos2d::CCObject* sender) = win 0x2b5f20, m1 0x6ad908, imac 0x79b1e0, ios 0x3510a0;
    void onCopyLevelID(cocos2d::CCObject* sender) = win 0x2b5ba0, m1 0x6aef98, imac 0x79c9c0, ios 0x352274;
    void onGetComments(cocos2d::CCObject* sender) = win 0x2b64d0, imac 0x79bd00, m1 0x6ae3dc, ios 0x3518a0;
    void onLevelInfo(cocos2d::CCObject* sender) = ios 0x351d4c, win 0x2b64e0, m1 0x6ae924, imac 0x79c2f0;
    void onMore(cocos2d::CCObject* sender) = ios 0x350d94, win 0x2b5e00, imac 0x79ae40, m1 0x6ad570;
    void onNextPage(cocos2d::CCObject* sender) = win 0x2b7860, imac 0x79b9b0, m1 0x6ae07c, ios 0x351600;
    void onOriginal(cocos2d::CCObject* sender) = win 0x2b5e60, imac 0x79b090, m1 0x6ad7c8, ios 0x350fe0;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x2b7870, imac 0x79b990, m1 0x6ae06c, ios 0x3515f0;
    void onRefreshComments(cocos2d::CCObject* sender) = ios 0x3521c4, win 0x2b5620, imac 0x79c870, m1 0x6aee78;
    void onSimilar(cocos2d::CCObject* sender);
    void reloadWindow() = win 0x2b7bf0, m1 0x6b0058, imac 0x79db60, ios 0x352b7c;
    void setupCommentsBrowser(cocos2d::CCArray*) = ios 0x351b78, win 0x2b71f0, imac 0x79c0e0, m1 0x6ae750;
    void setupLevelInfo() = win 0x2b5420, m1 0x6ad5cc, imac 0x79ae90, ios 0x350de8;
    void toggleCommentMode(cocos2d::CCObject* sender) = win 0x2b7e10, imac 0x79bab0, m1 0x6ae170, ios 0x3516f4;
    void toggleExtendedMode(cocos2d::CCObject* sender) = win 0x2b7aa0, imac 0x79bb90, m1 0x6ae250, ios 0x351750;
    void toggleSmallCommentMode(cocos2d::CCObject* sender) = win 0x2b7b00, imac 0x79bbc0, m1 0x6ae280, ios 0x351780;
    void updateCommentModeButtons() = win 0x2b7ed0, m1 0x6ae338, imac 0x79bc50, ios 0x3517fc;
    void updateLevelsLabel() = win inline, m1 0x6afc40, imac 0x79d6d0, ios 0x3528dc {
        auto end = m_pageEndIdx + m_pageStartIdx;
        auto count = m_itemCount;
        if (end > count) end = count;
        m_pageLabel->setString(cocos2d::CCString::createWithFormat("%i to %i of %i", m_pageStartIdx + 1, end, count)->getCString());
    }

    GJGameLevel* m_level;
    GJUserScore* m_score;
    GJLevelList* m_levelList;
    gd::string m_commentKey;
    LoadingCircle* m_loadingCircle;
    cocos2d::CCLabelBMFont* m_pageLabel;
    cocos2d::CCLabelBMFont* m_noComments;
    GJCommentListLayer* m_list;
    CCMenuItemSpriteExtra* m_rightArrow;
    CCMenuItemSpriteExtra* m_leftArrow;
    CCMenuItemSpriteExtra* m_likeBtn;
    CCMenuItemSpriteExtra* m_timeBtn;
    CCMenuItemSpriteExtra* m_reportBtn;
    CCMenuItemSpriteExtra* m_commentsBtn;
    CCMenuItemSpriteExtra* m_refreshCommentsBtn;
    int m_itemCount;
    int m_pageStartIdx;
    int m_pageEndIdx;
    int m_page;
    bool m_canUpdateUserScore;
    CommentKeyType m_mode;
}

[[link(android)]]
class InheritanceNode : cocos2d::CCObject {
    // virtual ~InheritanceNode();

    static InheritanceNode* create(int, InheritanceNode*);

    bool init(int, InheritanceNode*);

    int m_colorID;
    InheritanceNode* m_inheritanceNode;
    ColorAction* m_colorAction;
    bool m_unk050;
    bool m_unk051;
}

[[link(android)]]
class ItemInfoPopup : FLAlertLayer {
    // virtual ~ItemInfoPopup();

    static ItemInfoPopup* create(int, UnlockType) = ios 0x306750, win 0x273e30, imac 0x35b830, m1 0x2eecf8;
    static gd::string nameForUnlockType(int, UnlockType) = win 0x275ef0, imac 0x35f670, m1 0x2f26cc, ios 0x309430;

    virtual void keyBackClicked() = win 0x84650, m1 0x2f2a7c, imac 0x35f9b0, ios 0x3095a4;

    bool init(int, UnlockType) = ios 0x3083b8, win 0x273f20, imac 0x35e340, m1 0x2f14e8;
    bool isUnlockedByDefault(int, UnlockType) = imac 0x35f950, m1 0x2f2a1c;
    void onClose(cocos2d::CCObject* sender);
    void onCredit(cocos2d::CCObject* sender) = win 0x275ec0, imac 0x35f980, m1 0x2f2a48;

    int m_itemID;
    UnlockType m_unlockType;
    int m_accountID;
}

[[link(android)]]
class ItemTriggerGameObject : EffectGameObject {
    // virtual ~ItemTriggerGameObject();
    inline ItemTriggerGameObject() {
        m_item1Mode = 0;
        m_item2Mode = 0;
        m_targetItemMode = 1;
        m_mod1 = 1.0f;
        m_mod2 = 1.0f;
        m_resultType1 = 0;
        m_resultType2 = 1;
        m_resultType3 = 3;
        m_tolerance = 0.0f;
        m_roundType1 = 0;
        m_roundType2 = 0;
        m_signType1 = 0;
        m_signType2 = 0;
        m_persistent = false;
        m_targetAll = false;
        m_reset = false;
        m_timer = false;
    }

    static ItemTriggerGameObject* create(char const*);

    virtual void customSetup() = win 0x4a7160, imac 0x1d3670, m1 0x18db5c, ios 0x38d9e0;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a71a0, imac 0x1d36b0, m1 0x18db94, ios 0x38da18;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a8280, imac 0x1d83a0, m1 0x1916e0, ios 0x38e954;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a7300, imac 0x1d3800, m1 0x18dce4, ios 0x38db00;

    bool init(char const*);

    // property 476
    int m_item1Mode;
    // property 477
    int m_item2Mode;
    // property 478
    int m_targetItemMode;
    // property 479
    float m_mod1;
    // property 484
    float m_mod2;
    // property 480
    int m_resultType1;
    // property 481
    int m_resultType2;
    // property 482
    int m_resultType3;
    // property 483
    float m_tolerance;
    // property 485
    int m_roundType1;
    // property 486
    int m_roundType2;
    // property 578
    int m_signType1;
    // property 579
    int m_signType2;
    // property 491
    bool m_persistent;
    // property 492
    bool m_targetAll;
    // property 493
    bool m_reset;
    // property 494
    bool m_timer;
}

[[link(android)]]
class KeybindingsLayer : FLAlertLayer {
    // virtual ~KeybindingsLayer();

    static KeybindingsLayer* create() = win 0x2b81d0;

    virtual bool init() = win 0x2b82c0, m1 0x5220ec, imac 0x5f25f0;
    virtual void keyBackClicked() = win 0x84650, m1 0x523ab4, imac 0x5f3fc0;

    cocos2d::CCLabelBMFont* addKeyPair(char const*, char const*) = win 0x2b8bd0;
    int countForPage(int) = win 0x2b8f80;
    void goToPage(int) = win 0x2b9220;
    void incrementCountForPage(int);
    const char* infoKey(int);
    cocos2d::CCLayer* layerForPage(int) = win 0x2b9050;
    const char* layerKey(int);
    cocos2d::CCPoint nextPosition(int);
    const char* objectKey(int);
    cocos2d::CCArray* objectsForPage(int);
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onInfo(cocos2d::CCObject* sender);
    void onNextPage(cocos2d::CCObject* sender) = win 0x2b9200;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x2b9210;
    void onToggle(cocos2d::CCObject* sender);
    const char* pageKey(int);

    int m_page;
    int m_keyCount;
    int m_maxPage;
    cocos2d::CCDictionary* m_values;
    cocos2d::CCDictionary* m_variables;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
}

[[link(android)]]
class KeybindingsManager : cocos2d::CCNode {
    // virtual ~KeybindingsManager();

    static KeybindingsManager* sharedState() = win 0x2b96b0;

    virtual bool init() = m1 0x4364a8, imac 0x4d22c0, ios 0x346ccc { return true; }

    bool commandForKey(cocos2d::enumKeyCodes, GJKeyGroup, bool, bool, bool);
    bool commandForKeyMods(cocos2d::enumKeyCodes, GJKeyGroup);
    bool commandForKeyNoMods(cocos2d::enumKeyCodes, GJKeyGroup);
    cocos2d::CCDictionary* commandToKeyForGroup(GJKeyGroup);
    void dataLoaded(DS_Dictionary*) = m1 0x436984, imac 0x4d27e0;
    void encodeDataTo(DS_Dictionary*);
    void firstSetup();
    GJKeyGroup groupForCommand(GJKeyCommand);
    cocos2d::enumKeyCodes keyForCommand(GJKeyCommand);
    cocos2d::CCDictionary* keyToCommandForGroup(GJKeyGroup);

    cocos2d::CCDictionary* m_keyToCommandDict;
    cocos2d::CCDictionary* m_commandToKeyDict;
}

[[link(android)]]
class KeyframeAnimTriggerObject : EffectGameObject {
    // virtual ~KeyframeAnimTriggerObject();

    KeyframeAnimTriggerObject() {
        m_timeMod = 1.0f;
        m_positionXMod = 1.0f;
        m_positionYMod = 1.0f;
        m_rotationMod = 1.0f;
        m_scaleXMod = 1.0f;
        m_scaleYMod = 1.0f;
    }

    static KeyframeAnimTriggerObject* create();

    virtual bool init() = win 0x498a40, m1 0x16bc30, imac 0x1aa550, ios 0x37f844;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x498eb0, imac 0x1ab5c0, m1 0x16c950, ios 0x37fc84;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x498ab0, imac 0x1aa5a0, m1 0x16bc80, ios 0x37f894;

    // property 520
    float m_timeMod;
    // property 521
    float m_positionXMod;
    // property 545
    float m_positionYMod;
    // property 522
    float m_rotationMod;
    // property 523
    float m_scaleXMod;
    // property 546
    float m_scaleYMod;
}

[[link(android)]]
class KeyframeGameObject : EffectGameObject {
    // virtual ~KeyframeGameObject();

    KeyframeGameObject() {
        m_shadowObjects = nullptr;
        m_previewSprite = nullptr;
        m_keyframeGroup = 0;
        m_keyframeIndex = 0;
        m_referenceOnly = false;
        m_proximity = false;
        m_curve = false;
        m_closeLoop = false;
        m_timeMode = 0;
        m_unk760 = 0.0f;
        m_spawnDelay = 0.0f;
        m_previewArt = false;
        m_keyframeActive = false;
        m_autoLayer = false;
        m_direction = 0;
        m_revolutions = 0;
        m_lineOpacity = 1.0f;
    }

    static KeyframeGameObject* create();

    virtual bool init() = win 0x49c8e0, m1 0x1750f4, imac 0x1b5420, ios 0x383c34;
    virtual void setOpacity(unsigned char) = win 0x49cba0, imac 0x1b5700, m1 0x1753e0, ios 0x383ef8;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x49cc60, imac 0x1b5860, m1 0x17552c, ios 0x383fa4;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x49d0a0, imac 0x1b5dd0, m1 0x1759d4, ios 0x3843ac;

    void updateShadowObjects(GJBaseGameLayer*, EditorUI*) = win 0x49c970, ios 0x383c98, imac 0x1b5490, m1 0x175158;

    cocos2d::CCArray* m_shadowObjects;
    cocos2d::CCSprite* m_previewSprite;
    // property 373
    int m_keyframeGroup;
    // property 374
    int m_keyframeIndex;
    // property 375
    bool m_referenceOnly;
    // property 377
    bool m_proximity;
    // property 378
    bool m_curve;
    // property 376
    bool m_closeLoop;
    // property 379
    int m_timeMode;
    float m_unk760;
    // property 557
    float m_spawnDelay;
    // property 380
    bool m_previewArt;
    bool m_keyframeActive;
    // property 459
    bool m_autoLayer;
    // property 536
    int m_direction;
    // property 537
    int m_revolutions;
    // property 524
    float m_lineOpacity;
}

[[link(android), depends(tk_spline)]]
class KeyframeObject {
    // KeyframeObject();
    // KeyframeObject(KeyframeObject const&);

    void setupSpline(gd::vector<KeyframeObject*>&) = win 0x2b9730;

    double m_unk000;
    int m_unk008;
    float m_unk00c;
    bool m_unk010;
    int m_unk014;
    float m_unk018;
    bool m_unk01c;
    bool m_unk01d;
    bool m_unk01e;
    tk_spline m_spline1;
    tk_spline m_spline2;
    double m_unk170;
    double m_unk178;
    int m_unk180;
    int m_unk184;
    cocos2d::CCPoint m_unk188;
    cocos2d::CCPoint m_unk190;
    double m_unk198;
    double m_unk1a0;
    double m_unk1a8;
    double m_unk1b0;
    float m_unk1b8;
}

[[link(android)]]
class LabelGameObject : EffectGameObject {
    // virtual ~LabelGameObject();

    static LabelGameObject* create();

    virtual bool init() = win 0x49a900, m1 0x17033c, imac 0x1afb90, ios 0x38166c;
    virtual void setOpacity(unsigned char) = win 0x49ac60, m1 0x170758, imac 0x1affb0, ios 0x38198c;
    virtual void setupCustomSprites(gd::string) = win 0x49a940, imac 0x1afbc0, m1 0x17036c, ios 0x38169c;
    virtual void addMainSpriteToParent(bool) = win 0x49b150, m1 0x170fd0, imac 0x1b0900, ios 0x381fec;
    virtual void resetObject() = win 0x49b570, m1 0x171c8c, imac 0x1b1870, ios 0x3823a0;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x49af90, imac 0x1b0690, m1 0x170d8c, ios 0x381e24;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x49b1c0, m1 0x171028, imac 0x1b0960, ios 0x382044;
    virtual void setObjectColor(cocos2d::ccColor3B const&) = win 0x49b100, m1 0x170f88, imac 0x1b08b0, ios 0x381fa4;
    virtual void updateTextKerning(int) = win 0x49ad20, imac 0x1b0030, m1 0x1707dc, ios 0x381a10;
    virtual int getTextKerning() = win 0x47d930, m1 0x199b20, imac 0x1e1d40, ios 0x3922d0;

    void createLabel(gd::string) = win 0x49a9e0;
    void queueUpdateLabel(gd::string);
    void removeLabel() = win 0x49ab80;
    void unlockLabelColor();
    void updateLabel(float);
    void updateLabel(gd::string) = win 0x49af00, m1 0x170ba0, imac 0x1b04c0, ios 0x381d10;
    void updateLabelAlign(int) = win 0x49aca0;
    void updateLabelIfDirty() = win inline, m1 0x170cac, imac 0x1b05c0, ios 0x381d60 {
        if (m_labelDirty) updateLabel(m_labelString);
    }
    void updatePreviewLabel() = win 0x49ad40, m1 0x1707f0, ios 0x381a24, imac 0x1b0050;

    cocos2d::CCLabelBMFont* m_label;
    bool m_labelDirty;
    gd::string m_labelString;
    bool m_labelColorLocked;

    // property 391
    int m_alignment;

    // property 389
    bool m_showSecondsOnly;

    // property 390
    int m_shownSpecial;

    // property 466
    bool m_isTimeCounter;

    // property 488
    int m_kerning;

    bool m_updateLabel;
}

[[link(android)]]
class LeaderboardManagerDelegate {
    virtual void updateUserScoreFinished() {}
    virtual void updateUserScoreFailed() {}
    virtual void loadLeaderboardFinished(cocos2d::CCArray*, char const*) {}
    virtual void loadLeaderboardFailed(char const*) {}
}

[[link(android)]]
class LeaderboardsLayer : cocos2d::CCLayer, LeaderboardManagerDelegate, FLAlertLayerProtocol {
    // virtual ~LeaderboardsLayer();
    inline LeaderboardsLayer() {
        m_list = nullptr;
        m_userScores = nullptr;
        m_state = LeaderboardState::Default;
        m_topBtn = nullptr;
        m_globalBtn = nullptr;
        m_creatorsBtn = nullptr;
        m_friendsBtn = nullptr;
        m_circle = nullptr;
        m_noInternet = nullptr;
        m_tabs = nullptr;
    }

    static LeaderboardsLayer* create(LeaderboardState state) = ios 0x3a9128, win inline, imac 0x4fc3a0, m1 0x45bf64 {
        auto ret = new LeaderboardsLayer();
        if (ret->init(state)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(LeaderboardState state) = win inline, m1 0x45be78, imac 0x4fc270, ios 0x3a90dc {
        auto scene = cocos2d::CCScene::create();
        auto layer = LeaderboardsLayer::create(state);
        scene->addChild(layer);
        return scene;
    }

    virtual void keyBackClicked() = win 0x2bbf50, m1 0x45dbec, imac 0x4fe1a0, ios 0x3aa800;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x2bbea0, m1 0x45db94, imac 0x4fe140, ios 0x3aa7a8;
    virtual void updateUserScoreFinished() = win 0x2bb1f0, imac 0x4fd6b0, m1 0x45d1b4, ios 0x3aa26c;
    virtual void updateUserScoreFailed() = win 0x2bb210, imac 0x4fd710, m1 0x45d1ec, ios 0x3aa2a4;
    virtual void loadLeaderboardFinished(cocos2d::CCArray*, char const*) = win 0x2bb220, imac 0x4fd7b0, m1 0x45d294, ios 0x3aa300;
    virtual void loadLeaderboardFailed(char const*) = win 0x2bb2b0, imac 0x4fdeb0, m1 0x45d924, ios 0x3aa638;

    bool init(LeaderboardState) = ios 0x3a91e8, win 0x2b9cd0, m1 0x45c030, imac 0x4fc4a0;
    bool isCorrect(char const*) = win 0x2bb4e0;
    void onBack(cocos2d::CCObject* sender) = win 0x2bbed0;
    void onCreators(cocos2d::CCObject* sender);
    void onGlobal(cocos2d::CCObject* sender);
    void onInfo(cocos2d::CCObject* sender) = m1 0x45c5c0, imac 0x4fca80, win 0x2bb9a0;
    void onTop(cocos2d::CCObject* sender);
    void onWeek(cocos2d::CCObject* sender);
    void refreshTabs() = win 0x2bac80;
    void selectLeaderboard(LeaderboardState) = win 0x2badb0, imac 0x4fd0f0, m1 0x45cc24;
    void setupLevelBrowser(cocos2d::CCArray*) = win 0x2bab20;
    void setupTabs() = imac 0x4fccd0, m1 0x45c848, win 0x2ba5d0;
    void toggleTabButtons() = win 0x2bb000;

    GJListLayer* m_list;
    cocos2d::CCArray* m_userScores;
    LeaderboardState m_state;
    CCMenuItemToggler* m_topBtn;
    CCMenuItemToggler* m_globalBtn;
    CCMenuItemToggler* m_creatorsBtn;
    CCMenuItemToggler* m_friendsBtn;
    LoadingCircle* m_circle;
    TextArea* m_noInternet;
    cocos2d::CCArray* m_tabs;
}

[[link(android)]]
class LevelAreaInnerLayer : cocos2d::CCLayer, DialogDelegate {
    // virtual ~LevelAreaInnerLayer();
    LevelAreaInnerLayer() {
        m_nextFloorButton = nullptr;
        m_enteringLevel = false;
        m_levelID = 0;
        m_exiting = false;
    }

    static LevelAreaInnerLayer* create(bool returning) = ios 0x345028, win inline, m1 0x213514, imac 0x267c20 {
        auto ret = new LevelAreaInnerLayer();
        if (ret->init(returning)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(bool returning) = win 0x2be1d0, m1 0x2132c4, imac 0x267950, ios 0x344f48;

    virtual void keyBackClicked() = win 0x2c0550, m1 0x21538c, imac 0x269bf0, ios 0x3467b8;
    virtual void dialogClosed(DialogLayer*) = win 0x2bf9a0, imac 0x2699c0, m1 0x215164, ios 0x346614;
    virtual void onExit() = win 0x2c0500, m1 0x21533c, imac 0x269ba0, ios 0x346768;

    bool init(bool returning) = ios 0x3450dc, win 0x2be2e0, m1 0x2135d4, imac 0x267d00;
    void onBack(cocos2d::CCObject* sender) = ios 0x345c0c, win 0x2c04a0, m1 0x2143a0, imac 0x268b80;
    void onDoor(cocos2d::CCObject* sender) = ios 0x345c64, win 0x2bffd0, imac 0x268bd0, m1 0x2143f8;
    void onInfo(cocos2d::CCObject* sender) = win 0x2bfa30, m1 0x2146cc, imac 0x268e70, ios 0x345ecc;
    void onNextFloor(cocos2d::CCObject* sender) = win 0x2bf2c0, m1 0x21453c, imac 0x268d00;
    void onOnlineVault(cocos2d::CCObject* sender) = win 0x2c02c0;
    bool playStep1() = ios 0x3466a8, imac 0x269ad0, m1 0x21527c, win 0x2c0190;
    void showFloor1CompleteDialog() = ios 0x346294, win 0x2bf3c0, m1 0x214c58, imac 0x269470;
    void tryResumeTowerMusic() = win 0x2bff30;
    void tryShowAd();

    CCMenuItemSpriteExtra* m_nextFloorButton;
    bool m_enteringLevel;
    int m_levelID;
    bool m_exiting;
}

[[link(android)]]
class LevelAreaLayer : cocos2d::CCLayer, DialogDelegate {
    LevelAreaLayer() {
        m_towerSprite = nullptr;
        m_godRays = nullptr;
        m_enteringTower = false;
        m_exiting = false;
    }
    ~LevelAreaLayer() = m1 0x210e6c, imac 0x265430, ios 0x3433b4 {
        CC_SAFE_RELEASE(m_godRays);
    }

    static LevelAreaLayer* create() = win inline {
        auto ret = new LevelAreaLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene() = win 0x2bc0c0, m1 0x211068, imac 0x265710, ios 0x343450;

    virtual bool init() = win 0x2bc1d0, imac 0x2658d0, m1 0x2111e8, ios 0x34353c;
    virtual void keyBackClicked() = win 0x2be1c0, imac 0x267ab0, m1 0x2133f4, ios 0x344fe4;
    virtual void dialogClosed(DialogLayer*) = win 0x2bd3b0, m1 0x213170, imac 0x267810, ios 0x344e04;
    virtual void onExit() = win 0x2be170, m1 0x2133a4, imac 0x267a60, ios 0x344f94;

    void addGodRay(float, float, float, float, float, cocos2d::CCPoint) = win 0x2bdd20;
    static void addTorch(cocos2d::CCNode*, cocos2d::CCPoint, int, float, int, bool, int, cocos2d::CCArray*) = win 0x2bd690, m1 0x2124b0, imac 0x266be0;
    void fadeInsideTower() = win 0x2bd530;
    void onBack(cocos2d::CCObject* sender) = win 0x2be0c0;
    void onClickDoor(cocos2d::CCObject* sender) = win 0x2bd3c0;
    bool onEnterTower() = win 0x2bd5e0, m1 0x21322c, imac 0x2678d0;
    void showDialog() = win 0x2bd080, m1 0x212f20, imac 0x2675e0;

    cocos2d::CCSprite* m_towerSprite;
    cocos2d::CCArray* m_godRays;
    bool m_enteringTower;
    bool m_exiting;
}

[[link(android)]]
class LevelBrowserLayer : cocos2d::CCLayerColor, LevelManagerDelegate, FLAlertLayerProtocol, SetIDPopupDelegate, SetTextPopupDelegate, TableViewCellDelegate, ShareCommentDelegate {
    LevelBrowserLayer() = win 0x2c05d0, ios 0x248f60 {
        m_unk = false;
        m_allSelected = false;
        m_noInternet = nullptr;
        m_list = nullptr;
        m_rightArrow = nullptr;
        m_leftArrow = nullptr;
        m_lastBtn = nullptr;
        m_cancelSearchBtn = nullptr;
        m_refreshBtn = nullptr;
        m_levels = nullptr;
        m_searchObject = nullptr;
        m_countText = nullptr;
        m_pageText = nullptr;
        m_pageBtn = nullptr;
        m_folderText = nullptr;
        m_folderBtn = nullptr;
        m_allObjectsToggler = nullptr;
        m_itemCount = 0;
        m_pageStartIdx = 0;
        m_pageEndIdx = 0;
        m_circle = nullptr;
        m_lastPage = 0;
        m_isOverlay = false;
        m_scene = nullptr;
        m_zOffset = 0;
        m_unk2 = false;
        m_listHeight = 0;
        m_unkFloat = .0f;
        m_unkFloat2 = .0f;
        m_delegate = nullptr;
        m_cached = false;
    }
    ~LevelBrowserLayer() = win 0x2c07c0, m1 0x3e63f8, imac 0x477f30, ios 0x40bffc;

    static LevelBrowserLayer* create(GJSearchObject*) = ios 0x40c184, win 0x2c09f0, imac 0x478170, m1 0x3e6590;
    static cocos2d::CCScene* scene(GJSearchObject* search) = ios 0x40c138, win 0x2c09a0, imac 0x478130, m1 0x3e6544;

    virtual void onEnter() = win 0x2c78b0, imac 0x47ee70, m1 0x3ecc44, ios 0x4116d8;
    virtual void onEnterTransitionDidFinish() = win 0x242b20, imac 0x47f010, m1 0x3ece38, ios 0x411808;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x3ecf10, imac 0x47f100, ios 0x4118d8 { return true; }
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x3ecf30, imac 0x47f160, ios 0x4118f8 {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x3ecf20, imac 0x47f120, ios 0x4118e8 {}
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x3ecf28, imac 0x47f140, ios 0x4118f0 {}
    virtual void registerWithTouchDispatcher() = win 0x2c79f0, imac 0x47f020, m1 0x3ece3c, ios 0x41180c;
    virtual void keyBackClicked() = win 0x2c4d30, m1 0x3ec1e0, imac 0x47e380, ios 0x410dc8;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x2c4d50, imac 0x47e3c0, m1 0x3ec204, ios 0x410dec;
    virtual void loadLevelsFinished(cocos2d::CCArray*, char const*, int) = win 0x2c4240, imac 0x47d8d0, m1 0x3eb7d8, ios 0x4106f8;
    virtual void loadLevelsFailed(char const*, int) = win 0x2c4370, imac 0x47da30, m1 0x3eb900, ios 0x410818;
    virtual void setupPageInfo(gd::string, char const*) = win 0x2c43c0, imac 0x47db10, m1 0x3eb9ec, ios 0x410894;
    virtual void onBack(cocos2d::CCObject* sender) = win 0x2c4ca0, imac 0x47e2d0, m1 0x3ec12c, ios 0x410d50;
    virtual void shareCommentClosed(gd::string, ShareCommentLayer*) = win 0x2c5d50, imac 0x47e6b0, m1 0x3ec520, ios 0x4110c0;
    virtual void setTextPopupClosed(SetTextPopup*, gd::string) = win 0x2c6ac0, imac 0x47e790, m1 0x3ec604, ios 0x411138;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x2c72f0, imac 0x47e980, m1 0x3ec7a4, ios 0x4112c4;
    virtual void setIDPopupClosed(SetIDPopup*, int) = win 0x2c4870, imac 0x47e1a0, m1 0x3ec01c, ios 0x410c4c;
    virtual cocos2d::CCArray* updateResultArray(cocos2d::CCArray*) = win 0x2c0770, m1 0x3ecf38, imac 0x47f180, ios 0x411900;
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) = win 0x2c7950, imac 0x47eef0, m1 0x3eccf0, ios 0x411764;

    void createNewLevel(cocos2d::CCObject*) = ios 0x411048, win inline, m1 0x3ec4a8, imac 0x47e640 {
        this->setKeypadEnabled(false);
        this->setKeyboardEnabled(false);
        GameLevelManager* glm = GameLevelManager::sharedState();
        GJGameLevel* newLevel = glm->createNewLevel();
        glm->m_returnToLocalLevels = true;
        cocos2d::CCDirector::sharedDirector()->replaceScene(cocos2d::CCTransitionFade::create(0.5f, EditLevelLayer::scene(newLevel)));
    }
    void createNewList(cocos2d::CCObject*) = m1 0x3ec348, imac 0x47e520;
    TodoReturn createNewSmartTemplate(cocos2d::CCObject*);
    TodoReturn deleteSelected();
    TodoReturn exitLayer(cocos2d::CCObject*);
    cocos2d::CCArray* getItemsMatchingSearch(cocos2d::CCArray*, gd::string, GJSearchObject*) = win 0x2c6b80, m1 0x3eabe4, imac 0x47ca90, ios 0x40fbbc;
    gd::string getSearchTitle() = win 0x2c39e0, m1 0x3eb248, imac 0x47d170, ios 0x4101ac;
    bool init(GJSearchObject*) = ios 0x40c1f8, win 0x2c0a60, m1 0x3e66c8, imac 0x478340;
    bool isCorrect(char const*) = win 0x2c2370;
    void loadPage(GJSearchObject*) = ios 0x40ed84, win 0x2c2540, imac 0x47b5e0, m1 0x3e99f0;
    void onClearSearch(cocos2d::CCObject* sender) = win 0x2c67a0, m1 0x3e9974, imac 0x47b560;
    void onDeleteAll(cocos2d::CCObject* sender) = win 0x2c61f0, imac 0x47a900, m1 0x3e8c88;
    void onDeleteSelected(cocos2d::CCObject* sender) = ios 0x40ddb4, win 0x2c6f10, imac 0x479fc0, m1 0x3e82d8;
    void onFavorites(cocos2d::CCObject* sender) = win 0x2c6030;
    void onGoToFolder(cocos2d::CCObject* sender) = win 0x2c47c0, m1 0x3e95b4, imac 0x47b1a0;
    void onGoToLastPage(cocos2d::CCObject* sender) = win 0x2c4640;
    void onGoToPage(cocos2d::CCObject* sender) = ios 0x40dcb0, win 0x2c46b0, imac 0x479eb0, m1 0x3e81a8;
    void onHelp(cocos2d::CCObject* sender);
    void onInfo(cocos2d::CCObject* sender) = ios 0x40e7a0, win 0x2c4df0, imac 0x47ae20, m1 0x3e91dc;
    void onLocalMode(cocos2d::CCObject* sender) = win 0x2c5c70;
    void onMyOnlineLevels(cocos2d::CCObject* sender) = win 0x2c5e60, m1 0x3e8768, imac 0x47a430;
    void onNew(cocos2d::CCObject* sender) = win 0x2c57c0, imac 0x47a340, ios 0x40e01c, m1 0x3e8664;
    void onNextPage(cocos2d::CCObject* sender) = win 0x2c4ba0, m1 0x3e8068, imac 0x479d50, ios 0x40db78;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x2c4c20, m1 0x3e8034, imac 0x479d10, ios 0x40db44;
    void onRefresh(cocos2d::CCObject* sender) = win 0x2c6660, m1 0x3e909c, imac 0x47acf0, ios 0x40e6f8;
    void onRemoveAllFavorites(cocos2d::CCObject* sender) = m1 0x3e8b28, imac 0x47a7c0, win 0x2c6390;
    void onSaved(cocos2d::CCObject* sender) = win 0x2c6110, m1 0x3e8e64, imac 0x47aab0, ios 0x40e520;
    void onSavedMode(cocos2d::CCObject* sender) = win 0x2c5b90;
    void onSearch(cocos2d::CCObject* sender) = win 0x2c6840, m1 0x3e96b4, imac 0x47b290, ios 0x40eb2c;
    void onToggleAllObjects(cocos2d::CCObject* sender) = win 0x2c7250, m1 0x3e85dc, imac 0x47a2b0;
    void reloadAllObjects() {
        static_cast<CustomListView*>(m_list->m_listView)->reloadAll();
    }
    void setSearchObject(GJSearchObject*);
    void setupLevelBrowser(cocos2d::CCArray*) = ios 0x40ff18, win 0x2c36d0, imac 0x47ce70, m1 0x3eafb8;
    void show() = ios 0x41185c, win 0x2c7a60, m1 0x3ece8c, imac 0x47f080;
    void updateLevelsLabel() = win inline, m1 0x3ebf84, imac 0x47e100, ios 0x410bb8 {
        auto end = m_pageEndIdx + m_pageStartIdx;
        auto count = m_itemCount;
        if (end > count) end = count;
        m_countText->setString(cocos2d::CCString::createWithFormat("%i to %i of %i", m_pageStartIdx + 1, end, count)->getCString());
        m_countText->limitLabelWidth(100.f, .6f, .0f);
        this->updatePageLabel();
    }
    void updatePageLabel() = win 0x2c4a70, m1 0x3e809c, imac 0x479d90, ios 0x40dbac;

    bool m_unk;
    bool m_allSelected;
    TextArea* m_noInternet;
    GJListLayer* m_list;
    CCMenuItemSpriteExtra* m_rightArrow;
    CCMenuItemSpriteExtra* m_leftArrow;
    CCMenuItemSpriteExtra* m_lastBtn;
    CCMenuItemSpriteExtra* m_cancelSearchBtn;
    CCMenuItemSpriteExtra* m_refreshBtn;
    cocos2d::CCArray* m_levels;
    GJSearchObject* m_searchObject;
    cocos2d::CCLabelBMFont* m_countText;
    cocos2d::CCLabelBMFont* m_pageText;
    CCMenuItemSpriteExtra* m_pageBtn;
    cocos2d::CCLabelBMFont* m_folderText;
    CCMenuItemSpriteExtra* m_folderBtn;
    CCMenuItemToggler* m_allObjectsToggler;
    int m_itemCount;
    int m_pageStartIdx;
    int m_pageEndIdx;
    LoadingCircle* m_circle;
    int m_lastPage;
    bool m_isOverlay;
    cocos2d::CCScene* m_scene;
    int m_zOffset;
    bool m_unk2;
    int m_listHeight;
    float m_unkFloat;
    float m_unkFloat2;
    TableViewCellDelegate* m_delegate;
    bool m_cached;
}

[[link(android)]]
class LevelCell : TableViewCell {
    // virtual ~LevelCell();
    LevelCell(char const*, float, float) = ios 0x10ed34, win 0xad870, imac 0x230090, m1 0x1e03b0;

    static LevelCell* create(float, float) = imac 0x23caa0, m1 0x1ec704;

    virtual bool init() = win 0xad920, imac 0x23cc50, m1 0x1ec890, ios 0x10edb8;
    virtual void draw() = win 0xb12e0, imac 0x240220, m1 0x1efb40, ios 0x111dd4;

    void loadCustomLevelCell() = ios 0x10f6e4, win 0xadb20, imac 0x23d540, m1 0x1ed1f0;
    void loadFromLevel(GJGameLevel*) = ios 0x105c2c, win 0xad940, imac 0x232d00, m1 0x1e2d4c;
    void loadLocalLevelCell() = ios 0x10edd4, win 0xb05f0, imac 0x23cc80, m1 0x1ec8ac;
    void onClick(cocos2d::CCObject* sender) = ios 0x111c5c, win 0xb1080, imac 0x240090, m1 0x1ef99c;
    void onToggle(cocos2d::CCObject* sender) = win 0xadb00, m1 0x1ef984, imac 0x240070, ios 0x111c44;
    void onViewProfile(cocos2d::CCObject* sender) = ios 0x111d94, win 0xb12a0, imac 0x2401f0, m1 0x1efb00;
    void updateBGColor(int index) = win inline, m1 0x1e2f08, imac 0x232ec0, ios 0x105dc0 {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        m_backgroundLayer->setOpacity(255);
    }
    void updateCellMode(int) = win 0xb0df0, imac 0x23c6a0, m1 0x1ec39c;
    void updateToggle();

    CCMenuItemSpriteExtra* m_button;
    GJGameLevel* m_level;
    bool m_cellDrawn;
    CCMenuItemToggler* m_toggler;
    cocos2d::CCPoint m_point;
    cocos2d::CCMenu* m_mainMenu;
    bool m_compactView;
    int m_cellMode;
}

[[link(android)]]
class LevelCommentDelegate {
    virtual void loadCommentsFinished(cocos2d::CCArray*, char const*) {}
    virtual void loadCommentsFailed(char const*) {}
    virtual void updateUserScoreFinished() {}
    virtual void setupPageInfo(gd::string, char const*) {}
}

[[link(android)]]
class LevelDeleteDelegate {
    virtual void levelDeleteFinished(int) {}
    virtual void levelDeleteFailed(int) {}
}

[[link(android)]]
class LevelDownloadDelegate {
    virtual void levelDownloadFinished(GJGameLevel*) {}
    virtual void levelDownloadFailed(int) {}
}

[[link(android)]]
class LevelEditorLayer : GJBaseGameLayer, LevelSettingsDelegate {
    // virtual ~LevelEditorLayer();
    LevelEditorLayer() = ios 0x3684d4, imac 0xf9cd0, m1 0xdd504, win 0x2c86d0;

    static LevelEditorLayer* create(GJGameLevel*, bool) = ios 0x3563b8, win 0x2c9650, imac 0xdb210, m1 0xc3090;

    static LevelEditorLayer* get() {
        return GameManager::sharedState()->m_levelEditorLayer;
    }
    static cocos2d::CCScene* scene(GJGameLevel* level, bool p1) = win inline, m1 0xc2fe0, imac 0xdb170, ios 0x356354 {
        auto scene = cocos2d::CCScene::create();
        AppDelegate::get()->m_runningScene = scene;
        auto layer = LevelEditorLayer::create(level, p1);
        scene->addChild(layer);
        scene->setObjType(cocos2d::CCObjectType::LevelEditorLayer);
        return scene;
    }
    static void updateObjectLabel(GameObject*) = win 0x2cef40, m1 0xcf94c, imac 0xe9cb0, ios 0x35d6a4;

    virtual void draw() = win 0x2dafd0, imac 0xf52c0, m1 0xd9514, ios 0x365218;
    virtual void postUpdate(float) = win 0x2d88d0, imac 0xf21a0, m1 0xd6df4, ios 0x363080;
    virtual void updateVisibility(float) = win 0x2d0700, imac 0xeab50, m1 0xd04e0, ios 0x35e108;
    virtual void playerTookDamage(PlayerObject*) = win 0x2d88c0, imac 0xf2180, m1 0xd6de0, ios 0x36306c;
    virtual void updateColor(cocos2d::ccColor3B& color, float fadeTime, int colorID, bool blending, float opacity, cocos2d::ccHSVValue& copyHSV, int colorIDToCopy, bool copyOpacity, EffectGameObject* callerObject, int unk1, int unk2) = win 0x2d5080, imac 0xeef10, m1 0xd4138, ios 0x3611bc;
    virtual void updateDebugDraw() = win 0x2d9510, imac 0xf32d0, m1 0xd7ec0, ios 0x363e2c;
    virtual void addToGroup(GameObject*, int, bool) = win 0x2d6070, imac 0xef890, m1 0xd49bc, ios 0x36159c;
    virtual void removeFromGroup(GameObject*, int) = win 0x2d61c0, imac 0xef940, m1 0xd4a74, ios 0x361620;
    virtual void updateObjectSection(GameObject*) = win 0x2d6f90, imac 0xf0b10, m1 0xd59e4, ios 0x36221c;
    virtual void updateDisabledObjectsLastPos(cocos2d::CCArray*) = win 0x2d7240, imac 0xf0c50, m1 0xd5aec, ios 0x362318;
    virtual float timeForPos(cocos2d::CCPoint position, int order, int channel, bool songTriggers, int id) = win 0x2d5e60, imac 0xef260, m1 0xd43f0, ios 0x3613c0;
    virtual cocos2d::CCPoint posForTime(float time) = win 0x2d5f10, imac 0xef2f0, m1 0xd447c, ios 0x361430;
    virtual void resetSPTriggered() = win 0x2d5f80, imac 0xef390, m1 0xd44bc, ios 0x361450;
    virtual void didRotateGameplay() = win 0x2d6f20, imac 0xf0910, m1 0xd57e8, ios 0x362078;
    virtual void manualUpdateObjectColors(GameObject*) = win 0x2d1700, m1 0xd0ff4, imac 0xeb6d0, ios 0x35ea4c;
    virtual cocos2d::CCParticleSystemQuad* claimCustomParticle(gd::string const&, cocos2d::ParticleStruct const&, int, int, int, bool) = win 0x2d9060, imac 0xf3080, m1 0xd7c6c, ios 0x363bf0;
    virtual void unclaimCustomParticle(gd::string const&, cocos2d::CCParticleSystemQuad*) = win 0x2d9120, imac 0xf3140, m1 0xd7d4c, ios 0x363cbc;
    virtual void activatedAudioTrigger(SFXTriggerGameObject*) = win 0x2d87c0, imac 0xf20a0, m1 0xd6d1c, ios 0x362fa8;
    virtual void checkpointActivated(CheckpointGameObject*) = win 0x2d87f0, imac 0xf20d0, m1 0xd6d34, ios 0x362fc0;
    virtual void addKeyframe(KeyframeGameObject*) = win 0x2d9160, imac 0xf3180, m1 0xd7d8c, ios 0x363cfc;
    virtual void levelSettingsUpdated() = win 0x2cb030, imac 0xdf4f0, m1 0xc699c, ios 0x358cb4;

    bool activateTriggerEffect(EffectGameObject*, float, float, float, bool) = win 0x2d45b0;
    void addDelayedSpawn(EffectGameObject*, float) = win 0x2d4e00;
    TodoReturn addExclusionList(cocos2d::CCArray*, cocos2d::CCDictionary*);
    TodoReturn addObjectFromVector(gd::vector<gd::string>&, gd::vector<void*>&);
    TodoReturn addObjectsAtPosition(cocos2d::CCPoint, cocos2d::CCArray*, cocos2d::CCArray*);
    TodoReturn addObjectsInRect(cocos2d::CCRect, bool, cocos2d::CCArray*, cocos2d::CCArray*);
    void addObjectToGroup(GameObject* object, int group) = ios 0x36152c, m1 0xd494c, imac 0xef840, win inline {
        if (object->addToGroup(group) != 1) {
            return;
        }
        this->addToGroup(object,group,false);
    }
    TodoReturn addPlayer2Point(cocos2d::CCPoint, bool);
    TodoReturn addPlayerCollisionBlock();
    TodoReturn addPlayerPoint(cocos2d::CCPoint);
    void addSpecial(GameObject*) = ios 0x3595d8, win 0x2cf4a0, m1 0xc7674, imac 0xe0390;
    TodoReturn addToRedoList(UndoObject*);
    TodoReturn addTouchPoint(cocos2d::CCPoint);
    void addToUndoList(UndoObject* object, bool keepRedo) = win inline, m1 0xc7520, imac 0xe0210, ios 0x3594f4 {
        if (!keepRedo) m_redoObjects->removeAllObjects();
        if (m_undoObjects->count() >= (m_increaseMaxUndoRedo ? 1000 : 200)) m_undoObjects->removeObjectAtIndex(0, true);
        m_undoObjects->addObject(object);
    }
    void applyAttributeState(GameObject*, GameObject*) = win inline {
        p0->duplicateAttributes(p1);
        p0->m_shouldUpdateColorSprite = true;
    }
    void applyGroupState(GameObject* dest, GameObject* src) = win 0x2d8d60;
    void breakApartTextObject(TextGameObject*) = win 0x2d6c10, m1 0xd52f8, imac 0xf03b0, ios 0x361d3c;
    bool canPasteState();
    TodoReturn clearPlayerPoints();
    TodoReturn clearTouchPoints();
    void copyObjectState(GameObject*) = win 0x2d8bc0, m1 0xd7240, imac 0xf2600, ios 0x363454;
    TodoReturn copyParticleState(ParticleGameObject*);
    GameObject* createObject(int, cocos2d::CCPoint, bool) = ios 0x359a70, win 0x2cbf90, m1 0xc7be8, imac 0xe0940;
    void createObjectsFromSetup(gd::string&) = win 0x2cb110, m1 0xc4c50, imac 0xdd250, ios 0x3576e8;
    cocos2d::CCArray* createObjectsFromString(gd::string const&, bool, bool) = win 0x2cb920, m1 0xc6e60, imac 0xdf9e0, ios 0x3590e4;
    void dirtifyTriggers() = win inline, m1 0xd58e0, imac 0xf0a00, ios 0x36211c {
        m_triggersChanged = true;
        m_colorTriggersChanged = true;
        m_pulseTriggersChanged = true;
        m_alphaTriggersChanged = true;
        m_spawnTriggersChanged = true;
    }
    cocos2d::CCArray* duplicateKeyframeAnimation(int) = win 0x2d9210;
    TodoReturn fastUpdateDisabledGroups();
    GameObject* findGameObject(int);
    StartPosObject* findStartPosObject() = win inline, m1 0xd58f8, imac 0xf0a20, ios 0x362134 {
        StartPosObject* ret = nullptr;
        auto xPos = 0.0f;
        auto order = -1;
        CCObject* obj;
        CCARRAY_FOREACH(m_objects, obj) {
            auto object = static_cast<StartPosObject*>(obj);
            if (object->m_objectID == 31 && !object->m_startSettings->m_disableStartPos) {
                auto currentXPos = object->getPosition().x;
                auto currentOrder = object->m_startSettings->m_targetOrder;
                auto reverseGameplay = object->m_startSettings->m_reverseGameplay;
                if (
                    order < currentOrder || 
                    (xPos < currentXPos && !reverseGameplay && order <= currentOrder) ||
                    (currentXPos < xPos && reverseGameplay && order <= currentOrder)
                ) {
                    ret = object;
                    order = currentOrder;
                    xPos = currentXPos;
                }
            }
        }
        return ret;
    }
    TodoReturn forceShowSelectedObjects(bool);
    TodoReturn fullUpdateDisabledGroups();
    TodoReturn getAllObjects();
    DelayedSpawnNode* getDelayedSpawnNode();
    TodoReturn getGridPos(cocos2d::CCPoint);
    float getLastObjectX() = win 0x2d5fd0, m1 0xd44fc, imac 0xef3e0, ios 0x361490;
    gd::string getLevelString() = win 0x2ce530, m1 0xca93c, imac 0xe3a60, ios 0x35bcb8;
    TodoReturn getLockedLayers();
    int getNextColorChannel() = win 0x2d2890, m1 0xd2474, imac 0xecb90, ios 0x35f9e0;
    int getNextFreeAreaEffectID(cocos2d::CCArray*) = win 0x2d26d0, m1 0xd1f4c, imac 0xec660, ios 0x35f678;
    TodoReturn getNextFreeBlockID(cocos2d::CCArray*);
    int getNextFreeEditorLayer(cocos2d::CCArray*);
    TodoReturn getNextFreeEnterChannel(cocos2d::CCArray*);
    int getNextFreeGradientID(cocos2d::CCArray*) = win 0x2d27b0, m1 0xd2330, imac 0xeca40, ios 0x35f90c;
    int getNextFreeGroupID(cocos2d::CCArray*) = win 0x2d2030, imac 0xebbf0, m1 0xd1514, ios 0x35ef38;
    int getNextFreeItemID(cocos2d::CCArray*) = win 0x2d22b0, imac 0xebf10, m1 0xd1810, ios 0x35f1a4;
    TodoReturn getNextFreeOrderChannel(cocos2d::CCArray*);
    TodoReturn getNextFreeSFXGroupID(cocos2d::CCArray*);
    TodoReturn getNextFreeSFXID(cocos2d::CCArray*);
    cocos2d::CCRect getObjectRect(GameObject*, bool, bool) = win 0x2cd0f0, m1 0xc8dc8, imac 0xe1bd0, ios 0x35a84c;
    TodoReturn getRelativeOffset(GameObject*);
    cocos2d::CCPoint getSavedEditorPosition(int) = m1 0xcf4f0, imac 0xe9750;
    gd::string getSavedEditorPositions() = m1 0xcf518, imac 0xe9790;
    int getSectionCount() = win inline, imac 0xe9bb0, m1 0xcf870, ios 0x35d5c8 {
        return m_sections.size();
    }
    TodoReturn getSelectedEditorOrder();
    TodoReturn getSelectedEffectPos();
    TodoReturn getSelectedOrderChannel();
    gd::string getSFXIDs() = win 0x2cec40, m1 0xcf114, imac 0xe9290;
    gd::string getSongIDs(bool&) = win 0x2ce890, m1 0xcecb0, imac 0xe8d40;
    cocos2d::CCArray* getTriggerGroup(int) = win 0x2d6310;
    void handleAction(bool, cocos2d::CCArray*) = ios 0x35b654, win 0x2cde30, imac 0xe3140, m1 0xca1b0;
    bool hasAction(bool);
    bool init(GJGameLevel*, bool) = ios 0x35643c, win 0x2c96e0, m1 0xc3124, imac 0xdb280;
    bool isLayerLocked(int layer) = win inline, m1 0xcf8d4, imac 0xe9c20, ios 0x35d62c {
        if (layer < 10000 && m_layerLockingEnabled) {
            return m_lockedLayers[layer];
        }
        return false;
    }
    GameObject* objectAtPosition(cocos2d::CCPoint) = win 0x2cc940, m1 0xc8ab0, imac 0xe1870, ios 0x35a5f4;
    void objectMoved(GameObject*) = m1 0xcfff4, imac 0xea300;
    cocos2d::CCArray* objectsAtPosition(cocos2d::CCPoint) = win 0x2ccd00, m1 0xc9198, imac 0xe2010, ios 0x35ac18;
    cocos2d::CCArray* objectsInRect(cocos2d::CCRect, bool) = win 0x2cd590, m1 0xc8534, imac 0xe12f0, ios 0x35a2a4;
    void onPausePlaytest();
    void onPlaytest() = ios 0x3624a8, win 0x2d7330, imac 0xf0f00, m1 0xd5d40;
    void onResumePlaytest() = win 0x2d7d60, m1 0xd66bc, imac 0xf1990, ios 0x362b04;
    void onStopPlaytest() = ios 0x362c30, win 0x2d7f50, m1 0xd67f8, imac 0xf1ae0;
    void pasteAttributeState(GameObject*, cocos2d::CCArray*) = win inline, imac 0xf2930, m1 0xd7594 {
        if (!m_copyStateObject) return;

        if (!p0) {
            CCObject* obj;
            CCARRAY_FOREACH(p1, obj) {
                this->applyAttributeState(static_cast<GameObject*>(obj), m_copyStateObject);
            }
        }
        else this->applyAttributeState(p0, m_copyStateObject);

        if (!GameManager::sharedState()->getGameVariable("0156")) this->pasteGroupState(p0, p1);
    }
    TodoReturn pasteColorState(GameObject*, cocos2d::CCArray*);
    void pasteGroupState(GameObject*, cocos2d::CCArray*) = win inline, imac 0xf2a30, m1 0xd769c {
        if (!m_copyStateObject) return;

        if (p0) return this->applyGroupState(p0, m_copyStateObject);

        CCObject* obj;
        CCARRAY_FOREACH(p1, obj) {
            this->applyGroupState(static_cast<GameObject*>(obj), m_copyStateObject);
        }
    }
    TodoReturn pasteParticleState(ParticleGameObject*, cocos2d::CCArray*);
    void processLoadedMoveActions();
    void quickUpdateAllPositions() = win 0x2d70c0, m1 0xd5a04, imac 0xf0b40, ios 0x36223c;
    void recreateGroups() = ios 0x36167c, imac 0xef9c0, m1 0xd4af8, win 0x2d6370;
    void redoLastAction() = win inline {
        return this->handleAction(false, m_redoObjects);
    }
    void refreshSpecial(GameObject*) = win inline, m1 0xd01b8, imac 0xea7f0, ios 0x35de50 {
        this->removeSpecial(p0);
        this->addSpecial(p0);
    }
    TodoReturn removeAllObjects();
    void removeAllObjectsOfType(int objectID) = win 0x2cdbb0, imac 0xe2db0, m1 0xc9e54, ios 0x35b3f0;
    void removeObject(GameObject*, bool) = win 0x2cda70, imac 0xe27e0, m1 0xc98e4, ios 0x35aedc;
    TodoReturn removePlayerCollisionBlock();
    void removeSpecial(GameObject*) = ios 0x35af54, win 0x2cfbb0, imac 0xe28a0, m1 0xc99a4;
    TodoReturn resetDelayedSpawnNodes();
    TodoReturn resetEffectTriggerOptim(GameObject*, cocos2d::CCArray*);
    void resetMovingObjects();
    void resetObjectVector();
    TodoReturn resetPlayback();
    TodoReturn resetToggledGroups();
    void resetToggledGroupsAndObjects() = ios 0x361304, imac 0xef070, m1 0xd429c, win 0x2d5c80;
    void resetUnusedColorChannels() = win 0x2d2b80;
    TodoReturn reverseKeyframeAnimationOrder(int);
    TodoReturn reverseObjectChanged(EffectGameObject*);
    float rotationForSlopeNearObject(GameObject*) = win 0x2cc7b0, m1 0xc83a0, imac 0xe1170, ios 0x35a114;
    ColorAction* runColorEffect(EffectGameObject*, int, float, float, bool) = win 0x2d4ee0;
    void saveEditorPosition(cocos2d::CCPoint&, int) = m1 0xcf4d8, imac 0xe9730;
    void setObjectCount(int);
    bool shouldBlend(int) = win 0x2cafe0;
    TodoReturn sortBatchnodeChildren(float);
    void spawnGroupPreview(int, float, float, float, float, float, bool, bool) = win 0x2d55b0;
    TodoReturn stopPlayback();
    void stopTriggersInGroup(int, float) = win 0x2d51f0;
    TodoReturn timeObjectChanged();
    TodoReturn toggleBackground(bool);
    TodoReturn toggleGrid(bool);
    void toggleGround(bool enable) = win inline, m1 0xc6720, imac 0xdf280, ios 0x358ba0 {
        m_hideGround = !enable;
        m_groundLayer->setVisible(enable);
    }
    void toggleGroupPreview(int, bool) = win 0x2d59b0;
    TodoReturn toggleLockActiveLayer();
    void transferDefaultColors(GJEffectManager*, GJEffectManager*) = ios 0x35fdcc, m1 0xd298c, imac 0xed150, win 0x2d3450;
    TodoReturn triggerFollowCommand(EffectGameObject*);
    TodoReturn triggerPlayerFollowCommand(EffectGameObject*);
    TodoReturn triggerRotateCommand(EffectGameObject*);
    bool tryUpdateSpeedObject(EffectGameObject*, bool) = win 0x2d0190, imac 0xea170, m1 0xcfe2c, ios 0x35db50;
    bool typeExistsAtPosition(int, cocos2d::CCPoint, bool, bool, float) = win 0x2cc340, m1 0xc7ed4, imac 0xe0c40, ios 0x359ca0;
    void undoLastAction() = win inline, m1 0xca930, imac 0xe3a40, ios 0x35bcac {
        return this->handleAction(true, m_undoObjects);
    }
    void unlockAllLayers() = m1 0xcf914, imac 0xe9c60;
    void updateAnimateOnTriggerObjects(bool) = win 0x2d8e30, m1 0xc6698, imac 0xdf200, ios 0x358b20;
    TodoReturn updateArt(float);
    void updateBlendValues() = ios 0x360b9c, imac 0xee5d0, m1 0xd38fc, win 0x2d5d20;
    void updateEditor(float) = win 0x2d0330, imac 0xddb40, m1 0xc53b8, ios 0x357bd8;
    void updateEditorMode() = ios 0x358880, win 0x2d2e10, imac 0xdeeb0, m1 0xc6370;
    void updateGameObjects() = ios 0x357eb4, imac 0xddf40, m1 0xc57c0, win 0x2d3780;
    TodoReturn updateGridLayer();
    TodoReturn updateGridLayerParent();
    void updateKeyframeObjects() = win 0x2d9490, m1 0xd0f80, imac 0xeb650;
    TodoReturn updateKeyframeVisibility(bool);
    void updateLevelFont(int) = ios 0x3618c8, win 0x2d66d0, m1 0xd4e04, imac 0xefe30;
    void updateObjectColors(cocos2d::CCArray* gameObjects) = ios 0x35ea84, win 0x2d1790, imac 0xeb700, m1 0xd102c;
    void updateOptions() = ios 0x357150, win 0x2ca8f0, m1 0xc4394, imac 0xdc880;
    void updatePreviewAnim();
    void updatePreviewParticle(ParticleGameObject*) = imac 0x1a1820, m1 0x1642bc, win 0x2d8fd0;
    void updatePreviewParticles() = ios 0x35fd34, win 0x2d8ec0, m1 0xd2838, imac 0xecfe0;
    void updateToggledGroups() = win 0x2d5b50;
    TodoReturn validGroup(GameObject*, bool);

    bool m_drawTriggerBoxes;
    bool m_showGrid;
    bool m_hideGridOnPlay;
    bool m_drawEffectLines;
    bool m_showGround;
    bool m_showDurationLines;
    bool m_increaseMaxUndoRedo;
    bool m_hideBackground;
    bool m_gv0120;
    bool m_layerLockingEnabled;
    bool m_playtestOrderChanged;
    bool m_previewParticles;
    bool m_previewAnimations;
    bool m_previewShaders;
    bool m_hideParticleIcons;
    bool m_alwaysHideParticleIcons;
    bool m_playTestSmoothFix;
    bool m_hasHighDetail;
    bool m_unk36ca;
    int m_unk36cc;
    bool m_collisionBlocksAdded;
    int m_unk36d4;
    cocos2d::CCArray* m_durationObjects;
    cocos2d::CCArray* m_pulseTriggers;
    cocos2d::CCArray* m_colorTriggers;
    cocos2d::CCArray* m_alphaTriggers;
    cocos2d::CCArray* m_spawnTriggers;
    cocos2d::CCArray* m_moveTriggers;
    cocos2d::CCArray* m_cameraGuideTriggers;
    cocos2d::CCArray* m_particleObjects;
    cocos2d::CCArray* m_keyframeObjects;
    cocos2d::CCDictionary* m_unk3720;
    cocos2d::CCArray* m_playtestTriggers;
    GameObject* m_copyStateObject;
    ParticleGameObject* m_particleObject;
    cocos2d::CCDictionary* m_unk3740;
    cocos2d::CCArray* m_unk3748;
    bool m_keepEditorLayer;
    bool m_unk3751;
    geode::SeedValueRSV m_coinCount;
    bool m_triggersChanged;
    bool m_colorTriggersChanged;
    bool m_pulseTriggersChanged;
    bool m_alphaTriggersChanged;
    bool m_spawnTriggersChanged;
    cocos2d::CCArray* m_spawnOrderObjects;
    bool m_spawnOrderObjectsChanged;
    bool m_sortSpawnNodes;
    cocos2d::CCDictionary* m_unk3778;
    cocos2d::CCDictionary* m_unk3780;
    bool m_initializing;
    short m_currentLayer;
    float m_playtestZoom;
    OBB2D* m_currentOBB2D;
    float m_playtestTimeWarp;
    float m_playtestCameraZoom;
    cocos2d::CCSprite* m_playtestDeathSprite;
    float m_trailTimer;
    bool m_soloMode;
    bool m_nonSquareRotation;
    EditorUI* m_editorUI;
    cocos2d::CCArray* m_undoObjects;
    cocos2d::CCArray* m_redoObjects;
    geode::SeedValueRSV m_objectCount;
    DrawGridLayer* m_drawGridLayer;
    bool m_updateColorSprites;
    bool m_previewMode;
    bool m_alwaysPreviewMode;
    gd::string m_levelString;
    gd::vector<GameObject*> m_objectVector;
    gd::vector<GameObject*> m_loadedMoveObjects;
    cocos2d::CCDictionary* m_triggerGroupsDict;
    gd::vector<cocos2d::CCArray*> m_triggerGroups;
    gd::vector<cocos2d::CCPoint> m_playerPoints;
    gd::vector<gd::vector<cocos2d::CCPoint>> m_player2Points;
    gd::vector<cocos2d::CCPoint> m_touchPoints;
    gd::vector<bool> m_sortedGroups;
    gd::vector<bool> m_toggledGroups;
    gd::vector<bool> m_lockedLayers;
    gd::vector<cocos2d::CCPoint> m_savedPositions;
    cocos2d::CCPoint m_previewPosition;
    gd::vector<bool> m_blendingColors;
    gd::vector<bool> m_blendingColors2;
    gd::vector<unsigned char> m_toggledGroupStates;
    gd::vector<float> m_spawnGroupDelays;
    double m_sessionTime;
    bool m_removingAll;
    EffectGameObject* m_playbackObject;
    int m_playbackOrder;
    int m_duplicateKeyframeGroup;
    gd::vector<DelayedSpawnNode*> m_delayedSpawnNodes;
    gd::vector<DelayedSpawnNode*> m_delayedSpawnNodes2;
    bool m_playbackActive;
    bool m_activateAudioTriggers;
}

[[link(android)]]
class LevelFeatureLayer : FLAlertLayer {
    // virtual ~LevelFeatureLayer();

    static LevelFeatureLayer* create(int);

    virtual void keyBackClicked() = m1 0x4530b8, imac 0x4f2260;

    bool init(int) = m1 0x45260c, imac 0x4f1770;
    void onClose(cocos2d::CCObject* sender);
    void onDown(cocos2d::CCObject* sender);
    void onDown2(cocos2d::CCObject* sender);
    void onRemoveValues(cocos2d::CCObject* sender);
    void onSetEpicOnly(cocos2d::CCObject* sender);
    void onSetFeatured(cocos2d::CCObject* sender);
    void onToggleEpic(cocos2d::CCObject* sender);
    void onUp(cocos2d::CCObject* sender);
    void onUp2(cocos2d::CCObject* sender);
    void updateStars();

    cocos2d::CCLabelBMFont* m_featureLabel;
    int m_levelID;
    int m_featurePosition;
    bool m_epicOnly;
    cocos2d::CCSprite* m_epicSprite;
}

[[link(android)]]
class LevelInfoLayer : cocos2d::CCLayer, LevelDownloadDelegate, LevelUpdateDelegate, RateLevelDelegate, LikeItemDelegate, FLAlertLayerProtocol, LevelDeleteDelegate, NumberInputDelegate, SetIDPopupDelegate, TableViewCellDelegate {
    LevelInfoLayer() = ios 0x2f310 {
        m_isBusy = false;
        m_playBtnMenu = nullptr;
        m_level = nullptr;
        m_coins = nullptr;
        m_likeBtn = nullptr;
        m_starRateBtn = nullptr;
        m_demonRateBtn = nullptr;
        m_unk2 = nullptr;
        m_lengthLabel = nullptr;
        m_exactLengthLabel = nullptr;
        m_downloadsLabel = nullptr;
        m_likesLabel = nullptr;
        m_orbsLabel = nullptr;
        m_folderLabel = nullptr;
        m_cloneBtn = nullptr;
        m_unk3 = nullptr;
        m_likesIcon = nullptr;
        m_orbsIcon = nullptr;
        m_levelType = GJLevelType::Default;
        m_noUpdateAlert = false;
        m_enterTransitionFinished = false;
        m_circle = nullptr;
        m_difficultySprite = nullptr;
        m_starsIcon = nullptr;
        m_starsLabel = nullptr;
        m_icons = nullptr;
        m_iconOffset = 0.f;
        m_challenge = false;
        m_playScene = nullptr;
        m_playSprite = nullptr;
        m_progressTimer = nullptr;
        m_songWidget = nullptr;
    }
    ~LevelInfoLayer() = win inline, m1 0x24f700, imac 0x2a9490, ios 0x285b0 {
        CC_SAFE_RELEASE(m_level);
        CC_SAFE_RELEASE(m_circle);
        CC_SAFE_RELEASE(m_coins);
        CC_SAFE_RELEASE(m_icons);
        auto glm = GameLevelManager::sharedState();
        if (glm->m_levelDownloadDelegate == this) glm->m_levelDownloadDelegate = nullptr;
        if (glm->m_levelUpdateDelegate == this) glm->m_levelUpdateDelegate = nullptr;
    }

    static LevelInfoLayer* create(GJGameLevel* level, bool challenge) = ios 0x2874c, win 0x2e2860, imac 0x2a9700, m1 0x24f8ac;
    static cocos2d::CCScene* scene(GJGameLevel* level, bool challenge) = win 0x2e2810, imac 0x2a96b0, m1 0x24f850, ios 0x286f0;

    virtual void keyBackClicked() = win 0x2ebdd0, imac 0x2b1280, m1 0x25718c, ios 0x2f294;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x2ebde0, imac 0x2b12b0, m1 0x257198, ios 0x2f2a0;
    virtual void numberInputClosed(NumberInputLayer*) = win 0x2e8e30, imac 0x2b0a70, m1 0x256974, ios 0x2ecd0;
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) = win 0x2e51b0, imac 0x2aeea0, m1 0x254e84, ios 0x2d6a0;
    virtual void levelDownloadFinished(GJGameLevel*) = win 0x2e7210, imac 0x2afc80, m1 0x255be8, ios 0x2e2c4;
    virtual void levelDownloadFailed(int) = win 0x2e7570, imac 0x2aff70, m1 0x255ea8, ios 0x2e540;
    virtual void levelUpdateFinished(GJGameLevel*, UpdateResponse) = win 0x2e76a0, imac 0x2b0060, m1 0x255f8c, ios 0x2e600;
    virtual void levelUpdateFailed(int) = win 0x2e7800, imac 0x2b0270, m1 0x25619c, ios 0x2e720;
    virtual void levelDeleteFinished(int) = win 0x2e7930, m1 0x256284, imac 0x2b0370, ios 0x2e7e4;
    virtual void levelDeleteFailed(int) = win 0x2e7a70, m1 0x256378, imac 0x2b0480, ios 0x2e8b4;
    virtual void rateLevelClosed() = win 0x2e9cd0, imac 0x2b0f70, m1 0x256ea8, ios 0x2f0ec;
    virtual void likedItem(LikeItemType, int, bool) = win 0x2e9f50, imac 0x2b0fa0, m1 0x256eb4, ios 0x2f0f8;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x2eb810, imac 0x2b10b0, m1 0x256fec, ios 0x2f170;
    virtual void setIDPopupClosed(SetIDPopup*, int) = win 0x2e53a0, m1 0x254fdc, imac 0x2aefd0, ios 0x2d7c8;
    virtual void onEnterTransitionDidFinish() = win 0x2e7bb0, m1 0x256564, imac 0x2b0660, ios 0x2ea38;

    void confirmClone(cocos2d::CCObject*) = ios 0x2ce7c, win 0x2e9000, imac 0x2ae480, m1 0x2543fc;
    void confirmDelete(cocos2d::CCObject*) = win 0x2e9170, m1 0x253af0, imac 0x2adbc0;
    void confirmMoveToBottom(cocos2d::CCObject*) = win 0x2ea8a0, m1 0x254bb0, imac 0x2aec10;
    void confirmMoveToTop(cocos2d::CCObject*) = win 0x2ea760, imac 0x2aeb30, m1 0x254ac0;
    void confirmOwnerDelete(cocos2d::CCObject*) = m1 0x2541c0, imac 0x2ae280, win 0x2e92b0;
    void downloadLevel() = ios 0x2b0ec, win 0x2e5770, m1 0x2523a0, imac 0x2ac410;
    void incrementDislikes() = win inline, m1 0x256f44, imac 0x2b1020, ios inline {
        m_level->m_dislikes++;
        this->updateLabelValues();
    }
    void incrementLikes() = win inline, m1 0x256f30, imac 0x2b1000, ios inline {
        m_level->m_likes++;
        this->updateLabelValues();
    }
    bool init(GJGameLevel* level, bool challenge) = ios 0x287d0, win 0x2e2a90, imac 0x2a98e0, m1 0x24fa08;
    void loadLevelStep() = ios 0x2ebb0, win 0x2e8a00, imac 0x2b07d0, m1 0x2566dc;
    void onAddToList(cocos2d::CCObject* sender) = ios 0x2d668, win 0x2e5160, imac 0x2aee40, m1 0x254e2c;
    void onBack(cocos2d::CCObject* sender) = ios 0x2d078, win 0x2ebce0, imac 0x2ae6d0, m1 0x254684;
    void onClone(cocos2d::CCObject* sender) = win inline, m1 0x256b3c, imac 0x2b0c00, ios 0x2ee4c {
        if (this->shouldDownloadLevel() || m_isBusy) return;
        this->setKeypadEnabled(false);
        m_isBusy = true;
        GameManager::sharedState()->m_sceneEnum = 2;
        auto level = GameLevelManager::sharedState()->createNewLevel();
        level->copyLevelInfo(m_level);
        if (m_level->m_originalLevel.value() == 0) {
            if (m_level->m_levelID.value() != 0) {
                level->m_originalLevel = m_level->m_levelID;
            }
        }
        else {
            level->m_originalLevel = m_level->m_originalLevel;
        }
        cocos2d::CCDirector::sharedDirector()->replaceScene(cocos2d::CCTransitionFade::create(0.5f, EditLevelLayer::scene(level)));
    }
    void onDelete(cocos2d::CCObject* sender) = win inline, m1 0x256ca4, imac 0x2b0d80, ios 0x2ef30 {
        m_playBtnMenu->setEnabled(false);
        GameLevelManager::sharedState()->deleteLevel(m_level);
        this->onBack(nullptr);
        m_isBusy = true;
    }
    void onFavorite(cocos2d::CCObject* sender) = win 0x2e5430, imac 0x2aeab0, m1 0x254a40;
    void onFeatured(cocos2d::CCObject* sender);
    void onGarage(cocos2d::CCObject* sender) = ios 0x2d2e4, win 0x2e55b0, m1 0x2549e8, imac 0x2aea50;
    void onInfo(cocos2d::CCObject* sender) = win 0x2e8b60, m1 0x253d04, imac 0x2addb0;
    void onLevelInfo(cocos2d::CCObject* sender) = ios 0x2d0f8, win 0x2ea510, m1 0x254704, imac 0x2ae750;
    void onLevelLeaderboard(cocos2d::CCObject* sender) = ios 0x2c85c, win 0x2e54d0, imac 0x2adde0, m1 0x253d3c;
    void onLevelOptions(cocos2d::CCObject* sender) = win 0x2ea3c0;
    void onLike(cocos2d::CCObject* sender) = win 0x2e9e60, m1 0x253da8, imac 0x2ade50, ios 0x2c8c8;
    void onLowDetailMode(cocos2d::CCObject* sender);
    void onOwnerDelete(cocos2d::CCObject* sender) = win inline, m1 0x256cf0, imac 0x2b0dd0, ios 0x2ef7c {
        if (m_isBusy) return;
        auto glm = GameLevelManager::sharedState();
        glm->m_levelDeleteDelegate = this;
        glm->deleteServerLevel(m_level->m_levelID.value());
        m_circle->setVisible(true);
    }
    void onPlay(cocos2d::CCObject* sender) = ios 0x2a9d0, win 0x2e7bd0, m1 0x251bc4, imac 0x2abca0;
    void onPlayReplay(cocos2d::CCObject* sender);
    void onRate(cocos2d::CCObject* sender) = win 0x2e96e0, m1 0x256d54, imac 0x2b0e40, ios 0x2efe0;
    void onRateDemon(cocos2d::CCObject* sender) = win 0x2e9ce0, imac 0x2ae030, m1 0x253f84;
    void onRateStars(cocos2d::CCObject* sender) = win 0x2e99c0, m1 0x253e20, imac 0x2aded0, ios 0x2c940;
    void onRateStarsMod(cocos2d::CCObject* sender) = win 0x2e9c80, imac 0x2ae230, m1 0x254168;
    void onSetFolder(cocos2d::CCObject* sender) = win 0x2e5300, imac 0x2aeda0, m1 0x254d6c;
    void onUpdate(cocos2d::CCObject* sender) = win 0x2ea280, m1 0x253bec, imac 0x2adcb0, ios 0x2c79c;
    void onViewProfile(cocos2d::CCObject* sender) = ios 0x2a958, win 0x2ea460, imac 0x2abc20, m1 0x251b4c;
    void playStep2() = win 0x2e8850;
    void playStep3() = ios 0x2eb24, imac 0x2b0740, m1 0x256650, win 0x2e8930;
    void playStep4() = win 0x2e8ab0, m1 0x25678c, imac 0x2b0880, ios 0x2ec60;
    void setupLevelInfo() = win 0x2e65c0, m1 0x252478, imac 0x2ac500;
    void setupPlatformerStats() = ios 0x2bc9c, win 0x2e5a80, m1 0x252fc8, imac 0x2ad140;
    void setupProgressBars() = ios 0x2bff8, win 0x2e5eb0, m1 0x25336c, imac 0x2ad480;
    bool shouldDownloadLevel() = win 0x2e5640, m1 0x2550dc, imac 0x2af0d0, ios 0x2d84c;
    void showSongWarning() = imac 0x2b0590, m1 0x25646c;
    void showUpdateAlert(UpdateResponse) = win 0x2e7710, imac 0x2b00d0, m1 0x255ffc;
    void tryCloneLevel(cocos2d::CCObject*) = ios 0x2cf6c, win 0x2e8ba0, imac 0x2ae5b0, m1 0x254548;
    TodoReturn tryShowAd();
    void updateLabelValues() = ios 0x2d910, win 0x2ea9d0, imac 0x2af160, m1 0x25517c;
    void updateSideButtons() = win 0x2e9fc0, m1 0x253fd8, imac 0x2ae090, ios 0x2cacc;

    bool m_isBusy;
    cocos2d::CCMenu* m_playBtnMenu;
    GJGameLevel* m_level;
    cocos2d::CCArray* m_coins;
    CCMenuItemSpriteExtra* m_likeBtn;
    CCMenuItemSpriteExtra* m_starRateBtn;
    CCMenuItemSpriteExtra* m_demonRateBtn;
    void* m_unk2;
    cocos2d::CCLabelBMFont* m_lengthLabel;
    cocos2d::CCLabelBMFont* m_exactLengthLabel;
    cocos2d::CCLabelBMFont* m_downloadsLabel;
    cocos2d::CCLabelBMFont* m_likesLabel;
    cocos2d::CCLabelBMFont* m_orbsLabel;
    cocos2d::CCLabelBMFont* m_folderLabel;
    CCMenuItemSpriteExtra* m_cloneBtn;
    void* m_unk3;
    cocos2d::CCSprite* m_likesIcon;
    cocos2d::CCSprite* m_orbsIcon;
    GJLevelType m_levelType;
    bool m_noUpdateAlert;
    bool m_enterTransitionFinished;
    LoadingCircle* m_circle;
    GJDifficultySprite* m_difficultySprite;
    cocos2d::CCSprite* m_starsIcon;
    cocos2d::CCLabelBMFont* m_starsLabel;
    cocos2d::CCArray* m_icons;
    float m_iconOffset;
    cocos2d::CCPoint m_basePosition;
    float m_baseStarsY;
    bool m_challenge;
    cocos2d::CCScene* m_playScene;
    cocos2d::CCSprite* m_playSprite;
    cocos2d::CCProgressTimer* m_progressTimer;
    CustomSongWidget* m_songWidget;
}

[[link(android)]]
class LevelLeaderboard : FLAlertLayer, LeaderboardManagerDelegate, FLAlertLayerProtocol {
    // virtual ~LevelLeaderboard();

    static LevelLeaderboard* create(GJGameLevel*, LevelLeaderboardType, LevelLeaderboardMode) = ios 0x24e3b8, win 0x2ebf80, imac 0x3c72e0, m1 0x350108;

    virtual void registerWithTouchDispatcher() = win 0x425d0, imac 0x3c9280, m1 0x351f28, ios 0x24fe80;
    virtual void keyBackClicked() = win 0x84650, m1 0x351eac, imac 0x3c9210, ios 0x24fe04;
    virtual void show() = win 0x867a0, imac 0x3c97c0, m1 0x35241c, ios 0x250194;
    virtual void loadLeaderboardFinished(cocos2d::CCArray*, char const*) = win 0x2ee140, imac 0x3c94c0, m1 0x35214c, ios 0x24ffbc;
    virtual void loadLeaderboardFailed(char const*) = win 0x2ee1e0, imac 0x3c9600, m1 0x352298, ios 0x250060;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x2ed570, imac 0x3c8e60, m1 0x351b24, ios 0x24fadc;
    virtual void updateUserScoreFinished() = win 0x2edb90, imac 0x3c9060, m1 0x351d1c, ios 0x24fcc0;
    virtual void updateUserScoreFailed() = win 0x2edba0, m1 0x351d28, imac 0x3c9090, ios 0x24fccc;

    void deleteLocalScores() = win inline, m1 0x351994, imac 0x3c8d10, ios 0x24f988 {
        m_level->m_localBestTimes.clear();
        m_level->m_localBestPoints.clear();
        auto parent = this->getParent();
        this->onClose(nullptr);
        if (parent) {
            parent->addChild(TextAlertPopup::create("Local scores reset.", 1.f, .6f, 150, ""), 100);
        }
    }
    cocos2d::CCArray* getLocalScores() = win 0x2ed6f0;
    CCMenuItemSpriteExtra* getSpriteButton(gd::string, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*, float, cocos2d::CCPoint, int) = win 0x2ed250, imac 0x3c8500, m1 0x351164, ios 0x24f2ac;
    bool init(GJGameLevel*, LevelLeaderboardType, LevelLeaderboardMode) = ios 0x24e4a8, win 0x2ec0c0, m1 0x350244, imac 0x3c7470;
    bool isCorrect(char const*) = win 0x2edf40;
    void loadScores() = imac 0x3c8960, m1 0x3515ec, win 0x2ed8c0;
    void onChangeMode(cocos2d::CCObject* sender) = win 0x2edd40, m1 0x351344, imac 0x3c86d0;
    void onChangeType(cocos2d::CCObject* sender) = win 0x2edca0;
    void onClose(cocos2d::CCObject* sender) = ios 0x24f504, win 0x84620, m1 0x35146c, imac 0x3c87f0;
    void onDeleteLocalScores(cocos2d::CCObject* sender) = imac 0x3c8720, m1 0x351394;
    void onUpdate(cocos2d::CCObject* sender) = ios 0x24f540, win 0x2eddc0, m1 0x3514a8, imac 0x3c8820;
    void reloadLeaderboard(LevelLeaderboardType, LevelLeaderboardMode) = win 0x2edbb0, m1 0x351dd0, imac 0x3c9130, ios 0x24fd28;
    void setupLeaderboard(cocos2d::CCArray*) = m1 0x351800, imac 0x3c8b60, win 0x2ee2f0;

    GJGameLevel* m_level;
    LevelLeaderboardType m_type;
    LevelLeaderboardMode m_mode;
    cocos2d::CCArray* m_scores;
    GJCommentListLayer* m_list;
    LoadingCircle* m_circle;
    TextArea* m_noInternet;
    CCMenuItemSpriteExtra* m_refreshBtn;
    CCMenuItemSpriteExtra* m_timeBtn;
    CCMenuItemSpriteExtra* m_pointsBtn;
}

[[link(android)]]
class LevelListCell : TableViewCell {
    // virtual ~LevelListCell();
    LevelListCell(char const*, float, float) = win 0xbdf10;

    static LevelListCell* create(float, float);

    virtual bool init() = m1 0x1f5bc0, imac 0x247460, ios 0x115ae0 { return true; }
    virtual void draw() = win 0xad710, imac 0x2475a0, m1 0x1f5cd8, ios 0x115bf8;

    void loadFromList(GJLevelList*) = ios 0x10698c, win 0xbdf90, imac 0x233ae0, m1 0x1e3af4;
    void onClick(cocos2d::CCObject* sender) = ios 0x115ae8, win 0xbf3c0, imac 0x247470, m1 0x1f5bc8;
    void onListInfo(cocos2d::CCObject* sender);
    void onViewProfile(cocos2d::CCObject* sender) = imac 0x247550, m1 0x1f5c90, win 0xbf4f0;
    void updateBGColor(int index) = win inline, m1 0x1e5040, imac 0x234fd0, ios 0x107e24 {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        m_backgroundLayer->setOpacity(255);
    }

    GJLevelList* m_levelList;
    bool m_addingLevel;
}

[[link(android)]]
class LevelListDeleteDelegate {
    virtual void levelListDeleteFinished(int) {}
    virtual void levelListDeleteFailed(int) {}
}

[[link(android)]]
class LevelListLayer : LevelBrowserLayer, TextInputDelegate, SelectListIconDelegate, LikeItemDelegate, LevelListDeleteDelegate {
    LevelListLayer() = m1 0x2e50e8, imac 0x350d00, ios 0x248e4c {
        m_buttonMenu = nullptr;
        m_levelList = nullptr;
        m_likeButton = nullptr;
        m_exiting = false;
        m_titleInput = nullptr;
        m_editMode = 0;
        m_objects = nullptr;
        m_diffSprite = nullptr;
        m_featureSprite = nullptr;
        m_exited = false;
    }
    ~LevelListLayer() = win inline, m1 0x2dce44, imac 0x3481e0, ios 0x241ff8 {
        GameManager::sharedState()->m_sceneEnum = 13;
        CC_SAFE_RELEASE(m_levelList);
        CC_SAFE_RELEASE(m_objects);
        auto glm = GameLevelManager::sharedState();
        if (glm->m_levelListDeleteDelegate == this) glm->m_levelListDeleteDelegate = nullptr;
    }

    static LevelListLayer* create(GJLevelList* list) = win inline, imac 0x3484a0, m1 0x2dd04c, ios 0x24218c {
        auto ret = new LevelListLayer();
        if (ret->init(list)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(GJLevelList*) = win 0x2ee9c0, m1 0x2dcfac, imac 0x348410, ios 0x242140;

    virtual void onEnter() = win 0x2f0680, m1 0x2e01ec, imac 0x34b870, ios 0x2450b4;
    virtual void onExit() = win 0x2f06b0, m1 0x2e0224, imac 0x34b8a0, ios 0x2450ec;
    virtual void loadLevelsFinished(cocos2d::CCArray*, char const*, int) = win 0x2f1e80, imac 0x34bc60, m1 0x2e05ec, ios 0x2453b8;
    virtual void loadLevelsFailed(char const*, int) = win 0x2c4370, m1 0x2e081c, imac 0x34bea0, ios 0x245520;
    virtual void onBack(cocos2d::CCObject* sender) = win 0x2f26e0, imac 0x34c3e0, m1 0x2e0c88, ios 0x2457ec;
    virtual void shareCommentClosed(gd::string, ShareCommentLayer*) = win 0x2f2ee0, imac 0x34cb40, m1 0x2e13e8, ios 0x245e38;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x2f2b00, imac 0x34c760, m1 0x2e1024, ios 0x245b18;
    virtual void setIDPopupClosed(SetIDPopup*, int) = win 0x2f2630, imac 0x34c280, m1 0x2e0b3c, ios 0x24573c;
    virtual cocos2d::CCArray* updateResultArray(cocos2d::CCArray*) = win 0x2f26d0, m1 0x2e0c80, imac 0x34c3c0, ios 0x2457e4;
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) = win 0x2f21e0, imac 0x34bed0, m1 0x2e0828, ios 0x24552c;
    virtual void likedItem(LikeItemType, int, bool) = win 0x2f3100, imac 0x34cc30, m1 0x2e14dc, ios 0x245efc;
    virtual void iconSelectClosed(SelectListIconLayer*) = win 0x2f33b0, imac 0x34ce70, m1 0x2e16bc, ios 0x24601c;
    virtual void levelListDeleteFinished(int) = win 0x2f3cd0, m1 0x2e17ec, imac 0x34d000, ios 0x246100;
    virtual void levelListDeleteFailed(int) = win 0x2f3e00, m1 0x2e18d8, imac 0x34d100, ios 0x2461c8;
    virtual void textInputOpened(CCTextInputNode*) = win 0x2f41c0, imac 0x34d410, m1 0x2e1bdc, ios 0x2463f4;
    virtual void textInputClosed(CCTextInputNode*) = win 0x2f3f30, imac 0x34d200, m1 0x2e19c4, ios 0x246290;
    virtual void textChanged(CCTextInputNode*) = win 0x2f4320, imac 0x34d4e0, m1 0x2e1ce0, ios 0x2464f0;

    void cloneList() = win 0x2f3790;
    void confirmClone(cocos2d::CCObject*) = win 0x2f36a0, imac 0x34a2e0, m1 0x2decc4;
    void confirmDelete(cocos2d::CCObject*) = win 0x2f3a20, m1 0x2def6c, imac 0x34a590;
    void confirmOwnerDelete(cocos2d::CCObject*) = win 0x2f3b50, imac 0x34a470, m1 0x2dee64;
    bool init(GJLevelList*) = ios 0x242200, win 0x2eebf0, m1 0x2dd0cc, imac 0x348500;
    void onClaimReward(cocos2d::CCObject* sender) = ios 0x245114, win 0x2f1650, m1 0x2e024c, imac 0x34b8c0;
    void onDelete();
    void onDescription(cocos2d::CCObject* sender) = imac 0x34a680, m1 0x2df064;
    void onFavorite(cocos2d::CCObject* sender) = ios 0x243dd8, win 0x2f2ce0, imac 0x34a3c0, m1 0x2dedb4;
    void onInfo(cocos2d::CCObject* sender) = win 0x2f2fe0, m1 0x2dec1c, imac 0x34a230;
    void onLike(cocos2d::CCObject* sender) = win 0x2f3020, m1 0x2dec54, imac 0x34a260, ios 0x243cac;
    void onListInfo(cocos2d::CCObject* sender);
    void onRefreshLevelList(cocos2d::CCObject* sender) = ios 0x243b6c, win 0x2f1cc0, m1 0x2deb14, imac 0x34a110;
    void onSelectIcon(cocos2d::CCObject* sender) = win 0x2f3260, m1 0x2df1ac, imac 0x34a7b0;
    void onShare(cocos2d::CCObject* sender) = win 0x2f33d0, imac 0x34a800, m1 0x2df1f8;
    void onToggleEditMode(cocos2d::CCObject* sender) = win 0x2f3660, imac 0x34a770, m1 0x2df184;
    void onViewProfile(cocos2d::CCObject* sender) = win 0x2f2ca0, imac 0x34a0e0, m1 0x2deadc;
    void ownerDelete();
    void updateEditMode();
    void updateSideButtons() = win 0x2f3160, imac 0x34a960, m1 0x2df334;
    void updateStatsArt() = ios 0x2442d4, win 0x2f06d0, m1 0x2df3c8, imac 0x34a9f0;
    void verifyListName();

    cocos2d::CCMenu* m_buttonMenu;
    gd::string m_searchKey1;
    GJLevelList* m_levelList;
    gd::string m_searchKey2;
    CCMenuItemSpriteExtra* m_likeButton;
    bool m_exiting;
    CCTextInputNode* m_titleInput;
    int m_editMode;
    cocos2d::CCArray* m_objects;
    cocos2d::CCSprite* m_diffSprite;
    cocos2d::CCSprite* m_featureSprite;
    cocos2d::CCPoint m_rewardPosition;
    bool m_exited;
}

[[link(android)]]
class LevelManagerDelegate {
    virtual void loadLevelsFinished(cocos2d::CCArray* levels, char const* key) {
        this->loadLevelsFinished(levels, key, 0);
    }
    virtual void loadLevelsFailed(char const* key) {
        this->loadLevelsFailed(key, 0);
    }
    virtual void loadLevelsFinished(cocos2d::CCArray* levels, char const* key, int) {}
    virtual void loadLevelsFailed(char const* key, int) {}
    virtual void setupPageInfo(gd::string info, char const* key) {}
}

[[link(android)]]
class LevelOptionsLayer : GJOptionsLayer {
    // virtual ~LevelOptionsLayer();

    static LevelOptionsLayer* create(LevelSettingsObject*);

    virtual void valueDidChange(int, float) = win 0x30fb80, imac 0x25fbc0, m1 0x20bbd0, ios 0x181230;
    virtual float getValue(int) = win 0x30fba0, imac 0x25fbe0, m1 0x20bbe8, ios 0x181248;
    virtual void setupOptions() = win 0x30f4e0, m1 0x20b58c, imac 0x25f470, ios 0x180d58;
    virtual void didToggle(int) = win 0x30fbc0, imac 0x25fc00, m1 0x20bc04, ios 0x181264;

    bool init(LevelSettingsObject*) = win 0x30f470, m1 0x20b534, imac 0x25f420;
    void onSettings(cocos2d::CCObject* sender) = win 0x30f9a0, imac 0x25f920, m1 0x20b9f4;

    LevelSettingsObject* m_settingsObject;
}

[[link(android)]]
class LevelOptionsLayer2 : LevelOptionsLayer {
    // virtual ~LevelOptionsLayer2();

    static LevelOptionsLayer2* create(LevelSettingsObject*) = m1 0x20ba34, imac 0x25f960;

    virtual void setupOptions() = win 0x30fe20, imac 0x25fec0, m1 0x20beb4, ios 0x1814e4;

    bool init(LevelSettingsObject*) = imac 0x25fdc0, m1 0x20bdb8;
}

[[link(android)]]
class LevelPage : cocos2d::CCLayer, DialogDelegate {
    LevelPage() = ios 0x3fdc14 {
        m_isBusy = false;
        m_level = nullptr;
        m_levelMenu = nullptr;
        m_coinObject = nullptr;
        m_secretDoor = nullptr;
    }
    ~LevelPage() = win inline, m1 0x39dbb4, imac 0x4227a0, ios 0x3fbdac {
        CC_SAFE_RELEASE(m_level);
        CC_SAFE_RELEASE(m_dynamicObjects);
        CC_SAFE_RELEASE(m_progressObjects);
        CC_SAFE_RELEASE(m_coins);
        CC_SAFE_RELEASE(m_levelObjects);
    }

    static LevelPage* create(GJGameLevel* level) = win inline, imac 0x41fda0, m1 0x39b290, ios 0x3fa19c {
        auto ret = new LevelPage();
        if (ret->init(level)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x309700, imac 0x424bf0, m1 0x39fd40, ios 0x3fdab4;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x39fe48, imac 0x424d10, ios 0x3fdbb0 {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x39fe50, imac 0x424d30, ios 0x3fdbb8 {}
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x39fe58, imac 0x424d50, ios 0x3fdbc0;
    virtual void registerWithTouchDispatcher() = win 0x9b1a0, imac 0x424d90, m1 0x39fe74, ios 0x3fdbdc;
    virtual void dialogClosed(DialogLayer*) = win 0x308c10, m1 0x39fa78, imac 0x424940, ios 0x3fd88c;

    void addSecretCoin() = ios 0x3fb304, win 0x307810, m1 0x39cb1c, imac 0x4215a0;
    void addSecretDoor() = ios 0x3fcd1c, win 0x307f20, m1 0x39ed88, imac 0x423b10;
    bool init(GJGameLevel*) = ios 0x3fbe78, win 0x305070, m1 0x39dc80, imac 0x422900;
    void onInfo(cocos2d::CCObject* sender) = ios 0x3fbac4, win 0x309260, m1 0x39d69c, imac 0x422200;
    void onMoreGames(cocos2d::CCObject* sender);
    void onPlay(cocos2d::CCObject* sender) = ios 0x3fb8bc, win 0x308cf0, imac 0x421ef0, m1 0x39d360;
    void onSecretDoor(cocos2d::CCObject* sender) = win 0x308130, imac 0x424140, m1 0x39f3a0, ios 0x3fd2c8;
    void onTheTower(cocos2d::CCObject* sender) = win 0x307150, m1 0x39e83c, imac 0x423570, ios 0x3fc938;
    void playCoinEffect() = win 0x307a50, imac 0x423cf0, m1 0x39ef58;
    void playStep2();
    void playStep3() = win 0x309160;
    void updateDynamicPage(GJGameLevel*) = ios 0x3fa3a0, win 0x305d00, m1 0x39b524, imac 0x420050;

    bool m_isBusy;
    GJGameLevel* m_level;
    cocos2d::CCMenu* m_levelMenu;
    cocos2d::extension::CCScale9Sprite* m_levelDisplay;
    cocos2d::CCLabelBMFont* m_normalProgressLabel;
    cocos2d::CCLabelBMFont* m_practiceProgressLabel;
    cocos2d::CCLabelBMFont* m_nameLabel;
    cocos2d::CCLabelBMFont* m_starsLabel;
    float m_progressWidth;
    cocos2d::CCSprite* m_normalProgressBar;
    cocos2d::CCSprite* m_practiceProgressBar;
    cocos2d::CCSprite* m_difficultySprite;
    cocos2d::CCSprite* m_starsSprite;
    cocos2d::CCSize m_levelDisplaySize;
    cocos2d::CCArray* m_coins;
    cocos2d::CCArray* m_dynamicObjects;
    cocos2d::CCArray* m_levelObjects;
    cocos2d::CCArray* m_progressObjects;
    GameObject* m_coinObject;
    cocos2d::CCSprite* m_secretDoor;
}

[[link(android)]]
class LevelSearchLayer : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, DemonFilterDelegate {
    LevelSearchLayer() {
        m_type = 0;
        m_searchInput = nullptr;
        m_starsSprite = nullptr;
        m_difficultySprites = nullptr;
        m_lengthSprites = nullptr;
        m_difficultyDict = nullptr;
        m_lastDifficultySprite = nullptr;
        m_demonTypeButton = nullptr;
    }
    ~LevelSearchLayer() = win inline, m1 0x53cfb8, imac 0x610b50, ios 0x54c6c {
        CC_SAFE_RELEASE(m_difficultyDict);
        CC_SAFE_RELEASE(m_difficultySprites);
        CC_SAFE_RELEASE(m_lengthSprites);
    }

    static LevelSearchLayer* create(int) = win inline, ios 0x54d78, imac 0x610ff0, m1 0x53d2e0 {
        auto ret = new LevelSearchLayer();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(int) = win 0x2f75f0, m1 0x53d1e8, imac 0x610eb0, ios 0x54d2c;

    virtual void keyBackClicked() = win 0x2fdcc0, m1 0x542290, imac 0x615fa0, ios 0x588e4;
    virtual void textInputOpened(CCTextInputNode*) = win 0x2fad00, m1 0x5417d0, imac 0x6154f0, ios 0x58198;
    virtual void textInputClosed(CCTextInputNode*) = win 0x2fae50, m1 0x5418b0, imac 0x6155c0, ios 0x58284;
    virtual void textChanged(CCTextInputNode*) = win 0x2fae50, m1 0x5419c0, imac 0x615690, ios 0x58304;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x2facc0, imac 0x615480, m1 0x541738, ios 0x58100;
    virtual void demonFilterSelectClosed(int) = win 0x2f97f0, imac 0x614f70, m1 0x541280, ios 0x57db8;

    bool checkDiff(int);
    bool checkTime(int);
    void clearFilters() = win 0x2f9ca0, m1 0x54146c, imac 0x6151b0;
    void confirmClearFilters(cocos2d::CCObject*) = m1 0x53f9d8, imac 0x6136c0;
    inline char const* getDiffKey(int diff) {
        return cocos2d::CCString::createWithFormat("D%i", diff)->getCString();
    }
    gd::string getLevelLenKey() = win 0x14b660;
    gd::string getSearchDiffKey() = m1 0x541e38, imac 0x615b40;
    GJSearchObject* getSearchObject(SearchType, gd::string) = win 0x2fb290, m1 0x541ae4, imac 0x615780, ios 0x58384;
    inline char const* getTimeKey(int time) {
        return cocos2d::CCString::createWithFormat("T%i", time)->getCString();
    }
    bool init(int) = ios 0x54e44, win 0x2f7740, imac 0x611100, m1 0x53d3b8;
    void onBack(cocos2d::CCObject* sender) = win 0x2fd040, ios 0x57a90, imac 0x614a90, m1 0x540dc8;
    void onClearFreeSearch(cocos2d::CCObject* sender) = win 0x2fd000, imac 0x613e40, m1 0x540128;
    void onClose(cocos2d::CCObject* sender) = win inline {
        m_searchInput->onClickTrackNode(false);
    }
    void onFollowed(cocos2d::CCObject* sender) = win 0x2fcac0;
    void onFriends(cocos2d::CCObject* sender) = win 0x2fca00;
    void onLatestStars(cocos2d::CCObject* sender) = win 0x2fc940;
    void onMagic(cocos2d::CCObject* sender) = win 0x2fc7c0;
    void onMoreOptions(cocos2d::CCObject* sender) = win 0x2f9a80, m1 0x53fab8, imac 0x6137a0;
    void onMostDownloaded(cocos2d::CCObject* sender) = win 0x2fc4c0;
    void onMostLikes(cocos2d::CCObject* sender) = win 0x2fc580;
    void onMostRecent(cocos2d::CCObject* sender) = win 0x2fc880, m1 0x540424, imac 0x614110, ios 0x572dc;
    void onSearch(cocos2d::CCObject* sender) = ios 0x56c98, win 0x2fcb80, m1 0x53fe68, imac 0x613ba0;
    void onSearchMode(cocos2d::CCObject* sender) = win 0x2f9a30, imac 0x6137c0, m1 0x53fad4;
    void onSearchUser(cocos2d::CCObject* sender) = ios 0x56ddc, win 0x2fcdc0, m1 0x53fff0, imac 0x613d10;
    void onSpecialDemon(cocos2d::CCObject* sender) = win 0x2f9690, m1 0x540b44, imac 0x614830;
    void onStarAward(cocos2d::CCObject* sender);
    void onSuggested(cocos2d::CCObject* sender) = win 0x2fc640, m1 0x54034c, imac 0x614030, ios 0x57194;
    void onTrending(cocos2d::CCObject* sender) = win 0x2fc700;
    void toggleDifficulty(cocos2d::CCObject*) = win 0x2fd3c0, imac 0x614340, m1 0x540640, ios 0x57610;
    void toggleDifficultyNum(int, bool) = win 0x2fd720, imac 0x614ae0, m1 0x540e20, ios 0x57ae8;
    void toggleStar(cocos2d::CCObject*) = win 0x2fd0b0, m1 0x540d30, imac 0x614a10, ios 0x579f8;
    void toggleTime(cocos2d::CCObject*);
    void toggleTimeNum(int, bool) = win 0x2fdb30, imac 0x614c70, m1 0x540fb4, ios 0x57bec;
    void updateSearchLabel(char const*) = win 0x2faf20;

    int m_type;
    CCTextInputNode* m_searchInput;
    cocos2d::CCSprite* m_starsSprite;
    cocos2d::CCArray* m_difficultySprites;
    cocos2d::CCArray* m_lengthSprites;
    cocos2d::CCDictionary* m_difficultyDict;
    cocos2d::CCSprite* m_lastDifficultySprite;
    CCMenuItemSpriteExtra* m_demonTypeButton;
}

[[link(android)]]
class LevelSelectLayer : cocos2d::CCLayer, BoomScrollLayerDelegate, DynamicScrollDelegate {
    // virtual ~LevelSelectLayer();
    LevelSelectLayer() {
        m_width = 0.f;
        m_backgroundSprite = nullptr;
        m_groundLayer = nullptr;
        m_scrollLayer = nullptr;
        m_unknown = 0;
        m_scrolls = 0;
        m_masterDetectiveUnlocked = false;
    }

    static LevelSelectLayer* create(int page) = ios 0x3f97fc, win inline, m1 0x39a698, imac 0x41f070 {
        auto ret = new LevelSelectLayer();
        if (ret->init(page)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(int) = ios 0x3f97b0, win 0x303710, imac 0x41ef50, m1 0x39a5b0;

    virtual void keyBackClicked() = win 0x304ed0, imac 0x421c50, m1 0x39d1bc, ios 0x3fb7b0;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x304f20, imac 0x421cf0, m1 0x39d250, ios 0x3fb7bc;
    virtual void updatePageWithObject(cocos2d::CCObject*, cocos2d::CCObject*) = win 0x304650, imac 0x41ffe0, m1 0x39b4a8, ios 0x3fa324;
    virtual void scrollLayerMoved(cocos2d::CCPoint) = win 0x3046c0, imac 0x4217c0, m1 0x39cd34, ios 0x3fb4a4;

    cocos2d::ccColor3B colorForPage(int page) = win 0x3049e0, imac 0x421bd0, m1 0x39d12c, ios 0x3fb724;
    cocos2d::ccColor3B getColorValue(int, int, float) = win inline, imac 0x421930, m1 0x39ce88, ios 0x3fb5f4 {
        auto modifier = std::clamp(p2 * 2.f / 3.f - .2f, 0.f, 1.f);
        auto color1 = this->colorForPage(p0);
        auto color2 = this->colorForPage(p1);
        if (modifier > .8f) modifier = 1.f;
        else if (modifier < .2f) modifier = 0.f;
        else modifier = (modifier - .2f) / .6f;
        auto complement = 1.f - modifier;
        cocos2d::ccColor3B ret;
        ret.r = color1.r * complement + color2.r * modifier;
        ret.g = color1.g * complement + color2.g * modifier;
        ret.b = color1.b * complement + color2.b * modifier;
        return ret;
    }
    bool init(int page) = ios 0x3f98b8, win 0x303840, m1 0x39a760, imac 0x41f160;
    void onBack(cocos2d::CCObject* sender) = win 0x304e80, m1 0x39b424, imac 0x41ff50, ios 0x3fa2c0;
    void onDownload(cocos2d::CCObject* sender) = win 0x304600, m1 0x39b36c, imac 0x41fea0, ios 0x3fa208;
    void onInfo(cocos2d::CCObject* sender) = ios 0x3fa308, win 0x305000, m1 0x39b46c, imac 0x41ffa0;
    void onNext(cocos2d::CCObject* sender) = win 0x304d80, m1 0x39b3f4, imac 0x41ff20, ios 0x3fa290;
    void onPlay(cocos2d::CCObject* sender) = win inline, imac 0x421ea0, m1 0x39d328, ios 0x3fb884 {
        if (!*reinterpret_cast<bool*>(geode::base::get() + 0x6a3048)) {
            static_cast<LevelPage*>(m_scrollLayer->getPage(m_scrollLayer->m_page))->onPlay(nullptr);
        }
    }
    void onPrev(cocos2d::CCObject* sender) = win 0x304e00, m1 0x39b3c4, imac 0x41fef0, ios 0x3fa260;
    void tryShowAd();

    float m_width;
    cocos2d::CCSprite* m_backgroundSprite;
    GJGroundLayer* m_groundLayer;
    BoomScrollLayer* m_scrollLayer;
    int m_unknown;
    int m_scrolls;
    bool m_masterDetectiveUnlocked;
}

[[link(android)]]
class LevelSettingsDelegate {
    virtual void levelSettingsUpdated() {}
}

[[link(android)]]
class LevelSettingsLayer : FLAlertLayer, ColorSelectDelegate, SelectArtDelegate, SelectSettingDelegate, FLAlertLayerProtocol, CustomSongLayerDelegate, TextInputDelegate {
    // virtual ~LevelSettingsLayer();

    static LevelSettingsLayer* create(LevelSettingsObject*, LevelEditorLayer*) = win 0x309ca0, imac 0x259580, m1 0x205e3c, ios 0x17c8d0;

    virtual void registerWithTouchDispatcher() = win 0x30c750, m1 0x20916c, imac 0x25cd20, ios 0x17f49c;
    virtual void keyBackClicked() = win 0x30d5f0, imac 0x25d650, m1 0x2099b8, ios 0x17f9dc;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xc3110, m1 0x2095dc, imac 0x25d1b0, ios 0x17f6c4;
    virtual void colorSelectClosed(cocos2d::CCNode*) = win 0x30ce80, imac 0x25d0d0, m1 0x209524, ios 0x17f60c;
    virtual void selectArtClosed(SelectArtLayer*) = win 0x30d2a0, imac 0x25d3e0, m1 0x2097b8, ios 0x17f7dc;
    virtual void selectSettingClosed(SelectSettingLayer*) = win 0x30c5d0, imac 0x25cb50, m1 0x208fb0, ios 0x17f2f4;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x2091c4, imac 0x25cd70, ios 0x17f4f4;
    virtual void textChanged(CCTextInputNode*) = win 0x30ca80, imac 0x25cdb0, m1 0x2091e0, ios 0x17f510;

    void createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint) = win 0x30c7d0, m1 0x20897c, imac 0x25c430;
    bool init(LevelSettingsObject*, LevelEditorLayer*) = ios 0x17c954, win 0x309e90, imac 0x259780, m1 0x205fa4;
    void onBGArt(cocos2d::CCObject* sender) = win 0x30d060, m1 0x20872c, imac 0x25c190;
    void onClose(cocos2d::CCObject* sender) = win 0x30cc50, imac 0x25c320, m1 0x20888c, ios 0x17ed10;
    void onCol(cocos2d::CCObject* sender);
    void onDisable(cocos2d::CCObject* sender);
    void onFGArt(cocos2d::CCObject* sender) = win 0x30d130, m1 0x208830, imac 0x25c2c0;
    void onGameplayMode(cocos2d::CCObject* sender) = win 0x30c3a0, imac 0x25c010, m1 0x2085a4, ios 0x17eb20;
    void onGArt(cocos2d::CCObject* sender) = win 0x30d0b0, imac 0x25c1d0, m1 0x208768;
    void onLiveEdit(cocos2d::CCObject* sender) = win 0x30cd90, imac 0x25bfd0, m1 0x208560;
    void onMode(cocos2d::CCObject* sender) = win 0x30c570, imac 0x25c710, m1 0x208c90;
    void onOptionToggle(cocos2d::CCObject* sender) = win 0x30ca40, imac 0x25c660, m1 0x208be8;
    void onSelectFont(cocos2d::CCObject* sender) = win 0x30d180;
    void onSelectMode(cocos2d::CCObject* sender) = imac 0x25ceb0, m1 0x209300;
    void onSelectSpeed(cocos2d::CCObject* sender) = imac 0x25cf70, m1 0x2093c0;
    void onSettings(cocos2d::CCObject* sender) = win 0x30c4b0, m1 0x208ccc, imac 0x25c760;
    void onShowPicker(cocos2d::CCObject* sender) = win 0x30cde0, imac 0x25bbe0, m1 0x2081d8;
    void onSpeed(cocos2d::CCObject* sender) = win 0x30c520, imac 0x25c6d0, m1 0x208c54;
    void showPicker(ColorAction*) = m1 0x2094f0, imac 0x25d090;
    void updateColorSprite(ColorChannelSprite*) = win 0x30cf00, imac 0x25d100, m1 0x209530;
    void updateColorSprites() = win 0x30ce90, imac 0x25bc60, m1 0x20824c;
    void updateGameplayModeButtons() = win 0x30c3e0, imac 0x25c0e0, m1 0x208678, ios 0x17eb60;

    SongSelectNode* m_songSelectNode;
    Speed m_speed;
    ColorChannelSprite* m_bgColorSprite;
    ColorChannelSprite* m_gColorSprite;
    ColorChannelSprite* m_g2ColorSprite;
    ColorChannelSprite* m_lineColorSprite;
    ColorChannelSprite* m_mgColorSprite;
    ColorChannelSprite* m_mg2ColorSprite;
    cocos2d::CCSprite* m_moreColorsSprite;
    cocos2d::CCSprite* m_backgroundSprite;
    cocos2d::CCSprite* m_groundSprite;
    cocos2d::CCSprite* m_middlegroundSprite;
    cocos2d::CCSprite* m_speedSprite;
    cocos2d::CCSprite* m_modeSprite;
    LevelSettingsObject* m_settingsObject;
    void* m_unkPtr;
    cocos2d::CCArray* m_modeToggles;
    cocos2d::CCArray* m_speedButtons;
    LevelSettingsDelegate* m_delegate;
    LevelEditorLayer* m_editorLayer;
    CCTextInputNode* m_orderInput;
    CCTextInputNode* m_channelInput;
    CCMenuItemSpriteExtra* m_classicButton;
    CCMenuItemSpriteExtra* m_platformerButton;
    bool m_disableInput;
}

[[link(android)]]
class LevelSettingsObject : cocos2d::CCNode {
    // virtual ~LevelSettingsObject();

    static LevelSettingsObject* create() = ios 0x357b18, win 0x2dd1f0, m1 0xc52ec, imac 0xdda50;
    static LevelSettingsObject* objectFromDict(cocos2d::CCDictionary*) = win 0x2deff0, imac 0xf7bf0, m1 0xdb500, ios 0x366c8c;
    static LevelSettingsObject* objectFromString(gd::string const& str) = win inline, m1 0xc6d84, imac 0xdf940, ios 0x359028 {
        return objectFromDict(GameToolbox::stringSetupToDict(str, ","));
    }

    virtual bool init() = win 0x2dd320, imac 0xf7a30, m1 0xdb388, ios 0x366b34;

    gd::string getSaveString() = win 0x2dd630, m1 0xcacc0, imac 0xe3e10, ios 0x35bf4c;
    void setupColorsFromLegacyMode(cocos2d::CCDictionary*) = win 0x2e0840, imac 0xf93f0, m1 0xdcba8;
    bool shouldUseYSection() = win inline {
        return m_platformerMode || m_dynamicLevelHeight;
    }

    GJEffectManager* m_effectManager;
    // property kA2
    int m_startMode;
    // property kA4
    Speed m_startSpeed;
    // property kA3
    bool m_startMini;
    // property kA8
    bool m_startDual;
    // property kA28
    bool m_mirrorMode;
    // property kA29
    bool m_rotateGameplay;
    // property kA10
    bool m_twoPlayerMode;
    // property kA22
    bool m_platformerMode;
    // property kA13
    float m_songOffset;
    // property kA15
    bool m_fadeIn;
    // property kA16
    bool m_fadeOut;
    // property kA46
    bool m_dontReset;
    // property kA6
    int m_backgroundIndex;
    // property kA7
    int m_groundIndex;
    // property kA18
    int m_fontIndex;
    // property kA25
    int m_middleGroundIndex;
    // property kA9
    bool m_startsWithStartPos;
    // property kA11
    bool m_isFlipped;
    // property kA20
    bool m_reverseGameplay;
    // property kA21
    bool m_disableStartPos;
    // property kA19
    int m_targetOrder;
    // property kA26
    int m_targetChannel;

    GJGameLevel* m_level;
    // property kA14
    gd::string m_guidelineString;

    bool m_unkBool;
    // property kS39
    int m_colorPage;
    // property kA17
    int m_groundLineIndex;
    // property kA23
    bool m_propertykA23;
    // property kA24
    bool m_propertykA24;
    // property kA43
    bool m_noTimePenalty;
    // property kA44
    int m_propertykA44;
    // property kA35
    bool m_resetCamera;
    // property kA36
    int m_spawnGroup;
    // property kA27
    bool m_allowMultiRotation;
    // property kA31
    bool m_enablePlayerSqueeze;
    // property kA32
    bool m_fixGravityBug;
    // property kA33
    bool m_fixNegativeScale;
    // property kA34
    bool m_fixRobotJump;
    // property kA37
    bool m_dynamicLevelHeight;
    // property kA38
    bool m_sortGroups;
    // property kA39
    bool m_fixRadiusCollision;
    // property kA40
    bool m_enable22Changes;
    // property kA41
    bool m_allowStaticRotate;
    // property kA42
    bool m_reverseSync;
    // property kA45
    bool m_decreaseBoostSlide;
}

[[link(android)]]
class LevelTools {
    static int artistForAudio(int) = win 0x314320, m1 0x44d108, imac 0x4eb660, ios 0x1ab81c;
    static gd::string base64DecodeString(gd::string);
    static gd::string base64EncodeString(gd::string str) = win inline, imac 0x4ee880, m1 0x44fd1c, ios 0x1ac7f4 {
        return str.empty() ? "" : cocos2d::ZipUtils::base64URLEncode(str);
    }
    static cocos2d::CCDictionary* createStarPackDict() = m1 0x44fd8c, imac 0x4ee920;
    static gd::string fbURLForArtist(int) = win 0x316430, m1 0x44df44, imac 0x4ec970, ios 0x1ab8f4;
    static int getAudioBPM(int);
    static gd::string getAudioFileName(int) = win 0x313750, imac 0x4eb120, m1 0x44ca9c, ios 0x1ab7f0;
    static gd::string getAudioString(int) = win 0x316950, imac 0x4ecd10, m1 0x44e26c, ios 0x1ab920;
    static gd::string getAudioTitle(int) = win 0x312bd0, imac 0x4eab80, m1 0x44c364, ios 0x1ab7c0;
    static bool getLastGameplayReversed() = win inline, m1 0x44f67c, imac 0x4ee310, ios inline {
        return *reinterpret_cast<bool*>(geode::base::get() + GEODE_WINDOWS(0x6a4c06) GEODE_IOS(0x85f0c0));
    }
    static bool getLastGameplayRotated() = win inline, m1 0x44f688, imac 0x4ee320, ios 0x1ac47c {
        return *reinterpret_cast<bool*>(geode::base::get() + 0x6a4c05);
    }
    static float getLastTimewarp() = win inline, m1 0x44f670, imac 0x4ee300, ios 0x1ac470 {
        return *reinterpret_cast<float*>(geode::base::get() + 0x69c198);
    }
    static GJGameLevel* getLevel(int, bool) = win 0x310320, imac 0x4e8620, m1 0x44a514, ios 0x1aa160;
    static gd::unordered_set<int> getLevelList() = m1 0x44a138, imac 0x4e82b0;
    static SongInfoObject* getSongObject(int id) = win inline, m1 0x44f694, imac 0x4ee330, ios 0x1ac488 {
        auto artistID = artistForAudio(id);
        return SongInfoObject::create(id, getAudioTitle(id), nameForArtist(artistID), artistID, 0.f, "", "", "", 0, "", false, 0, -1);
    }
    static TodoReturn moveTriggerObjectsToArray(cocos2d::CCArray*, cocos2d::CCDictionary*, int);
    static gd::string nameForArtist(int) = win 0x3143f0, m1 0x44d12c, imac 0x4eb680, ios 0x1ab840;
    static gd::string ngURLForArtist(int) = win 0x315a10, m1 0x44d960, imac 0x4ec2c0, ios 0x1ab89c;
    static TodoReturn offsetBPMForTrack(int);
    static cocos2d::CCPoint posForTime(float time, cocos2d::CCArray* objects, int speed, bool platformer, int& rotateChannel) = win inline, m1 0x44f1bc, imac 0x4edd00, ios 0x1abfb4 {
        return posForTimeInternal(time, objects, speed, platformer, false, false, rotateChannel, 0);
    }
    static cocos2d::CCPoint posForTimeInternal(float time, cocos2d::CCArray* objects, int speed, bool platformer, bool ignoreMinorAxis, bool ignoreWarp, int& rotateChannel, int) = win 0x317ea0, m1 0x44f1cc, imac 0x4edd30, ios 0x1abfc4;
    static void sortChannelOrderObjects(cocos2d::CCArray*, cocos2d::CCDictionary*, bool) = win 0x3187f0;
    static void sortSpeedObjects(cocos2d::CCArray*, GJBaseGameLayer*) = win 0x318a70, m1 0x450524, imac 0x4ef100;
    static float timeForPos(cocos2d::CCPoint position, cocos2d::CCArray* objects, int speed, int order, int channel, bool songTriggers, bool platformer, bool ignoreWarp, bool ignoreRotate, int id) = win 0x3174c0, m1 0x44e860, imac 0x4ed380, ios 0x1ab94c;
    static TodoReturn toggleDebugLogging(bool);
    static gd::string urlForAudio(int) = win 0x3146f0, m1 0x44d310, imac 0x4eb7f0, ios 0x1ab86c;
    static TodoReturn valueForSpeedMod(int);
    static bool verifyLevelIntegrity(gd::string, int) = win 0x318500, imac 0x4ee730, m1 0x44fb5c, ios 0x1ac6e8;
    static gd::string ytURLForArtist(int) = win 0x315eb0, m1 0x44dc2c, imac 0x4ec5c0, ios 0x1ab8c8;
}

[[link(android)]]
class LevelUpdateDelegate {
    virtual void levelUpdateFinished(GJGameLevel*, UpdateResponse) {}
    virtual void levelUpdateFailed(int) {}
}

[[link(android)]]
class LevelUploadDelegate {
    virtual void levelUploadFinished(GJGameLevel*) {}
    virtual void levelUploadFailed(GJGameLevel*) {}
}

[[link(android)]]
class LikeItemDelegate {
    virtual void likedItem(LikeItemType, int, bool) {}
}

[[link(android)]]
class LikeItemLayer : FLAlertLayer {
    // virtual ~LikeItemLayer();
    LikeItemLayer() = win inline {
        m_itemType = LikeItemType::Unknown;
        m_itemID = 0;
        m_commentSourceID = 0;
        m_likeDelegate = nullptr;
    }

    static LikeItemLayer* create(LikeItemType, int, int) = win 0x318ea0, m1 0x513b04, imac 0x5e1410, ios 0x24bbb0;

    virtual void keyBackClicked() = win 0x84650, m1 0x514184, imac 0x5e1b00, ios 0x24c0fc;

    bool init(LikeItemType, int, int) = win 0x318fa0, imac 0x5e1580, m1 0x513c28, ios 0x24bc88;
    void onClose(cocos2d::CCObject* sender) = win 0x84620, imac 0x5e1950, m1 0x513fdc, ios 0x24c034;
    void onDislike(cocos2d::CCObject* sender) = win 0x319380, m1 0x514090, imac 0x5e1a00, ios 0x24c078;
    void onLike(cocos2d::CCObject* sender) = win 0x319370, imac 0x5e1980, m1 0x514018, ios 0x24c070;
    void triggerLike(bool isLiked) = win 0x319390, m1 0x514108, imac 0x5e1a80, ios 0x24c080;

    LikeItemType m_itemType;
    int m_itemID;
    int m_commentSourceID;
    LikeItemDelegate* m_likeDelegate;
}

[[link(android)]]
class ListButtonBar : cocos2d::CCNode {
    // virtual ~ListButtonBar();

    static ListButtonBar* create(cocos2d::CCArray* items, cocos2d::CCPoint position, int columns, int rows, float columnOffset, float rowOffset, float offset, float arrowOffset, int arrowType) = ios 0x16b2d8, win 0x6ad70, imac 0x3de040, m1 0x360e74;

    int getPage();
    void goToPage(int) = win 0x6b380, m1 0x361584, imac 0x3de7c0;
    bool init(cocos2d::CCArray* items, cocos2d::CCPoint position, int columns, int rows, float columnOffset, float rowOffset, float offset, float arrowOffset, int arrowType) = win 0x6ae80, imac 0x3de110, m1 0x360f58;
    void onLeft(cocos2d::CCObject* sender) = win 0x6b430, m1 0x361460, imac 0x3de670, ios 0x16b8c4;
    void onRight(cocos2d::CCObject* sender) = win 0x6b410, m1 0x3614ec, imac 0x3de710, ios 0x16b8d4;

    BoomScrollLayer* m_scrollLayer;
    cocos2d::CCArray* m_pages;
    ListButtonBarDelegate* m_delegate;
    bool m_useMoveAnimation;
}

[[link(android)]]
class ListButtonBarDelegate {
    virtual void listButtonBarSwitchedPage(ListButtonBar*, int) {}
}

[[link(android)]]
class ListButtonPage : cocos2d::CCLayer {
    // virtual ~ListButtonPage();

    static ListButtonPage* create(cocos2d::CCArray* items, cocos2d::CCPoint position, int columns, int rows, float columnOffset, float rowOffset, float offset) = win 0x6b450, imac 0x3de560, m1 0x361358;

    bool init(cocos2d::CCArray* items, cocos2d::CCPoint position, int columns, int rows, float columnOffset, float rowOffset, float offset) = imac 0x3de840, m1 0x361600;
}

[[link(android)]]
class ListCell : TableViewCell {
    // virtual ~ListCell();
    ListCell(char const*, float, float);

    virtual bool init() = m1 0x291c48, imac 0x2f9370, ios 0x1d139c { return true; }
    virtual void draw() = win 0x3c6f0, imac 0x2f9400, m1 0x291c94, ios 0x1d13a4;

    void loadFromObject(cocos2d::CCObject*, int, int, int) {}
    void updateBGColor(int) {}

    int m_unk230;
}

[[link(android)]]
class ListUploadDelegate {
    virtual void listUploadFinished(GJLevelList*) {}
    virtual void listUploadFailed(GJLevelList*, int) {}
}

[[link(android)]]
class LoadingCircle : cocos2d::CCLayerColor {
    // virtual ~LoadingCircle();
    LoadingCircle() {
        m_sprite = nullptr;
        m_parentLayer = nullptr;
        m_fade = false;
    }

    static LoadingCircle* create() = ios 0x392c28, win 0x6b840, m1 0x414ec0, imac 0x4abd70;

    virtual bool init() = win 0x6b940, imac 0x4abee0, m1 0x414fbc, ios 0x392d14;
    virtual void draw() = win 0x6bbc0, imac 0x4ac130, m1 0x415220, ios 0x392f78;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) { return true; }
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) {}
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) {}
    virtual void registerWithTouchDispatcher() = win 0x6bbe0, imac 0x4ac150, m1 0x415230, ios 0x392f88;

    void fadeAndRemove() = ios 0x392ec4, win 0x6bb20, m1 0x415170, imac 0x4ac0a0;

    void setFade(bool fade) {
        m_fade = fade;
    }

    inline void setParentLayer(cocos2d::CCLayer* layer) {
        m_parentLayer = layer;
    }
    void show() = ios 0x392dd0, win 0x6ba20, m1 0x415078, imac 0x4abfb0;

    cocos2d::CCSprite* m_sprite;
    cocos2d::CCLayer* m_parentLayer;
    bool m_fade;
}

[[link(android)]]
class LoadingCircleSprite : cocos2d::CCSprite {
    // virtual ~LoadingCircleSprite();

    /// Create a Loading Circle Sprite with a spinning action
    /// @param spinSpeed A speed modifier, higher is faster and lower is slower
    static LoadingCircleSprite* create(float spinSpeed) = ios 0x392fc0, win 0x6bc30, m1 0x415268, imac 0x4ac190;

    cocos2d::CCAction* fadeInCircle(bool, float, float) = ios 0x3930ec, win 0x6bd30, imac 0x4ac330, m1 0x4153e4;
    void hideCircle() = win inline, m1 0x415470, imac 0x4ac3b0 {
        this->stopActionByTag(0);
        this->setOpacity(0);
        this->setVisible(false);
    }

    bool init(float spinSpeed) = ios 0x393058, win inline, m1 0x41534c, imac 0x4ac270 {
        if (!CCSprite::initWithFile("loadingCircle.png")) return false;
        this->setBlendFunc({ GL_SRC_ALPHA, GL_ONE });
        this->runAction(cocos2d::CCRepeatForever::create(cocos2d::CCRotateBy::create(1.f, spinSpeed * 360.f)));
        return true;
    }
}

[[link(android)]]
class LoadingLayer : cocos2d::CCLayer {
    // virtual ~LoadingLayer();

    static LoadingLayer* create(bool) = m1 0x31e254, imac 0x38f480;
    static cocos2d::CCScene* scene(bool) = win 0x3194f0, m1 0x31e17c, imac 0x38f380;

    const char* getLoadingString() = win 0x31a930, imac 0x38fcf0, m1 0x31ea9c, ios 0x1d7514;
    bool init(bool) = ios 0x1d6e44, win 0x319600, imac 0x38f560, m1 0x31e314;
    void loadAssets() = ios 0x1d75f0, win 0x319ea0, imac 0x38fdb0, m1 0x31eb80;
    void loadingFinished() = imac 0x390550, m1 0x31f290, win inline, ios 0x1d7c84 {
        cocos2d::CCDirector::sharedDirector()->replaceScene(MenuLayer::scene(m_fromRefresh));
    }
    void updateProgress(int) = win 0x319e20, m1 0x31eb14, imac 0x38fd50;

    bool m_unknown;
    bool m_unknown2;
    int m_loadStep;
    cocos2d::CCLabelBMFont* m_caption;
    TextArea* m_textArea;
    cocos2d::CCSprite* m_sliderBar;
    float m_sliderGrooveXPos;
    float m_sliderGrooveHeight;
    bool m_fromRefresh;
}

[[link(android)]]
class LocalLevelManager : GManager {
    inline static LocalLevelManager* get() {
        return LocalLevelManager::sharedState();
    }
    // virtual ~LocalLevelManager();

    static LocalLevelManager* sharedState() = ios 0x1c92a8, win 0x31b070, imac 0x5df020, m1 0x511bc0;

    virtual bool init() = win 0x31b110, m1 0x511d40, imac 0x5df1c0, ios 0x1c93c8;
    virtual void encodeDataTo(DS_Dictionary*) = win 0x31bae0, m1 0x512f54, imac 0x5e0610, ios 0x1c9fd8;
    virtual void dataLoaded(DS_Dictionary*) = win 0x31bb40, imac 0x5e0670, m1 0x512fac, ios 0x1ca030;
    virtual void firstLoad() = win 0x31ba50, m1 0x512ed8, imac 0x5e0580, ios 0x1c9fa0;

    cocos2d::CCDictionary* getAllLevelsInDict() = win 0x31b4e0, m1 0x5123d8, imac 0x5df9a0, ios 0x1c978c;
    cocos2d::CCArray* getAllLevelsWithName(gd::string name) = win inline, m1 0x5125d0, imac 0x5dfbd0, ios 0x1c98c0 {
        auto ret = cocos2d::CCArray::create();
        for (int i = 0; i < m_localLevels->count(); i++) {
            auto level = static_cast<GJGameLevel*>(m_localLevels->objectAtIndex(i));
            if (level->m_levelName == name) ret->addObject(level);
        }
        return ret;
    }
    cocos2d::CCArray* getCreatedLevels(int folder) = win inline, m1 0x512cdc, imac 0x5e0390, ios 0x1c9dbc {
        if (folder < 1) return m_localLevels;
        auto ret = cocos2d::CCArray::create();
        CCObject* obj;
        CCARRAY_FOREACH(m_localLevels, obj) {
            if (!obj) return ret;
            if (static_cast<GJGameLevel*>(obj)->m_levelFolder == folder) ret->addObject(obj);
        }
        return ret;
    }
    cocos2d::CCArray* getCreatedLists(int folder) = win inline, m1 0x512e48, imac 0x5e04f0, ios 0x1c9f14 {
        if (folder < 1) return m_localLists;
        auto ret = cocos2d::CCArray::create();
        CCObject* obj;
        CCARRAY_FOREACH(m_localLists, obj) {
            if (!obj) return ret;
            if (static_cast<GJLevelList*>(obj)->m_folder == folder) ret->addObject(obj);
        }
        return ret;
    }
    cocos2d::CCDictionary* getLevelsInNameGroups() = win inline, m1 0x512288, imac 0x5df820, ios 0x1c9644 {
        auto dict = cocos2d::CCDictionary::create();
        for (int i = 0; i < m_localLevels->count(); i++) {
            auto level = static_cast<GJGameLevel*>(m_localLevels->objectAtIndex(i));
            auto key = level->m_levelName;
            auto arr = static_cast<cocos2d::CCArray*>(dict->objectForKey(key));
            if (!arr) {
                arr = cocos2d::CCArray::create();
                dict->setObject(arr, key);
            }
            arr->addObject(level);
        }
        return dict;
    }
    gd::string getMainLevelString(int id) = win 0x31b3d0, m1 0x512100, imac 0x5df620, ios 0x1c9594;
    void markLevelsAsUnmodified() = win inline, m1 0x512c3c, imac 0x5e02f0, ios 0x1c9d1c {
        for (int i = 0; i < m_localLevels->count(); i++) {
            static_cast<GJGameLevel*>(m_localLevels->objectAtIndex(i))->m_hasBeenModified = false;
        }
    }
    void moveLevelToTop(GJGameLevel* level) = win inline, m1 0x512afc, imac 0x5e01a0, ios 0x1c9c30 {
        if (level && m_localLevels->containsObject(level)) {
            level->retain();
            m_localLevels->removeObject(level);
            m_localLevels->insertObject(level, 0);
            level->release();
            this->updateLevelOrder();
        }
    }
    void reorderLevels() = win inline, m1 0x512c8c, imac 0x5e0340, ios 0x1c9d6c {
        if (m_localLevels->count() != 0) {
            qsort(m_localLevels->data->arr, m_localLevels->data->num, sizeof(GJGameLevel*), [](void const* a, void const* b) {
                auto la = *static_cast<GJGameLevel* const*>(a);
                auto lb = *static_cast<GJGameLevel* const*>(b);
                return lb->m_levelIndex - la->m_levelIndex;
            });
        }
    }
    void reorderLists() = win inline, m1 0x512df8, imac 0x5e04a0, ios 0x1c9ec4 {
        if (m_localLists->count() != 0) {
            qsort(m_localLists->data->arr, m_localLists->data->num, sizeof(GJLevelList*), [](void const* a, void const* b) {
                auto la = *static_cast<GJLevelList* const*>(a);
                auto lb = *static_cast<GJLevelList* const*>(b);
                return lb->m_listOrder - la->m_listOrder;
            });
        }
    }
    void tryLoadMainLevelString(int id) = ios 0x1c9408, m1 0x511d80, imac 0x5df200, win 0x31b150;
    int updateLevelOrder() = win 0x31b9d0, m1 0x512bb0, imac 0x5e0270, ios 0x1c9ca0;
    void updateLevelRevision() = win 0x31b640, m1 0x512700, imac 0x5dfd20, ios 0x1c99a0;
    int updateListOrder() = win inline, m1 0x512d6c, imac 0x5e0420, ios 0x1c9e48 {
        int i = 0;
        for (; i < m_localLists->count(); i++) {
            static_cast<GJLevelList*>(m_localLists->objectAtIndex(m_localLists->count() - 1 - i))->m_listOrder = i;
        }
        return i;
    }

    cocos2d::CCArray* m_localLevels;
    cocos2d::CCArray* m_localLists;
    gd::unordered_map<int, gd::string> m_mainLevels;
}

[[link(android)]]
class MapPackCell : TableViewCell {
    // virtual ~MapPackCell();
    MapPackCell(char const*, float, float);

    virtual bool init() = win 0xb1480, m1 0x1efea8, imac 0x2406c0, ios 0x111f90;
    virtual void draw() = win 0xad710, imac 0x240b70, m1 0x1f0368, ios 0x112380;

    void loadFromMapPack(GJMapPack*) = ios 0x105e40, win 0xb14e0, imac 0x232f20, m1 0x1e2f88;
    void onClaimReward(cocos2d::CCObject* sender) = m1 0x1f00b0, imac 0x2408c0;
    void onClick(cocos2d::CCObject* sender) = win 0xb2000;
    void playCompleteEffect() = win 0xb21d0, imac 0x240940, m1 0x1f012c;
    void reloadCell() = win inline, m1 0x1ec340, imac 0x23c5f0 {
        this->loadFromMapPack(m_mapPack);
    }
    void updateBGColor(int index) = ios 0x10690c, imac 0x233a80, m1 0x1e3a74, win inline {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        m_backgroundLayer->setOpacity(255);
    }

    GJMapPack* m_mapPack;
    CCMenuItemSpriteExtra* m_viewButton;
    CCMenuItemSpriteExtra* m_rewardButton;
    cocos2d::CCArray* m_rewardLabels;
    cocos2d::CCArray* m_rewardSprites;
}

[[link(android)]]
class MapSelectLayer : cocos2d::CCLayer {
    // virtual ~MapSelectLayer();

    static MapSelectLayer* create();
    static cocos2d::CCScene* scene();

    virtual void update(float) = imac 0x256ee0, m1 0x203b7c;
    virtual bool init() = m1 0x202d08, imac 0x255f90;
    virtual void onExit() = imac 0x2571a0, m1 0x203e38;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = imac 0x257850, m1 0x20441c;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = imac 0x257960, m1 0x204518;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x2046e8, imac 0x257b80;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x2047f8, imac 0x257c60;
    virtual void registerWithTouchDispatcher() = m1 0x204814, imac 0x257ca0;
    virtual void keyBackClicked() = m1 0x203d60, imac 0x2570c0;
    virtual void scrollWheel(float, float) = imac 0x256ca0, m1 0x20395c;

    bool checkTouchMonster(cocos2d::CCPoint);
    cocos2d::CCObject* createObjectAtPoint(cocos2d::CCPoint);
    cocos2d::CCPoint getConstrainedMapPos(cocos2d::CCPoint);
    void onBack(cocos2d::CCObject* sender);

    GJBigSprite* m_bigSprite;
    SimplePlayer* m_player;
    cocos2d::CCNode* m_mainLayer;
    bool m_unloadTexturesOnExit;
    bool m_backPressed;
    bool m_blockExit;
    bool m_inTouch;
    double m_lastTouchTime;
    bool m_editMode;
    cocos2d::CCPoint m_lastTouchPos;
    cocos2d::CCPoint m_mapPos;
    cocos2d::CCArray* m_monsters;
    LevelEditorLayer* m_editorLayer;
}

[[link(android), depends(GJGroundLayer), depends(GameToolbox)]]
class MenuGameLayer : cocos2d::CCLayer {
    // virtual ~MenuGameLayer();
    MenuGameLayer() = ios 0x394760 {
        m_videoOptionsOpen = false;
        m_deltaCount = 0.f;
        m_isDestroyingPlayer = false;
        m_initCount = 0;
        m_playerObject = nullptr;
        m_backgroundSprite = nullptr;
        m_groundLayer = nullptr;
        m_backgroundSpeed = 0.f;
    }

    static MenuGameLayer* create() = win inline, m1 0x4486c4, imac 0x4e65f0, ios 0x39325c {
        auto ret = new MenuGameLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void update(float) = win 0x31d380, imac 0x4e78b0, m1 0x449800, ios 0x394154;
    virtual bool init() = win 0x31c560, m1 0x4487ac, imac 0x4e6700, ios 0x3932d0;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x31e740, m1 0x449cf4, imac 0x4e7e20, ios 0x3945e4;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x449e0c, imac 0x4e7f40, ios 0x3946fc {}
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x449e14, imac 0x4e7f60, ios 0x394704 {}
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x449e1c, imac 0x4e7f80, ios 0x39470c;
    virtual void registerWithTouchDispatcher() = win 0x31e8f0, m1 0x449e38, imac 0x4e7fc0, ios 0x394728;

    void destroyPlayer() = ios 0x3943f4, win 0x31e480, imac 0x4e7c20, m1 0x449af8;
    cocos2d::ccColor3B getBGColor(int) = ios 0x3936e8, win 0x31cde0, imac 0x4e6b60, m1 0x448bc0;
    void resetPlayer() = ios 0x393aec, win 0x31d850, imac 0x4e7060, m1 0x4490e0;
    void tryJump(float) = ios 0x393788, win 0x31d0b0, m1 0x448cc4, imac 0x4e6c00;
    void updateColor(float) = ios 0x3939d4, win 0x31cc90, imac 0x4e6e60, m1 0x448f34;
    void updateColors() = win inline, ios 0x3940dc, imac 0x4e7840, m1 0x449788 {
        m_groundLayer->updateGround01Color(m_groundLayer->m_ground1Sprite->getColor());
        if (m_groundLayer->m_ground2Sprite) {
            m_groundLayer->updateGround02Color(m_groundLayer->m_ground2Sprite->getColor());
        }
    }

    bool m_videoOptionsOpen;
    float m_deltaCount;
    bool m_isDestroyingPlayer;
    int m_initCount;
    cocos2d::CCPoint m_unused1;
    PlayerObject* m_playerObject;
    cocos2d::CCSprite* m_backgroundSprite;
    GJGroundLayer* m_groundLayer;
    float m_backgroundSpeed;
}

[[link(android)]]
class MenuLayer : cocos2d::CCLayer, FLAlertLayerProtocol, GooglePlayDelegate {
    // static MenuLayer* create() = ios 0x2655a4;
    // virtual ~MenuLayer();

    static MenuLayer* get() {
        return GameManager::get()->m_menuLayer;
    }

    static cocos2d::CCScene* scene(bool isVideoOptionsOpen) = ios 0x265504, win 0x31ea40, m1 0x30d470, imac 0x37ccf0;

    virtual bool init() = win 0x31ebd0, imac 0x37ceb0, m1 0x30d620, ios 0x265660;
    virtual void keyBackClicked() = win 0x3210c0, imac 0x37edc0, m1 0x30f4b0, ios 0x267184;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x3214a0, imac 0x37f0a0, m1 0x30f738, ios 0x26740c;
    virtual void googlePlaySignedIn() = win 0x320ac0, imac 0x37eb30, m1 0x30f264, ios 0x266fe8;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x321290, imac 0x37edf0, m1 0x30f4bc, ios 0x267244;

    void endGame() = ios 0x2673f0, win 0x321510, imac 0x37f070, m1 0x30f72c;
    void firstNetworkTest() = win 0x320430, m1 0x30f08c, imac 0x37e910, ios 0x266ecc;
    void onAchievements(cocos2d::CCObject* sender) = ios 0x2669e8, win 0x320960, m1 0x30eaa8, imac 0x37e370;
    void onCreator(cocos2d::CCObject* sender) = ios 0x266990, win 0x320e70, m1 0x30ea2c, imac 0x37e2e0;
    void onDaily(cocos2d::CCObject* sender) = ios 0x266e68, win 0x3201e0, m1 0x30f028, imac 0x37e8b0;
    void onDiscord(cocos2d::CCObject* sender) = win 0x320860, m1 0x30ed18, imac 0x37e5a0, ios 0x266c34; 
    void onEveryplay(cocos2d::CCObject* sender) {}
    void onFacebook(cocos2d::CCObject* sender) = win 0x3207e0, m1 0x30ec88, imac 0x37e520, ios 0x266ba4;
    void onFreeLevels(cocos2d::CCObject* sender);
    void onFullVersion(cocos2d::CCObject* sender);
    void onGameCenter(cocos2d::CCObject* sender);
    void onGarage(cocos2d::CCObject* sender) = ios 0x266938, win 0x320f00, m1 0x30e9b0, imac 0x37e250;
    void onGooglePlayGames(cocos2d::CCObject* sender) = m1 0x30f23c, imac 0x37eb00;
    void onMoreGames(cocos2d::CCObject* sender) = ios 0x266c58, win 0x320880, imac 0x37e5c0, m1 0x30ed3c;
    void onMyProfile(cocos2d::CCObject* sender) = ios 0x266cdc, win 0x320720, m1 0x30ee98, imac 0x37e710;
    void onNewgrounds(cocos2d::CCObject* sender) = m1 0x30eb8c, imac 0x37e430, win 0x320f90, ios 0x266acc;
    void onOptions(cocos2d::CCObject* sender) = ios 0x266a34, win 0x320bb0, imac 0x37e3b0, m1 0x30eaf4;
    void onOptionsInstant() = win 0x320bc0, m1 0x30d5b8, imac 0x37ce50, ios 0x265658;
    void onPlay(cocos2d::CCObject* sender) = ios 0x2668dc, win 0x320b10, m1 0x30e930, imac 0x37e1c0;
    void onQuit(cocos2d::CCObject* sender) = ios 0x267188, win 0x3210d0, imac 0x37e640, m1 0x30edc0;
    void onRobTop(cocos2d::CCObject* sender) = win 0x3207c0, m1 0x30ec64, imac 0x37e500, ios 0x266b80;
    void onStats(cocos2d::CCObject* sender) = ios 0x266a80, win 0x320d50, imac 0x37e3f0, m1 0x30eb40;
    void onTrailer(cocos2d::CCObject* sender) = m1 0x30f470, imac 0x37ed80;
    void onTwitch(cocos2d::CCObject* sender) = win 0x320840, m1 0x30ecf4, imac 0x37e580, ios 0x266c10;
    void onTwitter(cocos2d::CCObject* sender) = win 0x320800, m1 0x30ecac, imac 0x37e540, ios 0x266bc8;
    void onYouTube(cocos2d::CCObject* sender) = win 0x320820, m1 0x30ecd0, imac 0x37e560, ios 0x266bec;
    void openOptions(bool videoOptions) = win 0x320bd0, m1 0x30f360, imac 0x37ec50, ios 0x2670e0;
    void showGCQuestion() = m1 0x30f144, imac 0x37e9f0;
    void showMeltdownPromo() {}
    void showTOS() = win 0x320600, m1 0x30f044, imac 0x37e8d0;
    void syncPlatformAchievements(float);
    void tryShowAd(float) = m1 0x30f0a4, imac 0x37e940;
    void updateUserProfileButton() = win 0x320330, m1 0x30eef8, imac 0x37e770, ios 0x266d3c;
    void videoOptionsClosed() = win inline {
        m_menuGameLayer->m_videoOptionsOpen = false;
    }
    void videoOptionsOpened() = win inline, m1 0x30f3e8, imac 0x37ecd0, ios 0x267168 {
        m_menuGameLayer->m_videoOptionsOpen = true;
    }
    void willClose() = ios 0x26548c, win 0x3211f0, m1 0x30d274, imac 0x37ca10;

    bool m_showingTOS;
    cocos2d::CCSprite* m_gpSprite;
    cocos2d::CCSprite* m_viewProfileSprite;
    cocos2d::CCLabelBMFont* m_profileLabel;
    CCMenuItemSpriteExtra* m_profileButton;
    void* m_unknown;
    MenuGameLayer* m_menuGameLayer;
}

[[link(android)]]
class MessageListDelegate {
    virtual void loadMessagesFinished(cocos2d::CCArray*, char const*) {}
    virtual void loadMessagesFailed(char const*, GJErrorCode) {}
    virtual void forceReloadMessages(bool) {}
    virtual void setupPageInfo(gd::string, char const*) {}
}

[[link(android)]]
class MessagesProfilePage : FLAlertLayer, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate, MessageListDelegate {
    // virtual ~MessagesProfilePage();

    static MessagesProfilePage* create(bool) = win 0x3216b0, imac 0x21ba30, m1 0x1ce7c4, ios 0x1ccbe4;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x1d0144, imac 0x21d550, ios 0x1ce01c;
    virtual void keyBackClicked() = win 0x322cb0, imac 0x21d520, m1 0x1d0138, ios 0x1ce010;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x322a50, imac 0x21d0f0, m1 0x1cfc98, ios 0x1cdd48;
    virtual void onClosePopup(UploadActionPopup*) = win 0x13d2a0, imac 0x21d160, m1 0x1cfd28, ios 0x1cddd8;
    virtual void uploadActionFinished(int, int) = win 0x322a80, m1 0x1cfdb0, imac 0x21d1d0, ios 0x1cde48;
    virtual void uploadActionFailed(int, int) = win 0x13d460, m1 0x1cff7c, imac 0x21d390, ios 0x1cdf30;
    virtual void loadMessagesFinished(cocos2d::CCArray*, char const*) = win 0x323300, imac 0x21d830, m1 0x1d03f8, ios 0x1ce208;
    virtual void loadMessagesFailed(char const*, GJErrorCode) = win 0x13dc50, imac 0x21d950, m1 0x1d0504, ios 0x1ce314;
    virtual void forceReloadMessages(bool) = win 0x323450, imac 0x21da60, m1 0x1d0630, ios 0x1ce3b0;
    virtual void setupPageInfo(gd::string, char const*) = win 0x323470, imac 0x21daa0, m1 0x1d0664, ios 0x1ce3e4;

    void deleteSelected() = win 0x3227d0, m1 0x1cfac8, imac 0x21cf00, ios 0x1cdb9c;
    bool init(bool) = win 0x321850, m1 0x1ce900, imac 0x21bbe0, ios 0x1ccc58;
    bool isCorrect(char const*) = win 0x13d500, m1 0x1d017c, imac 0x21d590, ios 0x1ce054;
    void loadPage(int) = win 0x322d60, m1 0x1cf6e0, imac 0x21caa0, ios 0x1cd974;
    void onClose(cocos2d::CCObject* sender) = win 0x322bf0, m1 0x1cf258, imac 0x21c5b0, ios 0x1cd594;
    void onDeleteSelected(cocos2d::CCObject* sender) = win 0x3224e0, m1 0x1cf3f4, imac 0x21c760, ios 0x1cd6e0;
    void onNextPage(cocos2d::CCObject* sender) = win 0x323610, m1 0x1cf670, imac 0x21ca10, ios 0x1cd904;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x323620, m1 0x1cf664, imac 0x21c9f0, ios 0x1cd8f8;
    void onSentMessages(cocos2d::CCObject* sender) = win 0x322450, m1 0x1cf368, imac 0x21c6d0, ios 0x1cd654;
    void onToggleAllObjects(cocos2d::CCObject* sender) = win 0x322270, m1 0x1cf5c0, imac 0x21c940, ios 0x1cd860;
    void onUpdate(cocos2d::CCObject* sender) = win 0x322350, m1 0x1cf67c, imac 0x21ca30, ios 0x1cd910;
    void setupCommentsBrowser(cocos2d::CCArray*) = win 0x323170, m1 0x1d0294, imac 0x21d6c0, ios 0x1ce0a4;
    void untoggleAll() = win 0x322cc0, m1 0x1d00c4, imac 0x21d4b0, ios 0x1cdfa8;
    void updateLevelsLabel() = win inline, m1 0x1d0bb0, imac 0x21e050, ios inline {
        auto end = m_pageEndIdx + m_pageStartIdx;
        auto count = m_itemCount;
        if (end > count) end = count;
        m_levelsLabel->setString(cocos2d::CCString::createWithFormat("%i to %i of %i", m_pageStartIdx + 1, end, count)->getCString());
    }
    void updatePageArrows() = win inline, m1 0x1d0b4c, imac 0x21dfd0, ios inline {
        m_prevButton->setVisible(m_pageStartIdx != 0);
        m_nextButton->setVisible(m_pageEndIdx + m_pageStartIdx < m_itemCount);
    }

    bool m_sentMessages;
    gd::string m_messageKey;
    cocos2d::CCLabelBMFont* m_levelsLabel;
    cocos2d::CCLabelBMFont* m_errorLabel;
    GJCommentListLayer* m_listLayer;
    LoadingCircle* m_loadingCircle;
    UploadActionPopup* m_actionPopup;
    void* m_unkPtr;
    CCMenuItemSpriteExtra* m_nextButton;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_refreshButton;
    CCMenuItemToggler* m_toggleAllToggler;
    int m_itemCount;
    int m_pageStartIdx;
    int m_pageEndIdx;
    int m_page;
    bool m_toggledAll;
}

[[link(android)]]
class MoreOptionsLayer : FLAlertLayer, TextInputDelegate, GooglePlayDelegate, GJDropDownLayerDelegate {
    MoreOptionsLayer() = ios 0xf6a54 {
        m_page = -1;
        m_toggleCount = 0;
        m_pageCount = 0;
        m_gpSignInBtn = nullptr;
        m_gpSignOutBtn = nullptr;
        m_categoryLabel = nullptr;
    }
    ~MoreOptionsLayer() = win inline, m1 0x6997a8, imac 0x785690, ios 0xf071c {
        CC_SAFE_RELEASE(m_objects);
        CC_SAFE_RELEASE(m_variables);
        auto gpm = GooglePlayManager::sharedState();
        if (gpm->m_delegate2 == this) gpm->m_delegate2 = nullptr;
    }

    static MoreOptionsLayer* create() = ios 0xf0558, win inline, imac 0x785240, m1 0x6993f0 {
        auto ret = new MoreOptionsLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x35da20, imac 0x785810, m1 0x69989c, ios 0xf0800;
    virtual void keyBackClicked() = win 0x360c90, imac 0x788ba0, m1 0x69cb6c, ios 0xf2ba0;
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, m1 0x69cb78, imac 0x788bd0, ios 0xf2bac;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, m1 0x69cc48, imac 0x788c90, ios 0xf2c18;
    virtual void googlePlaySignedIn() = win 0x360ca0, m1 0x69cd00, imac 0x788d40, ios 0xf2c78;
    virtual void dropDownLayerWillClose(GJDropDownLayer*) = win 0x3607f0, m1 0x69ca48, imac 0x788a20, ios 0xf2ac4;

    void addToggle(char const*, char const*, char const*) = win 0x35ee10, m1 0x69aba0, imac 0x786b10;
    int countForPage(int);
    void goToPage(int) = ios 0xf2024, win 0x35f890, imac 0x787750, m1 0x69b78c;
    void incrementCountForPage(int);
    const char* infoKey(int);
    cocos2d::CCLayer* layerForPage(int);
    const char* layerKey(int);
    cocos2d::CCPoint nextPosition(int);
    const char* objectKey(int);
    cocos2d::CCArray* objectsForPage(int);
    void offsetToNextPage();
    void onClose(cocos2d::CCObject* sender) = win 0x360b30, m1 0x69b6c8, imac 0x787670;
    void onFMODDebug(cocos2d::CCObject* sender) = win 0x3606a0, m1 0x69b39c, imac 0x787360, ios 0xf1e00;
    void onGPSignIn(cocos2d::CCObject* sender);
    void onGPSignOut(cocos2d::CCObject* sender);
    void onInfo(cocos2d::CCObject* sender);
    void onKeybindings(cocos2d::CCObject* sender) = win 0xdba40, m1 0x69bc4c, imac 0x787c40;
    void onNextPage(cocos2d::CCObject* sender);
    void onParental(cocos2d::CCObject* sender);
    void onPrevPage(cocos2d::CCObject* sender);
    void onSongBrowser(cocos2d::CCObject* sender) = win 0x360630, m1 0x69b344, imac 0x787300, ios 0xf1da8;
    void onToggle(cocos2d::CCObject* sender) = win 0x35fe30;
    const char* pageKey(int);
    void toggleGP();

    int m_page;
    int m_toggleCount;
    int m_pageCount;
    cocos2d::CCDictionary* m_variables;
    cocos2d::CCDictionary* m_objects;
    CCMenuItemSpriteExtra* m_leftBtn;
    CCMenuItemSpriteExtra* m_rightBtn;
    CCTextInputNode* m_offsetInput;
    CCMenuItemSpriteExtra* m_gpSignInBtn;
    CCMenuItemSpriteExtra* m_gpSignOutBtn;
    cocos2d::CCLabelBMFont* m_categoryLabel;
}

[[link(android)]]
class MoreSearchLayer : FLAlertLayer, TextInputDelegate {
    MoreSearchLayer() {}
    ~MoreSearchLayer() = win inline, m1 0x542554, imac 0x6162b0, ios 0x58b00 {
        CC_SAFE_RELEASE(m_commonSongNodes);
        CC_SAFE_RELEASE(m_normalSongNodes);
        CC_SAFE_RELEASE(m_customSongNodes);
    }

    static MoreSearchLayer* create() = ios 0x57e9c, win inline, m1 0x541374, imac 0x615070 {
        auto ret = new MoreSearchLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    void audioNext(cocos2d::CCObject* sender) = win 0x301c60, imac 0x618230, m1 0x5441d0, ios 0x5a488;
    void audioPrevious(cocos2d::CCObject* sender) = win 0x301d80, imac 0x6181c0, m1 0x54415c, ios 0x5a444;
    void createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint) = win 0x302730;
    void onClose(cocos2d::CCObject* sender) = ios 0x59c50, win 0x302990, imac 0x617a10, m1 0x543960;
    void onCoins(cocos2d::CCObject* sender);
    void onCompleted(cocos2d::CCObject* sender);
    void onEpic(cocos2d::CCObject* sender);
    void onFeatured(cocos2d::CCObject* sender);
    void onFollowed(cocos2d::CCObject* sender);
    void onFriends(cocos2d::CCObject* sender);
    void onInfo(cocos2d::CCObject* sender) = win 0x3025e0, m1 0x54423c, imac 0x6182a0;
    void onLegendary(cocos2d::CCObject* sender);
    void onMythic(cocos2d::CCObject* sender);
    void onNoStar(cocos2d::CCObject* sender);
    void onOriginal(cocos2d::CCObject* sender);
    void onSongFilter(cocos2d::CCObject* sender) = ios 0x5a0d8, win 0x3012c0, imac 0x617e50, m1 0x543dfc;
    void onSongMode(cocos2d::CCObject* sender) = ios 0x5a2e8, win 0x301fe0, imac 0x618070, m1 0x54400c;
    void onTwoPlayer(cocos2d::CCObject* sender);
    void onUncompleted(cocos2d::CCObject* sender);
    void selectSong(int songID) = win 0x301ea0, imac 0x618510, m1 0x544498, ios 0x5a66c;
    void toggleSongNodes(bool, bool) = win 0x3024a0, imac 0x6183d0, m1 0x544394;
    void updateAudioLabel() = win 0x3019a0, m1 0x5444e0, imac 0x618560, ios 0x5a6b4;
    
    virtual bool init() = win 0x2fe020, imac 0x616620, m1 0x542794, ios 0x58bc4;
    virtual void keyBackClicked() = win 0x302d90, imac 0x6187f0, m1 0x5447b8, ios 0x5a8b8;
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, m1 0x544630, imac 0x618680, ios 0x5a7ec;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, m1 0x544700, imac 0x618740, ios 0x5a858;

    cocos2d::CCLabelBMFont* m_audioTrackName;
    CCMenuItemSpriteExtra* m_songLeftBtn;
    CCMenuItemSpriteExtra* m_songRightBtn;
    CCMenuItemSpriteExtra* m_normalBtn;
    CCMenuItemSpriteExtra* m_customBtn;
    CCTextInputNode* m_enterSongID;
    cocos2d::CCArray* m_commonSongNodes;
    cocos2d::CCArray* m_normalSongNodes;
    cocos2d::CCArray* m_customSongNodes;
}

[[link(android)]]
class MoreVideoOptionsLayer : FLAlertLayer, TextInputDelegate {
    MoreVideoOptionsLayer() {
        m_page = 0;
        m_toggleCount = 0;
        m_pageCount = 0;
        m_fpsInput = nullptr;
        m_fpsNodes = nullptr;
    }
    ~MoreVideoOptionsLayer() = win inline, m1 0x69ebbc, imac 0x78aeb0, ios 0xf444c {
        CC_SAFE_RELEASE(m_values);
        CC_SAFE_RELEASE(m_variables);
    }

    static MoreVideoOptionsLayer* create() = win inline, m1 0x69e710, imac 0x78a9a0, ios 0xf4170 {
        auto ret = new MoreVideoOptionsLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x362eb0, imac 0x78b270, m1 0x69ee4c, ios 0xf4504;
    virtual void keyBackClicked() = win 0x3657d0, m1 0x6a0f54, imac 0x78d440, ios 0xf5950;

    void addToggle(char const* label, char const* key, char const* description) = win 0x3639b0, m1 0x69f288, imac 0x78b6e0, ios 0xf491c;
    int countForPage(int) = win 0x364010;
    void goToPage(int) = win 0x364430;
    void incrementCountForPage(int);
    const char* infoKey(int);
    cocos2d::CCLayer* layerForPage(int) = win 0x364270;
    const char* layerKey(int);
    cocos2d::CCPoint nextPosition(int);
    const char* objectKey(int);
    cocos2d::CCArray* objectsForPage(int) = win 0x3640e0;
    void onApplyFPS(cocos2d::CCObject* sender) = win 0x3652b0, m1 0x6a0da4, imac 0x78d2a0;
    void onClose(cocos2d::CCObject* sender) = win 0x365780, m1 0x69f814, imac 0x78bca0, ios 0xf4cb4;
    void onInfo(cocos2d::CCObject* sender) = win 0x3655a0, m1 0x6a09a8, imac 0x78cea0, ios 0xf573c;
    void onNextPage(cocos2d::CCObject* sender) = win 0x364410, m1 0x69f878, imac 0x78bd10, ios 0xf4d18;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x364420, m1 0x69f86c, imac 0x78bcf0, ios 0xf4d0c;
    void onToggle(cocos2d::CCObject* sender) = win 0x364840, m1 0x69ff90, imac 0x78c4a0, ios 0xf519c;
    const char* pageKey(int);
    void updateFPSButtons() = win 0x3651e0;

    int m_page;
    int m_toggleCount;
    int m_pageCount;
    cocos2d::CCDictionary* m_values;
    cocos2d::CCDictionary* m_variables;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
    CCTextInputNode* m_fpsInput;
    cocos2d::CCArray* m_fpsNodes;
}

[[link(android)]]
class MPLobbyLayer : cocos2d::CCLayer, GJMPDelegate, UploadPopupDelegate, UploadActionDelegate, FLAlertLayerProtocol, TextInputDelegate {
    // virtual ~MPLobbyLayer();

    static MPLobbyLayer* create(int);
    static cocos2d::CCScene* scene(int);

    virtual void keyBackClicked() = imac 0x480e20, m1 0x3eedb0;
    virtual void keyDown(cocos2d::enumKeyCodes) = imac 0x481620, m1 0x3ef4f0;
    virtual void joinLobbyFinished(int) = imac 0x480fa0, m1 0x3eef10;
    virtual void joinLobbyFailed(int, GJMPErrorCode) = imac 0x481450, m1 0x3ef334;
    virtual void updateComments() = m1 0x3ef22c, imac 0x481320;
    virtual void didUploadMPComment(int) = imac 0x481430, m1 0x3ef31c;
    virtual void textInputOpened(CCTextInputNode*) = m1 0x3ef448, imac 0x481550;
    virtual void textInputClosed(CCTextInputNode*) = m1 0x3ef450, imac 0x481570;
    virtual void textChanged(CCTextInputNode*) = m1 0x3ef458, imac 0x481590;
    virtual void keyUp(cocos2d::enumKeyCodes) = m1 0x3ef514, imac 0x481660;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = imac 0x4815b0, m1 0x3ef460;
    virtual void uploadActionFinished(int, int) = imac 0x481680, m1 0x3ef51c;
    virtual void uploadActionFailed(int, int) = imac 0x4818b0, m1 0x3ef748;
    virtual void onClosePopup(UploadActionPopup*) = m1 0x3ef90c, imac 0x481a60;

    bool init(int);
    void onBack(cocos2d::CCObject* sender);
    void onBtn1(cocos2d::CCObject* sender) = m1 0x3eeaa0, imac 0x480b40;
    void onBtn2(cocos2d::CCObject* sender);
    void onBtn3(cocos2d::CCObject* sender);
    void onComment(cocos2d::CCObject* sender);
    void onUpdateLobby();
    void postComment();
    void tryExitLobby() = m1 0x3eee3c, imac 0x480eb0;
    void updateLobby(float);

    int m_lobbyID;
    cocos2d::CCLabelBMFont* m_lobbyLabel;
    UploadActionPopup* m_uploadPopup;
    GJCommentListLayer* m_listLayer;
    CCTextInputNode* m_commentInput;
    float m_lobbyDelay;
    bool m_awaitingLobby;
    bool m_lobbyJoined;
}

[[link(android)]]
class MultilineBitmapFont : cocos2d::CCSprite {
    MultilineBitmapFont() = ios 0x23574c {
        m_specialDescriptors = nullptr;
        m_characters = nullptr;
        m_lines = nullptr;
        m_unkInt = 0;
        m_unkBool = false;
        m_unkPtr = nullptr;
        m_height = 0;
        m_width = 0;
        m_maxWidth = 0.f;
        m_disableColor = false;
    }
    ~MultilineBitmapFont() = win inline, m1 0x3e4e60, imac 0x4764a0, ios 0x23565c {
        CC_SAFE_RELEASE(m_characters);
        CC_SAFE_RELEASE(m_lines);
        CC_SAFE_RELEASE(m_specialDescriptors);
    }

    static MultilineBitmapFont* createWithFont(char const*, gd::string, float, float, cocos2d::CCPoint, int, bool) = win inline, m1 0x3e2f44, imac 0x474390, ios 0x23415c {
        auto ret = new MultilineBitmapFont();
        if (ret->initWithFont(p0, p1, p2, p3, p4, p5, p6)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void setOpacity(unsigned char) = win 0x6c750, m1 0x3e4ad8, imac 0x476100, ios 0x235548;
    bool initWithFont(char const* font, gd::string text, float scale, float width, cocos2d::CCPoint anchor, int height, bool disableColor) = win 0x6bea0, m1 0x3e30c0, imac 0x474500, ios 0x234280;
    unsigned int moveSpecialDescriptors(int, int) = win 0x6d0a0, m1 0x3e4bb8, imac 0x476200;
    gd::string readColorInfo(gd::string) = win 0x6c7d0, m1 0x3e388c, imac 0x474e10;
    gd::string stringWithMaxWidth(gd::string, float, float) = win 0x6d130, imac 0x475b20, m1 0x3e4524;

    std::array<int, 300> m_hugeIntArray;
    cocos2d::CCArray* m_specialDescriptors;
    cocos2d::CCArray* m_characters;
    cocos2d::CCArray* m_lines;
    int m_unkInt;
    bool m_unkBool;
    void* m_unkPtr;
    int m_height;
    int m_width;
    cocos2d::CCPoint m_position;
    float m_maxWidth;
    bool m_disableColor;
}

[[link(android)]]
class MultiplayerLayer : cocos2d::CCLayer {
    // virtual ~MultiplayerLayer();

    static MultiplayerLayer* create();
    static cocos2d::CCScene* scene();

    virtual bool init() = imac 0x387db0, m1 0x3178dc;
    virtual void keyBackClicked() = imac 0x387ea0, m1 0x3179b4;

    void onBack(cocos2d::CCObject* sender);
    void onBtn1(cocos2d::CCObject* sender);
    void onBtn2(cocos2d::CCObject* sender);
}

[[link(android)]]
class MultiTriggerPopup : SetupTriggerPopup {
    // virtual ~MultiTriggerPopup();

    static MultiTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x450f80;

    bool init(EffectGameObject*, cocos2d::CCArray*) = m1 0x4bb4cc, imac 0x565ad0, win 0x451090;
}

[[link(android)]]
class MusicArtistObject : cocos2d::CCObject {
    // virtual ~MusicArtistObject();

    static MusicArtistObject* create(int id, gd::string name, gd::string url, gd::string youtube);

    bool init(int id, gd::string name, gd::string url, gd::string youtube);

    int m_artistID;
    gd::string m_artistName;
    gd::string m_artistURL;
    gd::string m_artistYouTube;
}

[[link(android)]]
class MusicBrowser : FLAlertLayer, MusicDownloadDelegate, TableViewCellDelegate, SetTextPopupDelegate, FLAlertLayerProtocol, SliderDelegate {
    // virtual ~MusicBrowser();

    static MusicBrowser* create(int, GJSongType) = win 0x323840, imac 0x5f6280, m1 0x5257c4;

    virtual void update(float) = win 0x3245b0, m1 0x526b40, imac 0x5f7710, ios 0x3ba55c;
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x527afc, imac 0x5f87e0, ios 0x3bb0f8;
    virtual void keyBackClicked() = win 0x325c90, m1 0x5279e0, imac 0x5f86b0, ios 0x3bb0ec;
    virtual void musicActionFinished(GJMusicAction) = win 0x324eb0, imac 0x5f8050, m1 0x5273e4, ios 0x3bacc8;
    virtual void musicActionFailed(GJMusicAction) = win 0x324f20, m1 0x5274b4, imac 0x5f8150, ios 0x3bacec;
    virtual void sliderEnded(Slider*) = win 0x324bf0, m1 0x526cbc, imac 0x5f7890, ios 0x3ba6d8;
    virtual void setTextPopupClosed(SetTextPopup*, gd::string) = win 0x325a00, imac 0x5f8400, m1 0x527748, ios 0x3baf44;
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) = win 0x325750, m1 0x5276e0, imac 0x5f8380, ios 0x3baedc;
    virtual int getSelectedCellIdx() = win 0x325780, m1 0x527738, imac 0x5f83e0, ios 0x3baf34;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x325ba0, imac 0x5f8610, m1 0x527918, ios 0x3bb07c;

    bool init(int, GJSongType) = win 0x3239f0, imac 0x5f6470, m1 0x525924;
    void onArtistFilters(cocos2d::CCObject* sender) = win 0x325b10, imac 0x5f73a0, m1 0x5267d8;
    void onClearSearch(cocos2d::CCObject* sender) = m1 0x52671c, imac 0x5f72e0;
    void onClose(cocos2d::CCObject* sender) = win 0x325c00;
    void onPage(cocos2d::CCObject* sender) = win 0x325790, imac 0x5f70b0, m1 0x526478;
    void onPlaybackControl(cocos2d::CCObject* sender) = win 0x324b90, imac 0x5f7860, m1 0x526c88;
    void onSearch(cocos2d::CCObject* sender) = win 0x3258b0, imac 0x5f71b0, m1 0x52657c;
    void onTagFilters(cocos2d::CCObject* sender) = win 0x325aa0, imac 0x5f7340, m1 0x526770;
    void onUpdateLibrary(cocos2d::CCObject* sender) = m1 0x526518, imac 0x5f7140;
    void setupList(MusicSearchResult*) = win 0x325050, imac 0x5f7a00, m1 0x526e10;
    void setupMusicBrowser() = m1 0x526d3c, imac 0x5f7920;
    void setupSongControls() = win 0x3248b0, m1 0x52684c, imac 0x5f7410;
    void sliderChanged(cocos2d::CCObject* sender);
    void trySetupMusicBrowser() = m1 0x526ad8, imac 0x5f76a0;
    void updatePageLabel() = m1 0x5275cc, imac 0x5f8280;

    GJSongType m_songType;
    MusicSearchResult* m_searchResult;
    GJCommentListLayer* m_listLayer;
    cocos2d::CCLabelBMFont* m_infoLabel;
    cocos2d::CCLabelBMFont* m_pageLabel;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
    CCMenuItemSpriteExtra* m_refreshButton;
    CCMenuItemSpriteExtra* m_clearSearchButton;
    CCMenuItemSpriteExtra* m_tagFilterButton;
    CCMenuItemSpriteExtra* m_artistFilterButton;
    LoadingCircleSprite* m_circleSprite;
    int m_songID;
    int m_libraryVersion;
    bool m_gettingURL;
    bool m_selectedCell;
    MusicBrowserDelegate* m_delegate;
    Slider* m_playSlider;
    cocos2d::CCLabelBMFont* m_playLabel;
    CCMenuItemSpriteExtra* m_playButton;
    bool m_autoUpdating;
}

[[link(android)]]
class MusicBrowserDelegate {
    virtual void musicBrowserClosed(MusicBrowser*) {}
}

[[link(android)]]
class MusicDelegateHandler : cocos2d::CCNode {
    // virtual ~MusicDelegateHandler();
    MusicDelegateHandler() {
        m_delegate = nullptr;
    }

    static MusicDelegateHandler* create(MusicDownloadDelegate*) = win inline {
        auto ret = new MusicDelegateHandler();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(MusicDownloadDelegate*) = win inline {
        if (!cocos2d::CCNode::init()) return false;
        m_delegate = p0;
        return true;
    }

    MusicDownloadDelegate* m_delegate;
}

[[link(android)]]
class MusicDownloadDelegate {
    virtual void loadSongInfoFinished(SongInfoObject*) {}
    virtual void loadSongInfoFailed(int, GJSongError) {}
    virtual void downloadSongFinished(int) {}
    virtual void downloadSongFailed(int, GJSongError) {}
    virtual void songStateChanged() {}
    virtual void downloadSFXFinished(int) {}
    virtual void downloadSFXFailed(int, GJSongError) {}
    virtual void musicActionFinished(GJMusicAction) {}
    virtual void musicActionFailed(GJMusicAction) {}
}

[[link(android)]]
class MusicDownloadManager : cocos2d::CCNode, PlatformDownloadDelegate {
    static cocos2d::CCDictionary* responseToDict(gd::string, char const*) = win 0x328e50, m1 0x4c8b00, imac 0x5749f0, ios 0x158138;
    // virtual ~MusicDownloadManager();

    static MusicDownloadManager* sharedState() = ios 0x156e20, win 0x3277b0, imac 0x572a00, m1 0x4c6c2c;

    virtual bool init() = win 0x327d90, imac 0x573980, m1 0x4c7abc, ios 0x157718;

    void addDLToActive(char const* tag, cocos2d::CCObject* obj) = win 0x3299f0, imac 0x577e40, m1 0x4cba2c, ios 0x15a104;
    void addDLToActive(char const* tag) = win inline, m1 0x4c8778, imac 0x574660, ios inline {
        addDLToActive(tag, cocos2d::CCNode::create());
    }
    void addMusicDownloadDelegate(MusicDownloadDelegate*) = win 0x327f30, m1 0x4c7c3c, imac 0x573b30, ios 0x157810;
    SongInfoObject* addSongObjectFromString(gd::string) = win 0x3285f0, m1 0x4c881c, imac 0x574700, ios 0x157f54;
    void clearSong(int songID) = ios 0x159868, win inline, m1 0x4cae00, imac 0x577170 {
        const char* key = cocos2d::CCString::createWithFormat("%i", songID)->getCString();
        m_songObjects->removeObjectForKey(key);
    }
    void clearUnusedSongs() = win 0x329160, m1 0x4cb000, imac 0x577330, ios 0x1599b8;
    cocos2d::CCDictionary* createArtistsInfo(gd::string) = win 0x328c50, m1 0x4c9d78, imac 0x575f50, ios 0x158f58;
    void createSongsInfo(gd::string, gd::string) = win 0x3288a0, imac 0x575b00, m1 0x4c998c, ios 0x158a10;
    void dataLoaded(DS_Dictionary*) = win 0x32a450, imac 0x578e00, m1 0x4cc790, ios 0x15a848;
    void deleteSFX(int id) = win inline, m1 0x4d1e60, imac 0x57ef40, ios 0x15e438 {
        remove(this->pathForSFX(id).c_str());
    }
    void deleteSong(int id) = win inline, ios 0x159818, imac 0x577120, m1 0x4cada0 {
        remove(this->pathForSong(id).c_str());
    }
    void downloadCustomSong(int) = ios 0x159d0c, win 0x32ad40, imac 0x5778d0, m1 0x4cb4c4;
    void downloadMusicLibrary() = win 0x32b370, m1 0x4cd97c, imac 0x57a200, ios 0x15b410;
    void downloadSFX(int) = win 0x32ca80, imac 0x57d0e0, m1 0x4d01c0, ios 0x15ced4;
    void downloadSFXFailed(int, GJSongError) = win 0x32edf0, m1 0x4d06e4, imac 0x57d5f0, ios 0x15d28c;
    void downloadSFXFinished(int) = win inline, m1 0x4d0758, imac 0x57d660, ios 0x15d300 {
        for (int i = 0; i < m_musicDownloadDelegates->count(); i++) {
            static_cast<MusicDelegateHandler*>(m_musicDownloadDelegates->objectAtIndex(i))->m_delegate->downloadSFXFinished(p0);
        }
    }
    void downloadSFXLibrary() = win 0x32d220, m1 0x4d0b28, imac 0x57d9f0, ios 0x15d624;
    void downloadSong(int) = ios 0x159a58, win 0x329460, imac 0x577410, m1 0x4cb0d0;
    void downloadSongFailed(int, GJSongError) = win 0x32ed70, m1 0x4cbb38, imac 0x577f40, ios 0x15a170;
    void downloadSongFinished(int) = win inline, m1 0x4cbbac, imac 0x577fb0, ios 0x15a1e4 {
        for (int i = 0; i < m_musicDownloadDelegates->count(); i++) {
            static_cast<MusicDelegateHandler*>(m_musicDownloadDelegates->objectAtIndex(i))->m_delegate->downloadSongFinished(p0);
        }
    }
    void encodeDataTo(DS_Dictionary*) = win inline, m1 0x4cc738, imac 0x578da0, ios 0x15a7f0 {
        p0->setDictForKey("MDLM_001", m_songObjects);
        p0->setDictForKey("MDLM_003", m_MDLM003);
        p0->setIntegerForKey("MDLM_002", m_songPriority);
    }
    cocos2d::CCArray* filterMusicByArtistID(int, cocos2d::CCArray*) = win 0x32c920, m1 0x4cfe50, imac 0x57ccb0, ios 0x15ccf0;
    cocos2d::CCArray* filterMusicByTag(int, cocos2d::CCArray*) = win 0x32c9d0, m1 0x4cffa8, imac 0x57ced0, ios 0x15cd88;
    void firstSetup() = win inline, m1 0x4cc6d0, imac 0x578d40, ios 0x15a7b8 {
        if (!m_songObjects) {
            auto songObjects = cocos2d::CCDictionary::create();
            CC_SAFE_RETAIN(songObjects);
            CC_SAFE_RELEASE(m_songObjects);
            m_songObjects = songObjects;
        }
        m_songPriority = 0;
    }
    gd::string generateCustomContentURL(gd::string) = win 0x32e2e0, m1 0x4ccfdc, imac 0x5796c0, ios 0x15ad00;
    void generateResourceAssetList() = m1 0x4c7b90, imac 0x573a70, ios 0x157764;
    cocos2d::CCArray* getAllMusicArtists(OptionsObjectDelegate*) = win inline, m1 0x4cfd44, imac 0x57cb90, ios 0x15cbe8 {
        auto ret = cocos2d::CCArray::createWithCapacity(m_musicArtists->count());
        cocos2d::CCDictElement* element;
        cocos2d::CCDictElement* temp;
        if (m_musicArtists) {
            HASH_ITER(hh, m_musicArtists->m_pElements, element, temp) {
                auto object = static_cast<MusicArtistObject*>(element->getObject());
                ret->addObject(OptionsObject::create(object->m_artistID, false, object->m_artistName, p0));
            }
        }
        if (ret->count() > 1) {
            qsort(ret->data->arr, ret->data->num, sizeof(OptionsObject*), [](void const* a, void const* b) {
                auto objA = *static_cast<OptionsObject* const*>(a);
                auto objB = *static_cast<OptionsObject* const*>(b);
                return objA->m_name.compare(objB->m_name);
            });
        }
        return ret;
    }
    cocos2d::CCArray* getAllMusicObjects(GJSongType) = win inline, m1 0x4cfb30, imac 0x57c940, ios 0x15ca38 {
        auto ret = cocos2d::CCArray::createWithCapacity(m_musicObjects->count());
        cocos2d::CCDictElement* element;
        cocos2d::CCDictElement* temp;
        if (m_musicObjects) {
            if (p0 == GJSongType::Music) {
                HASH_ITER(hh, m_musicObjects->m_pElements, element, temp) {
                    ret->addObject(element->getObject());
                }
            }
            else {
                HASH_ITER(hh, m_musicObjects->m_pElements, element, temp) {
                    auto musicObject = static_cast<SongInfoObject*>(element->getObject());
                    if (musicObject->m_nongType == (int)p0) {
                        ret->addObject(musicObject);
                    }
                }
            }
        }
        return ret;
    }
    cocos2d::CCArray* getAllMusicTags(OptionsObjectDelegate*) = win inline, m1 0x4cfbec, imac 0x57ca30, ios 0x15caac {
        auto ret = cocos2d::CCArray::createWithCapacity(m_musicTags.size());
        for (auto& tag : m_musicTags) {
            ret->addObject(OptionsObject::create(tag.first, false, tag.second, p0));
        }
        if (ret->count() > 1) {
            qsort(ret->data->arr, ret->data->num, sizeof(OptionsObject*), [](void const* a, void const* b) {
                auto objA = *static_cast<OptionsObject* const*>(a);
                auto objB = *static_cast<OptionsObject* const*>(b);
                return objA->m_name.compare(objB->m_name);
            });
        }
        return ret;
    }
    cocos2d::CCArray* getAllSFXObjects(bool) = win inline, m1 0x4d1db8, imac 0x57ee80, ios 0x15e3cc {
        auto ret = cocos2d::CCArray::create();
        cocos2d::CCDictElement* element;
        cocos2d::CCDictElement* temp;
        if (m_sfxObjects) {
            if (p0) {
                HASH_ITER(hh, m_sfxObjects->m_pElements, element, temp) {
                    auto sfxObject = static_cast<SFXInfoObject*>(element->getObject());
                    if (!sfxObject->m_folder) {
                        ret->addObject(sfxObject);
                    }
                }
            }
            else {
                HASH_ITER(hh, m_sfxObjects->m_pElements, element, temp) {
                    ret->addObject(element->getObject());
                }
            }
        }
        return ret;
    }
    cocos2d::CCArray* getAllSongs() = win inline, m1 0x4cac1c, imac 0x576f80, ios 0x159740 {
        auto ret = cocos2d::CCArray::create();
        cocos2d::CCDictElement* element;
        cocos2d::CCDictElement* temp;
        if (m_songObjects) {
            HASH_ITER(hh, m_songObjects->m_pElements, element, temp) {
                ret->addObject(element->getObject());
            }
        }
        return ret;
    }
    void getCustomContentURL() = win 0x32a940, imac 0x579470, m1 0x4ccd84, ios 0x15ab1c;
    cocos2d::CCObject* getDLObject(char const* id) = win 0x39d70, m1 0x4c7f00, imac 0x573dd0, ios 0x1579ec;
    cocos2d::CCArray* getDownloadedSongs() = win 0x3290a0, m1 0x4ca930, imac 0x576c20, ios 0x1595bc;
    int getDownloadProgress(int id) = win inline, m1 0x4cbc18, imac 0x578020, ios 0x15a250 {
        if (auto dlObject = static_cast<cocos2d::extension::CCHttpRequest*>(this->getDLObject(this->getSongDownloadKey(id)))) {
            return dlObject->getDownloadProgress();
        }
        return -1;
    }
    MusicArtistObject* getMusicArtistForID(int id) = win inline, m1 0x4cfb1c, imac 0x57c920, ios 0x15ca24 {
        return m_musicArtists ? static_cast<MusicArtistObject*>(m_musicArtists->objectForKey(id)) : nullptr;
    }
    SongInfoObject* getMusicObject(int id) = win inline, m1 0x4cbd00, imac 0x5780e0, ios inline {
        return m_musicObjects ? static_cast<SongInfoObject*>(m_musicObjects->objectForKey(id)) : nullptr;
    }
    char const* getSFXDownloadKey(int id) = win inline, m1 0x4cbcd8, imac 0x5780c0, ios inline {
        return cocos2d::CCString::createWithFormat("sfx_%i", id)->getCString();
    }
    int getSFXDownloadProgress(int id) = win inline, m1 0x4cbc78, imac 0x578070, ios 0x15a2a4 {
        if (auto dlObject = static_cast<cocos2d::extension::CCHttpRequest*>(this->getDLObject(this->getSFXDownloadKey(id)))) {
            return dlObject->getDownloadProgress();
        }
        return -1;
    }
    SFXFolderObject* getSFXFolderObjectForID(int id) = win inline, m1 0x4d1b18, imac 0x57eb20, ios 0x15e280 {
        if (auto sfxObject = sharedState()->getSFXObject(id)) {
            if (sfxObject->m_folder) return static_cast<SFXFolderObject*>(sfxObject);
            if (auto folderObject = static_cast<SFXFolderObject*>(sharedState()->getSFXObject(sfxObject->m_folderID))) {
                if (folderObject->m_folder) return folderObject;
            }
        }
        return nullptr;
    }
    gd::string getSFXFolderPathForID(int, bool) = win 0x32e0c0, m1 0x4d1cec, imac 0x57edc0, ios 0x15e2ec;
    SFXInfoObject* getSFXObject(int id) = win inline, m1 0x4d1b04, imac 0x57eb00, ios 0x15e26c {
        return m_sfxObjects ? static_cast<SFXInfoObject*>(m_sfxObjects->objectForKey(id)) : nullptr;
    }
    char const* getSongDownloadKey(int id) = win inline, m1 0x4c7e7c, imac 0x573d60, ios inline {
        return cocos2d::CCString::createWithFormat("d_%i", id)->getCString();
    }
    void getSongInfo(int, bool) = ios 0x157c10, win 0x328180, imac 0x574190, m1 0x4c82e0;
    char const* getSongInfoKey(int id) = win inline, m1 0x4c7e54, imac 0x573d40, ios inline {
        return cocos2d::CCString::createWithFormat("i_%i", id)->getCString();
    }
    SongInfoObject* getSongInfoObject(int) = win 0x329b70, imac 0x574030, m1 0x4c8188, ios 0x157b4c;
    int getSongPriority() = win inline, m1 0x4c82cc, imac 0x574170, ios inline {
        return ++m_songPriority;
    }
    void handleIt(bool, gd::string, gd::string, GJHttpType) = win 0x327ca0, imac 0x572fd0, m1 0x4c7150, ios 0x157254;
    void handleItDelayed(bool, gd::string, gd::string, GJHttpType) = m1 0x4c7340, imac 0x5731a0;
    void handleItND(cocos2d::CCNode*, void*) = m1 0x4c74ac, imac 0x5732e0;
    void incrementPriorityForSong(int id) = win inline, ios 0x157b18, imac 0x574000, m1 0x4c8154 {
        if (auto songObject = this->getSongInfoObject(id)) {
            songObject->m_priority = this->getSongPriority();
        }
    }
    bool isDLActive(char const* tag) = win inline, m1 0x4c7e38, imac 0x573d20, ios inline {
        return this->getDLObject(tag) != nullptr;
    }
    bool isMusicLibraryLoaded() = win inline, m1 0x4cf4d0, imac 0x57c240, ios inline {
        return m_musicObjects && m_musicObjects->count() != 0;
    }
    bool isResourceSFX(int id) = win inline, m1 0x4cc238, imac 0x5787b0, ios inline {
        return m_resourceSfxUnorderedSet.count(id) != 0;
    }
    bool isResourceSong(int id) = win inline, m1 0x4cbd14, imac 0x578100, ios inline {
        return m_resourceSongUnorderedSet.count(id) != 0;
    }
    bool isRunningActionForSongID(int) = win 0x3280a0, m1 0x4c7db0, imac 0x573cb0, ios 0x157914;
    bool isSFXDownloaded(int) = win 0x329fb0, imac 0x5784f0, m1 0x4cbfe4, ios 0x15a418;
    bool isSFXLibraryLoaded() = win inline, m1 0x4d1830, imac 0x57e850, ios inline {
        return m_sfxObjects && m_sfxObjects->count() != 0;
    }
    bool isSongDownloaded(int) = ios 0x159650, win 0x329c80, imac 0x576cc0, m1 0x4ca9c8;
    void limitDownloadedSongs() = win inline, ios 0x159790, m1 0x4cac6c, imac 0x576fe0 {
        auto gameManager = GameManager::sharedState();
        auto menuSongID = gameManager->m_customMenuSongID;
        auto practiceSongID = gameManager->m_customPracticeSongID;
        auto downloadedSongs = this->getDownloadedSongs();
        while (downloadedSongs->count() > 50) {
            auto songObject = static_cast<SongInfoObject*>(downloadedSongs->lastObject());
            if (songObject->m_songID != menuSongID && songObject->m_songID != practiceSongID) {
                this->deleteSong(songObject->m_songID);
            }
            downloadedSongs->removeLastObject();
        }
    }
    void loadSongInfoFailed(int, GJSongError) = win 0x32ecf0, m1 0x4c87a8, imac 0x574690, ios 0x157ee0;
    void loadSongInfoFinished(SongInfoObject*) = win 0x32ec70, m1 0x4c870c, imac 0x5745f0, ios 0x157e74;
    void musicActionFailed(GJMusicAction) = win 0x32eef0, m1 0x4ccf04, imac 0x5795e0, ios 0x15ac28;
    void musicActionFinished(GJMusicAction) = win 0x32ee70, m1 0x4ccf70, imac 0x579650, ios 0x15ac94;
    gd::string nameForTagID(int id) = win inline, m1 0x4d007c, imac 0x57cfa0, ios 0x15ce1c {
        return m_musicTags.count(id) ? m_musicTags[id] : "";
    }
    void onDownloadMusicLibraryCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*) = win 0x32b600, m1 0x4cdb90, imac 0x57a3d0, ios 0x15b5f0;
    void onDownloadSFXCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*) = win 0x32cce0, imac 0x57d3b0, m1 0x4d04ac, ios 0x15d148;
    void onDownloadSFXLibraryCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*) = win 0x32d480, m1 0x4d0d10, imac 0x57db90, ios 0x15d804;
    void onDownloadSongCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*) = ios 0x159f80, win 0x329750, imac 0x577ba0, m1 0x4cb7b4;
    void onGetCustomContentURLCompleted(gd::string, gd::string) = win 0x32abb0, imac 0x5736a0, m1 0x4c7868, ios 0x15758c;
    void onGetSongInfoCompleted(gd::string, gd::string) = win 0x328460, m1 0x4c75d8, imac 0x573400, ios 0x157414;
    void onProcessHttpRequestCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*) = win 0x327ba0, ios 0x15701c, imac 0x572ca0, m1 0x4c6e34;
    void onTryUpdateMusicLibraryCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*) = win 0x32b240, m1 0x4cd82c, imac 0x57a0b0, ios 0x15b338;
    void onTryUpdateSFXLibraryCompleted(cocos2d::extension::CCHttpClient*, cocos2d::extension::CCHttpResponse*) = win 0x32d0e0, m1 0x4d09d8, imac 0x57d8a0, ios 0x15d54c;
    void parseMusicLibrary() = win 0x32b7b0, m1 0x4cddbc, imac 0x57a620, ios 0x15b72c;
    void parseSFXLibrary() = win 0x32d610, m1 0x4d0ee0, imac 0x57dd60, ios 0x15d920;
    gd::string pathForSFX(int) = win 0x32a230, imac 0x578940, m1 0x4cc334, ios 0x15a508;
    gd::string pathForSFXFolder(int) = win 0x32a0e0, imac 0x578a00, m1 0x4cc418, ios 0x15a5d4;
    gd::string pathForSong(int) = win 0x329f00, m1 0x4caf14, imac 0x577270, ios 0x1598e4;
    gd::string pathForSongFolder(int) = win 0x329db0, imac 0x578290, m1 0x4cbe10, ios 0x15a2f8;
    cocos2d::extension::CCHttpRequest* ProcessHttpGetRequest(gd::string, gd::string, cocos2d::extension::SEL_HttpResponse, int, int) = imac 0x572e60, m1 0x4c7030, win 0x327a80, ios 0x157134;
    callback void ProcessHttpRequest(gd::string, gd::string, gd::string, GJHttpType) = imac 0x572b10, m1 0x4c6cf0, win 0x327940, ios 0x156ed8;
    void removeDLFromActive(char const*) = win 0x329ac0, imac 0x573ec0, m1 0x4c7ff4, ios 0x157a58;
    void removeMusicDownloadDelegate(MusicDownloadDelegate*) = win 0x328010, m1 0x4c7d30, imac 0x573c20, ios 0x157894;
    void showTOS(FLAlertLayerProtocol*) = win 0x32a2f0, imac 0x578c60, m1 0x4cc5ec, ios 0x15a6f4;
    void songStateChanged() = win 0x328120, m1 0x4c80f8, imac 0x573fa0, ios 0x157abc;
    void stopDownload(int id) = win inline, imac 0x573d80, m1 0x4c7ea4, ios 0x157990 {
        auto key = this->getSongDownloadKey(id);
        if (auto dlObject = static_cast<cocos2d::extension::CCHttpRequest*>(this->getDLObject(key))) {
            dlObject->setShouldCancel(true);
        }
        this->removeDLFromActive(key);
    }
    void storeMusicObject(SongInfoObject*) = win inline, m1 0x4cfb10, imac 0x57c900, ios inline {
        m_musicObjects->setObject(p0, p0->m_songID);
    }
    void storeSFXInfoObject(SFXInfoObject*) = win inline, m1 0x4d1854, imac 0x57e870, ios 0x15dfbc {
        m_sfxObjects->setObject(p0, p0->m_sfxID);
        if (p0->m_folderID > 0) {
            if (auto folderObject = static_cast<SFXFolderObject*>(m_sfxObjects->objectForKey(p0->m_folderID))) {
                if (folderObject->m_folder) folderObject->m_sfxObjects->addObject(p0);
            }
        }
    }
    void tryLoadLibraries() = win inline, m1 0x4d1aa0, imac 0x57eaa0, ios 0x15e208 {
        if (m_triedToLoadLibraries) return;
        m_triedToLoadLibraries = true;
        if (!this->isSFXLibraryLoaded()) this->parseSFXLibrary();
        if (!this->isMusicLibraryLoaded()) this->parseMusicLibrary();
    }
    void tryUpdateMusicLibrary() = win 0x32afb0, m1 0x4cd618, imac 0x579ed0, ios 0x15b158;
    void tryUpdateSFXLibrary() = win 0x32ce40, m1 0x4d07c4, imac 0x57d6d0, ios 0x15d36c;

    cocos2d::CCDictionary* m_activeDownloads;
    cocos2d::CCArray* m_musicDownloadDelegates;
    cocos2d::CCDictionary* m_songObjects;
    cocos2d::CCDictionary* m_MDLM003;
    int m_songPriority;
    gd::string m_customContentURL;
    cocos2d::CCDictionary* m_sfxObjects;
    cocos2d::CCArray* m_sfxArtists;
    int m_sfxLibraryVersion;
    int m_sfxObjectCount;
    bool m_requestedSfxLibraryDownloaded;
    cocos2d::CCDictionary* m_musicObjects;
    cocos2d::CCDictionary* m_musicArtists;
    gd::map<int, gd::string> m_musicTags;
    int m_musicLibraryVersion;
    int m_musicObjectCount;
    int m_ncsSongCount;
    bool m_downloadingMusicLibrary;
    bool m_triedToLoadLibraries;
    bool m_unkBool;
    gd::unordered_set<int> m_resourceSfxUnorderedSet;
    gd::unordered_set<int> m_resourceSongUnorderedSet;
}

[[link(android)]]
class MusicSearchResult : cocos2d::CCObject, OptionsObjectDelegate {
    // virtual ~MusicSearchResult();
    MusicSearchResult() = win 0x326990;

    static MusicSearchResult* create(GJSongType songType) = win inline, m1 0x4d3d64, imac 0x581300 {
        auto ret = new MusicSearchResult();
        if (ret->init(songType)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void updateObjects(AudioSortType) = win 0x331610, imac 0x582030, m1 0x4d4740, ios 0x15ff50;
    virtual void stateChanged(OptionsObject*) = win 0x331600, m1 0x4d4710, imac 0x581fd0, ios 0x15ff20;

    cocos2d::CCArray* applyArtistFilters(cocos2d::CCArray*) = m1 0x4d41c8, imac 0x5818b0;
    cocos2d::CCArray* applyTagFilters(cocos2d::CCArray*) = win 0x331530, imac 0x581670, m1 0x4d4004;
    void createArtistFilterObjects();
    void createTagFilterObjects();
    cocos2d::CCArray* getFilesMatchingSearch(cocos2d::CCArray*, gd::string) = win 0x331b60, imac 0x582340, m1 0x4d49d8;
    bool init(GJSongType songType) = win inline, m1 0x4d3dd8, imac 0x581380 {
        m_songType = songType;
        return true;
    }
    void updateFutureCount(cocos2d::CCArray*, cocos2d::CCArray*);
    void updateObjects() = win inline {
        this->updateObjects(m_sortType);
    }

    cocos2d::CCArray* m_filterObjects;
    cocos2d::CCArray* m_tagFilterObjects;
    cocos2d::CCArray* m_artistFilterObjects;
    int m_startIndex;
    int m_audioType;
    gd::string m_searchQuery;
    AudioSortType m_sortType;
    bool m_tagFilter;
    bool m_artistFilter;
    GJSongType m_songType;
}

[[link(android)]]
class NCSInfoLayer : FLAlertLayer, FLAlertLayerProtocol {
    // virtual ~NCSInfoLayer();
    NCSInfoLayer() {}

    static NCSInfoLayer* create(CustomSongLayer*) = win inline, m1 0x1b96c0, imac 0x2044d0 {
        auto ret = new NCSInfoLayer();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x84650, m1 0x1bbda8, imac 0x206d40, ios 0x14a3ac;

    bool init(CustomSongLayer*) = win 0xc56c0, m1 0x1bb640, imac 0x2065a0;
    void onClose(cocos2d::CCObject* sender) = win 0x84620, m1 0x1bb2d0, imac 0x2062a0;
    void onLibrary(cocos2d::CCObject* sender) = win 0xc5f10, m1 0x1bbc9c, imac 0x206c40;
    void onNCS(cocos2d::CCObject* sender) = win 0xc5eb0, m1 0x1bbd00, imac 0x206cb0;
    void onNCSIO(cocos2d::CCObject* sender) = win 0xc5ed0, m1 0x1bbd24, imac 0x206cd0;
    void onNCSUsage(cocos2d::CCObject* sender) = win 0xc5ef0, m1 0x1bbd48, imac 0x206cf0;

    CustomSongLayer* m_songLayer;
}

[[link(android)]]
class NewgroundsInfoLayer : FLAlertLayer, FLAlertLayerProtocol {
    // virtual ~NewgroundsInfoLayer();

    static NewgroundsInfoLayer* create();

    virtual bool init() = win 0xc4930, imac 0x205a50, m1 0x1baac0, ios 0x1491ec;
    virtual void keyBackClicked() = win 0x84650, m1 0x1bb5c4, imac 0x206530, ios 0x149c54;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xc5690, imac 0x2064d0, m1 0x1bb56c, ios 0x149bfc;

    void onArtists(cocos2d::CCObject* sender) = win 0xc5270;
    void onChanges(cocos2d::CCObject* sender) = m1 0x1bb3ac, imac 0x206360;
    void onClose(cocos2d::CCObject* sender);
    void onGuidelines(cocos2d::CCObject* sender) = m1 0x1bb364, imac 0x206320;
    void onInfo(cocos2d::CCObject* sender) = m1 0x1bb488, imac 0x206420;
    void onNewgrounds(cocos2d::CCObject* sender) = m1 0x1bb340, imac 0x206300;
    void onSupporter(cocos2d::CCObject* sender) = m1 0x1bb388, imac 0x206340;
}

[[link(android)]]
class NodePoint : cocos2d::CCObject {
    // virtual ~NodePoint();

    static NodePoint* create(cocos2d::CCPoint);

    bool init(cocos2d::CCPoint);

    cocos2d::CCPoint m_point;
}

[[link(android)]]
class NumberInputDelegate {
    virtual void numberInputClosed(NumberInputLayer*) {}
}

[[link(android)]]
class NumberInputLayer : FLAlertLayer {
    // virtual ~NumberInputLayer();
    NumberInputLayer() {
        m_okButton = nullptr;
        m_minimum = 4;
        m_maximum = 4;
        m_delegate = nullptr;
    }

    static NumberInputLayer* create() = win inline {
        auto ret = new NumberInputLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x3326e0, imac 0x47f660, m1 0x3ed324, ios 0xfbfd4;
    virtual void registerWithTouchDispatcher() = win 0x52d60, imac 0x480110, m1 0x3ee1f0, ios 0xfc794;
    virtual void keyBackClicked() = win 0x84650, m1 0x3ee174, imac 0x4800a0, ios 0xfc718;

    void deleteLast() = win inline, m1 0x3ede24, imac 0x47fd60 {
        if (!m_inputString.empty()) {
            m_inputString = m_inputString.substr(0, m_inputString.size() - 1);
            this->updateNumberState();
        }
    }
    void inputNumber(int num) = win inline, m1 0x3ee054, imac 0x47ff90 {
        if (m_inputString.size() < m_maximum) {
            m_inputString += cocos2d::CCString::createWithFormat("%i", num)->getCString();
            this->updateNumberState();
        }
    }
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onDone(cocos2d::CCObject* sender) = win inline {
        if (m_delegate) m_delegate->numberInputClosed(this);
        this->onClose(nullptr);
    }
    void onNumber(cocos2d::CCObject* sender) = win 0x332c90, imac 0x47fc30, m1 0x3edcd0;
    void updateNumberState() = win 0x332e20, m1 0x3edd68, imac 0x47fcb0, ios 0xfc50c;

    cocos2d::CCLabelBMFont* m_inputLabel;
    CCMenuItemSpriteExtra* m_okButton;
    int m_minimum;
    int m_maximum;
    gd::string m_inputString;
    NumberInputDelegate* m_delegate;
}

[[link(android)]]
class OBB2D : cocos2d::CCNode {
    // virtual ~OBB2D();

    static OBB2D* create(cocos2d::CCPoint center, float width, float height, float rotationAngle) = win 0x6d880, m1 0x50edb8, imac 0x5dbcf0, ios 0x12fde8;

    void calculateWithCenter(cocos2d::CCPoint center, float width, float height, float rotationAngle) = win 0x6da50, imac 0x5dbe20, m1 0x50ef3c, ios 0x12ffd4;
    void computeAxes() = win inline, m1 0x50f0b4, imac 0x5dbfd0, ios 0x13014c {
        m_edges[0] = m_corners[1] - m_corners[0];
        m_edges[1] = m_corners[3] - m_corners[0];
        for (int i = 0; i < 2; i++) {
            m_edges[i] = m_edges[i] * (1.f / (m_edges[i].x * m_edges[i].x + m_edges[i].y * m_edges[i].y));
            m_projections[i] = m_corners[0].x * m_edges[i].x + m_corners[0].y * m_edges[i].y;
        }
    }
    cocos2d::CCRect getBoundingRect() = win 0x6e240, m1 0x50f6e8, imac 0x5dc6d0, ios 0x1304d8;
    bool init(cocos2d::CCPoint center, float width, float height, float rotationAngle) = win inline, m1 0x50eebc, imac 0x5dbdb0, ios 0x12ff54 {
        if (!CCNode::init()) return false;
        this->calculateWithCenter(center, width, height, rotationAngle);
        return true; 
    }
    void orderCorners() = win 0x6dd70, m1 0x50f1c8, imac 0x5dc130, ios 0x13022c;
    bool overlaps(OBB2D* other) = win inline, m1 0x50f55c, imac 0x5dc4b0, ios 0x1303f4 {
        return this->overlaps1Way(other) && other->overlaps1Way(this);
    }
    bool overlaps1Way(OBB2D* other) = win 0x6e100, m1 0x50f598, imac 0x5dc4e0, ios 0x130430;

    std::array<cocos2d::CCPoint, 4> m_corners;
    std::array<cocos2d::CCPoint, 4> m_positions;
    std::array<cocos2d::CCPoint, 4> m_edges;
    std::array<double, 2> m_projections;
    cocos2d::CCPoint m_center;
}

[[link(android)]]
class ObjectControlGameObject : EffectGameObject {
    // virtual ~ObjectControlGameObject();

    static ObjectControlGameObject* create();

    virtual bool init() = win 0x4aa210, m1 0x19559c, imac 0x1dcad0, ios 0x390708;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4aa3f0, imac 0x1dd030, m1 0x195a5c, ios 0x3908e8;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4aa280, imac 0x1dcb20, m1 0x1955ec, ios 0x390758;
}

[[link(android)]]
class ObjectManager : cocos2d::CCNode {
    static ObjectManager* instance() = win 0x6e3d0, imac 0x77f670, m1 0x694044, ios 0x24c1dc;
    // virtual ~ObjectManager();

    virtual bool init() = win 0x6e460, m1 0x69410c, imac 0x77f750, ios 0x24c270;

    bool animLoaded(char const* anim);
    cocos2d::CCDictionary* getDefinition(char const* definitionKey) = win 0x6f870, m1 0x695a18, imac 0x7811e0, ios 0x24ce50;
    cocos2d::CCDictionary* getGlobalAnimCopy(char const* anim) = win inline, m1 0x694ce4, imac 0x780300, ios 0x24c8ec {
        return static_cast<cocos2d::CCDictionary*>(static_cast<cocos2d::CCDictionary*>(m_objectDefinitions->objectForKey("GlobalAnimations"))->objectForKey(anim));
    }
    void loadCopiedAnimations() = win 0x6e800, m1 0x69415c, imac 0x77f7b0, ios 0x24c2c0;
    void loadCopiedSets() = win 0x6ed50, m1 0x6945cc, imac 0x77fb60, ios 0x24c4d4;
    void purgeObjectManager();
    static cocos2d::CCDictionary* replaceAllOccurencesOfString(cocos2d::CCString*, cocos2d::CCString*, cocos2d::CCDictionary*) = win 0x6f1a0;
    void setLoaded(char const* objectName);
    void setup() = win 0x6e4c0, imac 0x77ff10, m1 0x694934;

    cocos2d::CCDictionary* m_objectDefinitions;
    cocos2d::CCDictionary* m_loadedAnimations;
}

[[link(android)]]
class ObjectToolbox : cocos2d::CCNode {
    // virtual ~ObjectToolbox();

    static ObjectToolbox* sharedState() = ios 0x276bd8, win 0x332f90, m1 0x57b4a8, imac 0x654080;

    virtual bool init() = win 0x333050, m1 0x57b5d0, imac 0x6541c0, ios 0x276cbc;

    TodoReturn allKeys();
    float gridNodeSizeForKey(int key) = ios 0x2aa858, win 0x35ae80, imac 0x704100, m1 0x6282d0;
    const char* intKeyToFrame(int key) = ios 0x2aa804 {
        return m_allKeys[key].c_str();
    }
    const char* perspectiveBlockFrame(int) = win 0x35b8a0;

    gd::map<int, gd::string> m_allKeys;
}

[[link(android)]]
class OnlineListDelegate {
    virtual void loadListFinished(cocos2d::CCArray*, char const*) {}
    virtual void loadListFailed(char const*) {}
    virtual void setupPageInfo(gd::string, char const*) {}
}

[[link(android)]]
class OpacityEffectAction {
    void step(float delta);

    float m_duration;
    float m_fromValue;
    float m_toValue;
    bool m_finished;
    bool m_disabled;
    float m_deltaTime;
    int m_targetGroupID;
    float m_currentValue;
    int m_triggerUniqueID;
    int m_controlID;
    float m_deltaTimeRelated;
    float m_durationRelated;
}

[[link(android)]]
class OptionsCell : TableViewCell {
    // virtual ~OptionsCell();
    OptionsCell(char const*, float, float);

    void loadFromObject(OptionsObject*) = win 0xb49f0, m1 0x1e26f8, imac 0x232740, ios 0x1055fc;
    void onToggleOption(cocos2d::CCObject* sender) = win 0xb4d90;
    void updateBGColor(int);

    OptionsObject* m_optionsObject;
}

[[link(android)]]
class OptionsLayer : GJDropDownLayer, FLAlertLayerProtocol {
    // virtual ~OptionsLayer();
    inline OptionsLayer() {
        m_optionsMenu = nullptr;
        m_unknown = nullptr;
        m_layerChoice = 0;
        m_recordReplays = false;
        m_musicSlider = nullptr;
        m_sfxSlider = nullptr;
        m_lastVaultDialog = -1;
    }

    static OptionsLayer* create() = ios 0xef814, win inline, imac 0x783fb0, m1 0x698218 {
        auto ret = new OptionsLayer();
        if (ret->init("Settings")) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void customSetup() = win 0x35bff0, m1 0x6983b0, imac 0x784200, ios 0xef91c;
    virtual void layerHidden() = win 0x35d840, imac 0x785600, m1 0x699714, ios 0xf0688;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = m1 0x6997a0, imac 0x785670, ios 0xf0714 {}

    TodoReturn createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint);
    void exitLayer();
    void musicSliderChanged(cocos2d::CCObject*) = win 0x35cc70, imac 0x785140, m1 0x699300, ios 0xf0478;
    void onAccount(cocos2d::CCObject* sender) = win 0x35d760, imac 0x784bf0, m1 0x698d70, ios 0xf0224;
    void onHelp(cocos2d::CCObject* sender) = win 0x35d710, imac 0x784c10, m1 0x698d80;
    void onMenuMusic(cocos2d::CCObject* sender);
    void onOptions(cocos2d::CCObject* sender) = ios 0xf0250, win 0x35ce50, m1 0x698d9c, imac 0x784c30;
    void onProgressBar(cocos2d::CCObject* sender);
    void onRate(cocos2d::CCObject* sender) = win 0x35d7b0;
    void onRecordReplays(cocos2d::CCObject* sender);
    void onSecretVault(cocos2d::CCObject* sender) = win 0x35cfb0, m1 0x6990b0, imac 0x784f20, ios 0xf02a0;
    void onSoundtracks(cocos2d::CCObject* sender) = win 0x35ce00, m1 0x698de8, imac 0x784c90;
    void onSupport(cocos2d::CCObject* sender) = win 0x35d820, imac 0x784cb0, m1 0x698df8;
    void onVideo(cocos2d::CCObject* sender) = win 0x35d6f0, m1 0x698db8, imac 0x784c50, ios inline {
        VideoOptionsLayer::create()->show();
    }
    void sfxSliderChanged(cocos2d::CCObject*) = win 0x35cd70, m1 0x699370, imac 0x7851b0, ios 0xf04e4;
    void tryEnableRecord() = m1 0x699648, imac 0x785540;

    cocos2d::CCMenu* m_optionsMenu;
    void* m_unknown;
    int m_layerChoice;
    bool m_recordReplays;
    Slider* m_musicSlider;
    Slider* m_sfxSlider;
    int m_lastVaultDialog;
}

[[link(android)]]
class OptionsObject : cocos2d::CCObject {
    // virtual ~OptionsObject();

    static OptionsObject* create(int id, bool enabled, gd::string name, OptionsObjectDelegate* delegate) = win 0x297040;

    bool init(int id, bool enabled, gd::string name, OptionsObjectDelegate* delegate);
    void toggleState() = win inline {
        m_enabled = !m_enabled;
        if (m_delegate) m_delegate->stateChanged(this);
    }

    int m_optionID;
    bool m_enabled;
    gd::string m_name;
    OptionsObjectDelegate* m_delegate;
    int m_count;
}

[[link(android)]]
class OptionsObjectDelegate {
    virtual void stateChanged(OptionsObject*) {}
}

[[link(android)]]
class OptionsScrollLayer : FLAlertLayer, TableViewCellDelegate {
    // virtual ~OptionsScrollLayer();

    static OptionsScrollLayer* create(cocos2d::CCArray*, bool, int) = win 0x325ca0;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x5282bc, imac 0x5f90f0, ios 0x3bb598;
    virtual void keyBackClicked() = win 0x326150, m1 0x528198, imac 0x5f8fc0, ios 0x3bb58c;
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) = win 0x326160, imac 0x5f9130, m1 0x5282f4, ios 0x3bb5d0;

    cocos2d::CCArray* getRelevantObjects(cocos2d::CCArray*);
    bool init(cocos2d::CCArray*, bool, int);
    void onClose(cocos2d::CCObject* sender) = win 0x3260c0;
    void setupList(cocos2d::CCArray*) = win 0x325ef0;

    cocos2d::CCArray* m_optionObjects;
    GJCommentListLayer* m_listLayer;
    bool m_recreateList;
    int m_minCount;
}

[[link(android)]]
class ParentalOptionsLayer : FLAlertLayer {
    // virtual ~ParentalOptionsLayer();

    static ParentalOptionsLayer* create();

    virtual bool init() = win 0x365820, m1 0x6a1270, imac 0x78d870, ios 0xf5a0c;
    virtual void keyBackClicked() = win 0x84650, m1 0x6a2a4c, imac 0x78f100, ios 0xf69d8;

    void addToggle(char const*, char const*, char const*) = win 0x365c70;
    int countForPage(int) = win 0x2b8f80;
    void goToPage(int) = win 0x2b9220;
    void incrementCountForPage(int);
    const char* infoKey(int);
    cocos2d::CCLayer* layerForPage(int) = win 0x366270;
    const char* layerKey(int);
    cocos2d::CCPoint nextPosition(int);
    const char* objectKey(int);
    cocos2d::CCArray* objectsForPage(int) = win 0x3660e0;
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onInfo(cocos2d::CCObject* sender);
    void onNextPage(cocos2d::CCObject* sender) = win 0x2b9200;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x2b9210;
    void onToggle(cocos2d::CCObject* sender) = win 0x366410;
    const char* pageKey(int);

    int m_page;
    int m_toggleCount;
    int m_maxPage;
    cocos2d::CCDictionary* m_values;
    cocos2d::CCDictionary* m_variables;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
}

[[link(android)]]
class ParticleGameObject : EnhancedGameObject {
    // virtual ~ParticleGameObject();

    static ParticleGameObject* create() = win 0x487420;

    virtual bool init() = win 0x487540, m1 0x1633a0, imac 0x1a08c0, ios 0x379a74;
    virtual void setScaleX(float) = win 0x488900, m1 0x164424, imac 0x1a1960, ios 0x37a8d4;
    virtual void setScaleY(float) = win 0x488980, m1 0x164494, imac 0x1a19d0, ios 0x37a920;
    virtual void setScale(float) = win 0x488a00, m1 0x164504, imac 0x1a1a40, ios 0x37a96c;
    virtual void setRotation(float) = win 0x4884f0, m1 0x164340, imac 0x1a18a0, ios 0x37a7f0;
    virtual void setRotationX(float) = win 0x488530, m1 0x16438c, imac 0x1a18e0, ios 0x37a83c;
    virtual void setRotationY(float) = win 0x4886a0, m1 0x1643d8, imac 0x1a1920, ios 0x37a888;
    virtual void setChildColor(cocos2d::ccColor3B const&) = win 0x488bb0, m1 0x164668, imac 0x1a1ba0, ios 0x37aaac;
    virtual void customSetup() = win 0x487790, m1 0x1635f0, imac 0x1a0b90, ios 0x379c5c;
    virtual void addMainSpriteToParent(bool) = win 0x487860, m1 0x16369c, imac 0x1a0c60, ios 0x379d08;
    virtual void resetObject() = win 0x488e00, m1 0x164834, imac 0x1a1d90, ios 0x37ac6c;
    virtual void deactivateObject(bool) = win 0x488dc0, m1 0x1647f0, imac 0x1a1d50, ios 0x37ac34;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4875a0, imac 0x1a08f0, m1 0x1633d8, ios 0x379aac;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x489050, imac 0x1a1f90, m1 0x164a28, ios 0x37ae4c;
    virtual void claimParticle() = win 0x487950, imac 0x1a0d40, m1 0x16377c, ios 0x379de8;
    virtual void unclaimParticle() = win 0x487f10, imac 0x1a12e0, m1 0x163d44, ios 0x37a390;
    virtual void particleWasActivated() = win 0x487ff0, imac 0x1a1360, m1 0x163dd0, ios 0x37a410;
    virtual void setObjectColor(cocos2d::ccColor3B const&) = win 0x488a80, m1 0x164574, imac 0x1a1ab0, ios 0x37a9b8;
    virtual void blendModeChanged() = win 0x487820, imac 0x1a0c20, m1 0x16366c, ios 0x379cd8;
    virtual void updateParticleColor(cocos2d::ccColor3B const&) {}
    virtual void updateParticleOpacity(unsigned char) {}
    virtual void updateMainParticleOpacity(unsigned char) = win 0x488ce0, imac 0x1a1c90, m1 0x16475c, ios 0x37aba0;
    virtual void updateSecondaryParticleOpacity(unsigned char) = win 0x488d60, imac 0x1a1cf0, m1 0x1647a8, ios 0x37abec;
    virtual void updateSyncedAnimation(float, int) = win 0x488e60, imac 0x1a1df0, m1 0x16489c, ios 0x37acd4;
    virtual void updateAnimateOnTrigger(bool) = win 0x488fd0, imac 0x1a1f40, m1 0x1649d8, ios 0x37adfc;

    void applyParticleSettings(cocos2d::CCParticleSystemQuad*) = win 0x487b50;
    TodoReturn createAndAddCustomParticle();
    void createParticlePreviewArt() = win 0x4882e0, m1 0x164140, imac 0x1a16c0;
    void setParticleString(gd::string) = win 0x4880b0, imac 0x1a14a0, m1 0x163f24, ios 0x37a4ac;
    void updateParticle() = win 0x488140, imac 0x1a1530, m1 0x163fb8, ios 0x37a4f8;
    void updateParticleAngle(float, cocos2d::CCParticleSystemQuad*) = win 0x4887d0, m1 0x163c2c, imac 0x1a11d0;
    void updateParticlePreviewArtOpacity(float) = win 0x488470;
    void updateParticleScale(float);
    void updateParticleStruct() = m1 0x16375c, imac 0x1a0d10, win inline {
        if (!m_updatedParticleData) return;
        m_updatedParticleData = false;
        GameToolbox::particleStringToStruct(m_particleData, m_particleStruct);
    }

    // property 145
    gd::string m_particleData;
    bool m_updatedParticleData;
    cocos2d::ParticleStruct m_particleStruct;
    // property 147
    bool m_hasUniformObjectColor;
    int m_popupPage;
    // property 211
    bool m_shouldQuickStart;
    float m_respawnResult;
    bool m_startingRespawn;
    bool m_notPreviewing;
}

[[link(android)]]
class ParticlePreviewLayer : cocos2d::CCLayerColor {
    // virtual ~ParticlePreviewLayer();
    ParticlePreviewLayer() {
        m_particleMode = 0;
        m_particleSystem = nullptr;
        m_gravityMode = false;
    }

    static ParticlePreviewLayer* create(cocos2d::CCParticleSystemQuad*) = win inline {
        auto ret = new ParticlePreviewLayer();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void draw() = win 0x41d700, imac 0x464c10, m1 0x3d4c08, ios 0x2d1c18;
    virtual void visit() = win 0x41d620, imac 0x464a90, m1 0x3d4a80, ios 0x2d1b38;

    bool init(cocos2d::CCParticleSystemQuad*) = win inline {
        if (!cocos2d::CCLayerColor::initWithColor({ 0, 0, 0, 255 }, 120.f, 180.f)) return false;
        m_particleSystem = p0;
        this->addChild(p0, 100);
        return true;
    }
    void postVisit();
    void preVisitWithClippingRect(cocos2d::CCRect);

    int m_particleMode;
    int m_drawMode;
    cocos2d::CCParticleSystemQuad* m_particleSystem;
    bool m_gravityMode;
}

[[link(android)]]
class PauseLayer : CCBlockLayer, FLAlertLayerProtocol {
    // virtual ~PauseLayer();
    PauseLayer() {
        m_unfocused = false;
        m_tryingQuit = false;
    }

    static PauseLayer* create(bool) = win inline, m1 0x34c250, imac 0x3c2f60, ios 0x1453f8 {
        auto ret = new PauseLayer();
        if (ret && ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        CC_SAFE_DELETE(ret);
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x369070, imac 0x3c4fc0, m1 0x34e270, ios 0x146f60;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x368fa0, imac 0x3c4ec0, m1 0x34e194, ios 0x146eac;
    virtual void customSetup() = win 0x366b00, imac 0x3c3070, m1 0x34c324, ios 0x1454b8;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x368de0, imac 0x3c4e00, m1 0x34e0b0, ios 0x146e3c;
    virtual void keyUp(cocos2d::enumKeyCodes) = m1 0x34e268, imac 0x3c4fa0, ios 0x146f58 {}

    void createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint) = m1 0x34dc74, imac 0x3c49f0;
    void goEdit() = ios 0x146d14, win 0x368b80, m1 0x34df78, imac 0x3c4cc0;
    bool init(bool) = win inline, m1 0x34c31c, imac 0x3c3050, ios inline {
        m_unfocused = p0;
        return CCBlockLayer::init();
    }
    void musicSliderChanged(cocos2d::CCObject*) = win 0x3683c0, imac 0x3c4870, m1 0x34daec, ios 0x146bc0;
    void onEdit(cocos2d::CCObject* sender) = ios 0x146c38, win 0x368990, m1 0x34de9c, imac 0x3c4be0;
    void onHelp(cocos2d::CCObject* sender) = m1 0x34dfe0, imac 0x3c4d40;
    void onNormalMode(cocos2d::CCObject* sender) = ios 0x146a18, win 0x368530, m1 0x34d904, imac 0x3c4670;
    void onPracticeMode(cocos2d::CCObject* sender) = ios 0x1469dc, win 0x368450, m1 0x34d8ac, imac 0x3c4610;
    void onQuit(cocos2d::CCObject* sender) = ios 0x146da0, win 0x368e50, m1 0x34dffc, imac 0x3c4d60;
    void onRecordReplays(cocos2d::CCObject* sender) = m1 0x34de6c, imac 0x3c4bb0;
    void onReplay(cocos2d::CCObject* sender) = m1 0x34dba0, imac 0x3c4930;
    void onRestart(cocos2d::CCObject* sender) = ios 0x146b60, win 0x3686a0, m1 0x34da8c, imac 0x3c4800;
    void onRestartFull(cocos2d::CCObject* sender) = ios 0x1469a0, win 0x368740, m1 0x34d870, imac 0x3c45d0;
    void onResume(cocos2d::CCObject* sender) = ios 0x146a48, win 0x368610, m1 0x34d950, imac 0x3c46c0;
    void onSettings(cocos2d::CCObject* sender) = ios 0x146b9c, win 0x3677d0, m1 0x34dac8, imac 0x3c4840;
    void onTime(cocos2d::CCObject* sender) = m1 0x34db9c, imac 0x3c4920;
    void onTryEdit(cocos2d::CCObject* sender) = win 0x3687e0, m1 0x34d760, imac 0x3c44c0, ios 0x1468bc;
    void setupProgressBars() = win 0x367980, m1 0x34cdf0, imac 0x3c3b60, ios 0x145f70;
    void sfxSliderChanged(cocos2d::CCObject*) = ios 0x146bfc, win 0x35cd70, m1 0x34db2c, imac 0x3c48b0;
    void tryQuit(cocos2d::CCObject* sender) = ios 0x146a80, win 0x368c50, m1 0x34d988, imac 0x3c4700;
    void tryShowBanner(float) = m1 0x34db6c, imac 0x3c48f0;

    bool m_unfocused;
    bool m_tryingQuit;
}

[[link(android)]]
class PlatformDownloadDelegate {
    virtual void downloadFinished(char const*) {}
    virtual void downloadFailed(char const*) {}
}

[[link(android)]]
class PlatformToolbox {
    static void activateGameCenter();
    static TodoReturn copyToClipboard(gd::string);
    static TodoReturn doesFileExist(gd::string);
    static TodoReturn downloadAndSavePromoImage(gd::string, gd::string);
    static void gameDidSave() = win inline, m1 0x41a0c4, imac 0x4b17a0, ios 0x16f388 {
        cocos2d::CCApplication::sharedApplication()->gameDidSave();
    }
    static TodoReturn getDeviceRefreshRate();
    static cocos2d::CCSize getDisplaySize() = win 0x786d0, imac 0x4b18f0, m1 0x41a190;
    static TodoReturn getRawPath(char const*);
    static TodoReturn getUniqueUserID();
    static TodoReturn getUserID();
    static void hideCursor() = ios 0x16f40c, win inline, imac 0x4b0b30, m1 0x419630 {
        cocos2d::CCEGLView::sharedOpenGLView()->showCursor(false);
    }
    static bool isControllerConnected() = ios 0x16f3d8, win inline, imac 0x4b1a30, m1 0x41a254 {
        return cocos2d::CCApplication::sharedApplication()->getControllerConnected();
    }
    static bool isHD();
    static bool isLocalPlayerAuthenticated();
    static bool isLowMemoryDevice();
    static bool isNetworkAvailable();
    static bool isSignedInGooglePlay();
    static TodoReturn loadAndDecryptFileToString(char const*, char const*, gd::string&);
    static TodoReturn logEvent(char const*);
    static TodoReturn onGameLaunch();
    static void onNativePause();
    static TodoReturn onNativeResume();
    static TodoReturn onToggleKeyboard();
    static TodoReturn openAppPage();
    static void platformShutdown() = m1 0x41a1d4, imac 0x4b1950;
    static TodoReturn refreshWindow();
    static void reportAchievementWithID(char const*, int) = m1 0x4195f8, imac 0x4b0ae0, ios 0x16ef50;
    static TodoReturn reportLoadingFinished();
    static void resizeWindow(float width, float height);
    static TodoReturn saveAndEncryptStringToFile(gd::string&, char const*, char const*);
    static TodoReturn sendMail(char const*, char const*, char const*);
    static void setBlockBackButton(bool);
    static void setKeyboardState(bool);
    static TodoReturn shouldResumeSound();
    static void showAchievements();
    static void showCursor() = ios 0x16f410, win inline, imac 0x4b0b50, m1 0x419648 {
        cocos2d::CCEGLView::sharedOpenGLView()->showCursor(true);
    }
    static TodoReturn signInGooglePlay();
    static TodoReturn signOutGooglePlay();
    static TodoReturn spriteFromSavedFile(gd::string);
    static void toggleCallGLFinish(bool);
    static void toggleCPUSleepMode(bool);
    static void toggleForceTimer(bool);
    static void toggleFullScreen(bool, bool, bool);
    static void toggleLockCursor(bool isLocked) = win inline, ios 0x16f41c, m1 0x41a144, imac 0x4b1850 {
        cocos2d::CCEGLView::sharedOpenGLView()->toggleLockCursor(isLocked);
    }
    static void toggleMouseControl(bool);
    static void toggleSmoothFix(bool);
    static void toggleVerticalSync(bool);
    static void tryShowRateDialog(gd::string) = win inline, m1 0x419660, imac 0x4b0b70, ios 0x16efe4 {}
    static TodoReturn updateMouseControl();
    static TodoReturn updateWindowedSize(float, float);
}

class PlayerButtonCommand {
    PlayerButton m_button;
    bool m_isPush;
    bool m_isPlayer2;
    int m_step;
}

[[link(android)]]
class PlayerCheckpoint : cocos2d::CCNode {
    // virtual ~PlayerCheckpoint();
    PlayerCheckpoint();

    static PlayerCheckpoint* create() = win 0x3a4210, imac 0xbc400, m1 0xab5b8, ios 0x123974;

    virtual bool init() = win 0x77db0, imac 0xbf850, m1 0xae214, ios 0x126030;

    cocos2d::CCPoint m_position;
    cocos2d::CCPoint m_lastPosition;
    float m_yVelocity;
    bool m_isUpsideDown;
    bool m_isSideways;
    bool m_isShip;
    bool m_isBall;
    bool m_isBird;
    bool m_isSwing;
    bool m_isDart;
    bool m_isRobot;
    bool m_isSpider;
    bool m_isOnGround;
    GhostType m_ghostType;
    bool m_miniMode;
    float m_speed;
    bool m_hidden;
    bool m_goingLeft;
    float m_reverseSpeed;
    bool m_dashing;
    float m_dashX;
    float m_dashY;
    float m_dashAngle;
    float m_dashStartTime;
    DashRingObject* m_dashRingObject;
    bool m_platformerCheckpoint;
    double m_lastFlipTime;
    float m_gravityMod;
    bool m_decreaseBoostSlide;
    int m_followRelated;
    gd::vector<float> m_playerFollowFloats;
    float m_followRelated2;
}

[[link(android)]]
class PlayerControlGameObject : EffectGameObject {
    // virtual ~PlayerControlGameObject();

    static PlayerControlGameObject* create();

    virtual bool init() = win 0x4a9c60, m1 0x194730, imac 0x1db900, ios 0x390144;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4aa090, imac 0x1dc830, m1 0x195378, ios 0x3904f0;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a9cd0, imac 0x1db950, m1 0x194780, ios 0x390194;

    // property 540
    bool m_stopJump;
    // property 541
    bool m_stopMove;
    // property 542
    bool m_stopRotation;
    // property 543
    bool m_stopSlide;
}

[[link(android)]]
class PlayerFireBoostSprite : cocos2d::CCSprite {
    // virtual ~PlayerFireBoostSprite();

    static PlayerFireBoostSprite* create() = win 0x38cf30, m1 0x36c2a4, imac 0x3ea580, ios 0x219854;

    virtual bool init() = win 0x38cfd0, m1 0x388cac, imac 0x40b6c0, ios 0x22e9e0;

    void animateFireIn() = ios 0x22b19c, win inline, m1 0x384370, imac 0x4066d0 {
        this->stopAllActions();

        auto scaleto = cocos2d::CCScaleTo::create(0.06f, m_size * 0.6f, m_size * 1.5f);
        auto callfunc = cocos2d::CCCallFunc::create(this, callfunc_selector(PlayerFireBoostSprite::loopFireAnimation));
        auto sequence = cocos2d::CCSequence::create(scaleto, callfunc, nullptr);
        this->runAction(sequence);
    }
    void animateFireOut() = ios 0x22b214, win inline, m1 0x3843f0, imac 0x406740 {
        this->stopAllActions();
        auto action = cocos2d::CCScaleTo::create(0.4f, 0.01f, 0.01f);
        this->runAction(action);
    }
    void loopFireAnimation() = win 0x38d030, m1 0x384094, imac 0x4063f0, ios 0x22af54;

    float m_size;
}

[[link(android), depends(GJPointDouble)]]
class PlayerObject : GameObject, AnimatedSpriteDelegate {
    // virtual ~PlayerObject();
    PlayerObject() = win 0x36f5e0, m1 0x388d18, imac 0x40b740, ios 0x22eaa8 {

        #if defined(__clang__)
        # pragma clang diagnostic push
        # pragma clang diagnostic ignored "-Winvalid-offsetof"
        #endif
        // Almost all members are initialized to zeros, so we can cheat here to avoid unnecessary code
        auto selfSize = sizeof(PlayerObject) - offsetof(PlayerObject, m_mainLayer);
        memset((void*)((uintptr_t)this + offsetof(PlayerObject, m_mainLayer)), 0, selfSize);

        #if defined(__clang__) 
        # pragma clang diagnostic pop
        #endif

        m_lastCollisionBottom = -1;
        m_lastCollisionTop = -1;
        m_lastCollisionLeft = -1;
        m_lastCollisionRight = -1;
        m_unk50C = -1;
        m_unk510 = -1;
        new (&m_rotateObjectsRelated) decltype(m_rotateObjectsRelated)();
        new (&m_potentialSlopeMap) decltype(m_potentialSlopeMap)();
        m_rotateSpeed = 1.0f;
        new (&m_ringRelatedSet) decltype(m_ringRelatedSet)();
        m_playerSpeed = 0.9f;
        m_platformerVelocityRelated = 1.0f;
        new (&m_touchedRings) decltype(m_touchedRings)();
        m_gravityMod = 1.0f;
        new (&m_jumpPadRelated) decltype(m_jumpPadRelated)();
        new (&m_holdingButtons) decltype(m_holdingButtons)();
        new (&m_currentRobotAnimation) gd::string("run");
    }
    ~PlayerObject() = win 0x370730, m1 0x36a6a8, imac 0x3e8600, ios 0x2181f8;

    static PlayerObject* create(int player, int ship, GJBaseGameLayer* gameLayer, cocos2d::CCLayer* layer, bool playLayer) = ios 0x21836c, win 0x370960, imac 0x3e88e0, m1 0x36a89c;

    virtual void update(float) = win 0x373010, imac 0x3eb270, m1 0x36cf1c, ios 0x21a2d0;
    virtual void setScaleX(float scale) { GameObject::setScaleX(scale); } // win 0x38cac0, m1 0x38871c, imac 0x40b0c0, ios 0x22e704;
    virtual void setScaleY(float scale) { GameObject::setScaleY(scale); } // win 0x38cad0, m1 0x388720, imac 0x40b0d0, ios 0x22e708;
    virtual void setScale(float scale) { GameObject::setScale(scale); } // win 0x38cae0, m1 0x388724, imac 0x40b0e0, ios 0x22e70c;
    virtual void setPosition(cocos2d::CCPoint const&) = win 0x3868b0, imac 0x407b70, m1 0x3856d8, ios 0x22bf7c;
    virtual void setVisible(bool) = win 0x38caf0, imac 0x40b0f0, m1 0x388728, ios 0x22e710;
    virtual void setRotation(float angle) { GameObject::setRotation(angle); } // win 0x38c9f0, m1 0x3886ac, imac 0x40b030, ios 0x22e694
    virtual void setOpacity(unsigned char) = win 0x387d60, m1 0x386714, imac 0x408d60, ios 0x22cf10;
    virtual void setColor(cocos2d::ccColor3B const&) = win 0x387580, m1 0x38612c, imac 0x408740, ios 0x22c9d0;
    virtual void setFlipX(bool) = win 0x38ca00, m1 0x3886b0, imac 0x40b040, ios 0x22e698;
    virtual void setFlipY(bool flip) { GameObject::setFlipY(flip); } // m1 0x388718, imac 0x40b0b0, ios 0x22e700;
    virtual void resetObject() = win 0x3810b0, m1 0x37ed44, imac 0x400590, ios 0x227340;
    virtual cocos2d::CCPoint getRealPosition() = win 0x387e90, imac 0x408f30, m1 0x386910, ios 0x22d014;
    virtual OBB2D* getOrientedBox() = win 0x38a8c0, imac 0x40a260, m1 0x387ab4, ios 0x22dcc0;
    virtual float getObjectRotation() = win 0x38a8e0, m1 0x387ae0, imac 0x40a280, ios 0x22dcec;
    virtual void animationFinished(char const*) = win 0x38cb10, imac 0x40b1e0, m1 0x3887fc, ios 0x22e720;

    void activateStreak() = ios 0x21e810, win 0x38a300, imac 0x3f17c0, m1 0x3724d8;
    void addAllParticles() = ios 0x21a044, win 0x372900, imac 0x3eaed0, m1 0x36cbc8;
    void addToTouchedRings(RingObject* object) = win inline, imac 0x404180, m1 0x381fec, ios 0x229754 {
        if (!m_touchingRings->containsObject(object)) {
            m_touchingRings->addObject(object);
        }
        m_touchedRings.insert(object->m_uniqueID);
    }
    void addToYVelocity(double, int);
    void animatePlatformerJump(float) = ios 0x21ecec, win 0x376ef0, imac 0x3f2020, m1 0x372c98;
    void boostPlayer(float) = win 0x38a150, m1 0x374f48, imac 0x3f49e0, ios 0x2208a8;
    void bumpPlayer(float, int, bool, GameObject*) = ios 0x22d2f8, win 0x389910, imac 0x409440, m1 0x386e2c;
    TodoReturn buttonDown(PlayerButton);
    TodoReturn canStickToGround();
    void checkSnapJumpToObject(GameObject*) = win 0x37de80, m1 0x37a5c0, imac 0x3fb5d0, ios 0x224e8c;
    bool collidedWithObject(float, GameObject*, cocos2d::CCRect, bool) = win 0x37bb80, imac 0x3f4c90, m1 0x3751b8, ios 0x220ae4;
    bool collidedWithObject(float, GameObject*) = win inline, imac 0x3fb520, m1 0x37a504, ios 0x224e30 {
        return this->collidedWithObject(p0, p1, { 0.f, 0.f, 0.f, 0.f }, false);
    }
    bool collidedWithObjectInternal(float, GameObject*, cocos2d::CCRect, bool) = win 0x37bc40, m1 0x376dd8, imac 0x3f6de0, ios 0x22212c;
    void collidedWithSlope(float dt, GameObject* object, bool forced) = win inline, ios 0x220b8c, imac 0x3f4d30, m1 0x375274 {
        if (m_isSideways) {
            this->handleRotatedSlopeCollision(dt, object, forced);
        } else {
            this->collidedWithSlopeInternal(dt, object, forced);
        }
    }
    void collidedWithSlopeInternal(float dt, GameObject* object, bool forced) = win 0x3799e0, m1 0x375914, imac 0x3f5410, ios 0x221030;
    float convertToClosestRotation(float) = win 0x377370, m1 0x371c6c, imac 0x3f0e60, ios 0x21e0a4;
    void copyAttributes(PlayerObject*) = ios 0x22da24, win 0x38a710, imac 0x409ed0, m1 0x3877bc;
    void createFadeOutDartStreak() = ios 0x229880, win 0x382830, m1 0x382128, imac 0x4042d0;
    void createRobot(int) = win 0x372180, m1 0x36c034, imac 0x3ea2a0, ios 0x2195f4;
    void createSpider(int) = win 0x372540, m1 0x36c378, imac 0x3ea650, ios 0x2198e4;
    void deactivateParticle() = win inline, ios 0x21d328, m1 0x3709e8, imac 0x3efb60 {
        if (m_hasGroundParticles) m_playerGroundParticles->stopSystem();
        m_hasGroundParticles = false;
    }
    void deactivateStreak(bool stop) = ios 0x21a1dc, win inline, imac 0x3eb090, m1 0x36cd60 {
        if (!m_alwaysShowStreak || stop) m_regularTrail->stopStroke();
        if (m_fadeOutStreak) {
            m_fadeOutStreak = false;
            this->fadeOutStreak2(m_playEffects ? .2f : .6f);
        }
    }
    bool destroyFromHitHead() = win inline, m1 0x385668, imac 0x407b10, ios 0x22bf34 {
        return !this->isFlying() && !m_isBall && !m_isSpider && m_stateHitHead < 1;
    }
    void didHitHead() = win 0x37de00, m1 0x37aabc, imac 0x3fbb50, ios 0x2252b8;
    void disableCustomGlowColor() {
        m_hasCustomGlowColor = false;
    }
    void disablePlayerControls() = win 0x389620, imac 0x409140, m1 0x386af4, ios 0x22d13c;
    void disableSwingFire() = ios 0x2286b8, win 0x385170, m1 0x3807b8, imac 0x402500;
    void doReversePlayer(bool) = ios 0x21dd68, win 0x3826e0, imac 0x3f0850, m1 0x371620;
    inline void enableCustomGlowColor(cocos2d::ccColor3B const& color) {
        m_hasCustomGlowColor = true;
        m_glowColor = color;
    }
    void enablePlayerControls() = win 0x389770, imac 0x4091a0, m1 0x386b50, ios 0x22d198;
    void exitPlatformerAnimateJump() = win 0x3771a0, m1 0x371834, imac 0x3f09f0, ios 0x21de6c;
    void fadeOutStreak2(float) = ios 0x22861c, win 0x38a400, imac 0x402470, m1 0x38071c;
    void flashPlayer(float, float, cocos2d::ccColor3B mainColor, cocos2d::ccColor3B secondColor) = win inline, m1 0x37c04c, imac 0x3fd3f0, ios inline {
        m_colorRelated2 = mainColor;
        m_flashRelated3 = secondColor;
        this->setColor(m_colorRelated2);
        this->setSecondColor(m_flashRelated3);
        m_flashTime = m_totalTime;
        m_flashRelated = p0;
        m_flashRelated1 = p1;
    }
    void flipGravity(bool, bool) = ios 0x21eb30, win 0x384440, imac 0x3f1c30, m1 0x372910;
    float flipMod() {
        return m_isUpsideDown ? -1.f : 1.f;
    }
    void gameEventTriggered(int p0, int p1) = win inline, imac 0x3f1ff0, m1 0x372c80 {
        if (this->m_gameLayer) {
            this->m_gameLayer->gameEventTriggered(static_cast<GJGameEvent>(p0), p1, static_cast<int>(this->m_savedObjectType));
        }
    }
    GameObjectType getActiveMode() = win inline, imac 0x404b10, m1 0x38294c, ios 0x229efc {
        if (this->isFlying()) return GameObjectType::ShipPortal;
        else if (m_isBall) return GameObjectType::BallPortal;
        else if (m_isSpider) return GameObjectType::SpiderPortal;
        else return GameObjectType::CubePortal;
    }
    TodoReturn getCurrentXVelocity();
    TodoReturn getModifiedSlopeYVel();
    TodoReturn getOldPosition(float);
    cocos2d::ccColor3B getSecondColor();
    double getYVelocity() = win inline, m1 0x36cecc, imac 0x3eb1f0, ios 0x21a2c8 {
        return m_yVelocity;
    }
    TodoReturn gravityDown();
    TodoReturn gravityUp();
    TodoReturn handlePlayerCommand(int);
    bool handleRotatedCollisionInternal(float, GameObject*, cocos2d::CCRect, bool, bool, bool) = win 0x379310, m1 0x3754b4, imac 0x3f4f20, ios 0x220d34;
    bool handleRotatedObjectCollision(float, GameObject*, cocos2d::CCRect, bool) = win inline, m1 0x375448, imac 0x3f4ec0, ios inline {
        return this->handleRotatedCollisionInternal(p0, p1, p2, p3, false, false);
    }
    void handleRotatedSlopeCollision(float, GameObject*, bool) = win inline, m1 0x375614, imac 0x3f5080, ios inline {
        this->handleRotatedCollisionInternal(p0, p1, { 0.f, 0.f, 0.f, 0.f }, false, p2, true);
    }
    TodoReturn hardFlipGravity();
    void hitGround(GameObject*, bool) = ios 0x224188, win 0x3861a0, imac 0x3fa390, m1 0x37951c;
    void hitGroundNoJump(GameObject*, bool) = win 0x386140, m1 0x37a92c, imac 0x3fb970, ios inline {
        auto isOnGround = m_isOnGround;
        auto isOnGround2 = m_isOnGround2;
        auto lastLandTime = m_lastLandTime;
        this->hitGround(nullptr, p1);
        m_isOnGround = isOnGround;
        m_isOnGround2 = isOnGround2;
        m_lastLandTime = lastLandTime;
    }
    void incrementJumps() = ios 0x21eaf8, win 0x376e10, imac 0x3f1bf0, m1 0x3728d8;
    bool init(int player, int ship, GJBaseGameLayer* gameLayer, cocos2d::CCLayer* layer, bool playLayer) = ios 0x218410, win 0x370a00, imac 0x3e8970, m1 0x36a954;
    bool isBoostValid(float);
    bool isFlying() = ios 0x21d2cc, win inline, m1 0x37097c, imac 0x3efb00 {
        return m_isShip || m_isBird || m_isDart || m_isSwing;
    }
    bool isInBasicMode() = ios 0x225fa0, win inline, m1 0x37b8c8, imac 0x3fcbc0 {
        return !this->isFlying() && !m_isBall && !m_isSpider;
    }
    bool isInNormalMode() = win inline, m1 0x36f5a8, imac 0x3ee1c0, ios 0x21c1bc {
        return !this->isFlying() && !m_isBall && !m_isRobot && !m_isSpider;
    }
    bool isSafeFlip(float p0) = win inline, m1 0x3794f0, imac 0x3fa350, ios 0x22415c {
        return m_lastFlipTime != 0.0 && m_totalTime - m_lastFlipTime < p0;
    }
    bool isSafeHeadTest() = win inline, m1 0x387694, imac 0x409d60, ios 0x22d9b8 {
        return this->isSafeFlip(0.2f) || this->isSafeMode(0.2f) || m_stateHitHead > 0;
    }
    bool isSafeMode(float p0) = win inline, m1 0x3794c4, imac 0x3fa310, ios inline {
        return m_gameModeChangedTime != 0.0 && m_totalTime - m_gameModeChangedTime < p0;
    }
    bool isSafeSpiderFlip(float);
    void levelFlipFinished() = win 0x3759e0, m1 0x372688, imac 0x3f1970, ios 0x21e980;
    bool levelFlipping() = win 0x385760, m1 0x3709bc, imac 0x3efb30, ios 0x21d2fc;
    void levelWillFlip() = m1 0x372640, imac 0x3f1930;
    TodoReturn limitDashRotation(float&);
    void loadFromCheckpoint(PlayerCheckpoint*) = win 0x38bc30, imac 0x40a910, m1 0x3880ac, ios 0x22e1c0;
    void lockPlayer() = ios 0x22d0b8, win 0x389540, imac 0x408fe0, m1 0x3869b4;
    TodoReturn logValues();
    void modeDidChange();
    TodoReturn performSlideCheck();
    void placeStreakPoint() = ios 0x21e8b8, win 0x38a8f0, imac 0x3f18a0, m1 0x3725a0;
    void playBumpEffect(int objectType, GameObject* player) = win 0x389cc0, imac 0x409610, m1 0x387014, ios 0x22d428;
    void playBurstEffect();
    void playCompleteEffect(bool, bool) = win 0x36e2b0, imac 0x2024c0, m1 0x1b7870, ios 0x60a60;
    void playDeathEffect() = ios 0x5b138, win 0x3691a0, imac 0x1fa350, m1 0x1af8ac;
    void playDynamicSpiderRun() = win 0x38b740;
    void playerDestroyed(bool) = ios 0x22853c, win 0x381f10, imac 0x402270, m1 0x380548;
    bool playerIsFalling(float);
    bool playerIsFallingBugged() = win 0x3846a0;
    TodoReturn playerIsMovingUp();
    TodoReturn playerTeleported();
    void playingEndEffect() = win inline, ios 0x22d27c, imac 0x4093c0, m1 0x386d90 {
        if (m_isSpider) m_spiderSprite->tweenToAnimation("fall_loop", .4f);
    }
    void playSpawnEffect() = ios 0x227ff8, win 0x381650, imac 0x401bb0, m1 0x37fe98;
    void playSpiderDashEffect(cocos2d::CCPoint from, cocos2d::CCPoint to) = ios 0x225fe0, win 0x37f340, m1 0x37b928, imac 0x3fcc20;
    void postCollision(float) = ios 0x21f410, win 0x3777f0, m1 0x373790, imac 0x3f2c40;
    void preCollision() = win inline, ios 0x21f300, imac 0x3f2a40, m1 0x373634 {
        m_wasTeleported = false;
        m_ringJumpRelated = false;
        m_collidedTopMinY = 0.0;
        m_collidedBottomMaxY = 0.0;
        m_collidedLeftMaxX = 0.0;
        m_collidedRightMinX = 0.0;
        m_wasOnSlope = m_isOnSlope;
        m_isOnSlope = false;
        m_isOnGround4 = m_isOnGround2;
        if (m_isOnGround2 && !m_platformerMovingLeft && !m_platformerMovingRight && m_maybeSlidingTime > 0) {
            m_maybeSlidingTime = 0;
            m_maybeSlidingStartTime = m_totalTime;
        }
        if (!m_unk669) m_unk669 = true;
        else m_currentPotentialSlope = nullptr;
        m_potentialSlopeMap.clear();
        if (auto slope = m_currentPotentialSlope) {
            m_potentialSlopeMap[slope->m_uniqueID] = slope;
        }
        if (auto slope = m_currentSlope) {
            m_potentialSlopeMap[slope->m_uniqueID] = slope;
        }
    }
    bool preSlopeCollision(float, GameObject*) = win 0x3794b0, m1 0x379014, imac 0x3f9dd0, ios 0x223cb4;
    void propellPlayer(float, bool, int) = ios 0x22d548, win 0x389ac0, m1 0x387134, imac 0x409750;
    bool pushButton(PlayerButton) = ios 0x228864, win 0x382110, imac 0x4027d0, m1 0x380a44;
    TodoReturn pushDown();
    void pushPlayer(float);
    TodoReturn redirectDash(float);
    void redirectPlayerForce(float, float, float, float) = win 0x389ed0, m1 0x3874b4, imac 0x409b20, ios 0x22d7e0;
    void releaseAllButtons() = ios 0x22d074, win 0x389370, m1 0x386970, imac 0x408fa0;
    bool releaseButton(PlayerButton) = ios 0x229640, win 0x3823a0, imac 0x403c40, m1 0x381b48;
    void removeAllParticles() = win inline, m1 0x36cce8, imac 0x3eb020, ios 0x21a164 {
        for (int i = 0; i < m_particleSystems->count(); i++) {
            auto particle = static_cast<cocos2d::CCParticleSystem*>(m_particleSystems->objectAtIndex(i));
            particle->resetSystem();
            particle->stopSystem();
            particle->removeFromParentAndCleanup(true);
        }
    }
    void removePendingCheckpoint() = ios 0x227a2c, win 0x38c400, m1 0x37f7d8, imac 0x4013f0;
    void removePlacedCheckpoint() = m1 0x380510, imac 0x402230;
    void resetAllParticles() = ios 0x21e6d8, imac 0x3f1660, m1 0x372390, win 0x375a70;
    void resetCollisionLog(bool) = win inline, ios 0x21f2a0, imac 0x3f2900, m1 0x373520 {
        m_collisionLogTop->removeAllObjects();
        m_collisionLogBottom->removeAllObjects();
        m_collisionLogLeft->removeAllObjects();
        m_collisionLogRight->removeAllObjects();
        if (p0) {
            m_unk50C = -1;
            m_unk510 = -1;
        }
        else {
            m_unk50C = m_lastCollisionBottom;
            m_unk510 = m_lastCollisionTop;
        }
        m_lastCollisionBottom = -1;
        m_lastCollisionTop = -1;
        m_lastCollisionLeft = -1;
        m_lastCollisionRight = -1;
    }
    TodoReturn resetCollisionValues();
    void resetPlayerIcon() = ios 0x22a544, win 0x385550, imac 0x405460, m1 0x383208;
    TodoReturn resetStateVariables();
    void resetStreak() = ios 0x21e73c, win 0x375870, imac 0x3f16d0, m1 0x3723f4;
    void resetTouchedRings(bool) = ios 0x22798c, win 0x3824b0, m1 0x37f644, imac 0x4010d0;
    int reverseMod() {
        return (m_isGoingLeft ? -1 : 1);
    }
    void reversePlayer(EffectGameObject*) = ios 0x2297ac, win 0x382600, imac 0x4041e0, m1 0x382044;
    void ringJump(RingObject*, bool) = win 0x382dd0, imac 0x402c50, m1 0x380dec, ios 0x228ac0;
    void rotateGameplay(int, int, bool, float, float, bool, bool) = win 0x383fc0, m1 0x37f1a8, imac 0x400c30, ios 0x227648;
    void rotateGameplayObject(GameObject*) = win 0x37b5c0, m1 0x375684, imac 0x3f50e0, ios 0x220e94;
    void rotateGameplayOnly(bool param) = win inline, m1 0x38270c, imac 0x4048d0, ios 0x229e20 {
        m_isSideways = param;
        this->updatePlayerArt();
    }
    TodoReturn rotatePreSlopeObjects();
    void runBallRotation(float) = win 0x3775c0, m1 0x3732c0, imac 0x3f26a0, ios 0x21f098;
    void runBallRotation2() = win 0x3776f0;
    void runNormalRotation() = win inline, m1 0x3731e8, imac 0x3f25b0, ios inline {
        this->runNormalRotation(false, 1.0f);
    }
    void runNormalRotation(bool, float) = ios 0x21c204, win 0x377490, imac 0x3ee220, m1 0x36f618;
    void runRotateAction(bool, int) = win inline, m1 0x371934, imac 0x3f0b00, ios 0x21df28 {
        if (!m_isLocked && !m_isDashing) {
            this->stopRotation(p0, 22);
            if (m_isBall) this->runBallRotation(1.f);
            else this->runNormalRotation();
        }
    }
    void saveToCheckpoint(PlayerCheckpoint*) = imac 0x40a6b0, m1 0x387f00, win 0x38b980;
    void setSecondColor(cocos2d::ccColor3B const&) = ios 0x21af40, win 0x387610, imac 0x3ec3a0, m1 0x36dd8c;
    void setupStreak() = ios 0x219cd4, win 0x372a50, imac 0x3eab20, m1 0x36c84c;
    void setYVelocity(double velocity, int) = win 0x372fa0, m1 0x36c5dc, imac 0x3ea920, ios 0x219b38;
    void spawnCircle() = win 0x381780, imac 0x401d20, m1 0x380028, ios 0x2280e4;
    TodoReturn spawnCircle2();
    void spawnDualCircle() = win 0x381d40, imac 0x402130, m1 0x380420, ios 0x228414;
    void spawnFromPlayer(PlayerObject* player, bool flip) = win inline, m1 0x38794c, imac 0x40a0c0, ios 0x22dbb0 {
        this->setVisible(true);
        this->setOpacity(255);
        this->copyAttributes(player);
        if (flip) {
            this->flipGravity(!player->m_isUpsideDown, true);
            this->setYVelocity(-player->getYVelocity(), 49);
        }
        else {
            this->flipGravity(player->m_isUpsideDown, true);
            this->setYVelocity(player->getYVelocity(), 49);
        }
        m_isOnGround = false;
        m_isOnGround2 = false;
        this->toggleVisibility(!player->m_isHidden);
        if (m_isDart) this->placeStreakPoint();
    }
    void spawnPortalCircle(cocos2d::ccColor3B color, float startRadius) = win 0x381930, imac 0x401eb0, m1 0x3801c0, ios 0x2281c4;
    void spawnScaleCircle() = win 0x381b40, m1 0x3802e0, imac 0x401fe0, ios 0x2282e0;
    TodoReturn specialGroundHit();
    TodoReturn speedDown();
    TodoReturn speedUp();
    void spiderTestJump(bool) = ios 0x21ea64, win 0x37e510, m1 0x3727c8, imac 0x3f1ae0;
    void spiderTestJumpInternal(bool) = ios 0x225474, win 0x37e5c0, m1 0x37ad3c, imac 0x3fbe50;
    void spiderTestJumpX(bool);
    void spiderTestJumpY(bool);
    void startDashing(DashRingObject*) = win 0x37fae0, m1 0x37e290, imac 0x3ffa00, ios 0x226cc0;
    TodoReturn stopBurstEffect();
    void stopDashing() = ios 0x21d57c, win 0x380820, m1 0x370c60, imac 0x3efe00;
    void stopParticles() = ios 0x21ea18, imac 0x3f1a80, m1 0x37277c, win 0x375af0;
    void stopPlatformerJumpAnimation() = ios 0x21effc, win 0x3772d0, imac 0x3f2500, m1 0x37314c;
    void stopRotation(bool, int) = win inline, m1 0x3731d8, imac 0x3f2590, ios 0x21f088 {
        m_isRotating = false;
        m_isBallRotating2 = false;
        m_isBallRotating = false;
        m_rotationSpeed = 0.f;
    }
    void stopStreak2() = win inline, ios 0x22d978, imac 0x409d20, m1 0x387654 {
        m_waveTrail->stopActionByTag(8);
        m_waveTrail->setOpacity(0);
        m_waveTrail->stopStroke();
    }
    void storeCollision(PlayerCollisionDirection, int) = win inline, m1 0x373580, imac 0x3f2970, ios inline {
        switch (p0) {
            case PlayerCollisionDirection::Top: {
                if (m_lastCollisionTop != p1) {
                    m_lastCollisionTop = p1;
                    if (m_collisionLogTop) m_collisionLogTop->setObject(m_maybeLastGroundObject, p1);
                }
                break;
            }
            case PlayerCollisionDirection::Bottom: {
                if (m_lastCollisionBottom != p1) {
                    m_lastCollisionBottom = p1;
                    if (m_collisionLogBottom) m_collisionLogBottom->setObject(m_maybeLastGroundObject, p1);
                }
                break;
            }
            case PlayerCollisionDirection::Left: {
                if (m_lastCollisionLeft != p1) {
                    m_lastCollisionLeft = p1;
                    if (m_collisionLogLeft) m_collisionLogLeft->setObject(m_maybeLastGroundObject, p1);
                }
                break;
            }
            case PlayerCollisionDirection::Right: {
                if (m_lastCollisionRight != p1) {
                    m_lastCollisionRight = p1;
                    if (m_collisionLogRight) m_collisionLogRight->setObject(m_maybeLastGroundObject, p1);
                }
                break;
            }
        }
    }
    bool switchedDirTo(PlayerButton) = win 0x382000;
    void switchedToMode(GameObjectType) = ios 0x227a78, win 0x3860a0, imac 0x401440, m1 0x37f824;
    TodoReturn testForMoving(float, GameObject*);
    void toggleBirdMode(bool, bool) = ios 0x22a6e8, win 0x384a90, imac 0x405680, m1 0x383410;
    void toggleDartMode(bool, bool) = ios 0x22b254, win 0x385200, imac 0x406780, m1 0x384438;
    void toggleFlyMode(bool, bool) = ios 0x229f4c, win 0x384760, imac 0x404b70, m1 0x3829b4;
    void toggleGhostEffect(GhostType) = ios 0x227ec0, win 0x3890a0, imac 0x401a30, m1 0x37fd54;
    void togglePlatformerMode(bool val) {
        m_isPlatformer = val;
    }
    void togglePlayerScale(bool, bool) = ios 0x227b9c, win 0x38a970, imac 0x401590, m1 0x37f99c;
    void toggleRobotMode(bool, bool) = ios 0x22b984, win 0x385960, imac 0x407240, m1 0x384e24;
    void toggleRollMode(bool, bool) = ios 0x22b698, win 0x3857e0, imac 0x406e60, m1 0x384a4c;
    void toggleSpiderMode(bool, bool) = ios 0x22bc7c, win 0x385ce0, imac 0x4076c0, m1 0x38525c;
    void toggleSwingMode(bool, bool) = ios 0x22ab80, win 0x384d90, imac 0x405d60, m1 0x383a5c;
    void toggleVisibility(bool) = ios 0x21e598, win 0x3756d0, imac 0x3f1460, m1 0x37219c;
    void touchedObject(GameObject* object) = win inline, ios 0x22e4ec, imac 0x40ad70, m1 0x388410 {
        switch (object->m_objectID) {
            case 1755: {
                m_stateDartSlide = 2;
                break;
            }
            case 1813: {
                m_stateNoAutoJump = 2;
                break;
            }
            case 1829: {
                if (m_isDashing) {
                    this->stopDashing();
                    m_jumpBuffered = false;
                }
            }
            case 1859: {
                m_stateHitHead = 2;
                break;
            }
            case 2069: case 3845: {
                m_stateForce = 2;
                auto forceObject = static_cast<ForceBlockGameObject*>(object);
                auto forceID = forceObject->m_forceID;
                if (forceID > 0) {
                    if (m_jumpPadRelated[forceID]) break;
                    m_jumpPadRelated[forceID] = true;
                }
                m_stateForceVector = m_stateForceVector + forceObject->calculateForceToTarget(this);
                auto magnitude = sqrtf(m_stateForceVector.x * m_stateForceVector.x + m_stateForceVector.y * m_stateForceVector.y);
                if (magnitude > 9999.f) {
                    m_stateForceVector = m_stateForceVector * (9999.f / magnitude);
                }
                break;
            }
            case 2866: {
                m_stateFlipGravity = 2;
                break;
            }
        }
    }
    void tryPlaceCheckpoint() = ios 0x21e35c, imac 0x3f1170, m1 0x371f50, win 0x38c480;
    void unrotateGameplayObject(GameObject*) = win 0x37b8b0;
    TodoReturn unrotatePreSlopeObjects();
    void updateCheckpointMode(bool) = win inline, m1 0x36cbb8, imac 0x3eaeb0, ios 0x21a034 {
        m_quickCheckpointMode = p0;
    }
    void updateCheckpointTest() = m1 0x371e70, imac 0x3f10a0, ios 0x21e288;
    void updateCollide(PlayerCollisionDirection, GameObject*) = ios 0x224768, win 0x37e1c0, imac 0x3faae0, m1 0x379b88;
    void updateCollideBottom(float, GameObject*) = win inline, m1 0x37aa04, imac 0x3fba70, ios 0x225244 {
        auto id = p1 ? p1->m_uniqueID : 0;
        if (m_collidedBottomMaxY == 0.0) {
            m_collidedBottomMaxY = p0;
        }
        else {
            m_collidedBottomMaxY = m_isUpsideDown ? std::min<double>(m_collidedBottomMaxY, p0) : std::max<double>(m_collidedBottomMaxY, p0);
        }
        if (id != 0) this->storeCollision(PlayerCollisionDirection::Bottom, id);
    }
    void updateCollideLeft(float, GameObject*) = win 0x37e3d0, m1 0x37abfc, imac 0x3fbcc0, ios 0x225384;
    void updateCollideRight(float, GameObject*) = win 0x37e470, m1 0x37ab80, imac 0x3fbc20, ios 0x225308;
    void updateCollideTop(float, GameObject*) = win inline, m1 0x37a978, imac 0x3fb9d0, ios 0x2251d0 {
        auto id = p1 ? p1->m_uniqueID : 0;
        if (m_collidedTopMinY == 0.0) {
            m_collidedTopMinY = p0;
        }
        else {
            m_collidedTopMinY = m_isUpsideDown ? std::max<double>(m_collidedTopMinY, p0) : std::min<double>(m_collidedTopMinY, p0);
        }
        if (id != 0) this->storeCollision(PlayerCollisionDirection::Top, id);
    }
    void updateDashAnimation() = m1 0x370a18, imac 0x3efb90, win 0x380ef0;
    void updateDashArt() = ios 0x2266ac, win 0x380390, m1 0x37dbd0, imac 0x3ff300;
    void updateEffects(float param) = ios 0x21e210, win inline, m1 0x371df0, imac 0x3f0ff0 {
        m_waveTrail->updateStroke(param);
    }
    void updateGlowColor() = ios 0x22ca94, win 0x3876a0, imac 0x4088a0, m1 0x386264;
    void updateInternalActions(float) = win 0x38d0c0, m1 0x388d0c, imac 0x40b720, ios 0x22ea40;
    void updateJump(float) = ios 0x21afa8, win 0x375b90, imac 0x3ec410, m1 0x36ddf4;
    TodoReturn updateJumpVariables();
    TodoReturn updateLastGroundObject(GameObject*);
    void updateMove(float) = win 0x374350;
    void updatePlayerArt() = ios 0x229afc, win 0x382a30, imac 0x404530, m1 0x3823c4;
    void updatePlayerBirdFrame(int) = ios 0x22a960, win 0x388550, imac 0x405aa0, m1 0x3837cc;
    void updatePlayerDartFrame(int) = ios 0x22b4dc, win 0x388c50, imac 0x406bf0, m1 0x384808;
    void updatePlayerForce(cocos2d::CCPoint, bool);
    void updatePlayerFrame(int) = ios 0x22afe0, win 0x387ec0, m1 0x38412c, imac 0x406480;
    void updatePlayerGlow() = ios 0x22995c, win 0x38a510, imac 0x4043a0, m1 0x382204;
    void updatePlayerJetpackFrame(int) = ios 0x22a390, win 0x388320, imac 0x405210, m1 0x382fcc;
    void updatePlayerRobotFrame(int id) = ios 0x22d044, win inline, imac 0x408f60, m1 0x386940 {
        if (id < 1) id = 1;
        else if (id > 0x43) id = 0x44;

        createRobot(id);
    }
    void updatePlayerRollFrame(int) = ios 0x22b7d4, win 0x3887f0, imac 0x406ff0, m1 0x384bec;
    void updatePlayerScale() = win 0x38a490, m1 0x3827c8, imac 0x4049a0, ios inline {
        m_actionManager->stopInternalAction(6);
        this->setScaleX(m_vehicleSize);
        this->setScaleY(m_vehicleSize);
    }
    void updatePlayerShipFrame(int) = ios 0x22a1dc, win 0x3880f0, imac 0x404fc0, m1 0x382d90;
    void updatePlayerSpiderFrame(int id) = ios 0x22d05c, win inline, imac 0x408f80, m1 0x386958 {
        if (id < 1) id = 1;
        else if (id > 0x44) id = 0x45;

        createSpider(id);
    }

    void updatePlayerSpriteExtra(gd::string) = win 0x388e80, m1 0x36be6c, imac 0x3ea100, ios 0x21945c;
    void updatePlayerSwingFrame(int) = ios 0x22ada0, win 0x388a20, imac 0x4061a0, m1 0x383e58;
    void updateRobotAnimationSpeed() = win 0x38b350;
    void updateRotation(float, float) = win 0x37b430, imac 0x3f0d20, m1 0x371b20, ios 0x21df64;
    void updateRotation(float) = ios 0x224ca4, win 0x37b1f0, imac 0x3fb360, m1 0x37a378;
    void updateShipRotation(float) = win 0x37ae10, m1 0x379fb0, imac 0x3fafc0, ios 0x224964;
    void updateShipSpriteExtra(gd::string) = win 0x388f90, m1 0x36bf50, imac 0x3ea1d0, ios 0x219528;
    void updateSlopeRotation(float) = win 0x37ad90, m1 0x379e4c, imac 0x3fae30, ios 0x2248e8;
    TodoReturn updateSlopeYVelocity(float);
    void updateSpecial(float dt) = win inline, ios 0x21e1a0, imac 0x3f0f70, m1 0x371d78 {
        m_unk838 += dt;
        if (m_unk838 >= .01f) {
            m_followRelated++;
            m_unk838 -= .01f;
        }
        m_playerFollowFloats[m_followRelated % 200] = m_obPosition.y;
    }
    TodoReturn updateStateVariables();
    TodoReturn updateStaticForce(float, float, bool);
    void updateStreakBlend(bool) = win 0x372f30, m1 0x36ce30, imac 0x3eb160, ios 0x21a244;
    TodoReturn updateStreaks(float);
    void updateSwingFire() = ios 0x229e5c, win 0x385040, m1 0x382814, imac 0x4049f0;
    void updateTimeMod(float, bool) = ios 0x219b6c, win 0x38afc0, imac 0x3ea990, m1 0x36c61c;
    TodoReturn usingWallLimitedMode();
    TodoReturn yStartDown();
    TodoReturn yStartUp();

    cocos2d::CCNode* m_mainLayer;
    bool m_wasTeleported;
    bool m_fixGravityBug;
    bool m_reverseSync;
    double m_yVelocityBeforeSlope;
    double m_dashX;
    double m_dashY;
    double m_dashAngle;
    double m_dashStartTime;
    DashRingObject* m_dashRing;
    double m_slopeStartTime;
    bool m_justPlacedStreak;
    cocos2d::CCNode* m_maybeLastGroundObject;
    cocos2d::CCDictionary* m_collisionLogTop;
    cocos2d::CCDictionary* m_collisionLogBottom;
    cocos2d::CCDictionary* m_collisionLogLeft;
    cocos2d::CCDictionary* m_collisionLogRight;
    int m_lastCollisionBottom;
    int m_lastCollisionTop;
    int m_lastCollisionLeft;
    int m_lastCollisionRight;
    int m_unk50C;
    int m_unk510;
    GameObject* m_currentSlope2;
    GameObject* m_preLastGroundObject;
    float m_slopeAngle;
    bool m_slopeSlidingMaybeRotated;
    bool m_quickCheckpointMode;
    GameObject* m_collidedObject;
    GameObject* m_lastGroundObject;
    GameObject* m_collidingWithLeft;
    GameObject* m_collidingWithRight;
    int m_maybeSavedPlayerFrame;
    double m_scaleXRelated2;
    double m_groundYVelocity;
    double m_yVelocityRelated;
    double m_scaleXRelated3;
    double m_scaleXRelated4;
    double m_scaleXRelated5;
    bool m_isCollidingWithSlope;
    cocos2d::CCSprite* m_dashFireSprite;
    bool m_isBallRotating;
    bool m_unk669;
    GameObject* m_currentPotentialSlope;
    GameObject* m_currentSlope;
    double unk_584;
    int m_collidingWithSlopeId;
    bool m_slopeFlipGravityRelated;
    cocos2d::CCArray* m_particleSystems;
    float m_slopeAngleRadians;
    gd::unordered_map<int, GJPointDouble> m_rotateObjectsRelated;
    gd::unordered_map<int, GameObject*> m_potentialSlopeMap;
    float m_rotationSpeed;
    float m_rotateSpeed;
    bool m_isRotating;
    bool m_isBallRotating2;
    bool m_hasGlow;
    bool m_isHidden;
    GhostType m_ghostType;
    GhostTrailEffect* m_ghostTrail;
    cocos2d::CCSprite* m_iconSprite;
    cocos2d::CCSprite* m_iconSpriteSecondary;
    cocos2d::CCSprite* m_iconSpriteWhitener;
    cocos2d::CCSprite* m_iconGlow;
    cocos2d::CCSprite* m_vehicleSprite;
    cocos2d::CCSprite* m_vehicleSpriteSecondary;
    cocos2d::CCSprite* m_birdVehicle;
    cocos2d::CCSprite* m_vehicleSpriteWhitener;
    cocos2d::CCSprite* m_vehicleGlow;
    PlayerFireBoostSprite* m_swingFireMiddle;
    PlayerFireBoostSprite* m_swingFireBottom;
    PlayerFireBoostSprite* m_swingFireTop;
    cocos2d::CCSprite* m_dashSpritesContainer;
    cocos2d::CCMotionStreak* m_regularTrail;
    cocos2d::CCMotionStreak* m_shipStreak;
    HardStreak* m_waveTrail;
    double m_speedMultiplier;
    double m_yStart;
    double m_gravity;
    float m_trailingParticleLife;
    float m_unk648;
    double m_gameModeChangedTime;
    bool m_padRingRelated;
    bool m_maybeReducedEffects;
    bool m_maybeIsFalling;
    bool m_shouldTryPlacingCheckpoint;
    bool m_playEffects;
    bool m_maybeCanRunIntoBlocks;
    bool m_hasGroundParticles;
    bool m_hasShipParticles;
    bool m_isOnGround3;
    bool m_checkpointTimeout;
    double m_lastCheckpointTime;
    double m_lastJumpTime;
    double m_lastFlipTime;
    double m_flashTime;
    float m_flashRelated;
    float m_flashRelated1;
    cocos2d::ccColor3B m_colorRelated2;
    cocos2d::ccColor3B m_flashRelated3;
    double m_lastSpiderFlipTime;
    bool m_unkBool5;
    bool m_maybeIsVehicleGlowing;
    bool m_switchWaveTrailColor;
    bool m_practiceDeathEffect;
    double m_accelerationOrSpeed;
    double m_snapDistance;
    bool m_ringJumpRelated;
    gd::unordered_set<int> m_ringRelatedSet;
    GameObject* m_objectSnappedTo;
    CheckpointObject* m_pendingCheckpoint;
    int m_onFlyCheckpointTries;
    GJRobotSprite* m_robotSprite;
    GJSpiderSprite* m_spiderSprite;
    bool m_maybeSpriteRelated;
    cocos2d::CCParticleSystemQuad* m_playerGroundParticles;
    cocos2d::CCParticleSystemQuad* m_trailingParticles;
    cocos2d::CCParticleSystemQuad* m_shipClickParticles;
    cocos2d::CCParticleSystemQuad* m_vehicleGroundParticles;
    cocos2d::CCParticleSystemQuad* m_ufoClickParticles;
    cocos2d::CCParticleSystemQuad* m_robotBurstParticles;
    cocos2d::CCParticleSystemQuad* m_dashParticles;
    cocos2d::CCParticleSystemQuad* m_swingBurstParticles1;
    cocos2d::CCParticleSystemQuad* m_swingBurstParticles2;
    bool m_useLandParticles0;
    cocos2d::CCParticleSystemQuad* m_landParticles0;
    cocos2d::CCParticleSystemQuad* m_landParticles1;
    float m_landParticlesAngle;
    float m_landParticleRelatedY;
    int m_playerStreak;
    float m_streakStrokeWidth;
    bool m_disableStreakTint;
    bool m_alwaysShowStreak;
    ShipStreak m_shipStreakType;
    double m_slopeRotation;
    double m_currentSlopeYVelocity;
    double m_unk3d0;
    double m_blackOrbRelated;
    bool m_unk3e0;
    bool m_unk3e1;
    bool m_isAccelerating;
    bool m_isCurrentSlopeTop;
    double m_collidedTopMinY;
    double m_collidedBottomMaxY;
    double m_collidedLeftMaxX;
    double m_collidedRightMinX;
    bool m_fadeOutStreak;
    bool m_canPlaceCheckpoint;
    cocos2d::ccColor3B m_colorRelated;
    cocos2d::ccColor3B m_secondColorRelated;
    bool m_hasCustomGlowColor;
    cocos2d::ccColor3B m_glowColor;
    bool m_maybeIsColliding;
    bool m_jumpBuffered;
    bool m_stateRingJump;
    bool m_wasJumpBuffered;
    bool m_wasRobotJump;
    unsigned char m_stateJumpBuffered;
    bool m_stateRingJump2;
    bool m_touchedRing;
    bool m_touchedCustomRing;
    bool m_touchedGravityPortal;
    bool m_maybeTouchedBreakableBlock;
    geode::SeedValueRSV m_jumpRelatedAC2;
    bool m_touchedPad;
    double m_yVelocity;
    double m_fallSpeed;
    bool m_isOnSlope;
    bool m_wasOnSlope;
    float m_slopeVelocity;
    bool m_maybeUpsideDownSlope;
    bool m_isShip;
    bool m_isBird;
    bool m_isBall;
    bool m_isDart;
    bool m_isRobot;
    bool m_isSpider;
    bool m_isUpsideDown;
    bool m_isDead;
    bool m_isOnGround;
    bool m_isGoingLeft;
    bool m_isSideways;
    bool m_isSwing;
    int m_reverseRelated;
    double m_maybeReverseSpeed;
    double m_maybeReverseAcceleration;
    float m_xVelocityRelated2;
    bool m_isDashing;
    int m_unk9e8;
    int m_groundObjectMaterial;
    float m_vehicleSize;
    float m_playerSpeed;
    cocos2d::CCPoint m_shipRotation;
    cocos2d::CCPoint m_lastPortalPos;
    float m_unkUnused3;
    bool m_isOnGround2;
    double m_lastLandTime;
    float m_platformerVelocityRelated;
    bool m_maybeIsBoosted;
    double m_scaleXRelatedTime;
    bool m_decreaseBoostSlide;
    bool m_unkA29;
    bool m_isLocked;
    bool m_controlsDisabled;
    cocos2d::CCPoint m_lastGroundedPos;
    cocos2d::CCArray* m_touchingRings;
    gd::unordered_set<int> m_touchedRings;
    GameObject* m_lastActivatedPortal;
    bool m_hasEverJumped;
    bool m_hasEverHitRing;
    cocos2d::ccColor3B m_playerColor1;
    cocos2d::ccColor3B m_playerColor2;
    cocos2d::CCPoint m_position;
    bool m_isSecondPlayer;
    bool m_unkA99;
    double m_totalTime;
    bool m_isBeingSpawnedByDualPortal;
    float m_audioScale;
    float m_unkAngle1;
    float m_yVelocityRelated3;
    bool m_defaultMiniIcon;
    bool m_swapColors;
    bool m_switchDashFireColor;
    int m_followRelated;
    gd::vector<float> m_playerFollowFloats;
    float m_unk838;
    int m_stateOnGround;
    unsigned char m_stateUnk;
    unsigned char m_stateNoStickX;
    unsigned char m_stateNoStickY;
    unsigned char m_stateUnk2;
    int m_stateBoostX;
    int m_stateBoostY;
    int m_maybeStateForce2;
    int m_stateScale;
    double m_platformerXVelocity;
    bool m_holdingRight;
    bool m_holdingLeft;
    bool m_leftPressedFirst;
    double m_scaleXRelated;
    bool m_maybeHasStopped;
    float m_xVelocityRelated;
    bool m_maybeGoingCorrectSlopeDirection;
    bool m_isSliding;
    double m_maybeSlopeForce;
    bool m_isOnIce;
    double m_physDeltaRelated;
    bool m_isOnGround4;
    int m_maybeSlidingTime;
    double m_maybeSlidingStartTime;
    double m_changedDirectionsTime;
    double m_slopeEndTime;
    bool m_isMoving;
    bool m_platformerMovingLeft;
    bool m_platformerMovingRight;
    bool m_isSlidingRight;
    double m_maybeChangedDirectionAngle;
    double m_unkUnused2;
    bool m_isPlatformer;
    int m_stateNoAutoJump;
    int m_stateDartSlide;
    int m_stateHitHead;
    int m_stateFlipGravity;
    float m_gravityMod;
    int m_stateForce;
    cocos2d::CCPoint m_stateForceVector;
    bool m_affectedByForces;
    gd::map<int, bool> m_jumpPadRelated;
    float m_somethingPlayerSpeedTime;
    float m_playerSpeedAC;
    bool m_fixRobotJump;
    gd::map<int, bool> m_holdingButtons;
    bool m_inputsLocked;
    gd::string m_currentRobotAnimation;
    bool m_gv0123;
    int m_iconRequestID;
    cocos2d::CCSpriteBatchNode* m_robotBatchNode;
    cocos2d::CCSpriteBatchNode* m_spiderBatchNode;
    cocos2d::CCArray* m_unk958;
    PlayerFireBoostSprite* m_robotFire;
    int m_unkUnused;
    GJBaseGameLayer* m_gameLayer;
    cocos2d::CCLayer* m_parentLayer;
    GJActionManager* m_actionManager;
    bool m_isOutOfBounds;
    float m_fallStartY;
    bool m_disablePlayerSqueeze;
    bool m_robotAnimation1Enabled;
    bool m_robotAnimation2Enabled;
    bool m_spiderAnimationEnabled;
    bool m_ignoreDamage;
    bool m_enable22Changes;
}

[[link(android), depends(DynamicBitset), depends(SavedActiveObjectState), depends(SavedObjectStateRef), depends(SavedSpecialObjectState)]]
class PlayLayer : GJBaseGameLayer, CCCircleWaveDelegate, CurrencyRewardDelegate, DialogDelegate {
    PlayLayer() = ios 0x12633c, win 0x38DF50, m1 0xae588, imac 0xbfcd0;
    ~PlayLayer() = win 0x38e920, m1 0x9c9c4, imac 0xab980, ios 0x1184d4;

    static PlayLayer* create(GJGameLevel* level, bool useReplay, bool dontCreateObjects) = win inline, ios 0x118740, imac 0xabda0, m1 0x9ccd0 {
        auto ret = new PlayLayer();
        if (ret->init(level, useReplay, dontCreateObjects)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static PlayLayer* get() {
        return GameManager::get()->m_playLayer;
    }
    static cocos2d::CCScene* scene(GJGameLevel* level, bool useReplay, bool dontCreateObjects) = ios 0x1186d4, win 0x38ebc0, imac 0xabcf0, m1 0x9cc10;

    virtual void onEnterTransitionDidFinish() = win 0x3a4190, imac 0xbf710, m1 0xae0cc, ios 0x125f5c;
    virtual void onExit() = win 0x3a41c0, m1 0xae110, imac 0xbf740, ios 0x125f90;
    virtual void postUpdate(float) = win 0x39da60, imac 0xbb760, m1 0xaaab0, ios 0x123060;
    virtual void checkForEnd() = win 0x39de30, imac 0xbba90, m1 0xaad98, ios 0x123338;
    virtual void testTime() {}
    virtual void updateVerifyDamage() = win 0x39e000, imac 0xbbb80, m1 0xaae94, ios 0x123420;
    virtual void updateAttemptTime(float) = win 0x39e0f0, imac 0xbbc70, m1 0xaaf9c, ios 0x123510;
    virtual void updateVisibility(float) = win 0x3984e0, imac 0xb7ab0, m1 0xa75f0, ios 0x120198;
    virtual float opacityForObject(GameObject*) = win 0x399410, m1 0xa9384, imac 0xb9de0, ios 0x121be8;
    virtual void updateColor(cocos2d::ccColor3B& color, float fadeTime, int colorID, bool blending, float opacity, cocos2d::ccHSVValue& copyHSV, int colorIDToCopy, bool copyOpacity, EffectGameObject* callerObject, int unk1, int unk2) = win 0x39b0c0, imac 0xb9ec0, m1 0xa9448, ios 0x121c58;
    virtual void activateEndTrigger(int, bool, bool) = m1 0xa6648, imac 0xb69f0, ios 0x11f5dc {}
    virtual void activatePlatformerEndTrigger(EndTriggerGameObject*, gd::vector<int> const&) = win 0x395320, imac 0xb6ec0, m1 0xa6a7c, ios 0x11f8f4;
    virtual void toggleGlitter(bool) = win 0x39c9d0, imac 0xba9a0, m1 0xa9eb4, ios 0x1225ec;
    virtual void destroyPlayer(PlayerObject*, GameObject*) = win 0x39caf0, imac 0xbaa60, m1 0xa9f8c, ios 0x122650;
    virtual void toggleGroundVisibility(bool) = win 0x39c820, m1 0xa9dc8, imac 0xba8b0, ios 0x122508;
    virtual void toggleMGVisibility(bool) = win 0x39c8a0, imac 0xba8e0, m1 0xa9df8, ios 0x122538;
    virtual void toggleHideAttempts(bool) = win 0x39c8e0, imac 0xba900, m1 0xa9e08, ios 0x122548;
    virtual float timeForPos(cocos2d::CCPoint position, int order, int channel, bool songTriggers, int id) = win 0x39c6f0, imac 0xba790, m1 0xa9cf8, ios 0x122438;
    virtual cocos2d::CCPoint posForTime(float time) = win 0x39c780, imac 0xba810, m1 0xa9d6c, ios 0x1224ac;
    virtual void resetSPTriggered() = win 0x39c7e0, imac 0xba860, m1 0xa9d8c, ios 0x1224cc;
    virtual void updateTimeWarp(float) = win 0x394a40, imac 0xb68e0, m1 0xa6560, ios 0x11f5c4;
    virtual void playGravityEffect(bool) = win 0x39b180, imac 0xb9f30, m1 0xa94b4, ios 0x121cc4;
    virtual void manualUpdateObjectColors(GameObject*) = win 0x399420, m1 0xa938c, imac 0xb9df0, ios 0x121bf0;
    virtual void checkpointActivated(CheckpointGameObject*) = win 0x39e130, imac 0xbbce0, m1 0xab010, ios 0x123580;
    virtual void flipArt(bool) = win 0x39bb60, imac 0xba710, m1 0xa9c94, ios 0x1223d4;
    virtual void updateTimeLabel(int, int, bool) = win 0x39b690, imac 0xba360, m1 0xa98b8, ios 0x122048;
    virtual void checkSnapshot() = m1 0xad494, imac 0xbeaa0, ios 0x125610 {}
    virtual void toggleProgressbar() = win 0x39b890, imac 0xba530, m1 0xa9a90, ios 0x1221f0;
    virtual void toggleInfoLabel() = win 0x39c670, imac 0xba750, m1 0xa9cb4, ios 0x1223f4;
    virtual void removeAllCheckpoints() = win 0x3a1130, m1 0xad284, imac 0xbe890, ios 0x125104;
    virtual void toggleMusicInPractice() = win 0x39ba30, imac 0xba6b0, m1 0xa9c08, ios 0x122368;
    virtual void currencyWillExit(CurrencyRewardLayer*) = win 0x39d880, imac 0xbb5b0, m1 0xaa984, ios 0x122f34;
    virtual void circleWaveWillBeRemoved(CCCircleWave*) = win 0x39da40, m1 0xaa9e4, imac 0xbb650, ios 0x122f94;
    virtual void dialogClosed(DialogLayer*) = win 0x39d8a0, imac 0xbb5f0, m1 0xaa9b0, ios 0x122f60;

    void addCircle(CCCircleWave* cw) {
        m_circleWaveArray->addObject(cw);
    }
    void addObject(GameObject*) = ios 0x11bef8, win 0x396eb0, imac 0xb2190, m1 0xa2668;
    void addToGroupOld(GameObject*);
    void applyCustomEnterEffect(GameObject* object, bool isRight) = win 0x399aa0, m1 0xa84dc, imac 0xb8c90, ios 0x120d98;

    void applyEnterEffect(GameObject* object, int enterType, bool isRight) = win 0x39a790, m1 0xa8c7c, imac 0xb9650, ios 0x121518;
    bool canPauseGame() = ios 0x125b68, win inline, imac 0xbf270, m1 0xadc4c {
        return !m_hasCompletedLevel && !m_levelEndAnimationStarted;
    }
    TodoReturn checkpointWithID(int);
    TodoReturn colorObject(int, cocos2d::ccColor3B);
    void commitJumps() = win 0x3a2eb0;
    TodoReturn compareStateSnapshot();
    CheckpointObject* createCheckpoint() = ios 0x123594, win 0x39e150, m1 0xab024, imac 0xbbd00;
    void createObjectsFromSetupFinished() = ios 0x11fdcc, win 0x396a10, imac 0xb7490, m1 0xa6fc4;
    void delayedFullReset() = win inline, ios 0x125614, imac 0xbead0, m1 0xad4a0 {
        if (m_isPlatformer) {
            m_started = false;
            m_platformerRestart = true;
        }
        this->runAction(cocos2d::CCSequence::create(
            cocos2d::CCDelayTime::create(.5f),
            cocos2d::CCCallFunc::create(this, callfunc_selector(PlayLayer::fullReset)),
            nullptr
        ));
    }
    void delayedResetLevel() = ios 0x122f20, win 0x3a1de0, m1 0xaa970, imac 0xbb590;
    void fullReset() = ios 0x125688, win 0x3a1ce0, imac 0xbeb30, m1 0xad514;
    float getCurrentPercent() = ios 0x121fd8, win 0x39ca70, imac 0xba2f0, m1 0xa9848;
    int getCurrentPercentInt() = win inline, ios inline, imac 0xba9f0, m1 0xa9f18 { // i love this
        return static_cast<int>(this->getCurrentPercent());
    }
    cocos2d::CCPoint getEndPosition() = win inline, m1 0xa4004, imac 0xb4000, ios 0x11d78c {
        return !m_isPlatformer && m_endPortal && !m_platformerEndTrigger ? m_endPortal->getPosition() : m_endPosition;
    }
    TodoReturn getLastCheckpoint();
    TodoReturn getRelativeMod(cocos2d::CCPoint, float, float, float);
    TodoReturn getRelativeModNew(cocos2d::CCPoint, float, float, bool, bool);
    double getTempMilliTime();
    TodoReturn gravityEffectFinished();
    void incrementJumps() = imac 0xbf200, m1 0xadbcc;
    bool init(GJGameLevel* level, bool useReplay, bool dontCreateObjects) = ios 0x1187cc, win 0x38ec70, imac 0xabe20, m1 0x9cd6c;
    bool isGameplayActive();
    void levelComplete() = ios 0x11d7e8, win 0x390c30, imac 0xb4050, m1 0xa406c;
    void loadActiveSaveObjects(gd::vector<SavedActiveObjectState>&, gd::vector<SavedSpecialObjectState>&) = win inline, m1 0xad19c, imac 0xbe7e0, ios 0x12507c {
        for (auto& state : p0) {
            auto object = static_cast<EnhancedGameObject*>(state.m_gameObject);
            object->m_activatedByPlayer1 = state.m_activatedByPlayer1;
            object->m_activatedByPlayer2 = state.m_activatedByPlayer2;
        }
        for (auto& state : p1) {
            auto object = state.m_gameObject;
            if (object->m_classType == GameObjectClassType::Animated) {
                static_cast<AnimatedGameObject*>(object)->playAnimation(state.m_animationID);
            }
            else if (object->m_objectID == 1615) {
                static_cast<LabelGameObject*>(object)->m_updateLabel = true;
            }
        }
    }
    void loadDefaultColors() = ios 0x11bcfc, win 0x39ad80, m1 0xa2300, imac 0xb1de0;
    void loadDynamicSaveObjects(gd::vector<SavedObjectStateRef>&) = win inline, imac 0xbe690, m1 0xad05c, ios 0x124f3c {
        for (auto& state : p0) {
            auto object = state.m_gameObject;
            object->m_positionX = state.m_positionX;
            object->m_positionY = state.m_positionY;
            object->m_rotationXOffset = state.m_rotationXOffset;
            object->m_rotationYOffset = state.m_rotationYOffset;
            object->addToCustomScaleX(state.m_addToCustomScaleX);
            object->addToCustomScaleY(state.m_addToCustomScaleY);
            object->setRRotation(0.f);
            object->setRScale(1.f);
            object->m_unk4C4 = -1;
            object->m_unk4CC = -1;
            object->setPosition(object->getRealPosition());
            object->setLastPosition(object->getRealPosition());
            object->setObjectRectDirty(true);
            object->m_isDirty = true;
            object->setOrientedRectDirty(true);
            this->updateObjectSection(object);
        }
    }
    void loadFromCheckpoint(CheckpointObject*) = ios 0x124b9c, win 0x3a07b0, m1 0xacb4c, imac 0xbe120;
    CheckpointObject* loadLastCheckpoint() = win inline, ios 0x124b50, m1 0xacaf4, imac 0xbe0d0 {
        if (m_checkpointArray->count() != 0) {
            auto checkpoint = static_cast<CheckpointObject*>(m_checkpointArray->lastObject());
            this->loadFromCheckpoint(checkpoint);
            return checkpoint;
        }
        return nullptr;
    }
    CheckpointObject* markCheckpoint() = ios 0x123284, win 0x3a06e0, imac 0xbb9d0, m1 0xaacd4;
    void onQuit() = ios 0x11d45c, win 0x3a3db0, m1 0xa3cac, imac 0xb3c60;
    void optimizeColorGroups() = win 0x397d10, m1 0x9f2d8, imac 0xae840, ios 0x11a5b8;
    void optimizeOpacityGroups() = win 0x397fa0, m1 0x9f52c, imac 0xaea30, ios 0x11a718;
    void pauseGame(bool) = ios 0x125b90, win 0x3a31f0, imac 0xbf290, m1 0xadc74;
    void playEndAnimationToPos(cocos2d::CCPoint) = ios 0x11f5e0, win 0x394aa0, imac 0xb6a00, m1 0xa664c;
    void playPlatformerEndAnimationToPos(cocos2d::CCPoint, bool) = ios 0x11f9e8, win 0x395430, imac 0xb6fb0, m1 0xa6b84;
    TodoReturn playReplay(gd::string);
    void prepareCreateObjectsFromSetup(gd::string& levelString) = win 0x395f80, m1 0x9dac0, imac 0xacca0, ios 0x119218;
    void prepareMusic(bool) = ios 0x11d2f4, imac 0xb3ae0, win 0x3a3ae0, m1 0xa3b18;
    void processCreateObjectsFromSetup() = ios 0x119504, win 0x396230, m1 0x9de44, imac 0xad090;
    void processLoadedMoveActions() = win 0x398310, m1 0xa7448, imac 0xb7920, ios 0x12004c;
    void queueCheckpoint() {
        m_tryPlaceCheckpoint = true;
    }
    void removeAllObjects() = ios 0x11d5a4, imac 0xb3dd0, m1 0xa3e14, win 0x3a3fb0;
    void removeCheckpoint(bool) = ios 0x124a64, win 0x3a0ff0, m1 0xaca08, imac 0xbdfd0;
    void removeFromGroupOld(GameObject*);
    void resetLevel() = ios 0x11ca00, win 0x3a1f90, imac 0xb2f80, m1 0xa3120;
    void resetLevelFromStart() = ios 0x12584c, win 0x3a1df0, m1 0xad7d0, imac 0xbee20;
    void resume() = ios 0x125de8, win 0x3a37c0, m1 0xadf54, imac 0xbf580;
    void resumeAndRestart(bool) = ios 0x125cc0, win 0x3a34b0, imac 0xbf3d0, m1 0xaddbc;
    void saveActiveSaveObjects(gd::vector<SavedActiveObjectState>&, gd::vector<SavedSpecialObjectState>&) = win 0x3a1ae0;
    void saveDynamicSaveObjects(gd::vector<SavedObjectStateRef>&) = win 0x3a17d0;
    void scanActiveSaveObjects() = win inline, m1 0xa0398, imac 0xaf930, ios 0x11aef4 {
        CCObject* obj;
        CCARRAY_FOREACH(m_objects, obj) {
            auto object = static_cast<GameObject*>(obj);
            if (object->canAllowMultiActivate()) {
                if (!object->canMultiActivate(m_isPlatformer)) {
                    m_activeSaveObjects1.push_back(object);
                }
            }
            else if (object->m_classType == GameObjectClassType::Animated) {
                if (static_cast<AnimatedGameObject*>(object)->m_notGrounded) m_activeSaveObjects2.push_back(object);
            }
        }
    }
    void scanDynamicSaveObjects() = win 0x3a1180, m1 0x9f780, imac 0xaec20, ios 0x11a878;
    void screenFlipObject(GameObject*) = win 0x399880;
    void setDamageVerifiedIdx(int);
    void setupHasCompleted() = ios 0x119a3c, win 0x38f9c0, imac 0xadac0, m1 0x9e66c;
    TodoReturn shouldBlend(int);
    void showCompleteEffect() = ios 0x11e048, win 0x391fd0, imac 0xb4c70, m1 0xa4af4;
    void showCompleteText() = ios 0x11e3a0, win 0x3919a0, imac 0xb50f0, m1 0xa4ecc;
    void showEndLayer() = win 0x395750, m1 0xa5a18, imac 0xb5cd0, ios 0x11eaf0;
    void showHint() = win 0x39d8c0, imac 0xbb420, m1 0xaa800, ios 0x122db8;
    void showNewBest(bool newReward, int orbs, int diamonds, bool demonKey, bool noRetry, bool noTitle) = ios 0x11eb6c, win 0x3925f0, m1 0xa5a94, imac 0xb5d40;
    void showRetryLayer() = win 0x3959c0, imac 0xb7400, m1 0xa6f44, ios 0x11fc60;
    void showTwoPlayerGuide() = win 0x395be0, ios 0x11b870, m1 0xa1d74, imac 0xb1890;
    void spawnCircle() = win 0x394f50, m1 0xa4a20, imac 0xb4b80, ios 0x11dfa0;
    void spawnFirework() = win 0x395040, m1 0xa5800, imac 0xb5a80, ios 0x11e8d8;
    void startGame() = ios 0x11d400, win 0x390bd0, m1 0xa3c50, imac 0xb3c00;
    void startGameDelayed() = ios 0x11d77c, imac 0xb3fe0, m1 0xa3ff4, win 0x390c20;
    void startMusic() = ios 0x11d6a4, win 0x3a3c60, imac 0xb3ef0, m1 0xa3f14;
    TodoReturn startRecording();
    TodoReturn startRecordingDelayed();
    void stopRecording() = win inline, m1 0x9d8b8, imac 0xacac0, ios 0x119100 {
        this->stopActionByTag(31);
    }
    void storeCheckpoint(CheckpointObject*) = ios 0x124a04, win 0x3a0610, m1 0xac964, imac 0xbdf30;
    TodoReturn takeStateSnapshot();
    TodoReturn toggleBGEffectVisibility(bool);
    void toggleDebugDraw(bool) = win inline, m1 0x9d960, imac 0xacb60, ios 0x11919c {
        m_isDebugDrawEnabled = p0;
        m_debugDrawNode->clear();
        m_debugDrawNode->setVisible(m_isDebugDrawEnabled && m_isPracticeMode);
    }
    TodoReturn toggleGhostEffect(int);
    void toggleIgnoreDamage(bool value) = win inline, m1 0x9d9c8, imac 0xacbb0, ios 0x1191f4 {
        this->m_ignoreDamage = value;
        if (value) this->m_isIgnoreDamageEnabled = true;
        this->m_player1->m_maybeCanRunIntoBlocks = value;
        this->m_player2->m_maybeCanRunIntoBlocks = value;
        this->updateTestModeLabel();
    }
    void togglePracticeMode(bool practiceMode) = ios 0x125760, win 0x3a2f20, imac 0xbeca0, m1 0xad654;
    TodoReturn tryStartRecord();
    void updateAttempts() = win 0x3a2c70, imac 0xbeeb0, m1 0xad858, ios 0x1258d4;
    void updateEffectPositions() = m1 0xaa9fc, imac 0xbb690;
    void updateInfoLabel() = ios 0x11b150, win 0x39bb90, imac 0xafdc0, m1 0xa0770;
    void updateInvisibleBlock(GameObject* object, float rightFadeBound, float leftFadeBound, float rightFadeWidth, float leftFadeWidth, cocos2d::ccColor3B const& lbgColor) = win 0x3994e0, imac 0xb8a10, m1 0xa8264, ios 0x120b50;
    void updateProgressbar() = ios 0x11bb80, win 0x39b4f0, m1 0xa2124, imac 0xb1c20;
    void updateScreenRotation(int, bool, bool, float, int, float, int, int);
    void updateTestModeLabel() = ios 0x11d4e8, win 0x390b40, imac 0xb3d10, m1 0xa3d38;
    void updateTimeWarp(EffectGameObject*, float);

    int m_unk36c8;
    bool m_unk36cc;
    bool m_unk36cd;
    bool m_unk36ce;
    bool m_unk36cf;
    geode::SeedValueRSV m_damageVerifiedIndex;
    bool m_damageVerified;
    gd::vector<gd::string> m_objectStrings;
    cocos2d::CCArray* m_coinArray;
    bool m_passedIntegrity;
    int m_objectsCreated;
    gd::vector<GameObject*> m_dynamicSaveObjects;
    gd::vector<GameObject*> m_activeSaveObjects1;
    gd::vector<GameObject*> m_activeSaveObjects2;
    gd::vector<SavedObjectStateRef> m_dynamicSaveObjects2;
    int m_unk3768;
    bool m_platformerRestart;
    bool m_unk376d;
    bool m_isIgnoreDamageEnabled;
    cocos2d::CCLabelBMFont* m_statusLabel;
    float m_unk3778;
    int m_unk377c;
    float m_unk3780;
    float m_unk3784;
    int m_unk3788;
    int m_unk378c;
    bool m_endChecked;
    float m_endXPosition;
    CheckpointObject* m_currentCheckpoint;
    cocos2d::CCArray* m_checkpointArray;
    cocos2d::CCArray* m_speedObjects;
    bool m_unk37b0;
    bool m_unk37b1;
    cocos2d::CCPoint m_enterEffectPosition;
    cocos2d::CCArray* m_unk37c0;
    bool m_isSilent;
    int m_unk37cc;
    cocos2d::CCArray* m_circleWaveArray;
    cocos2d::CCArray* m_collectibles;
    bool m_unk37e0;
    int m_pulseRodIndex;
    float m_maxObjectX;
    cocos2d::CCLabelBMFont* m_attemptLabel;
    cocos2d::CCLabelBMFont* m_percentageLabel;
    bool m_decimalPercentage;
    bool m_hintShown;
    cocos2d::CCSprite* m_progressBar;
    cocos2d::CCSprite* m_progressFill;
    float m_progressWidth;
    float m_progressHeight;
    int m_totalGravityEffects;
    int m_activeGravityEffects;
    int m_gravityEffectIndex;
    cocos2d::CCArray* m_gravityEffects;
    bool m_doNot;
    float m_unk383c;
    bool m_skipAudioStep;
    gd::unordered_set<int> m_blendingColors;
    int m_jumps;
    bool m_hasJumped;
    int m_uncommittedJumps;
    bool m_showLeaderboardPercentage;
    bool m_hasCompletedLevel;
    bool m_inResetDelay;
    int m_lastAttemptPercent;
    bool m_endLayerStars;
    int m_orbs;
    int m_diamonds;
    bool m_secretKey;
    bool m_recordingStopped;
    double m_unk38b0;
    double m_unk38b8;
    double m_unk38c0;
    bool m_unk38c8;
    float m_unk38cc;
    int m_unk38d0;
    double m_attemptTime;
    double m_bestAttemptTime;
    double m_pauseTime;
    double m_currentTime;
    double m_pauseDelta;
    float m_unk3900;
    bool m_glitterEnabled;
    bool m_bgEffectDisabled;
    bool m_unk3906;
    bool m_isPaused;
    bool m_disableGravityEffect;
    cocos2d::CCLabelBMFont* m_infoLabel;
    cocos2d::CCPoint m_unk3918;
    cocos2d::CCPoint m_unk3920;
    cocos2d::CCDictionary* m_colorKeyDict;
    gd::vector<cocos2d::ccColor3B> m_keyColors;
    gd::vector<float> m_keyOpacities;
    DynamicBitset m_keyPulses;
    int m_nextColorKey;
    bool m_tryPlaceCheckpoint;
    CheckpointGameObject* m_activatedCheckpoint;
    bool m_musicPrepared;
    cocos2d::CCPoint m_endPosition;
    EndTriggerGameObject* m_platformerEndTrigger;
}

[[link(android)]]
class PointNode : cocos2d::CCObject {
    // virtual ~PointNode();
    PointNode() {}

    static PointNode* create(cocos2d::CCPoint) = win inline, m1 0x90144, imac 0x9d620, ios 0x61d5c {
        auto ret = new PointNode();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(cocos2d::CCPoint p0) = win inline, m1 0x90478, imac 0x9d9a0, ios inline {
        m_point = p0;

        return true;
    }

    cocos2d::CCPoint m_point;
}

[[link(android)]]
class PriceLabel : cocos2d::CCNode {
    // virtual ~PriceLabel();

    static PriceLabel* create(int);

    bool init(int) = m1 0x415640, imac 0x4ac570;
    void setColor(cocos2d::ccColor3B);
    void setOpacity(float);
    void setPrice(int);

    cocos2d::CCLabelBMFont* m_priceLabel;
    cocos2d::CCSprite* m_coinSprite;
}

[[link(android)]]
class ProfilePage : FLAlertLayer, FLAlertLayerProtocol, LevelCommentDelegate, CommentUploadDelegate, UserInfoDelegate, UploadActionDelegate, UploadPopupDelegate, LeaderboardManagerDelegate {
    // virtual ~ProfilePage();
    // ProfilePage() = ios 0x1a9c90;

    static ProfilePage* create(int accountID, bool ownProfile) = ios 0x199e24, win 0x3a7a20, imac 0x7a3080, m1 0x6b5200;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x6bcf04, imac 0x7ab750, ios 0x19ff84;
    virtual void keyBackClicked() = win 0x3ae050, m1 0x6bb96c, imac 0x7aa100, ios 0x19f304;
    virtual void show() = win 0x3ae2e0, m1 0x6bbb9c, imac 0x7aa380, ios 0x19f44c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x3ada20, imac 0x7a9ba0, m1 0x6bb3d4, ios 0x19ef78;
    virtual void updateUserScoreFinished() = win 0x3ae1a0, m1 0x6bba60, imac 0x7aa210, ios 0x19f310;
    virtual void updateUserScoreFailed() = win 0x3ae290, imac 0x7aa2e0, m1 0x6bbaf4, ios 0x19f3a4;
    virtual void getUserInfoFinished(GJUserScore*) = win 0x3aeb40, imac 0x7aa670, m1 0x6bbe88, ios 0x19f584;
    virtual void getUserInfoFailed(int) = win 0x3aec30, imac 0x7aaa60, m1 0x6bc25c, ios 0x19f7f8;
    virtual void userInfoChanged(GJUserScore*) = win 0x3aec80, imac 0x7aab20, m1 0x6bc334, ios 0x19f86c;
    virtual void loadCommentsFinished(cocos2d::CCArray*, char const*) = win 0x3af270, imac 0x7aad40, m1 0x6bc558, ios 0x19f990;
    virtual void loadCommentsFailed(char const*) = win 0x3af2f0, imac 0x7aae30, m1 0x6bc664, ios 0x19fa14;
    virtual void setupPageInfo(gd::string, char const*) = win 0x3af350, imac 0x7aaf00, m1 0x6bc738, ios 0x19fa84;
    virtual void commentUploadFinished(int) = win 0x3af550, m1 0x6bcc2c, imac 0x7ab460, ios 0x19fd4c;
    virtual void commentUploadFailed(int, CommentError) = win 0x3af5a0, m1 0x6bcccc, imac 0x7ab4f0, ios 0x19fda4;
    virtual void commentDeleteFailed(int, int) = win 0x3af6c0, imac 0x7ab5c0, m1 0x6bcda0, ios 0x19fe54;
    virtual void onClosePopup(UploadActionPopup*) = win 0x3add10, m1 0x6bb58c, imac 0x7a9d80, ios 0x19f0fc;
    virtual void uploadActionFinished(int, int) = win 0x3add60, imac 0x7a9e00, m1 0x6bb614, ios 0x19f16c;
    virtual void uploadActionFailed(int, int) = win 0x3adf20, imac 0x7a9fe0, m1 0x6bb80c, ios 0x19f280;

    void blockUser() = win inline, m1 0x6bb31c, imac 0x7a9ac0, ios 0x19eec8 {
        if (GameLevelManager::sharedState()->blockUser(m_score->m_accountID)) {
            m_popupDelegate = UploadActionPopup::create(this, "Blocking user...");
            m_popupDelegate->show();
        }
    }
    bool init(int accountID, bool ownProfile) = ios 0x199ea8, win 0x3a7c00, m1 0x6b5370, imac 0x7a3290;
    bool isCorrect(char const* key) = win 0x3aed00, m1 0x6bc440, imac 0x7aac10, ios 0x19f8f0;
    bool isOnWatchlist(int) = win inline, m1 0x6b5db0, imac 0x7a3d50, ios inline { return false; }
    void loadPage(int) = win 0x3aee30, m1 0x6bbf48, imac 0x7aa720, ios 0x19f644;
    void loadPageFromUserInfo(GJUserScore*) = ios 0x19b0d8, win 0x3a9240, m1 0x6b662c, imac 0x7a4660;
    void onBlockUser(cocos2d::CCObject* sender) = win 0x3ad200, m1 0x6b9f98, imac 0x7a8690, ios 0x19e298;
    void onClose(cocos2d::CCObject* sender) = ios 0x19a8dc, win 0x3adfd0, m1 0x6b5db8, imac 0x7a3d60;
    void onComment(cocos2d::CCObject* sender) = win 0x3acc50, m1 0x6ba888, imac 0x7a8fa0, ios 0x19e770;
    void onCommentHistory(cocos2d::CCObject* sender) = ios 0x19d948, win 0x3acbc0, imac 0x7a7830, m1 0x6b92c8;
    void onCopyName(cocos2d::CCObject* sender) = win 0x3ac290, m1 0x6b9908, imac 0x7a7fa0, ios 0x19ddd8;
    void onFollow(cocos2d::CCObject* sender) = win 0x3ad450, m1 0x6b6028, imac 0x7a3fe0, ios 0x19ab48;
    void onFriend(cocos2d::CCObject* sender) = ios 0x19e02c, win 0x3ace10, imac 0x7a82f0, m1 0x6b9c54;
    void onFriends(cocos2d::CCObject* sender) = win 0x3aeae0, m1 0x6ba750, imac 0x7a8e60, ios 0x19e708;
    void onInfo(cocos2d::CCObject* sender) = ios 0x19d980, m1 0x6b9300, imac 0x7a7870, win 0x3ac4c0;
    void onMessages(cocos2d::CCObject* sender) = win 0x3aeab0, m1 0x6ba6c4, imac 0x7a8dd0, ios 0x19e6e4;
    void onMyLevels(cocos2d::CCObject* sender) = win 0x3ac8b0, imac 0x7a8a10, m1 0x6ba314, ios 0x19e44c;
    void onMyLists(cocos2d::CCObject* sender) = win 0x3aca60, imac 0x7a8bf0, m1 0x6ba4e8, ios 0x19e58c;
    void onNextPage(cocos2d::CCObject* sender) = win 0x3af530, m1 0x6bb3c8, imac 0x7a9b80, ios 0x19ef6c;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x3af540, m1 0x6bb3bc, imac 0x7a9b60, ios 0x19ef60;
    void onRequests(cocos2d::CCObject* sender) = win 0x3aeb10, m1 0x6ba7dc, imac 0x7a8ef0, ios 0x19e72c;
    void onSendMessage(cocos2d::CCObject* sender) = win 0x3acc00, m1 0x6b9b4c, imac 0x7a81e0, ios 0x19dfdc;
    void onSettings(cocos2d::CCObject* sender) = win 0x3ae900, m1 0x6ba868, imac 0x7a8f80, ios 0x19e750;
    void onStatInfo(cocos2d::CCObject* sender) = win 0x3ac0c0, m1 0x6b89e4, imac 0x7a6f70, ios 0x19d1a0;
    void onTwitch(cocos2d::CCObject* sender) = win 0x3ae760, m1 0x6b9124, imac 0x7a76a0, ios 0x19d7ec;
    void onTwitter(cocos2d::CCObject* sender) = win 0x3ae5d0, m1 0x6b8f6c, imac 0x7a74f0, ios 0x19d690;
    void onUpdate(cocos2d::CCObject* sender) = win 0x3a8bb0, m1 0x6b6288, imac 0x7a4270, ios 0x19ad38;
    void onYouTube(cocos2d::CCObject* sender) = win 0x3ae440, m1 0x6b8dbc, imac 0x7a7350, ios 0x19d534;
    void setupComments() = win inline, m1 0x6b5e30, imac 0x7a3de0, ios 0x19a954 {
        auto winSize = cocos2d::CCDirector::sharedDirector()->getWinSize();
        auto leftSprite = cocos2d::CCSprite::createWithSpriteFrameName("GJ_arrow_01_001.png");
        leftSprite->setScale(.8f);
        m_leftArrow = CCMenuItemSpriteExtra::create(leftSprite, this, menu_selector(ProfilePage::onPrevPage));
        m_buttonMenu->addChild(m_leftArrow);
        m_leftArrow->setPosition(m_buttonMenu->convertToNodeSpace(winSize / 2.f + cocos2d::CCPoint { -195.f, -53.f }));
        m_leftArrow->setSizeMult(2.f);
        auto rightSprite = cocos2d::CCSprite::createWithSpriteFrameName("GJ_arrow_01_001.png");
        rightSprite->setFlipX(true);
        rightSprite->setScale(.8f);
        m_rightArrow = CCMenuItemSpriteExtra::create(rightSprite, this, menu_selector(ProfilePage::onNextPage));
        m_buttonMenu->addChild(m_rightArrow);
        m_rightArrow->setPosition(m_buttonMenu->convertToNodeSpace(winSize / 2.f + cocos2d::CCPoint { 195.f, -53.f }));
        m_rightArrow->setSizeMult(2.f);
        m_leftArrow->setVisible(false);
        m_rightArrow->setVisible(false);
    }
    void setupCommentsBrowser(cocos2d::CCArray*) = win 0x3af120, m1 0x6b64fc, imac 0x7a4520, ios 0x19afa8;
    void showNoAccountError() = win 0x3ae060, m1 0x6bb250, imac 0x7a99e0, ios 0x19ee30;
    void toggleMainPageVisibility(bool visible) = win inline, m1 0x6bbcec, imac 0x7aa4c0, ios inline {
        CCObject* obj;
        CCARRAY_FOREACH(m_arrayWithUsernameLabel, obj) {
            static_cast<cocos2d::CCNode*>(obj)->setVisible(visible);
        }
        CCARRAY_FOREACH(m_buttons, obj) {
            static_cast<cocos2d::CCNode*>(obj)->setVisible(visible);
        }
        if (m_list) m_list->setVisible(visible);
        if (visible) this->updatePageArrows();
        m_rightArrow->setVisible(false);
        m_leftArrow->setVisible(false);
    }
    void toggleShip(cocos2d::CCObject* sender) = ios 0x19d480, win 0x3ac010, imac 0x7a72a0, m1 0x6b8cfc;
    void updateLevelsLabel() = win inline, m1 0x6bcc28, imac 0x7ab450, ios inline {}
    void updatePageArrows() = win 0x3af4c0, m1 0x6bbe2c, imac 0x7aa610, ios inline {
        m_leftArrow->setVisible(m_pageStartIdx != 0);
        m_rightArrow->setVisible(m_itemCount > m_pageEndIdx + m_pageStartIdx);
    }

    GJUserScore* m_score;
    int m_accountID;
    bool m_ownProfile;
    gd::string m_profileKey;
    cocos2d::CCLabelBMFont* m_somethingWentWrong;
    cocos2d::CCLabelBMFont* m_usernameLabel;
    GJCommentListLayer* m_list;
    CCMenuItemSpriteExtra* m_rightArrow;
    CCMenuItemSpriteExtra* m_leftArrow;
    CCMenuItemSpriteExtra* m_followBtn;
    bool m_unk;
    cocos2d::CCArray* m_buttons;
    cocos2d::CCArray* m_arrayWithUsernameLabel;
    int m_itemCount;
    int m_pageStartIdx;
    int m_pageEndIdx;
    int m_page;
    LoadingCircle* m_circle;
    UploadActionPopup* m_popupDelegate;
    CCMenuItemSpriteExtra* m_refreshBtn;
    int m_unk2;
}

[[link(android)]]
class PromoInterstitial : FLAlertLayer {
    // virtual ~PromoInterstitial();

    static PromoInterstitial* create(bool);

    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x265a58, imac 0x2c16d0;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x265cc8, imac 0x2c18f0;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x265ba8, imac 0x2c17d0;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x265c58, imac 0x2c1870;
    virtual void keyBackClicked() = imac 0x2c1530, m1 0x2658d4;
    virtual void show() = imac 0x2c1500, m1 0x2658a8;

    bool init(bool);
    void onClick(cocos2d::CCObject* sender) = m1 0x2659e0, imac 0x2c1650;
    void onClose(cocos2d::CCObject* sender);
    void setup() = m1 0x26567c, imac 0x2c12a0;

    bool m_fullVersion;
    cocos2d::CCMenu* m_closeMenu;
    bool m_promoTouched;
    gd::string m_marketLink;
    bool m_showAdBanner;
}

[[link(android)]]
class PulseEffectAction {
    bool isFinished();
    void step(float delta);
    float valueForDelta(float currentTime, float fadeInTime, float holdTime, float fadeOutTime);

    bool m_disabled;
    float m_fadeInTime;
    float m_holdTime;
    float m_fadeOutTime;
    float m_deltaTime;
    int m_targetGroupID;
    float m_currentValue;
    cocos2d::ccColor3B m_color;
    PulseEffectType m_pulseEffectType;
    cocos2d::ccHSVValue m_hsv;
    int m_colorIndex;
    bool m_mainOnly;
    bool m_detailOnly;
    bool m_isDynamicHsv;
    int m_triggerUniqueID;
    int m_controlID;
    float m_startTime;
}

[[link(android)]]
class PurchaseItemPopup : FLAlertLayer {
    // virtual ~PurchaseItemPopup();
    // PurchaseItemPopup();

    static PurchaseItemPopup* create(GJStoreItem*) = win 0x2a74d0, m1 0x2a77d0, imac 0x310ed0, ios 0x14fa80;

    virtual void keyBackClicked() = win 0x84650, m1 0x2aa32c, imac 0x3140d0, ios 0x151c10;

    bool init(GJStoreItem*) = win 0x2a75c0, m1 0x2a9818, imac 0x3134b0, ios 0x151228;
    void onClose(cocos2d::CCObject* sender) = win 0x84620, m1 0x2aa27c, imac 0x314030, ios 0x151b60;
    void onPurchase(cocos2d::CCObject* sender) = win 0x2a8470, m1 0x2aa2b8, imac 0x314060, ios 0x151b9c;

    GJStoreItem* m_storeItem;
    GJPurchaseDelegate* m_delegate;
}

[[link(android)]]
class RandTriggerGameObject : ChanceTriggerGameObject {
    // virtual ~RandTriggerGameObject();

    static RandTriggerGameObject* create();

    virtual bool init() = win 0x49b670, m1 0x172148, imac 0x1b1b50, ios 0x38250c;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x49b690, imac 0x1b1de0, m1 0x1723c4, ios 0x382630;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x49b860, imac 0x1b2040, m1 0x17260c, ios 0x382708;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x49ba60, imac 0x1b2680, m1 0x172bc0, ios 0x382b10;

    int getRandomGroupID();
    int getTotalChance();
}

[[link(android)]]
class RateDemonLayer : FLAlertLayer, UploadPopupDelegate, UploadActionDelegate {
    RateDemonLayer() {
        m_uploadFinished = false;
        m_submitButton = nullptr;
        m_demons = nullptr;
        m_unkPtr = nullptr;
        m_levelID = 0;
        m_demonRate = 0;
        m_moderator = false;
        m_popup = nullptr;
        m_delegate = nullptr;
    }
    ~RateDemonLayer() = win inline, m1 0x21c940, imac 0x2717f0, ios 0x41de20 {
        auto glm = GameLevelManager::sharedState();
        if (glm->m_uploadActionDelegate == this) glm->m_uploadActionDelegate = nullptr;
        CC_SAFE_RELEASE(m_demons);
    }

    static RateDemonLayer* create(int levelID) = win inline, m1 0x21cbdc, imac 0x271bd0, ios 0x41def0 {
        auto ret = new RateDemonLayer();
        if (ret->init(levelID)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x3b22a0, m1 0x21d918, imac 0x2728e0, ios 0x41e7c4;
    virtual void uploadActionFinished(int, int) = win 0x3b2080, imac 0x2725a0, m1 0x21d56c, ios 0x41e618;
    virtual void uploadActionFailed(int, int) = win 0x3b2110, imac 0x272690, m1 0x21d6bc, ios 0x41e6ac;
    virtual void onClosePopup(UploadActionPopup*) = win 0x3b21e0, imac 0x272800, m1 0x21d82c, ios 0x41e748;

    bool init(int) = win 0x3b1790, m1 0x21ccfc, imac 0x271d40, ios 0x41dfc8;
    void onClose(cocos2d::CCObject* sender) = win 0x3b2260, m1 0x21d3e8, imac 0x272420, ios 0x41e4b0;
    void onRate(cocos2d::CCObject* sender) = win 0x3b1ee0, imac 0x272470, m1 0x21d444, ios 0x41e50c;
    void selectRating(cocos2d::CCObject*) = win 0x3b1d60, m1 0x21d2dc, imac 0x272330, ios 0x41e3b4;

    bool m_uploadFinished;
    CCMenuItemSpriteExtra* m_submitButton;
    cocos2d::CCArray* m_demons;
    void* m_unkPtr;
    int m_levelID;
    int m_demonRate;
    bool m_moderator;
    UploadActionPopup* m_popup;
    RateLevelDelegate* m_delegate;
}

[[link(android)]]
class RateLevelDelegate {
    virtual void rateLevelClosed() {}
}

[[link(android)]]
class RateLevelLayer : FLAlertLayer {
    RateLevelLayer() {
        m_submitButton = nullptr;
        m_difficulties = nullptr;
        m_levelID = 0;
        m_levelRate = 0;
        m_delegate = nullptr;
    }
    ~RateLevelLayer() = win inline, m1 0x4a8170, imac 0x550d00, ios 0x62108 {
        CC_SAFE_RELEASE(m_difficulties);
    }

    static RateLevelLayer* create(int levelID) = win inline, m1 0x4a8394, imac 0x551030, ios 0x621ac {
        auto ret = new RateLevelLayer();
        if (ret->init(levelID)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x3b2ab0, m1 0x4a8d14, imac 0x5519b0, ios 0x627b0;

    bool init(int) = win 0x3b23c0, m1 0x4a8498, imac 0x551170, ios 0x62268;
    void onClose(cocos2d::CCObject* sender) = win 0x3b2a70, m1 0x4a8c50, imac 0x551910, ios 0x626ec;
    void onRate(cocos2d::CCObject* sender) = win 0x3b2a20, imac 0x551960, m1 0x4a8cac, ios 0x62748;
    void selectRating(cocos2d::CCObject* sender) = win 0x3b28d0, imac 0x551830, m1 0x4a8b34, ios 0x625f8;

    CCMenuItemSpriteExtra* m_submitButton;
    cocos2d::CCArray* m_difficulties;
    int m_levelID;
    int m_levelRate;
    RateLevelDelegate* m_delegate;
}

[[link(android)]]
class RateStarsLayer : FLAlertLayer, UploadPopupDelegate, UploadActionDelegate {
    // virtual ~RateStarsLayer();
    RateStarsLayer();

    static RateStarsLayer* create(int, bool, bool) = win 0x3b2c40, m1 0x223a90, imac 0x279820, ios 0x84128;

    virtual void keyBackClicked() = win 0x3b3b90, m1 0x224d64, imac 0x27ab50, ios 0x84c9c;
    virtual void uploadActionFinished(int, int) = win 0x3b3990, imac 0x27a810, m1 0x2249d8, ios 0x84b00;
    virtual void uploadActionFailed(int, int) = win 0x3b3a10, imac 0x27a900, m1 0x224b18, ios 0x84b8c;
    virtual void onClosePopup(UploadActionPopup*) = win 0x3b3ad0, imac 0x27aa70, m1 0x224c78, ios 0x84c20;

    CCMenuItemSpriteExtra* getStarsButton(int, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*, float) = win 0x3b3470;
    bool init(int, bool, bool) = win 0x3b2d90, m1 0x223bd8, imac 0x2799b0, ios 0x841b4;
    void onClose(cocos2d::CCObject* sender) = win 0x3b3b50, m1 0x224850, imac 0x27a680;
    void onFeature(cocos2d::CCObject* sender) = win 0x3b3440, m1 0x224838, imac 0x27a650, ios 0x8496c;
    void onRate(cocos2d::CCObject* sender) = win 0x3b37a0, imac 0x27a6d0, m1 0x2248ac, ios 0x849e0;
    void onToggleCoins(cocos2d::CCObject* sender);
    void selectRating(cocos2d::CCObject*) = win 0x3b35b0, m1 0x22466c, imac 0x27a4b0, ios 0x84808;

    bool m_uploadFinished;
    bool m_moderator;
    CCMenuItemSpriteExtra* m_submitButton;
    cocos2d::CCArray* m_buttons;
    int m_levelID;
    int m_starsRate;
    bool m_coinsToggled;
    cocos2d::CCSprite* m_coinSprite;
    UploadActionPopup* m_popup;
    GJDifficultySprite* m_difficultySprite;
    int m_featureState;
    RateLevelDelegate* m_delegate;
}

[[link(android)]]
class RetryLevelLayer : GJDropDownLayer, RewardedVideoDelegate {
    // virtual ~RetryLevelLayer();

    static RetryLevelLayer* create();

    virtual void keyBackClicked() = win 0x3b4c40, imac 0x4e64b0, m1 0x4485ec, ios 0x1b5c44;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x3b4ad0, imac 0x4e63e0, m1 0x448540, ios 0x1b5bf8;
    virtual void customSetup() = win 0x3b3d00, m1 0x4474c4, imac 0x4e5300, ios 0x1b4fb4;
    virtual void showLayer(bool) = win 0x3b48a0, m1 0x44805c, imac 0x4e5ec0, ios 0x1b5aa8;
    virtual void enterAnimFinished() = win 0x3b49c0, m1 0x44816c, imac 0x4e5fc0, ios 0x1b5bb0;
    virtual void rewardedVideoFinished() = win 0x3b4a00, m1 0x448530, imac 0x4e63c0, ios 0x1b5be8;
    virtual bool shouldOffsetRewardCurrency() { return true; }
    virtual void keyUp(cocos2d::enumKeyCodes) = m1 0x4485e4, imac 0x4e6490, ios 0x1b5c3c {}

    const char* getEndText();
    void onEveryplay(cocos2d::CCObject* sender);
    void onMenu(cocos2d::CCObject* sender) = win 0x3b4b20, m1 0x447f40, imac 0x4e5dd0, ios 0x1b5a04;
    void onReplay(cocos2d::CCObject* sender) = win 0x3b4a10, m1 0x447ef4, imac 0x4e5d80, ios 0x1b59b8;
    void onRewardedVideo(cocos2d::CCObject* sender);
    void setupLastProgress() = win 0x3b4460, m1 0x447b8c, imac 0x4e59f0, ios 0x1b5658;

    cocos2d::CCMenu* m_mainMenu;
    bool m_exitingMenu;
    bool m_unk1e9;
}

[[link(android)]]
class RewardedVideoDelegate {
    virtual void rewardedVideoFinished() {}
    virtual bool shouldOffsetRewardCurrency() { return false; }
}

[[link(android)]]
class RewardsPage : FLAlertLayer, FLAlertLayerProtocol, GJRewardDelegate {
    RewardsPage() {
        m_leftLabel = nullptr;
        m_rightLabel = nullptr;
        m_leftChest = nullptr;
        m_rightChest = nullptr;
        m_leftOpen = false;
        m_rightOpen = false;
        m_openLayer = nullptr;
    }
    ~RewardsPage() = win inline, m1 0x1bd0b4, imac 0x208190, ios 0x1c4608 {
        auto glm = GameLevelManager::sharedState();
        if (glm->m_GJRewardDelegate == this) glm->m_GJRewardDelegate = nullptr;
    }

    static RewardsPage* create() = ios 0x1c46cc, imac 0x2085b0, m1 0x1bd3d0, win inline {
        auto ret = new RewardsPage();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    static char const* getRewardFrame(int type, int state) = win inline, imac 0x2094b0, m1 0x1be17c {
        return cocos2d::CCString::createWithFormat("chest_%02d_%02d_001.png", type, state)->getCString();
    }

    virtual bool init() = win 0x3b5120, m1 0x1bd4e4, imac 0x208720, ios 0x1c4798;
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x1bec8c, imac 0x209fc0, ios 0x1c5bcc;
    virtual void keyBackClicked() = win 0x84650, m1 0x1bec10, imac 0x209f50, ios 0x1c5b50;
    virtual void show() = win 0x3ae2e0, m1 0x1beab8, imac 0x209df0, ios 0x1c5a10;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = m1 0x1bec08, imac 0x209f30, ios 0x1c5b48 {}
    virtual void rewardsStatusFinished(int) = win 0x3b6120, imac 0x209a70, m1 0x1be754, ios 0x1c57bc;
    virtual void rewardsStatusFailed() = win 0x3b6370, imac 0x209d00, m1 0x1be9b4, ios 0x1c597c;
    void onClose(cocos2d::CCObject* sender);
    void onFreeStuff(cocos2d::CCObject* sender) = win 0x3b6920, m1 0x1be150, imac 0x209480, ios 0x1c5274;
    void onReward(cocos2d::CCObject* sender) = win 0x3b5fe0, imac 0x2094d0, m1 0x1be1a4, ios 0x1c52a0;
    void tryGetRewards();
    void unlockLayerClosed(RewardUnlockLayer* layer) = win inline, imac 0x20a000, m1 0x1becc4, ios inline {
        if (m_openLayer == layer) m_openLayer = nullptr;
    }
    callback void updateTimers(float) = win 0x3b6470, m1 0x1be2c4, imac 0x2095d0, ios 0x1c53ac;

    cocos2d::CCLabelBMFont* m_leftLabel;
    cocos2d::CCLabelBMFont* m_rightLabel;
    CCMenuItemSpriteExtra* m_leftChest;
    CCMenuItemSpriteExtra* m_rightChest;
    bool m_leftOpen;
    bool m_rightOpen;
    RewardUnlockLayer* m_openLayer;
}

[[link(android)]]
class RewardUnlockLayer : FLAlertLayer, CurrencyRewardDelegate {
    // virtual ~RewardUnlockLayer();

    static RewardUnlockLayer* create(int, RewardsPage*) = ios 0x1c56d8, win 0x3b6950, imac 0x209900, m1 0x1be624;

    virtual void keyBackClicked() = m1 0x1c25c8, imac 0x20dd60, ios 0x1c8e14 {}
    virtual void currencyWillExit(CurrencyRewardLayer*) = win 0x3ba210, m1 0x1c25a0, imac 0x20dd20, ios 0x1c8dec;

    void connectionTimeout() = ios 0x1c6a60, win 0x3b7850, imac 0x20b430, m1 0x1bff18;
    bool init(int, RewardsPage*) = ios 0x1c5cbc, win 0x3b6a80, m1 0x1bef6c, imac 0x20a3e0;
    void labelEnterFinishedO(cocos2d::CCObject*) = win inline {}
    void onClose(cocos2d::CCObject* sender) = win 0x3ba220, imac 0x20b3d0, m1 0x1bfec0;
    void playDropSound() = win 0x3b78b0, m1 0x1bfd64, imac 0x20b290, ios 0x1c68d8;
    void playLabelEffect(int, int, cocos2d::CCSprite*, cocos2d::CCPoint, float) = win 0x3b9180, ios 0x1c86c8, imac 0x20d5c0, m1 0x1c1e58;
    void playRewardEffect() = ios 0x1c6ac8, imac 0x20b4a0, m1 0x1bff80, win 0x3b7a70;
    bool readyToCollect(GJRewardItem* item) = win inline, imac 0x209c10, m1 0x1be8c8 {
        return item ? m_chestType == (int)item->m_rewardType : false;
    }
    void showCloseButton() = ios 0x1c8d70, imac 0x20dc90, m1 0x1c2524, win 0x3b9110;
    bool showCollectReward(GJRewardItem*) = ios 0x1c58b8, win 0x3b7790, imac 0x209c30, m1 0x1be8e8;
    void step2() = ios 0x1c6948, win 0x3b7950, imac 0x20b300, m1 0x1bfdf0;
    void step3() = ios 0x1c86b0, win 0x3b7a50, imac 0x20d5a0, m1 0x1c1e40;

    cocos2d::CCArray* m_backgroundObjects;
    RewardsPage* m_rewardsPage;
    GJChestSprite* m_chestSprite;
    int m_chestType;
    bool m_rewardCollected;
    bool m_animationPlayed;
    GJRewardItem* m_rewardItem;
    cocos2d::CCLabelBMFont* m_wrongLabel;
    CCMenuItemSpriteExtra* m_closeBtn;
    CCMenuItemSpriteExtra* m_rewardBtn;
    float m_unkFloat;
}

[[link(android)]]
class RingObject : EffectGameObject {
    // virtual ~RingObject();

    RingObject() {
        m_claimTouch = false;
        m_isSpawnOnly = false;
    }

    static RingObject* create(char const*) = win 0x489570, m1 0x165a10, imac 0x1a3270, ios 0x37b3a8;

    virtual void setScale(float) = win 0x4898f0, m1 0x165ca8, imac 0x1a3520, ios 0x37b5e4;
    virtual void setRotation(float) = win 0x38c9f0, m1 0x165d08, imac 0x1a3580, ios 0x37b634;
    virtual void resetObject() = win 0x4898d0, m1 0x165c7c, imac 0x1a3500, ios 0x37b5b8;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4899b0, imac 0x1a35b0, m1 0x165d1c, ios 0x37b648;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x489ad0, imac 0x1a3700, m1 0x165e28, ios 0x37b748;
    virtual void setRScale(float) = win 0x489920, m1 0x165cd8, imac 0x1a3550, ios 0x37b60c;
    virtual void triggerActivated(float) = win 0x489620, m1 0x165b30, imac 0x1a33a0, ios 0x37b46c;
    virtual bool shouldDrawEditorHitbox() = win 0x4899a0, imac 0x1a3590, m1 0x165d0c, ios 0x37b638;
    virtual void powerOnObject(int) = win 0x489630, m1 0x165b3c, imac 0x1a33b0, ios 0x37b478;

    bool init(char const* p0) = win inline, m1 0x165ae0, imac 0x1a3340, ios inline {
        if (!EffectGameObject::init(p0)) return false;
        m_customGlowColor = true;
        m_isTouchTriggered = true;
        return true;
    }
    void spawnCircle() = win 0x4896d0, m1 0x165b94, imac 0x1a3410, ios 0x37b4d0;

    bool m_claimTouch;
    // property 504
    bool m_isSpawnOnly;
}

[[link(android)]]
class RotateGameplayGameObject : EffectGameObject {
    // virtual ~RotateGameplayGameObject();

    static RotateGameplayGameObject* create();

    virtual bool init() = win 0x4ab3a0, m1 0x198058, imac 0x1dfcf0, ios 0x3918bc;
    virtual void updateStartValues() = win 0x4abcc0, m1 0x199834, imac 0x1e1a10, ios 0x392124;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4aba30, imac 0x1e1690, m1 0x199544, ios 0x391e68;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4ab410, imac 0x1dfd40, m1 0x1980a8, ios 0x39190c;

    void updateGameplayRotation();

    // property 166
    int m_moveDirection;
    // property 167
    int m_groundDirection;
    // property 169
    bool m_editVelocity;
    // property 584
    bool m_overrideVelocity;
    // property 582
    float m_velocityModX;
    // property 583
    float m_velocityModY;
    // property 171
    bool m_changeChannel;
    // property 172
    bool m_channelOnly;
    // property 173
    int m_targetChannelID;
    // property 368
    bool m_instantOffset;
    // property 585
    bool m_dontSlide;
}

[[link(android)]]
class ScrollingLayer : cocos2d::CCLayerColor {
    // virtual ~ScrollingLayer();
    ScrollingLayer() = m1 0x629f88, imac 0x70aae0, ios 0x1bacb4 {
        m_scrollFactor = 0.f;
        m_touchID = -1;
        m_contentLayer = nullptr;
        m_parentLayer = nullptr;
    }

    static ScrollingLayer* create(cocos2d::CCSize size, cocos2d::CCPoint position, float factor) = win inline, m1 0x629898, imac 0x70a2c0, ios 0x1ba74c {
        auto ret = new ScrollingLayer();
        if (ret->init(size, position, factor)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void draw() = win 0x70ee0, imac 0x70a580, m1 0x629b24, ios 0x1ba978;
    virtual void visit() = win 0x70fa0, imac 0x70a650, m1 0x629bc8, ios 0x1baa1c;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x70ff0, imac 0x70a7a0, m1 0x629cdc, ios 0x1baaa4;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x710e0, imac 0x70a940, m1 0x629e38, ios 0x1bab64;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x711f0, m1 0x629f34, imac 0x70aa60, ios 0x1bac60;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x629f6c, imac 0x70aaa0, ios 0x1bac98;

    cocos2d::CCRect getViewRect() = ios 0x1ba8bc, imac 0x70a490, m1 0x629a68, win 0x70df0;
    bool init(cocos2d::CCSize size, cocos2d::CCPoint position, float factor) = win inline, m1 0x6299ac, imac 0x70a3d0, ios 0x1ba800 {
        if (!cocos2d::CCLayerColor::initWithColor({ 0, 0, 0, 0 })) return false;
        m_scrollFactor = factor;
        this->addChild(cocos2d::CCLayerColor::create({ 0, 0, 0, 50 }), -2);
        m_contentLayer = cocos2d::CCLayer::create();
        this->addChild(m_contentLayer, -1);
        m_size = size;
        return true;
    }
    void setStartOffset(cocos2d::CCPoint offset) = win inline, imac 0x70a760, m1 0x629ca4, ios 0x1baa6c {
        m_startOffset = offset;
        m_contentLayer->setPosition(offset);
    }

    cocos2d::CCPoint m_position;
    cocos2d::CCSize m_size;
    cocos2d::CCPoint m_touchStartPosition;
    cocos2d::CCPoint m_touchPosition;
    cocos2d::CCPoint m_startOffset;
    float m_scrollFactor;
    int m_touchID;
    cocos2d::CCLayer* m_contentLayer;
    cocos2d::CCLayer* m_parentLayer;
}

[[link(android)]]
class SearchButton : cocos2d::CCSprite {
    // virtual ~SearchButton();

    static SearchButton* create(char const*, char const*, float, char const*) = ios 0x56f84, win 0x2fdcd0, imac 0x613e90, m1 0x540198;

    bool init(char const*, char const*, float, char const*) = ios 0x588f0, win 0x2fdda0, imac 0x616050, m1 0x542340;

    cocos2d::CCLabelBMFont* m_label;
    cocos2d::CCSprite* m_icon;
}

[[link(android)]]
class SearchSFXPopup : SetTextPopup {
    // virtual ~SearchSFXPopup();

    static SearchSFXPopup* create(gd::string);

    bool init(gd::string) = m1 0x3a7c94, imac 0x42cf70;
    void onSearchFolders(cocos2d::CCObject* sender);
}

[[link(android)]]
class SecretGame01Layer : cocos2d::CCLayer {
    // virtual ~SecretGame01Layer() = m1 0x3dc158, imac 0x46cd20;

    static SecretGame01Layer* create() = m1 0x3db7e4, imac 0x46c200;

    virtual void update(float) = m1 0x3dcfe8, imac 0x46dc90;
    virtual bool init() = m1 0x3dc234, imac 0x46ce50;

    void didSelectCorrectObject(CCMenuItemSpriteExtra*) = m1 0x3dce10, imac 0x46dad0;
    void gameStep01() = m1 0x3dc610, imac 0x46d200;
    void gameStep02() = m1 0x3dc890, imac 0x46d4d0;
    int getCountForDifficulty(int) = m1 0x3dc418, imac 0x46d040;
    gd::string getFrameForDifficulty(int) = m1 0x3dc440, imac 0x46d070;
    int getRowsForDifficulty(int) = m1 0x3dc3f4, imac 0x46d010;
    int getTimeForDifficulty(int) = m1 0x3dc504, imac 0x46d100;
    void onSelectButton(cocos2d::CCObject* sender) = m1 0x3dc528, imac 0x46d130;
    void resetGame() = m1 0x3db904, imac 0x46c350;
    void resetGameTimer() = m1 0x3dc9d8, imac 0x46d630;
    void scaleOutGame(bool) = m1 0x3dca50, imac 0x46d6c0;
    void showGameOver() = m1 0x3dca44, imac 0x46d6a0;
    void showGameWon() = m1 0x3dcdfc, imac 0x46dab0;

    cocos2d::CCArray* m_gameObjects;
    cocos2d::CCArray* m_requiredObjects;
    cocos2d::CCMenu* m_mainMenu;
    int m_selectedObject;
    int m_gameDifficulty;
    bool m_gameActive;
    float m_timeElapsed;
    float m_gameTime;
    cocos2d::CCSprite* m_timeBarSprite;
}

[[link(android)]]
class SecretLayer : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol {
    SecretLayer() {
        m_basicMessageIndex = -1;
        m_selectedThread = 0;
        m_threadMessageIndex = 0;
        m_basicMessageCount = 0;
        m_doomedIndex = 0;
        m_searchInput = nullptr;
        m_messageLabel = nullptr;
        m_messageThreads = nullptr;
        m_threadTag = -1;
    }
    ~SecretLayer() = win inline, m1 0x515254, imac 0x5e2c60, ios 0x3b5700 {
        CC_SAFE_RELEASE(m_messageThreads);
    }

    static SecretLayer* create() = win inline {
        auto ret = new SecretLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene() = win inline, m1 0x515464, imac 0x5e2f90, ios 0x3b57a0 {
        auto scene = cocos2d::CCScene::create();
        AppDelegate::get()->m_runningScene = scene;
        auto layer = SecretLayer::create();
        scene->addChild(layer);
        return scene;
    }

    virtual bool init() = win 0x3c5700, m1 0x515624, imac 0x5e31b0, ios 0x3b58ac;
    virtual void keyBackClicked() = win 0x3cabb0, m1 0x518d94, imac 0x5e6fe0, ios 0x3b85a4;
    virtual void textInputOpened(CCTextInputNode*) = win 0x3c84b0, m1 0x51818c, imac 0x5e60c0, ios 0x3b7ab0;
    virtual void textInputClosed(CCTextInputNode*) = win 0x3c8600, m1 0x51826c, imac 0x5e6190, ios 0x3b7b9c;
    virtual void textChanged(CCTextInputNode*) = win 0x3c8600, m1 0x51837c, imac 0x5e6260, ios 0x3b7c1c;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = m1 0x518184, imac 0x5e60a0, ios 0x3b7aa8 {}

    gd::string getBasicMessage() = win 0x3c99b0, m1 0x517b54, imac 0x5e5aa0;
    gd::string getMessage() = win 0x3c8a50;
    gd::string getThreadMessage() = win 0x3c8c40, m1 0x518564, imac 0x5e6420;
    cocos2d::CCNode* nodeWithTag(int);
    void onBack(cocos2d::CCObject* sender) = win 0x3cab10;
    void onSubmit(cocos2d::CCObject* sender) = win 0x3c6a40, m1 0x516584, imac 0x5e4170, ios 0x3b65c0;
    void playCoinEffect() = win 0x3ca690;
    void selectAThread();
    void updateMessageLabel(gd::string) = win 0x3c89c0;
    void updateSearchLabel(char const*) = win 0x3c86d0;

    int m_basicMessageIndex;
    int m_selectedThread;
    int m_threadMessageIndex;
    int m_basicMessageCount;
    int m_doomedIndex;
    CCTextInputNode* m_searchInput;
    cocos2d::CCLabelBMFont* m_messageLabel;
    CCMenuItemSpriteExtra* m_submitButton;
    cocos2d::CCDictionary* m_messageThreads;
    int m_threadTag;
}

[[link(android)]]
class SecretLayer2 : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, DialogDelegate {
    SecretLayer2() = ios 0x311b7c {
        m_threadTag = -1;
        m_basicMessageIndex = -1;
        m_selectedThread = 0;
        m_threadMessageIndex = 0;
        m_basicMessageCount = 0;
        m_errorMessageIndex = -1;
        m_searchInput = nullptr;
        m_messageLabel = nullptr;
        m_messageThreads = nullptr;
        m_exiting = false;
        m_doorDialogIndex = -1;
        m_secretLevelButton = nullptr;
        m_secretLevelLabels = nullptr;
        m_secretDoorButton = nullptr;
    }
    ~SecretLayer2() = win inline, m1 0x3f700c, imac 0x489bc0, ios 0x3097f4 {
        CC_SAFE_RELEASE(m_messageThreads);
        CC_SAFE_RELEASE(m_secretLevelLabels);
    }

    static SecretLayer2* create() = win inline, m1 0x3f72cc, imac 0x489fc0, ios 0x3098ec {
        auto ret = new SecretLayer2();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene() = ios 0x3098a8, win 0x3cadf0, imac 0x489f80, m1 0x3f7288;

    virtual bool init() = win 0x3caf70, imac 0x48a0f0, m1 0x3f73b4, ios 0x309960;
    virtual void onExit() = win 0x3d25a0, imac 0x4900c0, m1 0x3fce88, ios 0x30dc8c;
    virtual void keyBackClicked() = win 0x3d2590, m1 0x3fcd9c, imac 0x48ffd0, ios 0x30dc80;
    virtual void textInputOpened(CCTextInputNode*) = win 0x3cfa10, m1 0x3fbe64, imac 0x48f060, ios 0x30d318;
    virtual void textInputClosed(CCTextInputNode*) = win 0x3cfb60, m1 0x3fbf44, imac 0x48f130, ios 0x30d404;
    virtual void textChanged(CCTextInputNode*) = win 0x3cfb60, m1 0x3fc054, imac 0x48f200, ios 0x30d484;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = m1 0x3fbe5c, imac 0x48f040, ios 0x30d310 {}
    virtual void dialogClosed(DialogLayer*) = win 0x3cd250, m1 0x3fa9c0, imac 0x48dbb0, ios 0x30c6f4;

    gd::string getBasicMessage() = win 0x3d0880, m1 0x3fc23c, imac 0x48f3c0, ios 0x30d5c8;
    gd::string getErrorMessage() = win 0x3d13e0, m1 0x3fb5c8, imac 0x48e800, ios 0x30cfb0;
    gd::string getMessage() = win 0x3cffb0, m1 0x3f8288, imac 0x48b000, ios 0x30a6c4;
    gd::string getThreadMessage() = win 0x3d0190, m1 0x3fc958, imac 0x48faa0, ios 0x30d864;
    cocos2d::CCNode* nodeWithTag(int tag) = win inline, m1 0x3f81fc, imac 0x48af80, ios inline {
        auto node = cocos2d::CCNode::create();
        node->setTag(tag);
        return node;
    }
    void onBack(cocos2d::CCObject* sender) = win 0x3d24e0, imac 0x48b320, m1 0x3f8594, ios 0x30a8f4;
    void onDoor(cocos2d::CCObject* sender) = ios 0x30bb3c, win 0x3cd5a0, imac 0x48ca80, m1 0x3f9a70;
    void onSecretLevel(cocos2d::CCObject* sender) = ios 0x30bd10, win 0x3cd2f0, imac 0x48ccc0, m1 0x3f9cd4;
    void onSubmit(cocos2d::CCObject* sender) = ios 0x30a968, win 0x3cdf00, imac 0x48b390, m1 0x3f8608;
    void playCoinEffect() = win 0x3d2060, m1 0x3fab58, imac 0x48dd80, ios 0x30c7a4;
    void selectAThread() = win inline, m1 0x3fc164, imac 0x48f2d0, ios 0x30d504 {
        auto keys = m_messageThreads->allKeys();
        if (m_threadTag < 0) m_threadTag = (float)(keys->count() - 1) * (float)rand() / (float)RAND_MAX;
        else m_threadTag++;
        if (keys->count() <= m_threadTag) m_threadTag = 0;
        if (m_messageThreads->count() != 0) {
            auto key = static_cast<cocos2d::CCInteger*>(keys->objectAtIndex(m_threadTag));
            m_selectedThread = m_messageThreads->objectForKey(key->getValue())->getTag();
        }
    }
    void showCompletedLevel() = win 0x3cc5a0, m1 0x3f9e98, imac 0x48ce80, ios 0x30be6c;
    void showSecretLevel() = win 0x3cc430, m1 0x3fa8ac, imac 0x48da80, ios 0x30c5e4;
    void updateMessageLabel(gd::string text) = win 0x3cff20, m1 0x3f8234, imac 0x48afb0, ios 0x30a674;
    void updateSearchLabel(char const*) = ios 0x30a754, win 0x3cfc30, m1 0x3f831c, imac 0x48b090;

    int m_threadTag;
    int m_basicMessageIndex;
    int m_selectedThread;
    int m_threadMessageIndex;
    int m_basicMessageCount;
    int m_errorMessageIndex;
    CCTextInputNode* m_searchInput;
    cocos2d::CCLabelBMFont* m_messageLabel;
    CCMenuItemSpriteExtra* m_submitButton;
    cocos2d::CCDictionary* m_messageThreads;
    bool m_exiting;
    int m_doorDialogIndex;
    CCMenuItemSpriteExtra* m_secretLevelButton;
    cocos2d::CCArray* m_secretLevelLabels;
    CCMenuItemSpriteExtra* m_secretDoorButton;
}

[[link(android)]]
class SecretLayer3 : cocos2d::CCLayer, DialogDelegate {
    SecretLayer3() {
        m_lockInput = false;
        m_locksArray = nullptr;
        m_demonEyes = nullptr;
        m_demonBody = nullptr;
        m_secretChest = nullptr;
    }
    ~SecretLayer3() = win inline, m1 0x3fcf18, imac 0x4901b0, ios 0x30dd18 {
        CC_SAFE_RELEASE(m_locksArray);
    }

    static SecretLayer3* create() = win inline, m1 0x3fd114, imac 0x490490, ios 0x30ddb4 {
        auto ret = new SecretLayer3();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene() = win inline, m1 0x3faa88, imac 0x48dc80, ios 0x30c760 {
        auto scene = cocos2d::CCScene::create();
        AppDelegate::get()->m_runningScene = scene;
        auto layer = SecretLayer3::create();
        scene->addChild(layer);
        return scene;
    }

    virtual bool init() = win 0x3d2b20, imac 0x490560, m1 0x3fd1cc, ios 0x30de60;
    virtual void onExit() = win 0x3d8430, imac 0x4953f0, m1 0x401c1c, ios 0x31197c;
    virtual void keyBackClicked() = win 0x3d8420, imac 0x4953c0, m1 0x401c10, ios 0x311970;
    virtual void dialogClosed(DialogLayer*) = win 0x3d7e20, imac 0x4950a0, m1 0x4018d8, ios 0x311714;

    void animateEyes() = win 0x3d4480, m1 0x3fe834, imac 0x491c00, ios 0x30f0d0;
    void firstInteractionStep1() = win inline, m1 0x3ff9a0, imac 0x492f60, ios 0x30fee0 {
        m_lockInput = true;
        m_demonEyes->stopAllActions();
        m_demonEyes->setScale(1.f);
        m_demonEyes->setOpacity(0);
        m_demonEyes->setVisible(true);
        m_demonEyes->runAction(cocos2d::CCFadeIn::create(1.f));
        this->runAction(cocos2d::CCSequence::create(
            cocos2d::CCDelayTime::create(2.f),
            cocos2d::CCCallFunc::create(this, callfunc_selector(SecretLayer3::firstInteractionStep2)),
            nullptr
        ));
    }
    void firstInteractionStep2() = win 0x3d45a0, m1 0x3ffa5c, imac 0x493020, ios 0x30ff9c;
    void firstInteractionStep3() = win inline, m1 0x3ffe34, imac 0x493440, ios 0x310288 {
        for (int i = 0; i < m_locksArray->count(); i++) {
            auto lock = static_cast<cocos2d::CCMenuItemSprite*>(m_locksArray->objectAtIndex(i));
            lock->setEnabled(true);
            lock->setVisible(true);
            auto lockSprite = static_cast<cocos2d::CCNodeRGBA*>(lock->getNormalImage());
            lockSprite->setScale(2.f);
            lockSprite->setOpacity(0);
            lockSprite->runAction(cocos2d::CCSequence::create(
                cocos2d::CCDelayTime::create((i + 1) * .1f),
                cocos2d::CCSpawn::createWithTwoActions(
                    cocos2d::CCEaseBounceOut::create(cocos2d::CCScaleTo::create(.5f, 1.f)),
                    cocos2d::CCFadeIn::create(.15f)
                ),
                nullptr
            ));
        }
        this->runAction(cocos2d::CCSequence::create(
            cocos2d::CCDelayTime::create(2.f),
            cocos2d::CCCallFunc::create(this, callfunc_selector(SecretLayer3::firstInteractionStep4)),
            nullptr
        ));
    }
    void firstInteractionStep4() = win 0x3d4b20, m1 0x3fffa0, imac 0x4935b0, ios 0x3103f0;
    void onBack(cocos2d::CCObject* sender) = win 0x3d82b0, m1 0x3ff850, imac 0x492e20, ios 0x30fe5c;
    void onChest01(cocos2d::CCObject* sender) = win 0x3d4180, m1 0x3ff650, imac 0x492c80, ios 0x30fc84;
    void onChest02(cocos2d::CCObject* sender) = win 0x3d4300, m1 0x3ff750, imac 0x492d50, ios 0x30fd70;
    void onClick(cocos2d::CCObject* sender) = win 0x3d5090, m1 0x3fe930, imac 0x491cf0, ios 0x30f1c0;
    void revealStep1() = m1 0x400364, imac 0x493980, win 0x3d68b0, ios 0x3106d8;
    void revealStep2() = m1 0x400938, imac 0x493f90, win 0x3d6aa0, ios 0x310bc4;
    void revealStep3() = m1 0x400c40, imac 0x4942b0, win inline, ios 0x310e14 {
        m_demonBody->setOpacity(0);
        m_demonBody->setVisible(true);
        m_demonBody->runAction(cocos2d::CCEaseInOut::create(cocos2d::CCFadeIn::create(3.f), 1.5f));
        this->runAction(cocos2d::CCSequence::create(
            cocos2d::CCDelayTime::create(4.f),
            cocos2d::CCCallFunc::create(this, callfunc_selector(SecretLayer3::revealStep4)),
            nullptr
        ));
    }
    void revealStep4() = m1 0x400cdc, imac 0x494350, win 0x3d6f30, ios 0x310eb0;
    void revealStep5() = m1 0x401420, imac 0x494b70, win 0x3d7780, ios 0x311394;
    void showUnlockDialog() = m1 0x4003cc, imac 0x4939e0, win 0x3d63a0, ios 0x310740;

    DungeonBarsSprite* m_dungeonBars;
    bool m_lockInput;
    cocos2d::CCArray* m_locksArray;
    cocos2d::CCSprite* m_demonEyes;
    cocos2d::CCSprite* m_demonBody;
    CCMenuItemSpriteExtra* m_secretChest;
}

[[link(android)]]
class SecretLayer4 : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, DialogDelegate {
    SecretLayer4() = ios 0x355e30 {
        m_threadTag = -1;
        m_basicMessageIndex = -1;
        m_selectedThread = 0;
        m_threadMessageIndex = 0;
        m_basicMessageCount = 0;
        m_errorMessageIndex = -1;
        m_searchInput = nullptr;
        m_messageLabel = nullptr;
        m_messageThreads = nullptr;
        m_exiting = false;
    }
    ~SecretLayer4() = win inline, m1 0x32a9e0, imac 0x39d6a0, ios 0x353648 {
        CC_SAFE_RELEASE(m_messageThreads);
    }

    static SecretLayer4* create() = win inline {
        auto ret = new SecretLayer4();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene() = win inline {
        auto scene = cocos2d::CCScene::create();
        AppDelegate::get()->m_runningScene = scene;
        auto layer = SecretLayer4::create();
        scene->addChild(layer);
        return scene;
    }

    virtual bool init() = win 0x3d87b0, imac 0x39db60, m1 0x32ad34, ios 0x3537a8;
    virtual void onExit() = win 0x3d25a0, imac 0x3a2000, m1 0x32efa0, ios 0x355de0;
    virtual void keyBackClicked() = win 0x3dc3b0, m1 0x32eeac, imac 0x3a1f10, ios 0x355dd4;
    virtual void textInputOpened(CCTextInputNode*) = win 0x3cfa10, m1 0x32df80, imac 0x3a1030, ios 0x3557c4;
    virtual void textInputClosed(CCTextInputNode*) = win 0x3cfb60, m1 0x32e060, imac 0x3a1100, ios 0x3558b0;
    virtual void textChanged(CCTextInputNode*) = win 0x3cfb60, m1 0x32e170, imac 0x3a11d0, ios 0x355930;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = m1 0x32df78, imac 0x3a1010, ios 0x3557bc {}
    virtual void dialogClosed(DialogLayer*) = m1 0x32d6dc, imac 0x3a07b0, ios 0x355454 {}

    gd::string getBasicMessage() = win 0x3dba90, m1 0x32e358, imac 0x3a1390;
    gd::string getErrorMessage() = win 0x3d13e0;
    gd::string getMessage() = win 0x3daef0;
    gd::string getThreadMessage() = win 0x3db0d0, m1 0x32e7b8, imac 0x3a17a0;
    cocos2d::CCNode* nodeWithTag(int);
    void onBack(cocos2d::CCObject* sender) = win 0x3dc300;
    void onChest01(cocos2d::CCObject* sender) = win 0x3d9870;
    void onSubmit(cocos2d::CCObject* sender) = win 0x3d99e0, m1 0x32c15c, imac 0x39eff0;
    void playCoinEffect();
    void selectAThread();
    void showDialog(int);
    void showFirstDialog() = win 0x3db4f0, m1 0x32b998, imac 0x39e7d0;
    void updateMessageLabel(gd::string text) = win 0x3cff20;
    void updateSearchLabel(char const*) = win 0x3cfc30;

    int m_threadTag;
    int m_basicMessageIndex;
    int m_selectedThread;
    int m_threadMessageIndex;
    int m_basicMessageCount;
    int m_errorMessageIndex;
    CCTextInputNode* m_searchInput;
    cocos2d::CCLabelBMFont* m_messageLabel;
    CCMenuItemSpriteExtra* m_submitButton;
    cocos2d::CCDictionary* m_messageThreads;
    bool m_exiting;
}

[[link(android)]]
class SecretLayer5 : cocos2d::CCLayer, TextInputDelegate, FLAlertLayerProtocol, DialogDelegate, GJOnlineRewardDelegate {
    SecretLayer5() = ios 0x7aeac {
        m_threadTag = -1;
        m_basicMessageIndex = -1;
        m_selectedThread = 0;
        m_threadMessageIndex = 0;
        m_basicMessageCount = 0;
        m_errorMessageIndex = -1;
        m_textInput = nullptr;
        m_messageLabel = nullptr;
        m_exiting = false;
        m_torchFires = nullptr;
        m_loading = false;
        m_rewardStatus = 0;
        m_uiLocked = false;
        m_chatIndex = -1;
    }
    ~SecretLayer5() = win inline, m1 0x3d6d00, imac 0x467070, ios 0x77c88 {
        CC_SAFE_RELEASE(m_torchFires);
        auto glm = GameLevelManager::sharedState();
        if (glm->m_GJOnlineRewardDelegate == this) glm->m_GJOnlineRewardDelegate = nullptr;
    }

    static SecretLayer5* create() = win inline {
        auto ret = new SecretLayer5();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene() = win inline {
        auto scene = cocos2d::CCScene::create();
        AppDelegate::get()->m_runningScene = scene;
        auto layer = SecretLayer5::create();
        scene->addChild(layer);
        return scene;
    }

    virtual bool init() = win 0x3dccc0, imac 0x467390, m1 0x3d6f48, ios 0x77e28;
    virtual void onExit() = win 0x3d25a0, imac 0x46bbc0, m1 0x3db234, ios 0x7ae5c;
    virtual void updateTweenActionInt(float, int) = win 0x3de3d0, imac 0x469950, m1 0x3d91b4, ios 0x79a9c;
    virtual void keyBackClicked() = win 0x3e0c90, imac 0x46bac0, m1 0x3db110, ios 0x7ae50;
    virtual void textInputOpened(CCTextInputNode*) = win 0x3dffe0, m1 0x3dadd8, imac 0x46b820, ios 0x7ac64;
    virtual void textInputClosed(CCTextInputNode*) = win 0x3e0130, m1 0x3daeb8, imac 0x46b8f0, ios 0x7ad50;
    virtual void textChanged(CCTextInputNode*) = win 0x3e0130, m1 0x3dafc8, imac 0x46b9c0, ios 0x7add0;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = m1 0x3dadd0, imac 0x46b800, ios 0x7ac5c {}
    virtual void dialogClosed(DialogLayer*) = m1 0x3dadc8, imac 0x46b7e0, ios 0x7ac54 {}
    virtual void onlineRewardStatusFinished(gd::string) = win 0x3df6b0, m1 0x3da348, imac 0x46abe0, ios 0x7aa30;
    virtual void onlineRewardStatusFailed() = win 0x3df820, imac 0x46ad30, m1 0x3da4b0, ios 0x7ab88;

    void animateHead() = win 0x3de060;
    void claimOnlineReward() = win 0x3df490;
    void fadeInMessage();
    void fadeInSubmitMessage() = win 0x3dde60;
    void fadeOutMessage() = win 0x3de030;
    void finishLoadingState() = win 0x3de420;
    gd::string getMessage() = win inline {
        return " ";
    }
    void handleSecretResponse() = ios 0x79ac4, win 0x3de440, imac 0x469990, m1 0x3d91dc;
    void hideTextInput() = win inline {
        m_textInput->setTouchEnabled(false);
        m_textInput->onClickTrackNode(false);
        m_textInput->setVisible(false);
        m_messageArea->stopAllActions();
        m_messageArea->runAction(cocos2d::CCFadeTo::create(.5f, 0));
    }
    void incrementChatIdx();
    cocos2d::CCNode* nodeWithTag(int tag) = win inline {
        auto ret = cocos2d::CCNode::create();
        ret->setTag(tag);
        return ret;
    }
    void onBack(cocos2d::CCObject* sender) = win 0x3e0c10;
    void onSubmit(cocos2d::CCObject* sender) = ios 0x78d64, win 0x3df8c0, m1 0x3d8188, imac 0x468830;
    void playWinSFX() = win 0x3df400;
    void showDialog(int);
    void showFailAnimation() = win 0x3de4a0, m1 0x3d9aec, imac 0x46a330, ios 0x7a2e8;
    void showFirstDialog() = win 0x3e04f0, m1 0x3d8658, imac 0x468cd0;
    void showSuccessAnimation() = win 0x3dea60, imac 0x469a50, m1 0x3d9294, ios 0x79b14;
    void showTextInput() = win 0x3df860;
    void unlockUI() = win 0x3df6a0;
    void updateMessageLabel(gd::string text) = win inline {
        m_messageLabel->setString(text.c_str());
        m_messageLabel->limitLabelWidth(320.f, .6f, 0.f);
    }
    void updateSearchLabel(char const*) = win 0x3e0200;

    int m_threadTag;
    int m_basicMessageIndex;
    int m_selectedThread;
    int m_threadMessageIndex;
    int m_basicMessageCount;
    int m_errorMessageIndex;
    CCTextInputNode* m_textInput;
    cocos2d::CCLabelBMFont* m_messageLabel;
    CCMenuItemSpriteExtra* m_wraithButton;
    bool m_exiting;
    void* m_unk1f0;
    cocos2d::CCArray* m_torchFires;
    bool m_loading;
    int m_rewardStatus; // 0 invalid, 1 valid, 2 claimed
    gd::string m_chestID;
    bool m_uiLocked;
    CCSpriteWithHue* m_wraithSprite;
    CCSpriteGrayscale* m_wraithGraySprite;
    cocos2d::CCSprite* m_eyesSprite;
    cocos2d::CCSprite* m_background;
    cocos2d::CCSprite* m_lockSprite;
    gd::vector<int> m_soundEffects;
    int m_chatIndex;
    cocos2d::extension::CCScale9Sprite* m_inputBackground;
    LoadingCircleSprite* m_circleSprite;
    TextArea* m_messageArea;
}

[[link(android)]]
class SecretLayer6 : cocos2d::CCLayer {
    // virtual ~SecretLayer6() = m1 0x3db294, imac 0x64bc50;

    static SecretLayer6* create() = m1 0x3db37c, imac 0x46bd70;
    static cocos2d::CCScene* scene() = m1 0x3db2c0, imac 0x46bca0;

    virtual bool init() = imac 0x46be20, m1 0x3db420;
    virtual void keyBackClicked() = m1 0x3dbf78, imac 0x46caa0;

    void onBack(cocos2d::CCObject* sender) = m1 0x3db8a4, imac 0x46c2e0;
    void startGame01() = m1 0x3db8f4, imac 0x46c330;

    SecretGame01Layer* m_gameLayer;
}

[[link(android)]]
class SecretNumberLayer : cocos2d::CCLayer {
    // virtual ~SecretNumberLayer();

    static SecretNumberLayer* create();

    virtual bool init() = win 0x3ec90, imac 0x4901a0, m1 0x3fcf14, ios 0x30dd14;

    TodoReturn playNumberEffect(int);
}

[[link(android)]]
class SecretRewardsLayer : cocos2d::CCLayer, DialogDelegate, BoomScrollLayerDelegate {
    SecretRewardsLayer() = ios 0x2ee850 {
        m_mainLayer = nullptr;
        m_secondaryLayer = nullptr;
        m_chestCounter = nullptr;
        m_chestCounters = nullptr;
        m_backSprite = nullptr;
        m_unkSize4_2 = 0;
        m_secondaryScrollLayer = nullptr;
        m_scratchDialogIndex = 0;
        m_potborDialogIndex = 0;
        m_diamondDialogIndex = 0;
        m_mechanicDialogIndex = 0;
        m_inMainLayer = false;
        m_rewardType = GJRewardType::Unknown;
        m_lockedDialogIndex = 0;
    }
    ~SecretRewardsLayer() = win inline, m1 0x5450f4, imac 0x619250, ios 0x2e7a70 {
        CC_SAFE_RELEASE(m_chestCounters);
    }

    static SecretRewardsLayer* create(bool fromShop) = ios 0x2e7b5c, win inline, imac 0x6195c0, m1 0x545350 {
        auto ret = new SecretRewardsLayer();
        if (ret->init(fromShop)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static cocos2d::CCScene* scene(bool fromShop) = ios 0x2e7b10, win 0x3bb1a0, imac 0x619580, m1 0x545304;

    virtual void onExit() = win 0x3c0aa0, m1 0x54e664, imac 0x623c00, ios 0x2ee820;
    virtual void keyBackClicked() = win 0x3c0a90, m1 0x54e5f0, imac 0x623b70, ios 0x2ee80c;
    virtual void dialogClosed(DialogLayer*) = win 0x3bf570, imac 0x623980, m1 0x54e3e0, ios 0x2ee678;
    virtual void scrollLayerMoved(cocos2d::CCPoint) = win 0x3bda10, m1 0x547d00, imac 0x61c110, ios 0x2e9dd4;

    void createSecondaryLayer(int) = ios 0x2ea580, win 0x3bdf70, m1 0x5488b4, imac 0x61ccf0;
    TodoReturn fadeInMusic();
    TodoReturn fadeInOutMusic();
    cocos2d::CCArray* generateChestItems(int) = ios 0x2ea928, win 0x3be3c0, m1 0x548ce8, imac 0x61d170;
    cocos2d::ccColor3B getPageColor(int page) = win inline {
        if (page == 1) return cocos2d::ccc3(50, 50, 50);
        else if (page == 2) return cocos2d::ccc3(70, 0, 120);
        else return cocos2d::ccc3(70, 0, 75);
    }
    void goToPage(int page) = win inline {
        if (m_inMainLayer) m_mainScrollLayer->moveToPage(page);
        else m_secondaryScrollLayer->moveToPage(page);
    }
    bool init(bool) = ios 0x2e7bd0, win 0x3bb300, m1 0x54543c, imac 0x6196f0;
    void moveToMainLayer(cocos2d::CCObject* sender) = win inline, ios 0x2ea460, imac 0x61cba0, m1 0x548784 {
        if (m_inMainLayer) return;
        m_inMainLayer = true;
        auto winSize = cocos2d::CCDirector::sharedDirector()->getWinSize();
        m_mainLayer->runAction(cocos2d::CCEaseInOut::create(cocos2d::CCMoveTo::create(.4f, { 0.f, 0.f }), 2.f));
        if (m_secondaryLayer) {
            m_secondaryScrollLayer->setTouchEnabled(false);
            m_secondaryScrollLayer = nullptr;
            m_chestCounter = nullptr;
            m_secondaryLayer->runAction(cocos2d::CCSequence::create(
                cocos2d::CCEaseInOut::create(cocos2d::CCMoveTo::create(.4f, { 0.f, winSize.height + 50.f }), 2.f),
                cocos2d::CCCallFunc::create(m_secondaryLayer, callfunc_selector(cocos2d::CCNode::removeMeAndCleanup)),
                nullptr
            ));
            m_secondaryLayer = nullptr;
        }
        this->updateBackButton();
    }
    void moveToSecondaryLayer(int page) = win inline, ios 0x2ea248, m1 0x548300, imac 0x61c740 {
        if (!m_inMainLayer) return;
        m_inMainLayer = false;
        m_rewardType = (GJRewardType)page;
        auto winSize = cocos2d::CCDirector::sharedDirector()->getWinSize();
        m_mainScrollLayer->setTouchEnabled(false);
        m_mainLayer->runAction(cocos2d::CCEaseBounceOut::create(cocos2d::CCMoveTo::create(.5f, { 0.f, -winSize.height - 100.f })));
        this->createSecondaryLayer(page);
        m_secondaryLayer->setPosition({ 0.f, winSize.height });
        m_secondaryLayer->runAction(cocos2d::CCEaseBounceOut::create(cocos2d::CCMoveTo::create(.5f, { 0.f, 0.f })));
        this->updateBackButton();
    }
    void onBack(cocos2d::CCObject* sender) = ios 0x2e95d4, win 0x3c08b0, m1 0x547320, imac 0x61b7c0;
    void onChestType(cocos2d::CCObject* sender) = ios 0x2e9640, win 0x3bdce0, imac 0x61b830, m1 0x54738c;
    void onGoldChest(cocos2d::CCObject* sender) = ios 0x2e9920, m1 0x5476f8, imac 0x61bb70, win 0x3c0020;
    void onSelectItem(cocos2d::CCObject* sender) = ios 0x2eb188, win 0x3bedd0, m1 0x5499c0, imac 0x61e000;
    void onShop(cocos2d::CCObject* sender) = win 0x3bf360, imac 0x61bf00, m1 0x547ad8;
    void onSpecialItem(cocos2d::CCObject* sender) = ios 0x2e9f98, m1 0x547f04, imac 0x61c330, win 0x3bf760;
    void onSwitchPage(cocos2d::CCObject* sender) = win 0x3bd950, imac 0x61c050, m1 0x547c1c, ios 0x2e9d28;
    void showDialog01() = win 0x3c0ae0, imac 0x61e360, m1 0x549d5c;
    void showDialog03() = imac 0x620080, m1 0x54b548;
    void showDialogDiamond() = m1 0x54d868, imac 0x622be0, win 0x3c4980;
    void showDialogMechanic() = win 0x3c36f0, imac 0x621630, m1 0x54c6f0;
    void showLockedChest() = m1 0x5483f8, imac 0x61c850;
    void showShop(int shop) = win inline, m1 0x54e370, imac 0x623910 {
        if (cocos2d::CCDirector::sharedDirector()->replaceScene(cocos2d::CCTransitionMoveInT::create(0.5f, GJShopLayer::scene((ShopType)shop)))) this->setKeypadEnabled(false);
    }
    void switchToOpenedState(CCMenuItemSpriteExtra*) = win 0x3bfb80, imac 0x61b870, m1 0x5473e0;
    void updateBackButton() = ios 0x2ea340, win 0x3bde30, m1 0x548658, imac 0x61ca90;
    TodoReturn updateUnlockedGoldLabel();
    void updateUnlockedLabel() = ios 0x2e9774, m1 0x5474c0, imac 0x61b930, win 0x3bfc60;

    cocos2d::CCLayer* m_mainLayer;
    cocos2d::CCLayer* m_secondaryLayer;
    cocos2d::CCLabelBMFont* m_chestLabel;
    cocos2d::CCLabelBMFont* m_chestCounter;
    cocos2d::CCSprite* m_goldPriceSprite;
    cocos2d::CCDictionary* m_chestCounters;
    cocos2d::CCLabelBMFont* m_keysLabel;
    cocos2d::CCLabelBMFont* m_goldKeysLabel;
    cocos2d::CCSprite* m_keySprite;
    cocos2d::CCSprite* m_goldKeySprite;
    void* m_unknown;
    CCMenuItemSpriteExtra* m_leftButton;
    CCMenuItemSpriteExtra* m_rightButton;
    cocos2d::CCSprite* m_backSprite;
    int m_unkSize4_1;
    int m_unkSize4_2;
    BoomScrollLayer* m_mainScrollLayer;
    BoomScrollLayer* m_secondaryScrollLayer;
    cocos2d::CCSprite* m_backgroundSprite;
    int m_scratchDialogIndex;
    int m_potborDialogIndex;
    int m_diamondDialogIndex;
    int m_mechanicDialogIndex;
    bool m_inMainLayer;
    GJRewardType m_rewardType;
    int m_lockedDialogIndex;
}

[[link(android)]]
class SelectArtDelegate {
    virtual void selectArtClosed(SelectArtLayer*) {}
}

[[link(android)]]
class SelectArtLayer : FLAlertLayer {
    // virtual ~SelectArtLayer();

    static SelectArtLayer* create(SelectArtType, int) = win 0x30d600, m1 0x2095fc, imac 0x25d1d0;

    virtual void keyBackClicked() = win 0x30e530, m1 0x20a7c0, imac 0x25e610, ios 0x18056c;

    bool init(SelectArtType, int) = win 0x30d710, m1 0x209c2c, imac 0x25da00;
    void onClose(cocos2d::CCObject* sender);
    void onSelectCustom(cocos2d::CCObject* sender) = win 0x30e420, imac 0x25e550, m1 0x20a718;
    void selectArt(cocos2d::CCObject* sender) = win 0x30e360, imac 0x25e430, m1 0x20a5d0;
    void updateSelectedCustom(int idx) = win inline, imac 0x25d340, m1 0x209728 {
        if (m_lineSprites) {
            m_line = idx;
            this->onSelectCustom(nullptr);
        }
    }

    cocos2d::CCArray* m_artSprites;
    cocos2d::CCArray* m_lineSprites;
    int m_art;
    int m_line;
    SelectArtType m_type;
    SelectArtDelegate* m_delegate;
}

[[link(android)]]
class SelectEventLayer : SetupTriggerPopup {
    // virtual ~SelectEventLayer();

    static SelectEventLayer* create(SetupEventLinkPopup*, gd::set<int>&);

    virtual void keyBackClicked() = win 0x44f1d0, m1 0x4b97a0, imac 0x5636b0, ios 0x401148;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x44f110, imac 0x5635e0, m1 0x4b96e8, ios 0x401108;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x44ef40, imac 0x5633b0, m1 0x4b94a4, ios 0x400fe0;

    void addToggle(int, gd::string) = win 0x44f1f0;
    bool init(SetupEventLinkPopup*, gd::set<int>&) = win 0x44e0d0, m1 0x4b7a04, imac 0x561360;
    cocos2d::CCPoint nextPosition();
    void onInfo(cocos2d::CCObject* sender) = win 0x44f630;

    SetupEventLinkPopup* m_eventLinkPopup;
    bool m_eventsChanged;
    int m_unk3b4;
    int m_toggleCount;
    int m_maxPage;
    gd::map<int, gd::string> m_eventInfos;
    gd::set<int> m_eventIDs;
}

[[link(android)]]
class SelectFontLayer : FLAlertLayer {
    SelectFontLayer() {
        m_font = -1;
        m_editorLayer = nullptr;
        m_fontLabel = nullptr;
    }
    ~SelectFontLayer() = win inline, m1 0x230fc8, imac 0x287b90, ios 0x2d21e0 {
        CCNode::removeAllChildrenWithCleanup(true);
    }

    static SelectFontLayer* create(LevelEditorLayer* editorLayer) = win inline {
        auto ret = new SelectFontLayer();
        if (ret->init(editorLayer)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x84650, m1 0x231a94, imac 0x2887b0, ios 0x2d2a78;

    bool init(LevelEditorLayer*) = ios 0x2d2340, win 0x286be0, imac 0x287fe0, m1 0x2312e4;
    void onChangeFont(cocos2d::CCObject* sender) = ios 0x2d28e4, win 0x287400, imac 0x2885f0, m1 0x231900;
    void onClose(cocos2d::CCObject* sender);
    void updateFontLabel() = win 0x287200, imac 0x288690, m1 0x231994;

    int m_font;
    LevelEditorLayer* m_editorLayer;
    cocos2d::CCLabelBMFont* m_fontLabel;
}

[[link(android)]]
class SelectListIconDelegate {
    virtual void iconSelectClosed(SelectListIconLayer*) {}
}

[[link(android)]]
class SelectListIconLayer : FLAlertLayer {
    SelectListIconLayer() {
        m_difficulties = nullptr;
        m_currentDifficulty = 0;
        m_delegate = nullptr;
    }
    ~SelectListIconLayer() = win inline, m1 0x2e21f8, imac 0x34d990, ios 0x24691c {
        CC_SAFE_RELEASE(m_difficulties);
    }

    static SelectListIconLayer* create(int difficulty) = win inline, m1 0x2e15b8, imac 0x34cd20 {
        auto ret = new SelectListIconLayer();
        if (ret->init(difficulty)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x2f5080, m1 0x2e2acc, imac 0x34e2e0, ios 0x246fb0;

    bool init(int) = win 0x2f4790, m1 0x2e241c, imac 0x34dcc0;
    void onClose(cocos2d::CCObject* sender);
    void onSelect(cocos2d::CCObject* sender) = win 0x2f4f80, m1 0x2e297c, imac 0x34e1d0;

    cocos2d::CCArray* m_difficulties;
    int m_currentDifficulty;
    SelectListIconDelegate* m_delegate;
}

[[link(android)]]
class SelectPremadeDelegate {
    virtual void selectPremadeClosed(SelectPremadeLayer*, int) {}
}

[[link(android)]]
class SelectPremadeLayer : FLAlertLayer {
    // virtual ~SelectPremadeLayer();
    SelectPremadeLayer() {}

    static SelectPremadeLayer* create() = win inline {
        auto ret = new SelectPremadeLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x3eef30, imac 0x2f5fc0, m1 0x28ef80, ios 0x66fa4;
    virtual void keyBackClicked() = win 0x84650, m1 0x28f4c8, imac 0x2f64c0, ios 0x6745c;

    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onSelectPremade(cocos2d::CCObject* sender) = win 0x3ef540;

    SelectPremadeDelegate* m_delegate;
}

[[link(android)]]
class SelectSettingDelegate {
    virtual void selectSettingClosed(SelectSettingLayer*) {}
}

[[link(android)]]
class SelectSettingLayer : FLAlertLayer {
    // virtual ~SelectSettingLayer();

    static SelectSettingLayer* create(SelectSettingType, int) = win 0x30e580, m1 0x208e98, imac 0x25c9f0, ios 0x17f228;

    static gd::string frameForItem(SelectSettingType, int) = win 0x30ede0, imac 0x25efd0, m1 0x20b08c, ios 0x180b3c;
    static gd::string frameForValue(SelectSettingType type, int value) = win inline, m1 0x208c2c, imac 0x25c690, ios 0x17f09c {
        return frameForItem(type, valueToIdx(type, value));
    }
    static int idxToValue(SelectSettingType type, int idx) = win inline, m1 0x20b404, imac 0x25f2b0, ios inline {
        if (type != SelectSettingType::StartingSpeed) return idx;

        switch (idx) {
            case 0: return 1;
            case 1: return 0;
            case 2: case 3: case 4: return idx;
            default: return 0;
        }
    }
    static int valueToIdx(SelectSettingType type, int value) = win inline, m1 0x20b060, imac 0x25efa0, ios inline {
        if (type != SelectSettingType::StartingSpeed) return value;

        switch (value) {
            case 0: return 1;
            case 1: return 0;
            case 2: case 3: case 4: return value;
            default: return 1;
        }
    }

    virtual void keyBackClicked() = win 0x30f380, m1 0x20b430, imac 0x25f2e0, ios 0x180cbc;

    gd::string getSelectedFrame() = win inline, m1 0x209154, imac 0x25ccd0, ios 0x17f484 {
        return frameForValue(m_type, m_settingID);
    }
    int getSelectedValue() = win inline, m1 0x209120, imac 0x25cca0, ios 0x17f450 {
        return idxToValue(m_type, m_settingID);
    }
    bool init(SelectSettingType, int) = win 0x30e690, imac 0x25e9f0, m1 0x20aaac, ios 0x18061c;
    void onClose(cocos2d::CCObject* sender) = win 0x30f330, m1 0x20b3a4, imac 0x25f260, ios 0x180c5c;
    void onSelect(cocos2d::CCObject* sender) = win 0x30f280, imac 0x25f1b0, m1 0x20b2cc, ios 0x180b9c;

    cocos2d::CCArray* m_settingSprites;
    int m_settingID;
    SelectSettingType m_type;
    SelectSettingDelegate* m_delegate;
}

[[link(android)]]
class SelectSFXSortDelegate {
    virtual void sortSelectClosed(SelectSFXSortLayer*) {}
}

[[link(android)]]
class SelectSFXSortLayer : FLAlertLayer {
    // virtual ~SelectSFXSortLayer();
    SelectSFXSortLayer() {
        m_sortType = AudioSortType::NameAscending;
        m_delegate = nullptr;
    }

    static SelectSFXSortLayer* create(AudioSortType sortType) = win inline, m1 0x3a7640, imac 0x42c860 {
        auto ret = new SelectSFXSortLayer();
        if (ret->init(sortType)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x84650, m1 0x3a84bc, imac 0x42d760, ios 0x16e780;

    bool init(AudioSortType) = win 0x468b50, m1 0x3a7f78, imac 0x42d250;
    void onClose(cocos2d::CCObject* sender);
    void onSelect(cocos2d::CCObject* sender) = win 0x4691d0, imac 0x42d700, m1 0x3a8450;

    AudioSortType m_sortType;
    SelectSFXSortDelegate* m_delegate;
}

[[link(android)]]
class SequenceTriggerGameObject : ChanceTriggerGameObject {
    // virtual ~SequenceTriggerGameObject();

    static SequenceTriggerGameObject* create();

    virtual bool init() = win 0x49bcd0, m1 0x173448, imac 0x1b30a0, ios 0x382e50;
    virtual void resetObject() = win 0x49bcf0, m1 0x173498, imac 0x1b30f0, ios 0x382ea0;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x49bd20, imac 0x1b33b0, m1 0x173610, ios 0x382ed0;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x49c140, imac 0x1b3930, m1 0x173a9c, ios 0x383188;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x49c470, imac 0x1b3dd0, m1 0x173ec8, ios 0x3834d8;

    void addCount(int, int);
    void addTarget(int, int);
    void deleteTarget(int);
    bool reorderTarget(int, bool);
    void updateSequenceTotalCount();

    gd::unordered_map<int, float> m_sequenceTimes;
    gd::unordered_map<int, int> m_sequenceIndices;
    // property 437
    float m_minInt;
    // property 436
    int m_sequenceMode;
    // property 439
    int m_resetMode;
    // property 438
    float m_reset;
    int m_sequenceTotalCount;
    // property 505
    bool m_uniqueRemap;
}

[[link(android)]]
class SetColorIDPopup : SetIDPopup, GJSpecialColorSelectDelegate {
    // virtual ~SetColorIDPopup();
    SetColorIDPopup() = ios 0x2e6420 {}

    static SetColorIDPopup* create(int) = win inline, m1 0x24125c, imac 0x299530, ios 0x2de58c {
        auto ret = new SetColorIDPopup();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void colorSelectClosed(GJSpecialColorSelect*, int) = win 0x294cf0, imac 0x299980, m1 0x24164c, ios 0x2de844;

    bool init(int) = win 0x294aa0, m1 0x241384, imac 0x2996b0, ios 0x2de600;
    void onSelectSpecialColor(cocos2d::CCObject* sender) = win 0x294c80, m1 0x2415e8, imac 0x299930, ios 0x2de7e0;
}

[[link(android)]]
class SetFolderPopup : SetIDPopup, SetTextPopupDelegate {
    // virtual ~SetFolderPopup();

    static SetFolderPopup* create(int value, bool isCreated, gd::string title) = win 0x294e90, imac 0x29a410, m1 0x241e80, ios 0x2deb0c;

    virtual void valueChanged() = win 0x295250, imac 0x29aa90, m1 0x24249c, ios 0x2deffc;
    virtual void setTextPopupClosed(SetTextPopup*, gd::string) = win 0x295590, imac 0x29af60, m1 0x242914, ios 0x2df330;

    bool init(int value, bool isCreated, gd::string title) = win 0x294fd0, imac 0x29a610, m1 0x24202c, ios 0x2debf4;
    void onSetFolderName(cocos2d::CCObject* sender) = win 0x295390, imac 0x29a8a0, m1 0x24229c, ios 0x2dee60;

    bool m_isCreated;
    cocos2d::CCLabelBMFont* m_titleLabel;
}

[[link(android)]]
class SetGroupIDLayer : FLAlertLayer, TextInputDelegate {
    SetGroupIDLayer() = ios 0x45790 {
        m_targetObject = nullptr;
        m_targetObjects = nullptr;
        m_editorLayerInput = nullptr;
        m_editorLayer2Input = nullptr;
        m_zOrderInput = nullptr;
        m_groupIDInput = nullptr;
        m_orderInput = nullptr;
        m_channelInput = nullptr;
        m_showChannelOrder = false;
        m_channelValue = 0;
        m_channelUpdated = false;
        m_groupIDValue = 0;
        m_editorLayerValue = 0;
        m_editorLayer2Value = 0;
        m_zOrderValue = -1000;
        m_zLayerValue = ZLayer::Default;
        m_orderValue = 0;
        m_channelOrderEdited = false;
        m_editorLayerEdited = false;
        m_removeGroupsLock = false;
        m_addedGroup = false;
        m_reverseChanged = false;
        m_unk2ff = false;
        m_unk300 = false;
        m_nextFreeID = 0;
        m_parentGroups = nullptr;
    }
    ~SetGroupIDLayer() = win inline, m1 0x2964d4, imac 0x2fe2c0, ios 0x3efbc {
        CC_SAFE_RELEASE(m_targetObjects);
        CC_SAFE_RELEASE(m_zLayerButtons);
        CC_SAFE_RELEASE(m_groupIDObjects);
        CC_SAFE_RELEASE(m_parentGroups);
    }

    static SetGroupIDLayer* create(GameObject* object, cocos2d::CCArray* objects) = win inline, imac 0x2fe420, m1 0x2965a4, ios 0x3f08c {
        auto ret = new SetGroupIDLayer();
        if (ret->init(object, objects)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x3e62e0, imac 0x303620, m1 0x29b16c, ios 0x42db0;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x29aa40, imac 0x302ea0, ios 0x42820;
    virtual void textChanged(CCTextInputNode*) = win 0x3e4400, imac 0x302ee0, m1 0x29aa5c, ios 0x4283c;

    void addGroupID(int id) = win inline, m1 0x29b068, imac 0x303510, ios 0x42ccc {
        m_addedGroup = true;
        if (m_targetObject) {
            if (m_targetObject->addToGroup(id) == 1) {
                GameManager::sharedState()->m_levelEditorLayer->addToGroup(m_targetObject, id, false);
            }
        }
        else {
            for (int i = 0; i < m_targetObjects->count(); ++i) {
                auto obj = static_cast<GameObject*>(m_targetObjects->objectAtIndex(i));
                if (obj->addToGroup(id) == 1) {
                    GameManager::sharedState()->m_levelEditorLayer->addToGroup(obj, id, false);
                }
            }
        }
    }
    void callRemoveFromGroup(float dt) = win 0x3e5000, m1 0x29af14, imac 0x3033c0, ios 0x42b94;
    CCTextInputNode* createTextInput(cocos2d::CCPoint, int, int, gd::string, float, int) = win 0x3e34b0, m1 0x298718, imac 0x300800, ios 0x40d5c;
    void determineStartValues() = win 0x3e3b50, m1 0x298e08, imac 0x300ef0, ios 0x41334;
    bool init(GameObject* obj, cocos2d::CCArray* objs) = ios 0x3f110, win 0x3e1260, imac 0x2fe5f0, m1 0x296704;
    void onAddGroup(cocos2d::CCObject* sender) = ios 0x41208, win 0x3e52b0, m1 0x298c74, imac 0x300d30;
    void onAddGroupParent(cocos2d::CCObject* sender) = ios 0x41210, win 0x3e5420, m1 0x298c7c, imac 0x300d40;
    void onAnim(cocos2d::CCObject* sender) = win 0x3e4390, m1 0x29a078, imac 0x302320, ios 0x4216c;
    void onArrow(int tag, int increment) = win 0x3e39e0, m1 0x29a170, imac 0x302410, ios 0x42264;
    void onArrowLeft(cocos2d::CCObject* sender) = win 0x3e3980, m1 0x29a100, imac 0x3023b0, ios 0x421f4;
    void onArrowRight(cocos2d::CCObject* sender) = win 0x3e39b0, m1 0x29a138, imac 0x3023e0, ios 0x4222c;
    void onClose(cocos2d::CCObject* sender) = win 0x3e5f60, m1 0x298444, imac 0x3004c0, ios 0x40b20;
    void onCopy(cocos2d::CCObject* sender) = win 0x3e3ed0, m1 0x299f20, imac 0x3021a0, ios 0x42080;
    void onExtra(cocos2d::CCObject* sender) = win 0x3e40d0, m1 0x29a028, imac 0x3022c0, ios 0x4211c;
    void onExtra2(cocos2d::CCObject* sender) = win 0x3e4250, m1 0x29a050, imac 0x3022f0, ios 0x42144;
    void onNextFreeEditorLayer1(cocos2d::CCObject* sender) = win 0x3e57b0, ios 0x40ce4, imac 0x3006e0, m1 0x298608;
    void onNextFreeEditorLayer2(cocos2d::CCObject* sender) = win 0x3e5820, ios 0x40d20, imac 0x300770, m1 0x298690;
    void onNextFreeOrderChannel(cocos2d::CCObject* sender) = win 0x3e5cc0, ios 0x41888, imac 0x301650, m1 0x29944c;
    void onNextGroupID1(cocos2d::CCObject* sender) = ios 0x411d4, win 0x3e48d0, m1 0x298c40, imac 0x300d00;
    void onPaste(cocos2d::CCObject* sender) = win 0x3e3f30, ios 0x420a8, imac 0x3021d0, m1 0x299f48;
    void onRemoveFromGroup(cocos2d::CCObject* sender) = ios 0x42ac8, win 0x3e51e0, m1 0x29ae48, imac 0x3032f0;
    void onSmoothEase(cocos2d::CCObject* sender) = m1 0x29b154, imac 0x303600;
    void onToggleGuide(cocos2d::CCObject* sender) = win 0x3e3380, m1 0x29a0a8, imac 0x302350, ios 0x4219c;
    void onToggleSelectedOrder(cocos2d::CCObject* sender) = win 0x3e3410, m1 0x29a0d4, imac 0x302380, ios 0x421c8;
    void onZLayer(cocos2d::CCObject* sender) = win 0x3e5520, m1 0x298d00, imac 0x300dd0, ios 0x41294;
    void onZLayerShift(cocos2d::CCObject* sender) = win 0x3e55e0, m1 0x2990e8, imac 0x3012f0, ios 0x41614;
    void removeGroupID(int id) = win inline, m1 0x29af8c, imac 0x303440, ios 0x42c00 {
        m_addedGroup = true;
        if (m_targetObject) {
            m_targetObject->removeFromGroup(id);
            GameManager::sharedState()->m_levelEditorLayer->removeFromGroup(m_targetObject, id);
        }
        else {
            for (int i = 0; i < m_targetObjects->count(); i++) {
                auto obj = static_cast<GameObject*>(m_targetObjects->objectAtIndex(i));
                obj->removeFromGroup(id);
                GameManager::sharedState()->m_levelEditorLayer->removeFromGroup(obj, id);
            }
        }
        this->updateGroupIDButtons();
    }
    void updateEditorLabel() = win 0x3e5920, m1 0x299640, imac 0x301850, ios 0x41964;
    void updateEditorLabel2() = win 0x3e59b0, m1 0x299774, imac 0x301980, ios 0x41a04;
    void updateEditorLayerID() = win 0x3e56b0, m1 0x29a4bc, imac 0x3027f0, ios 0x423c4;
    void updateEditorLayerID2() = win 0x3e5730, m1 0x29a52c, imac 0x302870, ios 0x4242c;
    void updateEditorOrder() = win 0x3e5e90, m1 0x29a59c, imac 0x3028f0, ios 0x42494;
    void updateEditorOrderLabel() = win 0x3e5b60, m1 0x2991a4, imac 0x3013b0, ios 0x416d0;
    void updateGroupIDButtons() = win 0x3e4940, m1 0x299a60, imac 0x301c70, ios 0x41bd8;
    void updateGroupIDLabel() = ios 0x418c4, win 0x3e5ad0, m1 0x29950c, imac 0x301720;
    void updateOrderChannel() = win 0x3e5dc0, m1 0x29a644, imac 0x3029a0, ios 0x42534;
    void updateOrderChannelLabel() = win 0x3e5c10, m1 0x2992f8, imac 0x301500, ios 0x417ac;
    void updateZLayerButtons() = win 0x3e5d30, m1 0x2999d0, imac 0x301be0, ios 0x41b48;
    void updateZOrder() = win 0x3e5890, m1 0x29a6ec, imac 0x302a50, ios 0x425d4;
    void updateZOrderLabel() = win 0x3e5a40, m1 0x2998a8, imac 0x301ab0, ios 0x41aa4;

    GameObject* m_targetObject;
    cocos2d::CCArray* m_targetObjects;
    cocos2d::CCArray* m_zLayerButtons;
    cocos2d::CCArray* m_groupIDObjects;
    CCTextInputNode* m_editorLayerInput;
    CCTextInputNode* m_editorLayer2Input;
    CCTextInputNode* m_zOrderInput;
    CCTextInputNode* m_groupIDInput;
    CCTextInputNode* m_orderInput;
    CCTextInputNode* m_channelInput;
    bool m_showChannelOrder;
    int m_channelValue;
    bool m_channelUpdated;
    int m_groupIDValue;
    int m_editorLayerValue;
    int m_editorLayer2Value;
    int m_zOrderValue;
    ZLayer m_zLayerValue;
    int m_orderValue;
    bool m_channelOrderEdited;
    bool m_editorLayerEdited;
    bool m_removeGroupsLock;
    int m_groupToRemove;
    bool m_addedGroup;
    bool m_reverseChanged;
    bool m_hasTargetObjects;
    bool m_unk2ff;
    bool m_unk300;
    int m_nextFreeID;
    cocos2d::CCDictionary* m_parentGroups;
}

[[link(android)]]
class SetIDPopup : FLAlertLayer, TextInputDelegate {
    SetIDPopup() = win 0x286480 {
        m_inputNode = nullptr;
        m_value = 0;
        m_disableDelegate = false;
        m_cancelled = false;
        m_minimum = 0;
        m_maximum = 1000;
        m_default = 0;
        m_delegate = nullptr;
    }
    ~SetIDPopup() = win 0x293b10, m1 0x23fcfc, imac 0x297d70, ios 0x2dd760;

    static SetIDPopup* create(int current, int begin, int end, gd::string title, gd::string button, bool, int, float, bool, bool) = win 0x293bb0, m1 0x23ff3c, imac 0x2980c0, ios 0x2dd808;

    virtual void keyBackClicked() = win 0x294a90, m1 0x240ee8, imac 0x2990b0, ios 0x2de548;
    virtual void show() = win 0x2948c0, m1 0x240e64, imac 0x299030, ios 0x2de4cc;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x240cf0, imac 0x298ed0, ios 0x2de410;
    virtual void textChanged(CCTextInputNode*) = win 0x294710, imac 0x298f10, m1 0x240d0c, ios 0x2de42c;
    virtual void valueChanged() = m1 0x240e60, imac 0x299020, ios 0x2de4c8 {}

    bool init(int current, int begin, int end, gd::string title, gd::string button, bool, int, float, bool, bool) = win 0x293ce0, imac 0x298360, m1 0x240198, ios 0x2dd9fc;
    void onCancel(cocos2d::CCObject* sender) = win 0x294950, imac 0x298cf0, m1 0x240b14, ios 0x2de348;
    void onClose(cocos2d::CCObject* sender) = win 0x2949f0, m1 0x240a14, imac 0x298bf0, ios 0x2de248;
    void onItemIDArrow(cocos2d::CCObject* sender) = win 0x2946a0, m1 0x240ab8, imac 0x298ca0, ios 0x2de2ec;
    void onResetValue(cocos2d::CCObject* sender) = win 0x2946f0, m1 0x240aac, imac 0x298c80, ios 0x2de2e0;
    void updateTextInputLabel() = win 0x294810, imac 0x298d90, m1 0x240bb4, ios 0x2de354;

    CCTextInputNode* m_inputNode;
    int m_value;
    bool m_disableDelegate;
    bool m_cancelled;
    int m_minimum;
    int m_maximum;
    int m_default;
    SetIDPopupDelegate* m_delegate;
}

[[link(android)]]
class SetIDPopupDelegate {
    virtual void setIDPopupClosed(SetIDPopup*, int) {}
}

[[link(android)]]
class SetItemIDLayer : SetupTriggerPopup {
    // virtual ~SetItemIDLayer();

    static SetItemIDLayer* create(EffectGameObject*, cocos2d::CCArray*);

    virtual void onClose(cocos2d::CCObject* sender) = win 0x3e9ed0, imac 0x9c7f0, m1 0x8f4a0, ios 0x4122e8;
    virtual void valueDidChange(int, float) = win 0x3e9de0, imac 0x9c700, m1 0x8f3ac, ios 0x4121f4;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x3e9c40, imac 0x9c5e0, m1 0x8f2a4, ios 0x4120ec;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x3e94e0, m1 0x8eba0, imac 0x9bdd0, ios 0x411ae0;
    void updateEditorLabel();
}

[[link(android)]]
class SetLevelOrderPopup : SetIDPopup {
    // virtual ~SetLevelOrderPopup();
    SetLevelOrderPopup() {
        m_levelID = 0;
    }

    static SetLevelOrderPopup* create(int levelID, int order, int amount) = win inline, m1 0x2e09f0, imac 0x34c0c0, ios 0x2456a8 {
        auto ret = new SetLevelOrderPopup();
        if (ret->init(levelID, order, amount)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(int levelID, int order, int amount) = win 0x2f4480, m1 0x2e1e74, imac 0x34d660, ios 0x2465cc;
    void onOrderButton(cocos2d::CCObject* sender) = win 0x2f4750, m1 0x2e21a0, imac 0x34d950, ios 0x2468d4;

    int m_levelID;
}

[[link(android)]]
class SetTargetIDLayer : SetupTriggerPopup {
    // virtual ~SetTargetIDLayer();

    static SetTargetIDLayer* create(EffectGameObject*, cocos2d::CCArray*, gd::string, gd::string, int, int, int) = win 0x3ea050, m1 0x24cf04, imac 0x2a66f0, ios 0x213dfc;

    virtual void determineStartValues() = win 0x287910, imac 0x2a6e20, m1 0x24d528, ios 0x2142c0;
    virtual void valueDidChange(int, float) = win 0x3ea680, imac 0x2a6e30, m1 0x24d52c, ios 0x2142c4;

    bool init(EffectGameObject*, cocos2d::CCArray*, gd::string, gd::string, int, int, int) = win 0x3ea1e0, m1 0x24d190, imac 0x2a6a20, ios 0x213fc0;

    int m_objectID;
    int m_minimumID;
    int m_maximumID;
}

[[link(android)]]
class SetTextPopup : FLAlertLayer, TextInputDelegate {
    // virtual ~SetTextPopup();

    static SetTextPopup* create(gd::string value, gd::string placeholder, int maxLength, gd::string title, gd::string okBtnText, bool showResetBtn, float) = win 0x2957d0, m1 0x242618, imac 0x29abf0, ios 0x2df0cc;

    virtual void keyBackClicked() = win 0x296490, imac 0x29bf80, m1 0x2437e4, ios 0x2dfde0;
    virtual void show() = win 0x8ba30, m1 0x243798, imac 0x29bf20, ios 0x2dfd94;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x24365c, imac 0x29bdf0, ios 0x2dfcf0;
    virtual void textChanged(CCTextInputNode*) = win 0x296280, imac 0x29be30, m1 0x243678, ios 0x2dfd0c;

    bool init(gd::string, gd::string, int, gd::string, gd::string, bool, float) = win 0x295940, m1 0x242cc0, imac 0x29b3e0, ios 0x2df4a4;
    void onCancel(cocos2d::CCObject* sender) = win 0x296370, m1 0x2435a0, imac 0x29bd30, ios 0x2dfc48;
    void onClose(cocos2d::CCObject* sender) = win 0x296400, m1 0x2433ec, imac 0x29bba0, ios 0x2dfb30;
    void onResetValue(cocos2d::CCObject* sender) = win 0x296220, m1 0x2434d4, imac 0x29bc80, ios 0x2dfc18;
    void updateTextInputLabel() = win inline, imac 0x29bd50, m1 0x2435ac, ios 0x2dfc54 {
        m_disableDelegate = true;
        m_input->setString(m_value);
        m_disableDelegate = false;
    }

    CCTextInputNode* m_input;
    bool m_disableDelegate;
    gd::string m_value;
    SetTextPopupDelegate* m_delegate;
}

[[link(android)]]
class SetTextPopupDelegate {
    virtual void setTextPopupClosed(SetTextPopup*, gd::string) {}
}

[[link(android)]]
class SetupAdvFollowEditPhysicsPopup : SetupTriggerPopup {
    // virtual ~SetupAdvFollowEditPhysicsPopup();

    static SetupAdvFollowEditPhysicsPopup* create(AdvancedFollowEditObject*, cocos2d::CCArray*) = win 0x3ef5a0;

    virtual void valueDidChange(int, float) = win 0x3f0440, imac 0x2f7630, m1 0x2902dc, ios 0x68054;

    bool init(AdvancedFollowEditObject*, cocos2d::CCArray*) = win 0x3ef6b0, m1 0x28f6cc, imac 0x2f6760;
}

[[link(android)]]
class SetupAdvFollowPopup : SetupTriggerPopup, SelectPremadeDelegate {
    // virtual ~SetupAdvFollowPopup();

    static SetupAdvFollowPopup* create(AdvancedFollowTriggerObject*, cocos2d::CCArray*) = win 0x3ea770;

    virtual void onClose(cocos2d::CCObject* sender) = win 0x287920, imac 0x2f5f20, m1 0x28ef40, ios 0x66f68;
    virtual void updateDefaultTriggerValues() = win 0x3ed950, imac 0x2f54b0, m1 0x28e4e4, ios 0x667d4;
    virtual void valueDidChange(int, float) = win 0x3eda40, imac 0x2f55f0, m1 0x28e684, ios 0x66934;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x3edd80, imac 0x2f5870, m1 0x28e914, ios 0x66b14;
    virtual void selectPremadeClosed(SelectPremadeLayer*, int) = win 0x3ee030, imac 0x2f5aa0, m1 0x28eb1c, ios 0x66cd4;

    bool init(AdvancedFollowTriggerObject*, cocos2d::CCArray*) = win 0x3ea890, m1 0x28aed4, imac 0x2f11d0;
    void onMode(cocos2d::CCObject* sender) = win 0x3ede30;
    void onPremade(cocos2d::CCObject* sender) = win 0x3edf00;
    void updateMode(int) = win 0x3ede60;
}

[[link(android)]]
class SetupAdvFollowRetargetPopup : SetupTriggerPopup {
    // virtual ~SetupAdvFollowRetargetPopup();

    static SetupAdvFollowRetargetPopup* create(AdvancedFollowEditObject*, cocos2d::CCArray*) = win 0x3f0510;

    virtual void updateDefaultTriggerValues() = win 0x3ed950, imac 0x2f7ef0, m1 0x290a24, ios 0x68638;
    virtual void valueDidChange(int, float) = win 0x3f0c60, imac 0x2f8030, m1 0x290bc4, ios 0x68798;

    bool init(AdvancedFollowEditObject*, cocos2d::CCArray*) = win 0x3f0620, m1 0x2904a0, imac 0x2f78a0;
}

[[link(android)]]
class SetupAnimationPopup : SetupTriggerPopup {
    // virtual ~SetupAnimationPopup();

    static SetupAnimationPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x3f0fb0, m1 0x34ade8, imac 0x3c1850, ios 0x3bb768;

    virtual void determineStartValues() = win 0x3f1ed0, m1 0x34bdd0, imac 0x3c29f0, ios 0x3bc428;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x3f2480, m1 0x34c158, imac 0x3c2e10, ios 0x3bc6dc;
    virtual void textChanged(CCTextInputNode*) = win 0x3f2060, imac 0x3c2c20, m1 0x34bfb0, ios 0x3bc600;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x3f10e0, m1 0x34af78, imac 0x3c1a90, ios 0x3bb84c;
    void onAnimationIDArrow(cocos2d::CCObject* sender) = win 0x3f1fd0, m1 0x34bb10, imac 0x3c26f0, ios 0x3bc2bc;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x3f2010, m1 0x34ba68, imac 0x3c2630, ios 0x3bc268;
    void updateAnimationID() = win 0x3f23e0, m1 0x34beac, imac 0x3c2ae0;
    void updateAnimationTextInputLabel() = win 0x3f2290, m1 0x34bcc0, imac 0x3c28d0;
    void updateTargetID() = win 0x3f2310, m1 0x34bf2c, imac 0x3c2b80;
    void updateTextInputLabel() = win 0x3f2210, m1 0x34bbb0, imac 0x3c27b0;

    CCTextInputNode* m_targetIDInput;
    CCTextInputNode* m_animationIDInput;
    int m_targetID;
    int m_animationID;
}

[[link(android)]]
class SetupAnimSettingsPopup : SetupTriggerPopup {
    // virtual ~SetupAnimSettingsPopup();

    static SetupAnimSettingsPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x3f2500;

    virtual void onClose(cocos2d::CCObject* sender) = win 0x3f2e90, imac 0x9b140, m1 0x8e0ac, ios 0x2e797c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x3f2610, m1 0x8d8d0, imac 0x9a7f0;
    void updateAnimSettings();
}

[[link(android)]]
class SetupAreaAnimTriggerPopup : SetupAreaTintTriggerPopup {
    // virtual ~SetupAreaAnimTriggerPopup();

    static SetupAreaAnimTriggerPopup* create(EnterEffectObject*, cocos2d::CCArray*, int);

    virtual void updateDefaultTriggerValues() = win 0x3fab00, m1 0x42e564, imac 0x4c8dd0, ios 0x3e8ec;
    virtual void valueDidChange(int, float) = win 0x3facd0, imac 0x4c8f70, m1 0x42e720, ios 0x3ea50;

    void createValueControlAdvancedAnim(int, gd::string, cocos2d::CCPoint, float, bool, InputValueType, int, bool, float min, float max, int, int, GJInputStyle) = win 0x3fa910;
    bool init(EnterEffectObject*, cocos2d::CCArray*, int) = win 0x3f91a0, m1 0x42cb08, imac 0x4c6f90, ios 0x3cf44;
    void onDeactivateAnimValue(cocos2d::CCObject* sender) = win 0x3fac60;
    void updateTargetIDLabel() = win 0x3fabe0, m1 0x42e6ac, imac 0x4c8f00, ios 0x3e9dc;
}

[[link(android)]]
class SetupAreaFadeTriggerPopup : SetupAreaMoveTriggerPopup {
    // virtual ~SetupAreaFadeTriggerPopup();

    static SetupAreaFadeTriggerPopup* create(EnterEffectObject*, cocos2d::CCArray*);

    bool init(EnterEffectObject*, cocos2d::CCArray*) = win 0x3f7430, m1 0x42a2a4, imac 0x4c3d00, ios 0x3b5b0;
}

[[link(android)]]
class SetupAreaMoveTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupAreaMoveTriggerPopup();
    // SetupAreaMoveTriggerPopup();

    static SetupAreaMoveTriggerPopup* create(EnterEffectObject*, cocos2d::CCArray*);

    virtual void updateInputValue(int, float&) = win 0x3f63f0, m1 0x428708, imac 0x4c1860, ios 0x3a584;
    virtual void updateDefaultTriggerValues() = win 0x3f5d20, m1 0x4282f8, imac 0x4c14b0, ios 0x3a22c;
    virtual void updateInputNode(int, float) = win 0x3f63c0, m1 0x4286d4, imac 0x4c1830, ios 0x3a550;
    virtual void valueDidChange(int, float) = win 0x3f6240, imac 0x4c16f0, m1 0x428598, ios 0x3a440;
    virtual float triggerValueFromSliderValue(int, float) = win 0x3f6360, m1 0x42864c, imac 0x4c17c0, ios 0x3a4c8;
    virtual float triggerSliderValueFromValue(int, float) = win 0x3f6390, m1 0x4286a0, imac 0x4c1800, ios 0x3a51c;

    void addAreaDefaultControls(int) = win 0x3f46f0, m1 0x426d30, imac 0x4bfbb0, ios 0x38fd4;
    void getModeValues(int, int&, bool&, bool&);
    bool init(EnterEffectObject*, cocos2d::CCArray*) = win 0x3f3850, m1 0x42602c, imac 0x4bec20, ios 0x38410;
    void onMode(cocos2d::CCObject* sender) = win 0x3f60e0;
    void onNextFreeEffectID(cocos2d::CCObject* sender) = win 0x3f5d70, m1 0x427fe0, imac 0x4c11b0, ios 0x39fd0;
    void onSpecialTarget(cocos2d::CCObject* sender) = win 0x3f5de0;
    void updateEnterTargetIDState() = win 0x3f5e80;

    cocos2d::CCArray* m_modeButtons;
    cocos2d::CCArray* m_targetButtons;
}

[[link(android)]]
class SetupAreaRotateTriggerPopup : SetupAreaMoveTriggerPopup {
    // virtual ~SetupAreaRotateTriggerPopup();

    static SetupAreaRotateTriggerPopup* create(EnterEffectObject*, cocos2d::CCArray*);

    bool init(EnterEffectObject*, cocos2d::CCArray*) = win 0x3f6ce0, m1 0x4297c8, imac 0x4c2f00, ios 0x3aed8;
}

[[link(android)]]
class SetupAreaTintTriggerPopup : SetupAreaMoveTriggerPopup, HSVWidgetDelegate {
    // virtual ~SetupAreaTintTriggerPopup();

    static SetupAreaTintTriggerPopup* create(EnterEffectObject*, cocos2d::CCArray*);

    virtual void determineStartValues() = win 0x3f8840, m1 0x42b9a4, imac 0x4c58d0, ios 0x3c694;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x3f8b50, imac 0x4c5bd0, m1 0x42bc94, ios 0x3c800;
    virtual void valueDidChange(int, float) = win 0x3f8680, imac 0x4c57e0, m1 0x42b8b4, ios 0x3c5cc;
    virtual void hsvPopupClosed(HSVWidgetPopup*, cocos2d::ccHSVValue) = win 0x3f8a60, m1 0x42bae8, imac 0x4c5a50, ios 0x3c7d4;

    bool init(EnterEffectObject*, cocos2d::CCArray*) = win 0x3f7c40, m1 0x42ad84, imac 0x4c4b30, ios 0x3bc1c;
    void onHSV(cocos2d::CCObject* sender) = win 0x3f89e0;
    void updateHSVButton() = win 0x3f8a80;

    CCMenuItemSpriteExtra* m_hsvButton;
    cocos2d::ccHSVValue m_hsvValue;
    bool m_hsvChanged;
}

[[link(android)]]
class SetupAreaTransformTriggerPopup : SetupAreaMoveTriggerPopup {
    // virtual ~SetupAreaTransformTriggerPopup();

    static SetupAreaTransformTriggerPopup* create(EnterEffectObject*, cocos2d::CCArray*);

    bool init(EnterEffectObject*, cocos2d::CCArray*) = win 0x3f6420, m1 0x428ba8, imac 0x4c1f30, ios 0x3a6d8;
}

[[link(android)]]
class SetupAreaTriggerPopup : SetupAreaMoveTriggerPopup {
    // virtual ~SetupAreaTriggerPopup();

    static SetupAreaTriggerPopup* create(EnterEffectObject*, cocos2d::CCArray*);

    bool init(EnterEffectObject*, cocos2d::CCArray*) = win 0x3f8c00, m1 0x42c188, imac 0x4c6330, ios 0x3c9a8;
}

[[link(android)]]
class SetupArtSwitchPopup : SetupTriggerPopup, SelectArtDelegate {
    // virtual ~SetupArtSwitchPopup();

    static SetupArtSwitchPopup* create(ArtTriggerGameObject*, cocos2d::CCArray*, int) = win 0x459210;

    virtual void selectArtClosed(SelectArtLayer*) = win 0x459ed0, imac 0x56ee90, m1 0x4c38e4, ios 0x4092dc;

    bool init(ArtTriggerGameObject*, cocos2d::CCArray*, int) = win 0x4594d0, m1 0x4c32b0, imac 0x56e840;
    void onArt(cocos2d::CCObject* sender) = win 0x459e80;

    SelectArtType m_artType;
    cocos2d::CCSprite* m_artSprite;
}

[[link(android)]]
class SetupAudioLineGuidePopup : SetupTriggerPopup, SelectSettingDelegate {
    // virtual ~SetupAudioLineGuidePopup();

    static SetupAudioLineGuidePopup* create(AudioLineGuideGameObject*, cocos2d::CCArray*);

    virtual void selectSettingClosed(SelectSettingLayer*) = win 0x4581a0, imac 0x56d390, m1 0x4c21ac, ios 0x408070;

    bool init(AudioLineGuideGameObject*, cocos2d::CCArray*) = win 0x457a40, m1 0x4c1b08, imac 0x56cbf0, ios 0x407a7c;
    void onSpeed(cocos2d::CCObject* sender) = win 0x458150, m1 0x4c2164, imac 0x56d340, ios 0x408028;

    cocos2d::CCSprite* m_speedSprite;
}

[[link(android)]]
class SetupAudioTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupAudioTriggerPopup();

    virtual void valueDidChange(int, float) = win 0x42e390, imac 0x4a4700, m1 0x40e62c, ios 0x182804;

    void addProxVolControls(int) = win 0x42d3b0, m1 0x40d928, imac 0x4a3830;
    void addTimeControls(int, float) = win 0x42cff0;
    void onProxMode(cocos2d::CCObject* sender) = win 0x42e240;
    void updateSpecialGroup() = win 0x42e310;

    cocos2d::CCArray* m_proximityButtons;
}

[[link(android)]]
class SetupBGSpeedTrigger : SetupTriggerPopup {
    // virtual ~SetupBGSpeedTrigger();

    static SetupBGSpeedTrigger* create(EffectGameObject*, cocos2d::CCArray*, int);

    bool init(EffectGameObject*, cocos2d::CCArray*, int) = m1 0x455408, imac 0x4f4910;
}

[[link(android)]]
class SetupCameraEdgePopup : SetupTriggerPopup {
    // virtual ~SetupCameraEdgePopup();

    static SetupCameraEdgePopup* create(CameraTriggerGameObject*, cocos2d::CCArray*) = win 0x3faea0, m1 0x4c5330, imac 0x570e20, ios 0x239aa0;

    virtual void determineStartValues() = win 0x3fbd10, m1 0x4c63b8, imac 0x5720f0, ios 0x23a898;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x3fc200, m1 0x4c6600, imac 0x572390, ios 0x23aa70;
    virtual void textChanged(CCTextInputNode*) = win 0x3fbfc0, m1 0x4c6518, imac 0x572280, ios 0x23a9f0;

    bool init(CameraTriggerGameObject*, cocos2d::CCArray*) = win 0x3fafd0, m1 0x4c54c0, imac 0x571060, ios 0x239b84;
    void onCameraEdge(cocos2d::CCObject* sender) = win 0x3fbe10, m1 0x4c624c, imac 0x571f20, ios 0x23a778;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x3fbf70, m1 0x4c6094, imac 0x571d40, ios 0x23a694;
    void onUnlockEdge(cocos2d::CCObject* sender) = win 0x3fbf40, m1 0x4c633c, imac 0x572050, ios 0x23a868;
    void updateTargetID() = win 0x3fc130;
    void updateTextInputLabel() = win 0x3fc0b0;

    CCTextInputNode* m_targetIDInput;
    int m_targetID;
    int m_edgeDirection;
    cocos2d::CCArray* m_directionToggles;
}

[[link(android)]]
class SetupCameraGuidePopup : SetupTriggerPopup {
    // virtual ~SetupCameraGuidePopup();

    static SetupCameraGuidePopup* create(CameraTriggerGameObject*, cocos2d::CCArray*) = win 0x4582a0;

    bool init(CameraTriggerGameObject*, cocos2d::CCArray*) = win 0x4583b0, m1 0x4c2408, imac 0x56d690;
}

[[link(android)]]
class SetupCameraModePopup : SetupTriggerPopup {
    // virtual ~SetupCameraModePopup();

    static SetupCameraModePopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x3fc360, m1 0x402158, imac 0x495af0, ios 0x3a2ffc;

    virtual void determineStartValues() = win 0x3fcf30, m1 0x402fc0, imac 0x496b80, ios 0x3a3b64;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x287920, m1 0x403274, imac 0x496e70, ios 0x3a3dec;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x3fc480, m1 0x4022e4, imac 0x495d30, ios 0x3a30d8;
    void onEditCameraSettings(cocos2d::CCObject* sender) = win 0x3fd1a0;
    void onUnboundMode(cocos2d::CCObject* sender) = win 0x3fd0f0;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x3fd320, m1 0x402d08, imac 0x496860, ios 0x3a3970;
    void updateCameraEasing() = win 0x3fd430;
    void updateCameraEasingLabel() = win 0x3fd3d0, m1 0x402e88, imac 0x496a30, ios 0x3a3a2c;
    void updateCameraPadding() = win 0x3fd530;
    void updateCameraPaddingLabel() = win 0x3fd4c0, m1 0x402ed4, imac 0x496a80, ios 0x3a3a78;
    void updateItemVisibility() = win 0x3fd250;

    cocos2d::CCArray* m_freeModeObjects;
    cocos2d::CCArray* m_cameraSettingsObjects;
    Slider* m_cameraEasingSlider;
    cocos2d::CCLabelBMFont* m_cameraEasingLabel;
    int m_cameraEasing;
    Slider* m_cameraPaddingSlider;
    cocos2d::CCLabelBMFont* m_cameraPaddingLabel;
    float m_cameraPadding;
    bool m_freeMode;
    bool m_cameraSettingsEnabled;
    bool m_cameraModeObjects;
}

[[link(android)]]
class SetupCameraOffsetTrigger : SetupTriggerPopup {
    // virtual ~SetupCameraOffsetTrigger();

    static SetupCameraOffsetTrigger* create(CameraTriggerGameObject*, cocos2d::CCArray*) = win 0x3fd690, m1 0x5732f0, imac 0x64b110, ios 0x192364;

    virtual void determineStartValues() = win 0x3fe9f0, m1 0x57505c, imac 0x64d090, ios 0x193bc8;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x3ffc80, m1 0x575a68, imac 0x64dbc0, ios 0x194458;
    virtual void textChanged(CCTextInputNode*) = win 0x3ff6f0, imac 0x64d890, m1 0x5757e8, ios 0x194230;
    virtual void valuePopupClosed(ConfigureValuePopup*, float) = win 0x3fedf0, m1 0x57542c, imac 0x64d460, ios 0x193f00;

    bool init(CameraTriggerGameObject*, cocos2d::CCArray*) = win 0x3fd7b0, m1 0x57347c, imac 0x64b350, ios 0x192440;
    void onEasing(cocos2d::CCObject* sender) = win 0x3ff1b0;
    void onEasingRate(cocos2d::CCObject* sender) = win 0x3fed30;
    void onTargetMode(cocos2d::CCObject* sender) = win 0x3ff610;
    int posFromSliderValue(float);
    void sliderChanged(cocos2d::CCObject* sender) = win 0x26a440;
    float sliderValueFromPos(int);
    void sliderXChanged(cocos2d::CCObject* sender) = win 0x3ff410;
    void sliderYChanged(cocos2d::CCObject* sender) = win 0x3ff460;
    void toggleEasingRateVisibility() = win 0x3ff0a0;
    void updateDuration() = win 0x26b120, m1 0x5755c8, imac 0x64d630, ios 0x194038;
    void updateDurLabel(bool);
    void updateEasingLabel() = win 0x3ff270;
    void updateEasingRateLabel() = win 0x3feec0;
    void updateMoveCommandEasing();
    void updateMoveCommandEasingRate();
    void updateMoveCommandPosX() = win 0x3ffaa0, m1 0x575638, imac 0x64d6b0, ios 0x1940a0;
    void updateMoveCommandPosY() = win 0x3ffb90, m1 0x575710, imac 0x64d7a0, ios 0x194168;
    void updateValueXLabel() = win 0x3ff4b0;
    void updateValueYLabel() = win 0x3ff560;

    CCTextInputNode* m_moveTimeInput;
    Slider* m_moveTimeSlider;
    float m_moveTime;
    cocos2d::CCLabelBMFont* m_cameraEasingLabel;
    EasingType m_cameraEasingType;
    float m_cameraEasingRate;
    CCMenuItemSpriteExtra* m_cameraEasingRateButton;
    cocos2d::CCLabelBMFont* m_cameraEasingRateLabel;
    CCTextInputNode* m_offsetXInput;
    CCTextInputNode* m_offsetYInput;
    Slider* m_offsetXSlider;
    Slider* m_offsetYSlider;
    int m_offsetX;
    int m_offsetY;
    int m_targetMode;
    CCMenuItemToggler* m_xOnlyToggler;
    CCMenuItemToggler* m_yOnlyToggler;
}

[[link(android)]]
class SetupCameraRotatePopup : SetupTriggerPopup {
    // virtual ~SetupCameraRotatePopup();

    static SetupCameraRotatePopup* create(EffectGameObject*, cocos2d::CCArray*);

    virtual void determineStartValues() = m1 0x414080, imac 0x4aad80;
    virtual void onClose(cocos2d::CCObject* sender) = m1 0x414790, imac 0x4ab540;
    virtual void textChanged(CCTextInputNode*) = imac 0x4ab2d0, m1 0x414568;
    virtual void valuePopupClosed(ConfigureValuePopup*, float) = m1 0x4142ec, imac 0x4ab000;

    bool init(EffectGameObject*, cocos2d::CCArray*) = m1 0x412998, imac 0x4a9690;
    void onEasing(cocos2d::CCObject* sender);
    void onEasingRate(cocos2d::CCObject* sender);
    void sliderChanged(cocos2d::CCObject* sender);
    void sliderDegreesChanged(cocos2d::CCObject* sender);
    void toggleEasingRateVisibility();
    void updateCommandDegrees();
    void updateDegreesLabel();
    void updateDuration();
    void updateDurLabel(bool);
    void updateEasingLabel();
    void updateEasingRateLabel();
    void updateMoveCommandEasing();
    void updateMoveCommandEasingRate();

    CCTextInputNode* m_moveTimeInput;
    Slider* m_moveTimeSlider;
    float m_moveTime;
    cocos2d::CCLabelBMFont* m_cameraEasingLabel;
    EasingType m_cameraEasingType;
    float m_cameraEasingRate;
    CCMenuItemSpriteExtra* m_cameraEasingRateButton;
    cocos2d::CCLabelBMFont* m_cameraEasingRateLabel;
    CCTextInputNode* m_degreesInput;
    Slider* m_degreesSlider;
    float m_degrees;
}

[[link(android)]]
class SetupCameraRotatePopup2 : SetupTriggerPopup {
    // virtual ~SetupCameraRotatePopup2();

    static SetupCameraRotatePopup2* create(EffectGameObject*, cocos2d::CCArray*) = win 0x3ffd20;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x3ffe30, m1 0x414974, imac 0x4ab7d0;
}

[[link(android)]]
class SetupCheckpointPopup : SetupTriggerPopup {
    // virtual ~SetupCheckpointPopup();

    static SetupCheckpointPopup* create(CheckpointGameObject*, cocos2d::CCArray*);

    bool init(CheckpointGameObject*, cocos2d::CCArray*) = win 0x450a20, m1 0x4baeb4, imac 0x565360;
}

[[link(android)]]
class SetupCoinLayer : SetupTriggerPopup {
    // virtual ~SetupCoinLayer();
    SetupCoinLayer() {}

    static SetupCoinLayer* create(EffectGameObject*, cocos2d::CCArray*) = win inline, m1 0x4c0ddc, imac 0x56bbf0, ios 0x4070c0 {
        auto ret = new SetupCoinLayer();
        if (ret->init(p0, p1)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x457000, m1 0x4c0f68, imac 0x56be20, ios 0x40719c;
}

[[link(android)]]
class SetupCollisionStateTriggerPopup : SetupInstantCollisionTriggerPopup {
    // virtual ~SetupCollisionStateTriggerPopup();

    static SetupCollisionStateTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*);

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x402cf0, m1 0x314c08, imac 0x384de0;
}

[[link(android)]]
class SetupCollisionTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupCollisionTriggerPopup();

    static SetupCollisionTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x400520;

    virtual void determineStartValues() = win 0x4014d0, m1 0x3139c4, imac 0x383820, ios 0x230460;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x402140, m1 0x313f38, imac 0x383eb0, ios 0x23086c;
    virtual void textChanged(CCTextInputNode*) = win 0x401ac0, imac 0x383bc0, m1 0x313ccc, ios 0x23072c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x400660, m1 0x3125a4, imac 0x382240, ios 0x22f360;
    void onActivateOnExit(cocos2d::CCObject* sender) = win 0x401960;
    void onEnableGroup(cocos2d::CCObject* sender) = win 0x401660;
    void onItemID2Arrow(cocos2d::CCObject* sender) = win 0x4019f0, m1 0x3131dc, imac 0x382f70, ios 0x22fec8;
    void onItemIDArrow(cocos2d::CCObject* sender) = win 0x401a30, m1 0x31313c, imac 0x382eb0, ios 0x22fe7c;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x401a70, m1 0x31327c, imac 0x383030, ios 0x22ff14;
    void onTargetP1(cocos2d::CCObject* sender) = win 0x4016f0;
    void onTargetP2(cocos2d::CCObject* sender) = win 0x4017b0;
    void onTargetPP(cocos2d::CCObject* sender) = win 0x401870;
    void updateItemID() = win 0x401f30;
    void updateItemID2() = win 0x401fd0;
    void updateItemID2InputLabel() = win 0x401e10;
    void updateItemIDInputLabel() = win 0x401d40;
    void updateTargetID() = win 0x402070;
    void updateTargetIDInputLabel() = win 0x401eb0;

    CCTextInputNode* m_blockAInput;
    CCTextInputNode* m_blockBInput;
    CCTextInputNode* m_targetIDInput;
    int m_blockAID;
    int m_blockBID;
    int m_targetID;
    bool m_activateGroup;
    bool m_triggerOnExit;
    bool m_targetP1;
    bool m_targetP2;
    bool m_targetPP;
}

[[link(android)]]
class SetupCountTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupCountTriggerPopup();

    static SetupCountTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x4031a0, imac 0x2a7700, m1 0x24dd00, ios 0xf6b70;

    virtual void determineStartValues() = win 0x404390, imac 0x2a8e10, m1 0x24f140, ios 0xf7c00;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x404b30, imac 0x2a93a0, m1 0x24f618, ios 0xf7fd0;
    virtual void textChanged(CCTextInputNode*) = win 0x404650, imac 0x2a9140, m1 0x24f3f4, ios 0xf7e90;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x4032e0, m1 0x24de94, imac 0x2a7950, ios 0xf6c58;
    void onEnableGroup(cocos2d::CCObject* sender) = win 0x401660;
    void onItemIDArrow(cocos2d::CCObject* sender) = win 0x4045c0, m1 0x24eba4, imac 0x2a87d0, ios 0xf787c;
    void onMultiActivate(cocos2d::CCObject* sender) = win 0x4044f0;
    void onTargetCountArrow(cocos2d::CCObject* sender) = win 0x404580, m1 0x24ec4c, imac 0x2a8890, ios 0xf78d0;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x404610, m1 0x24ecdc, imac 0x2a8940, ios 0xf791c;
    void updateCountTextInputLabel() = win 0x401eb0;
    void updateItemID() = win 0x401f30;
    void updateItemIDInputLabel() = win 0x4048d0;
    void updateTargetCount() = win 0x404aa0;
    void updateTargetID() = win 0x4049d0;
    void updateTargetIDInputLabel() = win 0x404950;

    CCTextInputNode* m_itemIDInput;
    CCTextInputNode* m_targetIDInput;
    CCTextInputNode* m_targetCountInput;
    int m_itemID;
    int m_targetID;
    int m_targetCount;
    bool m_activateGroup;
    bool m_multiActivate;
}

[[link(android)]]
class SetupDashRingPopup : SetupTriggerPopup {
    // virtual ~SetupDashRingPopup();

    static SetupDashRingPopup* create(DashRingObject*, cocos2d::CCArray*);

    bool init(DashRingObject*, cocos2d::CCArray*) = win 0x45ac80, m1 0x4c4750, imac 0x56ffe0;
}

[[link(android)]]
class SetupEndPopup : SetupTriggerPopup {
    // virtual ~SetupEndPopup();

    static SetupEndPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x404dc0;

    virtual void determineStartValues() = win 0x4058b0, m1 0x57aac8, imac 0x653460, ios 0x2acca4;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x3fc200, m1 0x57ad48, imac 0x653780, ios 0x2ace98;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x57ac44, imac 0x653630, ios 0x2acdfc;
    virtual void textChanged(CCTextInputNode*) = win 0x405b60, m1 0x57ac60, imac 0x653670, ios 0x2ace18;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x404ef0, m1 0x579f20, imac 0x6527b0;
    void onLockY(cocos2d::CCObject* sender) = win 0x405a80;
    void onMultiActivate(cocos2d::CCObject* sender) = win 0x4059c0;
    void onReversed(cocos2d::CCObject* sender) = win 0x4059f0;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x405b10;
    void updateTargetID() = win 0x405cd0;
    void updateTextInputLabel() = win 0x405c50;

    CCTextInputNode* m_groupIDInput;
    bool m_reversed;
    bool m_lockY;
    int m_groupID;
    bool m_multiActivate;
}

[[link(android)]]
class SetupEnterEffectPopup : SetupTriggerPopup, HSVWidgetDelegate {
    // virtual ~SetupEnterEffectPopup();

    static SetupEnterEffectPopup* create(EnterEffectObject*, cocos2d::CCArray*, int);

    virtual void determineStartValues() = win 0x408580, m1 0x363d00, imac 0x3e1800, ios 0x3f92a4;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x408b60, imac 0x3e1c10, m1 0x3640e0, ios 0x3f94f8;
    virtual void updateInputValue(int, float&) = win 0x3f63f0, m1 0x36425c, imac 0x3e1db0, ios 0x3f9650;
    virtual void updateInputNode(int, float) = win 0x3f63c0, m1 0x364228, imac 0x3e1d80, ios 0x3f961c;
    virtual void valueDidChange(int, float) = win 0x408750, imac 0x3e19c0, m1 0x363e70, ios 0x3f9410;
    virtual float triggerValueFromSliderValue(int, float) = win 0x3f6360, m1 0x3641a0, imac 0x3e1d10, ios 0x3f9594;
    virtual float triggerSliderValueFromValue(int, float) = win 0x3f6390, m1 0x3641f4, imac 0x3e1d50, ios 0x3f95e8;
    virtual void hsvPopupClosed(HSVWidgetPopup*, cocos2d::ccHSVValue) = win 0x408a70, m1 0x363f34, imac 0x3e1a90, ios 0x3f94cc;

    bool init(EnterEffectObject*, cocos2d::CCArray*, int) = win 0x406570, m1 0x361a0c, imac 0x3deda0;
    void onEnterType(cocos2d::CCObject* sender) = win 0x408910;
    void onHSV(cocos2d::CCObject* sender) = win 0x4089f0;
    void onNextFreeEnterChannel(cocos2d::CCObject* sender) = win 0x4088a0;
    void onNextFreeEnterEffectID(cocos2d::CCObject* sender) = win 0x3f5d70;
    void updateHSVButton() = win 0x408a90;

    int m_objectID;
    CCMenuItemToggler* m_enterOnlyToggler;
    CCMenuItemToggler* m_exitOnlyToggler;
    int m_enterType;
    CCMenuItemSpriteExtra* m_hsvButton;
    cocos2d::ccHSVValue m_hsvValue;
    bool m_hsvChanged;
}

[[link(android)]]
class SetupEnterTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupEnterTriggerPopup();

    static SetupEnterTriggerPopup* create(EnterEffectObject*, cocos2d::CCArray*);

    virtual void determineStartValues() = win 0x287eb0, imac 0x2896f0, m1 0x232768, ios 0x2d3498;

    bool init(EnterEffectObject*, cocos2d::CCArray*) = win 0x287930, m1 0x232188, imac 0x289090;
    void onEnterType(cocos2d::CCObject* sender) = win 0x287f80;

    CCMenuItemToggler* m_enterOnlyToggler;
    CCMenuItemToggler* m_exitOnlyToggler;
    int m_enterType;
}

[[link(android)]]
class SetupEventLinkPopup : SetupTriggerPopup {
    // virtual ~SetupEventLinkPopup();

    static SetupEventLinkPopup* create(EventLinkTrigger*, cocos2d::CCArray*) = win 0x44d830;

    bool init(EventLinkTrigger*, cocos2d::CCArray*) = win 0x44d940, m1 0x4b6fa8, imac 0x560620, ios 0x3fef1c;
    void onSelectEvent(cocos2d::CCObject* sender) = win 0x44deb0;
    void updateEventIDs(gd::set<int>&);
}

[[link(android)]]
class SetupForceBlockPopup : SetupTriggerPopup {
    // virtual ~SetupForceBlockPopup();

    static SetupForceBlockPopup* create(ForceBlockGameObject*, cocos2d::CCArray*) = win 0x458970;

    virtual void valueDidChange(int, float) = win 0x4591a0, imac 0x56e580, m1 0x4c30bc, ios 0x408c84;

    bool init(ForceBlockGameObject*, cocos2d::CCArray*) = win 0x458a80, m1 0x4c2a88, imac 0x56de60;
}

[[link(android)]]
class SetupGameplayOffsetPopup : SetupTriggerPopup {
    // virtual ~SetupGameplayOffsetPopup();

    static SetupGameplayOffsetPopup* create(EffectGameObject*, cocos2d::CCArray*);

    virtual void updateInputValue(int, float&) = win 0x42a630, imac 0x783140, m1 0x697480, ios 0x1a29f8;
    virtual void updateInputNode(int, float) = win 0x42a610, m1 0x697468, imac 0x783120, ios 0x1a29e0;
    virtual float triggerValueFromSliderValue(int, float) = win 0x42a5c0, m1 0x697418, imac 0x7830d0, ios 0x1a2990;
    virtual float triggerSliderValueFromValue(int, float) = win 0x42a5f0, m1 0x697450, imac 0x783100, ios 0x1a29c8;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x42a510, m1 0x697384, imac 0x783030, ios 0x1a290c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = m1 0x696c90, imac 0x782840;
    void onDefaultValues(cocos2d::CCObject* sender);
}

[[link(android)]]
class SetupGradientPopup : SetupTriggerPopup {
    SetupGradientPopup() = ios 0x343274 {
        m_blendingMode = 0;
        m_layerButtons = nullptr;
        m_blendingLayer = 0;
        m_gradientLabels = nullptr;
    }
    ~SetupGradientPopup() = win inline, m1 0x50cf3c, imac 0x5d99e0, ios 0x341e38 {
        CC_SAFE_RELEASE(m_layerButtons);
    }

    static SetupGradientPopup* create(GradientTriggerObject*, cocos2d::CCArray*) = win inline, m1 0x50d1d0, imac 0x5d9de0 {
        auto ret = new SetupGradientPopup();
        if (ret->init(p0, p1)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void determineStartValues() = win 0x409e70, m1 0x50e9cc, imac 0x5db910, ios 0x343010;
    virtual void onPlusButton(cocos2d::CCObject* sender) = win 0x409f80, imac 0x5dba30, m1 0x50eafc, ios 0x343120;
    virtual void updateToggleItem(int, bool) = win 0x40a000, m1 0x50eb58, imac 0x5dba80, ios 0x34317c;
    virtual void valueDidChange(int, float) = win 0x40a410, imac 0x5dbc40, m1 0x50ed10, ios 0x343234;

    bool init(GradientTriggerObject*, cocos2d::CCArray*) = win 0x408d10, m1 0x50d368, imac 0x5da040, ios 0x341f78;
    void onBlending(cocos2d::CCObject* sender) = win 0x40a2c0, m1 0x50e720, imac 0x5db640;
    void onZLayer(cocos2d::CCObject* sender) = win 0x40a1a0, m1 0x50e850, imac 0x5db760;
    void sliderChanged(cocos2d::CCObject* sender) = m1 0x50ec70, imac 0x5dbba0;
    void updateBlending() = m1 0x50eca0, imac 0x5dbbc0;
    void updateBlendingLabel() = win 0x40a380, m1 0x50e66c, imac 0x5db5b0;
    void updateGradientLabels(bool) = win 0x40a090, m1 0x50e564, imac 0x5db4a0;
    void updateZLayerButtons() = win 0x40a230, m1 0x50e93c, imac 0x5db870;

    cocos2d::CCLabelBMFont* m_blendingLabel;
    int m_blendingMode;
    cocos2d::CCArray* m_layerButtons;
    int m_blendingLayer;
    cocos2d::CCArray* m_gradientLabels;
}

[[link(android)]]
class SetupGravityModPopup : FLAlertLayer, TextInputDelegate {
    // virtual ~SetupGravityModPopup();

    static SetupGravityModPopup* create(EffectGameObject*, cocos2d::CCArray*, bool);

    virtual void keyBackClicked() = m1 0x34fa14, imac 0x3c6a50;
    virtual void show() = imac 0x3c69f0, m1 0x34f9c8;
    virtual void textInputClosed(CCTextInputNode*) = m1 0x34f8cc, imac 0x3c68b0;
    virtual void textChanged(CCTextInputNode*) = imac 0x3c68f0, m1 0x34f8e8;

    void determineStartValues();
    bool init(EffectGameObject*, cocos2d::CCArray*, bool) = m1 0x34e7e0, imac 0x3c56a0;
    void onClose(cocos2d::CCObject* sender);
    void onItemIDArrow(cocos2d::CCObject* sender);
    void sliderChanged(cocos2d::CCObject* sender);
    void updateItemID();
    void updateTextInputLabel();
    void updateValue();
    void updateValueLabel() = m1 0x34f5c0, imac 0x3c6540;

    EffectGameObject* m_gameObject;
    cocos2d::CCArray* m_gameObjects;
    cocos2d::CCLabelBMFont* m_gravityModLabel;
    Slider* m_gravityModSlider;
    float m_gravityMod;
    bool m_gravityTrigger;
    float m_minValue;
    float m_maxValue;
    CCTextInputNode* m_itemIDInput;
    int m_itemID;
    bool m_disableDelegate;
}

[[link(android)]]
class SetupGravityTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupGravityTriggerPopup();

    static SetupGravityTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*);

    virtual void valueDidChange(int, float) = win 0x411950, imac 0x4b22c0, m1 0x41a934, ios 0x419a94;

    bool init(EffectGameObject*, cocos2d::CCArray*) = m1 0x41a4d4, imac 0x4b1e10, win 0x4114d0, ios 0x4196c8;
}

[[link(android)]]
class SetupInstantCollisionTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupInstantCollisionTriggerPopup();

    static SetupInstantCollisionTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*);

    virtual void updateDefaultTriggerValues() = win 0x402bc0, m1 0x314a58, imac 0x384b90, ios 0x231200;
    virtual void valueDidChange(int, float) = win 0x402990, imac 0x384880, m1 0x314748, ios 0x230f18;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x402270, m1 0x314130, imac 0x384160, ios 0x2309b4;
    TodoReturn updateSpecialNodes();
}

[[link(android)]]
class SetupInstantCountPopup : SetupTriggerPopup {
    // virtual ~SetupInstantCountPopup();

    static SetupInstantCountPopup* create(CountTriggerGameObject*, cocos2d::CCArray*) = win 0x40a520, m1 0x5047c4, imac 0x5d0770, ios 0x1bdc18;

    virtual void determineStartValues() = win 0x40b590, m1 0x505b58, imac 0x5d1dc0, ios 0x1bebe0;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x402140, m1 0x506090, imac 0x5d23f0, ios 0x1befc0;
    virtual void textChanged(CCTextInputNode*) = win 0x40b740, m1 0x505e14, imac 0x5d2100, ios 0x1bee80;

    bool init(CountTriggerGameObject*, cocos2d::CCArray*) = win 0x40a660, m1 0x504958, imac 0x5d09c0, ios 0x1bdd00;
    void onCountType(cocos2d::CCObject* sender) = win 0x40ba90;
    void onEnableGroup(cocos2d::CCObject* sender) = win 0x401660;
    void onTargetCountArrow(cocos2d::CCObject* sender) = win 0x404580, m1 0x5055c8, imac 0x5d1780, ios 0x1be868;
    void onTargetID2Arrow(cocos2d::CCObject* sender) = win 0x40b700, m1 0x505658, imac 0x5d1830, ios 0x1be8b4;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x4045c0, m1 0x505520, imac 0x5d16c0, ios 0x1be814;
    void updateCountTextInputLabel() = win 0x401eb0;
    void updateItemID() = win 0x401f30;
    void updateItemIDInputLabel() = win 0x4048d0;
    void updateTargetCount() = win 0x404aa0;
    void updateTargetID() = win 0x40b9c0;
    void updateTargetIDInputLabel() = win 0x404950;

    CCTextInputNode* m_itemIDInput;
    CCTextInputNode* m_targetIDInput;
    CCTextInputNode* m_targetCountInput;
    int m_itemID;
    int m_targetID;
    int m_targetCount;
    bool m_activateGroup;
    int m_mode;
    CCMenuItemToggler* m_equalsToggler;
    CCMenuItemToggler* m_largerToggler;
    CCMenuItemToggler* m_smallerToggler;
}

[[link(android)]]
class SetupInteractObjectPopup : SetupTriggerPopup {
    // virtual ~SetupInteractObjectPopup();

    static SetupInteractObjectPopup* create(EffectGameObject*, cocos2d::CCArray*);

    virtual void onClose(cocos2d::CCObject* sender) = win 0x40c730, m1 0x45904c, imac 0x4f8bf0, ios 0x40b148;
    virtual void onPlusButton(cocos2d::CCObject* sender) = win 0x40c610, m1 0x458f68, imac 0x4f8b00, ios 0x40b0ec;
    virtual void valueDidChange(int, float) = win 0x40c700, imac 0x4f8b40, m1 0x458fa0, ios 0x40b124;

    bool init(EffectGameObject*, cocos2d::CCArray*) = m1 0x4586c0, imac 0x4f80b0;
    TodoReturn updateItems();
}

[[link(android)]]
class SetupItemCompareTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupItemCompareTriggerPopup();

    static SetupItemCompareTriggerPopup* create(ItemTriggerGameObject*, cocos2d::CCArray*) = win 0x454d10;

    virtual void valueDidChange(int, float) = win 0x456fe0, imac 0x56bbc0, m1 0x4c0da8, ios 0x40708c;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x4564d0, imac 0x56ba60, m1 0x4c0c50, ios 0x406f44;

    bool init(ItemTriggerGameObject*, cocos2d::CCArray*) = win 0x454e30, m1 0x4beef4, imac 0x569ae0, ios 0x4056a8;
    void onOpButton(cocos2d::CCObject* sender) = win 0x456100;
    void updateFormulaLabel() = win 0x4566d0;
    void updateOpButton(CCMenuItemSpriteExtra*, int, int) = win 0x4561e0;

    cocos2d::CCLabelBMFont* m_formulaLabel;
}

[[link(android)]]
class SetupItemEditTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupItemEditTriggerPopup();

    static SetupItemEditTriggerPopup* create(ItemTriggerGameObject*, cocos2d::CCArray*) = win 0x4524d0;

    virtual void valueDidChange(int, float) = win 0x454ce0, imac 0x569870, m1 0x4bed30, ios 0x405594;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x454a40, imac 0x569690, m1 0x4beb50, ios 0x4053d4;

    bool init(ItemTriggerGameObject*, cocos2d::CCArray*) = win 0x4525f0, m1 0x4bc978, imac 0x567390, ios 0x4038d4;
    void onOpButton(cocos2d::CCObject* sender) = win 0x4537e0;
    void updateFormulaLabel() = win 0x453eb0, m1 0x4bdbf4, imac 0x568890;
    void updateOpButton(CCMenuItemSpriteExtra*, int, int) = win 0x453c50;

    cocos2d::CCLabelBMFont* m_formulaLabel;
}

[[link(android)]]
class SetupKeyframeAnimPopup : SetupTriggerPopup {
    // virtual ~SetupKeyframeAnimPopup();

    static SetupKeyframeAnimPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x40c970;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x40ca80, m1 0x1a3d5c, imac 0x1ecdd0;
}

[[link(android)]]
class SetupKeyframePopup : SetupTriggerPopup {
    // virtual ~SetupKeyframePopup();

    static SetupKeyframePopup* create(KeyframeGameObject*, cocos2d::CCArray*, LevelEditorLayer*) = win 0x40d4a0;

    virtual void onClose(cocos2d::CCObject* sender) = win 0x40f180, imac 0x1effa0, m1 0x1a6778, ios 0x1b7d14;
    virtual void onCustomButton(cocos2d::CCObject* sender) = win 0x40e990, imac 0x1efbe0, m1 0x1a6394, ios 0x1b7a24;
    virtual void valueDidChange(int, float) = win 0x40e8b0, imac 0x1ef920, m1 0x1a60a8, ios 0x1b77fc;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x40e8d0, imac 0x1efb50, m1 0x1a62f0, ios 0x1b7980;

    bool init(KeyframeGameObject*, cocos2d::CCArray*, LevelEditorLayer*) = win 0x40d5e0, m1 0x1a4a58, imac 0x1edec0;
    void onTimeMode(cocos2d::CCObject* sender) = win 0x40f090;
    void refreshPreviewArt() = win 0x40edf0;
    void updateTimeModeButtons() = win 0x40f0f0;

    cocos2d::CCArray* m_timeModeToggles;
    LevelEditorLayer* m_editorLayer;
    bool m_groupIDChanged;
}

[[link(android)]]
class SetupMGTrigger : SetupTriggerPopup {
    // virtual ~SetupMGTrigger();

    static SetupMGTrigger* create(EffectGameObject*, cocos2d::CCArray*) = win 0x40f3e0;

    virtual void determineStartValues() = win 0x4104d0, m1 0x454a5c, imac 0x4f3d90, ios 0x2f2ad8;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x410bc0, m1 0x4551e4, imac 0x4f45f0, ios 0x2f3144;
    virtual void textChanged(CCTextInputNode*) = win 0x410830, imac 0x4f4390, m1 0x454fcc, ios 0x2f2f84;
    virtual void valuePopupClosed(ConfigureValuePopup*, float) = win 0x3fedf0, m1 0x454ce8, imac 0x4f4050, ios 0x2f2d1c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x40f500, m1 0x453360, imac 0x4f2600;
    void onEasing(cocos2d::CCObject* sender) = win 0x3ff1b0;
    void onEasingRate(cocos2d::CCObject* sender) = win 0x3fed30;
    void posFromSliderValue(float);
    void sliderChanged(cocos2d::CCObject* sender) = win 0x26a440;
    void sliderValueFromPos(int);
    void sliderYChanged(cocos2d::CCObject* sender) = win 0x410730;
    void toggleEasingRateVisibility() = win 0x3ff0a0;
    void updateDuration() = win 0x26b120;
    void updateDurLabel(bool) = win 0x26a500;
    void updateEasingLabel() = win 0x3ff270;
    void updateEasingRateLabel() = win 0x3feec0;
    void updateMoveCommandEasing();
    void updateMoveCommandEasingRate();
    void updateMoveCommandPosY() = win 0x410ad0;
    void updateValueYLabel() = win 0x410780;

    CCTextInputNode* m_moveTimeInput;
    Slider* m_moveTimeSlider;
    float m_moveTime;
    cocos2d::CCLabelBMFont* m_mgEasingLabel;
    EasingType m_mgEasingType;
    float m_mgEasingRate;
    CCMenuItemSpriteExtra* m_mgEasingRateButton;
    cocos2d::CCLabelBMFont* m_mgEasingRateLabel;
    CCTextInputNode* m_offsetYInput;
    Slider* m_offsetYSlider;
    int m_offsetY;
}

[[link(android)]]
class SetupMoveCommandPopup : SetupTriggerPopup {
    // virtual ~SetupMoveCommandPopup();

    static SetupMoveCommandPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x278ef0;

    virtual void updateInputValue(int, float&) = win 0x27a4d0, imac 0x5f1410, m1 0x5211d4, ios 0x273cb8;
    virtual void updateInputNode(int, float) = win 0x27a4a0, m1 0x5211a8, imac 0x5f13d0, ios 0x273c8c;
    virtual void valueDidChange(int, float) = win 0x27a500, imac 0x5f1450, m1 0x521208, ios 0x273cec;
    virtual float triggerValueFromSliderValue(int, float) = win 0x27a3e0, m1 0x5210f4, imac 0x5f12f0, ios 0x273bd8;
    virtual float triggerSliderValueFromValue(int, float) = win 0x27a430, m1 0x521138, imac 0x5f1340, ios 0x273c1c;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x27ab70, imac 0x5f1650, m1 0x5213d8, ios 0x273eac;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x279010, m1 0x51fd2c, imac 0x5efb70, ios 0x272a50;
    void updateControlVisibility() = win 0x27a9b0, m1 0x520f38, imac 0x5f1140, ios 0x273a1c;

    bool m_smallStep;
}

[[link(android)]]
class SetupObjectControlPopup : SetupTriggerPopup {
    // virtual ~SetupObjectControlPopup();

    static SetupObjectControlPopup* create(ObjectControlGameObject*, cocos2d::CCArray*) = win 0x45a8c0;

    bool init(ObjectControlGameObject*, cocos2d::CCArray*) = win 0x45a9d0, m1 0x4c4328, imac 0x56fae0;
}

[[link(android)]]
class SetupObjectOptions2Popup : SetupTriggerPopup {
    // virtual ~SetupObjectOptions2Popup();
    SetupObjectOptions2Popup() = win inline {}

    static SetupObjectOptions2Popup* create(GameObject*, cocos2d::CCArray*) = win inline {
        auto ret = new SetupObjectOptions2Popup();
        if (ret->init(p0, p1)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void onPlusButton(cocos2d::CCObject* sender) = win 0x3e9380, imac 0x307200, m1 0x29e2d8, ios 0x45758;

    bool init(GameObject*, cocos2d::CCArray*) = win 0x3e8e80, m1 0x29de30, imac 0x306cd0;
}

[[link(android)]]
class SetupObjectOptionsPopup : FLAlertLayer, TextInputDelegate {
    SetupObjectOptionsPopup() {
        m_gameObject = nullptr;
        m_gameObjects = nullptr;
        m_iceBlock = false;
        m_dontFade = false;
        m_dontEnter = false;
        m_noEffects = false;
        m_noParticle = false;
        m_noTouch = false;
        m_passable = false;
        m_hide = false;
        m_nonStickX = false;
        m_nonStickY = false;
        m_extraSticky = false;
        m_dontBoostY = false;
        m_dontBoostX = false;
        m_noAudioScale = false;
        m_scaleStick = false;
        m_highDetail = false;
        m_groupParent = false;
        m_areaParent = false;
        m_gripSlope = false;
        m_noGlow = false;
        m_reverse = false;
        m_extendedCollision = false;
        m_unk2a6 = false;
        m_groupIDLayer = nullptr;
        m_effectObject = false;
        m_singlePlayerTouch = false;
    }
    ~SetupObjectOptionsPopup() = win inline, m1 0x29b178, imac 0x303650, ios 0x42dbc {
        CC_SAFE_RELEASE(m_gameObject);
        CC_SAFE_RELEASE(m_gameObjects);
    }

    static SetupObjectOptionsPopup* create(GameObject*, cocos2d::CCArray*, SetGroupIDLayer*) = win inline, m1 0x29a778, imac 0x302ae0, ios 0x42654 {
        auto ret = new SetupObjectOptionsPopup();
        if (ret->init(p0, p1, p2)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x250330, m1 0x29dd48, imac 0x306b70, ios 0x45288;
    virtual void show() = win 0x8ba30, m1 0x29dd6c, imac 0x306bb0, ios 0x452ac;
    virtual void determineStartValues() = win 0x3e7cd0, imac 0x306760, m1 0x29da98, ios 0x450a4;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x84620, m1 0x29ddb8, imac 0x306c10, ios 0x452f8;

    bool init(GameObject*, cocos2d::CCArray*, SetGroupIDLayer*) = win 0x3e62f0, m1 0x29b3ac, imac 0x3039a0, ios 0x42e7c;
    void onAlwaysHide(cocos2d::CCObject* sender) = win 0x3e8500;
    void onApplyScaleStick(cocos2d::CCObject* sender) = win 0x3e88f0;
    void onCenterEffect(cocos2d::CCObject* sender) = win 0x3e8dd0;
    void onDisableGlow(cocos2d::CCObject* sender) = win 0x3e83e0;
    void onDisableObject(cocos2d::CCObject* sender) = win 0x3e8230;
    void onDontBoost(cocos2d::CCObject* sender) = win 0x3e8740;
    void onDontBoostX(cocos2d::CCObject* sender) = win 0x3e87d0;
    void onDontEnter(cocos2d::CCObject* sender) = win 0x3e8080;
    void onDontFade(cocos2d::CCObject* sender) = win 0x3e7ff0;
    void onExtendedCollision(cocos2d::CCObject* sender) = win 0x3e8b30;
    void onExtraSticky(cocos2d::CCObject* sender) = win 0x3e86b0;
    void onGripSlope(cocos2d::CCObject* sender) = win 0x3e8350;
    void onHideEffects(cocos2d::CCObject* sender) = win 0x3e8110;
    void onHighDetail(cocos2d::CCObject* sender) = win 0x3e8aa0;
    void onIceBlock(cocos2d::CCObject* sender) = win 0x3e7f60;
    void onNoAudioScale(cocos2d::CCObject* sender) = win 0x3e8860;
    void onNonStickX(cocos2d::CCObject* sender) = win 0x3e8590;
    void onNonStickY(cocos2d::CCObject* sender) = win 0x3e8620;
    void onNoParticle(cocos2d::CCObject* sender) = win 0x3e81a0;
    void onPassable(cocos2d::CCObject* sender) = win 0x3e8470;
    void onReverse(cocos2d::CCObject* sender) = win 0x3e8c60;
    void onSinglePlayerTouch(cocos2d::CCObject* sender) = win 0x3e8d20;
    void onToggleAreaParent(cocos2d::CCObject* sender) = win 0x3e8a10;
    void onToggleGroupParent(cocos2d::CCObject* sender) = win 0x3e8980;

    GameObject* m_gameObject;
    cocos2d::CCArray* m_gameObjects;
    bool m_iceBlock;
    bool m_dontFade;
    bool m_dontEnter;
    bool m_noEffects;
    bool m_noParticle;
    bool m_noTouch;
    bool m_passable;
    bool m_hide;
    bool m_nonStickX;
    bool m_nonStickY;
    bool m_extraSticky;
    bool m_dontBoostY;
    bool m_dontBoostX;
    bool m_noAudioScale;
    bool m_scaleStick;
    bool m_highDetail;
    bool m_groupParent;
    bool m_areaParent;
    bool m_gripSlope;
    bool m_noGlow;
    bool m_reverse;
    bool m_extendedCollision;
    bool m_unk2a6;
    SetGroupIDLayer* m_groupIDLayer;
    bool m_effectObject;
    bool m_singlePlayerTouch;
    bool m_centerEffect;
}

[[link(android)]]
class SetupObjectTogglePopup : SetupTriggerPopup {
    // virtual ~SetupObjectTogglePopup();

    static SetupObjectTogglePopup* create(EffectGameObject*, cocos2d::CCArray*, bool) = win 0x411b70, m1 0x2f5348, imac 0x3624f0, ios 0x1a5e38;

    virtual void onClose(cocos2d::CCObject* sender) = win 0x40c730, imac 0x3631a0, m1 0x2f5e64, ios 0x1a66f8;
    virtual void valueDidChange(int, float) = win 0x4125e0, imac 0x363120, m1 0x2f5dec, ios 0x1a6688;

    bool init(EffectGameObject*, cocos2d::CCArray*, bool) = win 0x411c90, m1 0x2f54d8, imac 0x362720, ios 0x1a5f18;
}

[[link(android)]]
class SetupOpacityPopup : SetupTriggerPopup {
    // virtual ~SetupOpacityPopup();

    static SetupOpacityPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x412730;

    virtual void determineStartValues() = win 0x413660, imac 0x58780, m1 0x4e708, ios 0x280e8;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x3f2480, imac 0x58d80, m1 0x4ec00, ios 0x284f4;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x4e9c0, imac 0x58ae0, ios 0x28374;
    virtual void textChanged(CCTextInputNode*) = win 0x413a50, imac 0x58b20, m1 0x4e9dc, ios 0x28390;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x412860, m1 0x4d5e0, imac 0x57560, ios 0x272b0;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x4137f0, m1 0x4e1b0, imac 0x581c0, ios 0x27dbc;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x413840, m1 0x4e368, imac 0x583a0, ios 0x27ea0;
    void updateDuration() = win 0x413e50, m1 0x4e954, imac 0x58a50, ios 0x28308;
    void updateDurLabel(bool) = win 0x413c90;
    void updateOpacity() = win inline, m1 0x4e8e8, imac 0x589c0, ios 0x2829c {
        if (m_gameObject) m_gameObject->m_opacity = m_opacity;
        else {
            for (int i = 0; i < m_gameObjects->count(); i++) {
                static_cast<EffectGameObject*>(m_gameObjects->objectAtIndex(i))->m_opacity = m_opacity;
            }
        }
    }
    void updateOpacityLabel() = win 0x413d60, m1 0x4e6b8, imac 0x58730, ios 0x28098;
    void updateTargetID() = win 0x413ee0, m1 0x4e864, imac 0x58920, ios 0x28218;
    void updateTextInputLabel() = win 0x413dd0;

    CCTextInputNode* m_groupIDInput;
    CCTextInputNode* m_fadeTimeInput;
    cocos2d::CCLabelBMFont* m_opacityLabel;
    Slider* m_fadeTimeSlider;
    Slider* m_opacitySlider;
    float m_opacity;
    float m_fadeTime;
    int m_groupID;
}

[[link(android)]]
class SetupOptionsTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupOptionsTriggerPopup();

    static SetupOptionsTriggerPopup* create(GameOptionsTrigger*, cocos2d::CCArray*);

    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x41e720, imac 0x5cf620, m1 0x503958, ios 0x40be4c;

    void addOption(int, gd::string) = win 0x41e4c0;
    bool init(GameOptionsTrigger*, cocos2d::CCArray*) = win 0x41dcc0, m1 0x502f58, imac 0x5ceaf0, ios 0x40b5ec;

    cocos2d::CCPoint m_togglePosition;
    int m_togglePage;
}

[[link(android)]]
class SetupPersistentItemTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupPersistentItemTriggerPopup();

    static SetupPersistentItemTriggerPopup* create(ItemTriggerGameObject*, cocos2d::CCArray*) = win 0x457390;

    bool init(ItemTriggerGameObject*, cocos2d::CCArray*) = win 0x4574a0, m1 0x4c1454, imac 0x56c420;
}

[[link(android)]]
class SetupPickupTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupPickupTriggerPopup();

    static SetupPickupTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x41e7f0;

    virtual void onPlusButton(cocos2d::CCObject* sender) = win 0x40c610, imac 0x598b0, m1 0x4f578, ios 0x47158;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x41f090, imac 0x598f0, m1 0x4f5b0, ios 0x47190;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x41e900, m1 0x4ee48, imac 0x59080, ios 0x46b80;
    void updateState() = win 0x41f020, m1 0x4f518, imac 0x59840, ios inline {
        auto pickupTriggerMode = this->getValue(88);
        this->toggleGroup(1, pickupTriggerMode == 0.0f);
        this->toggleGroup(2, pickupTriggerMode != 0.0f);
    }
}

[[link(android)]]
class SetupPlatformerEndPopup : SetupTriggerPopup {
    // virtual ~SetupPlatformerEndPopup();

    static SetupPlatformerEndPopup* create(EndTriggerGameObject*, cocos2d::CCArray*) = win 0x405da0;

    bool init(EndTriggerGameObject*, cocos2d::CCArray*) = win 0x405eb0, m1 0x57af4c, imac 0x653a80;
}

[[link(android)]]
class SetupPlayerControlPopup : SetupTriggerPopup {
    // virtual ~SetupPlayerControlPopup();

    static SetupPlayerControlPopup* create(PlayerControlGameObject*, cocos2d::CCArray*) = win 0x44f720;

    bool init(PlayerControlGameObject*, cocos2d::CCArray*) = win 0x44f830, m1 0x4b9c68, imac 0x563c90;
}

[[link(android)]]
class SetupPortalPopup : FLAlertLayer, TextInputDelegate {
    // virtual ~SetupPortalPopup();

    static SetupPortalPopup* create(EffectGameObject*, cocos2d::CCArray*);

    virtual void keyBackClicked() = m1 0x4b07e8, imac 0x559fd0;

    void determineStartValues();
    bool init(EffectGameObject*, cocos2d::CCArray*) = m1 0x4af7d4, imac 0x558e40;
    void onClose(cocos2d::CCObject* sender);
    void onEditCameraSettings(cocos2d::CCObject* sender);
    void onUnboundMode(cocos2d::CCObject* sender);
    void sliderChanged(cocos2d::CCObject* sender);
    void updateCameraEasing();
    void updateCameraEasingLabel();
    void updateCameraPadding();
    void updateCameraPaddingLabel() = m1 0x4b0614, imac 0x559dd0;
    void updateItemVisibility();

    EffectGameObject* m_gameObject;
    cocos2d::CCArray* m_gameObjects;
    cocos2d::CCArray* m_freeModeObjects;
    cocos2d::CCArray* m_cameraSettingsObjects;
    Slider* m_cameraEasingSlider;
    cocos2d::CCLabelBMFont* m_cameraEasingLabel;
    int m_cameraEasing;
    Slider* m_cameraPaddingSlider;
    cocos2d::CCLabelBMFont* m_cameraPaddingLabel;
    float m_cameraPadding;
    bool m_freeMode;
    bool m_cameraSettingsEnabled;
    bool m_disableDelegate;
}

[[link(android)]]
class SetupPulsePopup : SetupTriggerPopup, cocos2d::extension::ColorPickerDelegate, GJSpecialColorSelectDelegate {
    // virtual ~SetupPulsePopup();

    static SetupPulsePopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x41f250, m1 0x324ed4, imac 0x396ea0, ios 0x3abb04;

    virtual void show() = win 0x423fa0, m1 0x32a368, imac 0x39ce50, ios 0x3affd0;
    virtual void determineStartValues() = win 0x422ef0, m1 0x32924c, imac 0x39ba60, ios 0x3af378;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x423cb0, imac 0x39c670, m1 0x329c84, ios 0x3afbc8;
    virtual void textChanged(CCTextInputNode*) = win 0x424150, imac 0x39ced0, m1 0x32a3c4, ios 0x3b002c;
    virtual void colorValueChanged(cocos2d::ccColor3B) = win 0x423e90, imac 0x39c850, m1 0x329e10, ios 0x3afce8;
    virtual void textInputOpened(CCTextInputNode*) = m1 0x32a3bc, imac 0x39ceb0, ios 0x3b0024 {}
    virtual void colorSelectClosed(GJSpecialColorSelect*, int) = win 0x423720, imac 0x39bfa0, m1 0x3296fc, ios 0x3af7cc;

    cocos2d::ccColor3B getColorValue();
    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x41f430, m1 0x3250b8, imac 0x397170, ios 0x3abb88;
    void onCopy(cocos2d::CCObject* sender) = win 0x90d60;
    void onExclusive(cocos2d::CCObject* sender) = win 0x423380;
    void onGroupMainOnly(cocos2d::CCObject* sender) = win 0x423410;
    void onGroupSecondaryOnly(cocos2d::CCObject* sender) = win 0x423500;
    void onHSVLegacyMode(cocos2d::CCObject* sender) = win 0x423560;
    void onPaste(cocos2d::CCObject* sender) = win 0x90de0, m1 0x328b68, imac 0x39b340;
    void onSelectPulseMode(cocos2d::CCObject* sender) = win 0x422aa0, m1 0x328698, imac 0x39ad60, ios 0x3aebc0;
    void onSelectSpecialColor(cocos2d::CCObject* sender) = win 0x423680;
    void onSelectSpecialTargetID(cocos2d::CCObject* sender) = win 0x4236d0;
    void onSelectTargetMode(cocos2d::CCObject* sender) = win 0x422cd0, m1 0x328320, imac 0x39a9b0, ios 0x3ae920;
    void onUpdateCopyColor(cocos2d::CCObject* sender) = win 0x4240e0, m1 0x328bec, imac 0x39b3b0, ios 0x3aef74;
    void onUpdateCustomColor(cocos2d::CCObject* sender) = win 0x424050, m1 0x328578, imac 0x39ac30, ios 0x3aeae4;
    void selectColor(cocos2d::ccColor3B);
    void sliderChanged(cocos2d::CCObject* sender) = win 0x4238c0;
    void updateColorLabels() = win 0x4248f0;
    void updateColorValue();
    void updateCopyColor() = win 0x424b90;
    void updateCopyColorTextInputLabel() = win 0x424d40, imac 0x39b6e0, m1 0x328f04;
    void updateFadeInLabel(bool) = win 0x422830;
    void updateFadeInTime() = win 0x423b00, m1 0x329acc, imac 0x39c410, ios 0x3afa10;
    void updateFadeOutLabel(bool) = win 0x4229d0;
    void updateFadeOutTime() = win 0x423c20, m1 0x329ba4, imac 0x39c530, ios 0x3afae8;
    void updateGroupMainOnly() = win 0x423470;
    void updateGroupSecondaryOnly() = win 0x4235f0;
    void updateHoldLabel(bool) = win 0x422900;
    void updateHoldTime() = win 0x423b90, m1 0x329b38, imac 0x39c4a0, ios 0x3afa7c;
    void updateHSVValue();
    void updatePulseMode();
    void updatePulseTargetType();
    void updateTargetID() = win 0x424ad0;
    void updateTextInputLabel() = win 0x424c20, imac 0x39b4c0, m1 0x328ce8;

    cocos2d::extension::CCControlColourPicker* m_colorPicker;
    bool m_unk3c0;
    cocos2d::CCArray* m_colorObjects;
    cocos2d::CCArray* m_hsvObjects;
    Slider* m_fadeInSlider;
    Slider* m_holdSlider;
    Slider* m_fadeOutSlider;
    CCMenuItemSpriteExtra* m_channelButton;
    CCMenuItemSpriteExtra* m_groupButton;
    cocos2d::CCLabelBMFont* m_idLabel;
    cocos2d::ccColor3B m_originalColor;
    cocos2d::CCSprite* m_currentColorSprite;
    cocos2d::CCSprite* m_originalColorSprite;
    cocos2d::ccColor3B m_currentColor;
    CCMenuItemSpriteExtra* m_colorButton;
    CCMenuItemSpriteExtra* m_hsvButton;
    ConfigureHSVWidget* m_hsvWidget;
    CCMenuItemSpriteExtra* m_specialColorButton;
    CCTextInputNode* m_fadeInInput;
    CCTextInputNode* m_holdInput;
    CCTextInputNode* m_fadeOutInput;
    CCTextInputNode* m_idInput;
    CCTextInputNode* m_colorIDInput;
    CCMenuItemToggler* m_mainOnlyToggler;
    CCMenuItemToggler* m_secondaryOnlyToggler;
    CCMenuItemToggler* m_staticHSVToggler;
    cocos2d::CCLabelBMFont* m_mainOnlyLabel;
    cocos2d::CCLabelBMFont* m_secondaryOnlyLabel;
    cocos2d::CCLabelBMFont* m_staticHSVLabel;
    bool m_groupMainOnly;
    bool m_groupSecondaryOnly;
    bool m_staticHSV;
    int m_targetGroupID;
    int m_copyColorID;
    bool m_colorInitializing;
    float m_fadeInTime;
    float m_holdTime;
    float m_fadeOutTime;
    int m_pulseMode;
    int m_pulseTargetType;
    bool m_modesInitializing;
    bool m_pulseExclusive;
    cocos2d::ccHSVValue m_hsv;
    CCTextInputNode* m_rInput;
    CCTextInputNode* m_gInput;
    CCTextInputNode* m_bInput;
    CCTextInputNode* m_hexInput;
}

[[link(android)]]
class SetupRandAdvTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupRandAdvTriggerPopup();

    static SetupRandAdvTriggerPopup* create(RandTriggerGameObject*, cocos2d::CCArray*) = win 0x424f50, m1 0x30a6c8, imac 0x37a4e0, ios 0x32990;

    virtual void onClose(cocos2d::CCObject* sender) = win 0x425b10, m1 0x30bc4c, imac 0x37be30, ios 0x33a20;
    virtual void textChanged(CCTextInputNode*) = m1 0x30bc44, imac 0x37be10, ios 0x33a18 {}

    void addChance(int, int);
    void addChanceToObject(RandTriggerGameObject*, int, int);
    void callRemoveFromGroup(float) = win 0x426550;
    bool init(RandTriggerGameObject*, cocos2d::CCArray*) = win 0x425090, m1 0x30a864, imac 0x37a720, ios 0x32a80;
    void onAddChance(cocos2d::CCObject* sender) = win 0x426790;
    void onRemoveFromGroup(cocos2d::CCObject* sender) = win 0x4266c0;
    void removeGroupID(int);
    void removeGroupIDFromObject(RandTriggerGameObject*, int);
    void updateGroupIDButtons() = win 0x425bd0, m1 0x30b24c, imac 0x37b190, ios 0x33350;

    bool m_performedAction;
    cocos2d::CCArray* m_groupButtons;
    CCTextInputNode* m_groupIDInput;
    CCTextInputNode* m_chanceInput;
    int m_groupToRemove;
    bool m_removingGroup;
}

[[link(android)]]
class SetupRandTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupRandTriggerPopup();

    static SetupRandTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x427720, m1 0x501514, imac 0x5cce60, ios 0x1ca8d0;

    virtual void determineStartValues() = win 0x4285e0, m1 0x5028bc, imac 0x5ce3b0, ios 0x1cb858;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x4290c0, m1 0x502ddc, imac 0x5ce990, ios 0x1cbc54;
    virtual void textChanged(CCTextInputNode*) = win 0x4288e0, imac 0x5ce6a0, m1 0x502b44, ios 0x1cbad0;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x427860, m1 0x5016b0, imac 0x5cd0b0, ios 0x1ca9c0;
    void onTargetID2Arrow(cocos2d::CCObject* sender) = win 0x428890, m1 0x5022d0, imac 0x5cddc0, ios 0x1cb520;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x428840, m1 0x502228, imac 0x5cdd00, ios 0x1cb4cc;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x428730;
    void updateChance() = win 0x26b120, m1 0x5029cc, imac 0x5ce4e0, ios 0x1cb960;
    void updateChanceLabel(bool) = win 0x428770;
    void updateTargetID() = win 0x428f20, m1 0x502a3c, imac 0x5ce560, ios 0x1cb9c8;
    void updateTargetID2() = win 0x428ff0, m1 0x502ac0, imac 0x5ce600, ios 0x1cba4c;
    void updateTextInputLabel() = win 0x428bc0;
    void updateTextInputLabel2() = win 0x428d70;

    CCTextInputNode* m_chanceInput;
    Slider* m_chanceSlider;
    float m_chancePercent;
    CCTextInputNode* m_groupID1Input;
    CCTextInputNode* m_groupID2Input;
    int m_groupID1;
    int m_groupID2;
}

[[link(android)]]
class SetupResetTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupResetTriggerPopup();

    static SetupResetTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*);

    bool init(EffectGameObject*, cocos2d::CCArray*) = m1 0x4bc558, imac 0x566eb0;
}

[[link(android)]]
class SetupReverbPopup : SetupTriggerPopup {
    // virtual ~SetupReverbPopup();

    static SetupReverbPopup* create(SFXTriggerGameObject*, cocos2d::CCArray*);

    virtual void onClose(cocos2d::CCObject* sender) = win 0x42eda0, imac 0x4a51d0, m1 0x40f038, ios 0x18304c;

    bool init(SFXTriggerGameObject*, cocos2d::CCArray*) = win 0x42e510, m1 0x40e8e0, imac 0x4a4a70;
    void onPlay(cocos2d::CCObject* sender) = win 0x42ead0;
    void onReverb(cocos2d::CCObject* sender) = win 0x42ebc0;
    void updateReverbLabel() = win 0x42ec50;

    cocos2d::CCLabelBMFont* m_reverbLabel;
}

[[link(android)]]
class SetupRotateCommandPopup : SetupTriggerPopup {
    // virtual ~SetupRotateCommandPopup();

    static SetupRotateCommandPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x2a05c0;

    virtual void updateInputNode(int, float) = win 0x2a18a0, m1 0x8cf4, imac 0x6dd0, ios 0x3fec80;
    virtual void valueDidChange(int, float) = win 0x2a18b0, imac 0x6de0, m1 0x8cf8, ios 0x3fec84;
    virtual float triggerValueFromSliderValue(int, float) = win 0x2a1860, m1 0x8ccc, imac 0x6d80, ios 0x3fec58;
    virtual float triggerSliderValueFromValue(int, float) = win 0x2a1890, m1 0x8cf0, imac 0x6dc0, ios 0x3fec7c;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0xc3110, m1 0x8f90, imac 0x7120, ios 0x3fed98;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x2a06d0, m1 0x7bec, imac 0x5890;
    void onInfiniteDuration(cocos2d::CCObject* sender) = win 0x2a1c10;
    void updateControlVisibility() = win 0x2a1b30;
}

[[link(android)]]
class SetupRotateGameplayPopup : SetupTriggerPopup {
    // virtual ~SetupRotateGameplayPopup();

    static SetupRotateGameplayPopup* create(RotateGameplayGameObject*, cocos2d::CCArray*);

    virtual void onPlusButton(cocos2d::CCObject* sender) = win 0x429c50, m1 0x696a70, imac 0x782510, ios 0x1a2178;
    virtual void valueDidChange(int, float) = win 0x429cc0, imac 0x782550, m1 0x696aa8, ios 0x1a21b0;

    bool init(RotateGameplayGameObject*, cocos2d::CCArray*) = win 0x429280, m1 0x696194, imac 0x781a90;
}

[[link(android)]]
class SetupRotatePopup : SetupTriggerPopup {
    // virtual ~SetupRotatePopup();

    static SetupRotatePopup* create(EnhancedGameObject*, cocos2d::CCArray*);

    virtual void onClose(cocos2d::CCObject* sender) = win 0x42acd0, m1 0x4d7138, imac 0x585460, ios 0x267a44;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x42ad70, imac 0x5854e0, m1 0x4d71b4, ios 0x267ac0;

    bool init(EnhancedGameObject*, cocos2d::CCArray*) = win 0x42a770, m1 0x4d6c50, imac 0x584ec0, ios 0x267614;
}

[[link(android)]]
class SetupSequenceTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupSequenceTriggerPopup();

    static SetupSequenceTriggerPopup* create(SequenceTriggerGameObject*) = win 0x42b000;

    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x42c340, imac 0x4cb860, m1 0x430be8, ios 0x1d4388;

    bool init(SequenceTriggerGameObject*) = win 0x42b130, m1 0x42f9c4, imac 0x4ca480, ios 0x1d32c8;
    void onAddChance(cocos2d::CCObject* sender) = win 0x42c990;
    void onChangeOrder(cocos2d::CCObject* sender) = win 0x42cad0;
    void onDeleteSelected(cocos2d::CCObject* sender) = win 0x42cbb0;
    void onSelect(cocos2d::CCObject* sender) = win 0x42c910, m1 0x430ccc, imac 0x4cb950;
    void updateGroupIDButtons() = win 0x42c430, m1 0x4308b0, imac 0x4cb510, ios 0x1d4070;

    CCMenuItemSpriteExtra* m_selectedButton;
    bool m_unk3b0;
    bool m_unk3b1;
    cocos2d::CCArray* m_groupButtons;
    int m_unk3c0;
    bool m_unk3c4;
}

[[link(android)]]
class SetupSFXEditPopup : SetupAudioTriggerPopup {
    // virtual ~SetupSFXEditPopup();

    static SetupSFXEditPopup* create(SFXTriggerGameObject*, cocos2d::CCArray*, bool) = win 0x431070;

    bool init(SFXTriggerGameObject*, cocos2d::CCArray*, bool) = win 0x431190, m1 0x411118, imac 0x4a7b50;
}

[[link(android)]]
class SetupSFXPopup : SetupAudioTriggerPopup, CustomSFXDelegate, SFXBrowserDelegate {
    // virtual ~SetupSFXPopup();

    static SetupSFXPopup* create(SFXTriggerGameObject*, cocos2d::CCArray*) = win 0x42ee10, m1 0x40f2fc, imac 0x4a5600, ios 0x1830b4;

    virtual void pageChanged() = win 0x4301c0, imac 0x4a6f10, m1 0x410784, ios 0x184220;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x430230, imac 0x4a6f70, m1 0x4107dc, ios 0x184278;
    virtual void onPlusButton(cocos2d::CCObject* sender) = win 0x430af0, imac 0x4a7430, m1 0x410c1c, ios 0x184638;
    virtual void valueDidChange(int, float) = win 0x4309e0, imac 0x4a7310, m1 0x410af8, ios 0x184550;
    virtual void sfxObjectSelected(SFXInfoObject*) = m1 0x410a4c, imac 0x4a7230, ios 0x1844d4 {}
    virtual int getActiveSFXID() = win 0x430920, m1 0x410a54, imac 0x4a7250, ios 0x1844dc;
    virtual bool overridePlaySFX(SFXInfoObject*) = win 0x430930, imac 0x4a7270, m1 0x410a64, ios 0x1844ec;
    virtual void sfxBrowserClosed(SFXBrowser*) = win 0x431050, imac 0x4a74d0, m1 0x410ccc, ios 0x1846e0;

    void createSFXWidget() = win 0x4305f0, m1 0x4104f8, imac 0x4a6c60, ios 0x183fcc;
    bool init(SFXTriggerGameObject*, cocos2d::CCArray*) = win 0x42ef60, imac 0x4a5870, m1 0x40f4a0, ios 0x183138;
    void onBrowseSFX(cocos2d::CCObject* sender) = win 0x430e70;
    void updateLength() = win 0x430570;

    int m_sfxID;
    CustomSFXWidget* m_sfxWidget;
    int m_sfxLength;
}

[[link(android)]]
class SetupShaderEffectPopup : SetupTriggerPopup {
    // virtual ~SetupShaderEffectPopup();

    static SetupShaderEffectPopup* create(EffectGameObject*, cocos2d::CCArray*, int);

    virtual void toggleGroup(int, bool) = win 0x43c650, imac 0x2bd2d0, m1 0x261df0, ios 0x18d670;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x287920, imac 0x2bd310, m1 0x261e30, ios 0x18d6b0;
    virtual void updateDefaultTriggerValues() = win 0x432210, imac 0x2bca50, m1 0x2614cc, ios 0x18d054;
    virtual void valueDidChange(int, float) = win 0x43c220, imac 0x2bcf90, m1 0x261ab4, ios 0x18d3d8;

    bool init(EffectGameObject*, cocos2d::CCArray*, int) = win 0x431f20;
    void onResetColors(cocos2d::CCObject* sender) = win 0x43bb80;
    void onZLayer(cocos2d::CCObject* sender) = win 0x432d00;
    void setupBulge() = win 0x438e00, m1 0x25de18, imac 0x2b8e60;
    void setupChromatic() = win 0x435a30, m1 0x25ad9c, imac 0x2b57d0;
    void setupChromaticGlitch() = win 0x435fb0, m1 0x25b2f8, imac 0x2b5d70;
    void setupColorChange() = win 0x43b4b0, m1 0x2601c0, imac 0x2bb610;
    void setupGlitch() = win 0x4353b0, m1 0x25a738, imac 0x2b5110;
    void setupGrayscale() = win 0x43a2c0, m1 0x25f120, imac 0x2ba490;
    void setupHueShift() = win 0x43b160, m1 0x25feb8, imac 0x2bb2f0;
    void setupInvertColor() = win 0x43aaf0, m1 0x25f89c, imac 0x2bac60;
    void setupLensCircle() = win 0x436f00, m1 0x25c124, imac 0x2b6cf0;
    void setupMotionBlur() = win 0x438290, m1 0x25d314, imac 0x2b81c0;
    void setupPinch() = win 0x4396d0, m1 0x25e654, imac 0x2b97e0;
    void setupPixelate() = win 0x436860, m1 0x25baa4, imac 0x2b65f0;
    void setupRadialBlur() = win 0x437850, m1 0x25c9b0, imac 0x2b76e0;
    void setupSepia() = win 0x43a7c0, m1 0x25f5b0, imac 0x2ba990;
    void setupShaderTrigger() = win 0x432300, m1 0x260cac, imac 0x2bc190;
    void setupShockLine() = win 0x4341b0, m1 0x259658, imac 0x2b3d30;
    void setupShockWave() = win 0x432ea0, m1 0x2584b4, imac 0x2b2840;
    void setupSplitScreen() = win 0x43bd40, m1 0x260808, imac 0x2bbcd0;
    void updateZLayerButtons() = win 0x432df0;
    gd::string zLayerToString(int) = win 0x432a20;

    cocos2d::CCArray* m_zLayerSprites;
    int m_zLayerMin;
    int m_zLayerMax;
    bool m_changeMin;
    int m_objectID;
}

[[link(android)]]
class SetupShakePopup : SetupTriggerPopup {
    // virtual ~SetupShakePopup();

    static SetupShakePopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x43c850;

    virtual void determineStartValues() = win 0x43d6d0, m1 0x576bd0, imac 0x64eeb0, ios 0x3a292c;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x43e120, m1 0x577234, imac 0x64f590, ios 0x3a2e60;
    virtual void textChanged(CCTextInputNode*) = win 0x43dd60, imac 0x64f210, m1 0x576f14, ios 0x3a2c1c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x43c980, m1 0x575d0c, imac 0x64df80;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x43d8a0;
    void updateDuration() = win 0x26b120;
    void updateDurLabel(bool) = win 0x26a500;
    void updateInterval() = win 0x43dce0;
    void updateIntervalLabel(bool) = win 0x43dc10;
    void updateShake() = win 0x43db90;
    void updateShakeLabel(bool) = win 0x43dac0;

    CCTextInputNode* m_durationInput;
    Slider* m_durationSlider;
    float m_duration;
    CCTextInputNode* m_strengthInput;
    Slider* m_strengthSlider;
    float m_strength;
    CCTextInputNode* m_intervalInput;
    Slider* m_intervalSlider;
    float m_interval;
}

[[link(android)]]
class SetupSmartBlockLayer : FLAlertLayer, TextInputDelegate, SelectArtDelegate {
    // virtual ~SetupSmartBlockLayer();

    static SetupSmartBlockLayer* create(SmartGameObject*, cocos2d::CCArray*) = win 0x43e530, m1 0x436ce0, imac 0x4d2c80, ios 0x72e9c;

    virtual void keyBackClicked() = win 0x4406d0, imac 0x4d46d0, m1 0x4383cc, ios 0x74300;
    virtual void show() = win 0x8ba30, m1 0x438368, imac 0x4d4640, ios 0x7429c;
    virtual void selectArtClosed(SelectArtLayer*) = win 0x440690, imac 0x4d46a0, m1 0x4383b4, ios 0x742e8;

    void determineStartValues();
    bool init(SmartGameObject*, cocos2d::CCArray*) = win 0x43e670, m1 0x436e18, imac 0x4d2e00, ios 0x72f8c;
    void onAllowFlipping(cocos2d::CCObject* sender) = win 0x43f750;
    void onAllowRotation(cocos2d::CCObject* sender) = win 0x43f6d0;
    void onClose(cocos2d::CCObject* sender) = win 0x440030;
    void onCreate(cocos2d::CCObject* sender) = win 0x4400f0;
    void onCreateAll(cocos2d::CCObject* sender) = win 0x43fd80, m1 0x437f50, imac 0x4d41d0, ios 0x73f48;
    void onCreateTemplate(cocos2d::CCObject* sender) = win 0x440520;
    void onDontDelete(cocos2d::CCObject* sender) = win 0x43f890;
    void onIgnoreCorners(cocos2d::CCObject* sender) = win 0x43f900;
    void onNearbyReference(cocos2d::CCObject* sender) = win 0x43f820;
    void onPasteTemplate(cocos2d::CCObject* sender) = win 0x43f980, m1 0x437d78, imac 0x4d3f90, ios 0x73d94;
    void onReferenceOnly(cocos2d::CCObject* sender) = win 0x43f640;
    void onSelectPremade(cocos2d::CCObject* sender) = win 0x440620;
    void onSelectTemplate(cocos2d::CCObject* sender) = win 0x4406a0;

    bool m_referenceOnly;
    bool m_allowRotation;
    bool m_allowFlipX;
    bool m_allowFlipY;
    bool m_useNearby;
    bool m_dontDelete;
    bool m_ignoreCorners;
    int m_specialTemplate;
    SmartGameObject* m_gameObject;
    cocos2d::CCArray* m_gameObjects;
}

[[link(android)]]
class SetupSmartTemplateLayer : FLAlertLayer, TextInputDelegate, FLAlertLayerProtocol {
    // virtual ~SetupSmartTemplateLayer();

    static SetupSmartTemplateLayer* create(GJSmartTemplate*) = win 0x4406e0;

    virtual void keyBackClicked() = win 0x441940, imac 0x4d5b70, m1 0x4396d4, ios 0x75228;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x4413a0, imac 0x4d5870, m1 0x439378, ios 0x74f38;
    virtual void textInputOpened(CCTextInputNode*) = win 0x4416e0, imac 0x4d5a90, m1 0x4395c8, ios 0x750bc;
    virtual void textInputClosed(CCTextInputNode*) = win 0x441480, imac 0x4d5950, m1 0x43945c, ios 0x74f9c;
    virtual void textChanged(CCTextInputNode*) = win 0xc3110, m1 0x4396b4, imac 0x4d5b50, ios 0x75208;

    bool init(GJSmartTemplate*) = win 0x4407f0, imac 0x4d4c10, m1 0x43875c;
    void onBack(cocos2d::CCObject* sender) = win 0x441840, m1 0x439040, imac 0x4d5500;
    void onClick(cocos2d::CCObject* sender) = win 0x4411e0, m1 0x439068, imac 0x4d5530;
    void onClose(cocos2d::CCObject* sender) = win 0x441870, m1 0x4392a4, imac 0x4d57a0;

    GJSmartTemplate* m_smartTemplate;
    CCTextInputNode* m_nameInput;
    cocos2d::CCNode* m_unk298;
}

[[link(android)]]
class SetupSongTriggerPopup : SetupAudioTriggerPopup, MusicDownloadDelegate, SongPlaybackDelegate {
    // virtual ~SetupSongTriggerPopup();

    static SetupSongTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x444470;

    virtual void pageChanged() = win 0x445910, imac 0x2c0f70, m1 0x26537c, ios 0x1c4418;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x445990, m1 0x265410, imac 0x2c1000, ios 0x1c44ac;
    virtual void valueDidChange(int, float) = win 0x4457c0, imac 0x2c0e70, m1 0x26527c, ios 0x1c4384;
    virtual void onPlayback(SongInfoObject*) = win 0x445290, imac 0x2c0c30, m1 0x265068, ios 0x1c417c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x4445b0, m1 0x2643d0, imac 0x2bfe60;
    void onResetSongTime(cocos2d::CCObject* sender);
    void onSavePlaybackPos(cocos2d::CCObject* sender) = win 0x445630;
    void updateApplyPrepare(bool);
    void updateLength() = win 0x445200;
    void updateSongTimeSlider();

    SongSelectNode* m_selectNode;
}

[[link(android)]]
class SetupSpawnParticlePopup : SetupTriggerPopup {
    // virtual ~SetupSpawnParticlePopup();

    static SetupSpawnParticlePopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x44fdd0;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x44fee0, m1 0x4ba358, imac 0x5644d0;
}

[[link(android)]]
class SetupSpawnPopup : SetupTriggerPopup {
    // virtual ~SetupSpawnPopup();

    static SetupSpawnPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x445be0;

    virtual void onClose(cocos2d::CCObject* sender) = win 0x40c730, imac 0x27ece0, m1 0x2286cc, ios 0xfbd4c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x445d20, m1 0x2271a4, imac 0x27d4f0, ios 0xfac18;
    void onAddRemap(cocos2d::CCObject* sender) = win 0x446910;
    void onDeleteRemap(cocos2d::CCObject* sender) = win 0x446a80;
    void onSelectRemap(cocos2d::CCObject* sender) = win 0x447440;
    void queueUpdateButtons() = win 0x447510, m1 0x228568, imac 0x27eb80, ios 0xfbc20;
    void updateRemapButtons(float) = win 0x446c20, m1 0x227d98, imac 0x27e2e0, ios 0xfb69c;

    bool m_isBusy;
    cocos2d::CCArray* m_remapButtons;
    gd::vector<int> m_remapGroups;
    int m_remapOriginalID;
    int m_remapNewID;
}

[[link(android)]]
class SetupStaticCameraPopup : SetupTriggerPopup {
    // virtual ~SetupStaticCameraPopup();

    static SetupStaticCameraPopup* create(CameraTriggerGameObject*, cocos2d::CCArray*) = win 0x447580;

    virtual void valueDidChange(int, float) = win 0x448090, imac 0x388d20, m1 0x3185bc, ios 0x1d207c;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x42a510, m1 0x318650, imac 0x388db0, ios 0x1d2094;

    bool init(CameraTriggerGameObject*, cocos2d::CCArray*) = win 0x447690, m1 0x317c2c, imac 0x3881c0, ios 0x1d1858;
    void updateState() = win 0x4480b0;
}

[[link(android)]]
class SetupStopTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupStopTriggerPopup();

    static SetupStopTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x459f80;

    virtual void onClose(cocos2d::CCObject* sender) = win 0x45a820, imac 0x56f820, m1 0x4c4118, ios 0x409a2c;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x45a770, imac 0x56f7b0, m1 0x4c40a0, ios 0x4099b4;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x45a090, m1 0x4c3b3c, imac 0x56f190;
}

[[link(android)]]
class SetupTeleportPopup : SetupTriggerPopup {
    // virtual ~SetupTeleportPopup();

    static SetupTeleportPopup* create(TeleportPortalObject*, cocos2d::CCArray*, int, bool) = win 0x448220;

    virtual void determineStartValues() = win 0x287910, imac 0x346b20, m1 0x2db89c, ios 0x1008c;
    virtual void updateDefaultTriggerValues() = win 0x4494c0, imac 0x346b30, m1 0x2db8a0, ios 0x10090;
    virtual void valueDidChange(int, float) = win 0x4494f0, imac 0x346c30, m1 0x2db9ac, ios 0x10144;

    bool init(TeleportPortalObject*, cocos2d::CCArray*, int, bool) = win 0x448360, m1 0x2da580, imac 0x3454c0;
    void onTeleportGravity(cocos2d::CCObject* sender) = win 0x4495f0;
    void updateTeleportGravityState(int) = win 0x449680;

    cocos2d::CCArray* m_teleportGravityToggles;
}

[[link(android)]]
class SetupTimerControlTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupTimerControlTriggerPopup();

    static SetupTimerControlTriggerPopup* create(TimerTriggerGameObject*, cocos2d::CCArray*) = win 0x44a6f0;

    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x44abe0, imac 0x38f290, m1 0x31e0b4, ios 0x327c0;

    bool init(TimerTriggerGameObject*, cocos2d::CCArray*) = win 0x44a800, m1 0x31dcd8, imac 0x38ee40;
}

[[link(android)]]
class SetupTimerEventTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupTimerEventTriggerPopup();

    static SetupTimerEventTriggerPopup* create(TimerTriggerGameObject*, cocos2d::CCArray*) = win 0x44a090;

    bool init(TimerTriggerGameObject*, cocos2d::CCArray*) = win 0x44a1a0, m1 0x31d690, imac 0x38e680;
}

[[link(android)]]
class SetupTimerTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupTimerTriggerPopup();

    static SetupTimerTriggerPopup* create(TimerTriggerGameObject*, cocos2d::CCArray*) = win 0x449710;

    bool init(TimerTriggerGameObject*, cocos2d::CCArray*) = win 0x449820, m1 0x31cd50, imac 0x38db20;
}

[[link(android)]]
class SetupTimeWarpPopup : SetupTriggerPopup {
    // virtual ~SetupTimeWarpPopup();

    static SetupTimeWarpPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x44ad30, m1 0x45090c, imac 0x4ef5f0;

    virtual void determineStartValues() = win 0x44b2c0, m1 0x450fe4, imac 0x4efdd0, ios 0x14b950;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x287920, m1 0x451134, imac 0x4eff60, ios 0x14ba8c;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x44ae50, m1 0x450a9c, imac 0x4ef830, ios 0x14b528;
    void sliderChanged(cocos2d::CCObject* sender) = win 0x44b3d0, m1 0x450eb8, imac 0x4efc70;
    void updateTimeWarp() = win inline, m1 0x4510c8, imac 0x4efed0 {
        if (m_gameObject) m_gameObject->m_timeWarpTimeMod = m_timeWarpMod;
        else if (m_gameObjects) {
            for (int i = 0; i < m_gameObjects->count(); i++) {
                static_cast<EffectGameObject*>(m_gameObjects->objectAtIndex(i))->m_timeWarpTimeMod = m_timeWarpMod;
            }
        }
    }
    void updateTimeWarpLabel() = win 0x44b4a0, m1 0x450f94, imac 0x4efd80, ios 0x14b900;

    cocos2d::CCLabelBMFont* m_timeWarpLabel;
    Slider* m_timeWarpSlider;
    float m_timeWarpMod;
}

[[link(android)]]
class SetupTouchTogglePopup : SetupTriggerPopup {
    // virtual ~SetupTouchTogglePopup();

    static SetupTouchTogglePopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x44b5e0, imac 0x2a4f80, m1 0x24ba90, ios 0x24a11c;

    virtual void determineStartValues() = win 0x44c350, imac 0x2a6270, m1 0x24cb44, ios 0x24af20;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x44c880, imac 0x2a65b0, m1 0x24ce10, ios 0x24b160;
    virtual void textChanged(CCTextInputNode*) = win 0x44c760, imac 0x2a6490, m1 0x24cd0c, ios 0x24b0c4;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x44b720, m1 0x24bc30, imac 0x2a51e0, ios 0x24a1a0;
    void onControlMode(cocos2d::CCObject* sender) = win 0x44c6a0;
    void onDualTouchMode(cocos2d::CCObject* sender) = win 0x44c540;
    void onHoldMode(cocos2d::CCObject* sender) = win 0x44c4b0;
    void onTargetIDArrow(cocos2d::CCObject* sender) = win 0x3fbf70, m1 0x24c740, imac 0x2a5dd0, ios 0x24abf0;
    void onTouchMode(cocos2d::CCObject* sender) = win 0x44c5d0;
    void updateTargetID() = win 0x3fc130;
    void updateTextInputLabel() = win 0x3fc0b0;

    CCTextInputNode* m_groupIDInput;
    int m_groupID;
    bool m_holdMode;
    int m_toggleMode;
    int m_playerMode;
    CCMenuItemToggler* m_toggleOnToggler;
    CCMenuItemToggler* m_toggleOffToggler;
    bool m_dualMode;
    CCMenuItemToggler* m_p1OnlyToggler;
    CCMenuItemToggler* m_p2OnlyToggler;
}

[[link(android)]]
class SetupTransformPopup : SetupTriggerPopup {
    // virtual ~SetupTransformPopup();

    static SetupTransformPopup* create(TransformTriggerGameObject*, cocos2d::CCArray*) = win 0x44c920;

    bool init(TransformTriggerGameObject*, cocos2d::CCArray*) = win 0x44ca30, m1 0x45a9dc, imac 0x4faa20;
}

[[link(android)]]
class SetupTriggerPopup : FLAlertLayer, TextInputDelegate, ConfigureValuePopupDelegate, SliderDelegate {
    // virtual ~SetupTriggerPopup();
    SetupTriggerPopup() = win 0x8d6c0, ios 0x10260 {
        m_gameObject = nullptr;
        m_gameObjects = nullptr;
        m_touchTriggered = false;
        m_spawnTriggered = false;
        m_touchToggle = nullptr;
        m_spawnToggle = nullptr;
        m_multiTriggerContainer = nullptr;
        m_multiTriggered = false;
        m_width = 0.f;
        m_height = 0.f;
        m_disableTextDelegate = false;
        m_valueToggles = nullptr;
        m_inputNodes = nullptr;
        m_valueControls = nullptr;
        m_customValueToggles = nullptr;
        m_disableButtons = nullptr;
        m_easingLabel = nullptr;
        m_easingRateLabel = nullptr;
        m_easingRateButton = nullptr;
        m_easingType = EasingType::None;
        m_easingRate = 0.f;
        m_inputLabels = nullptr;
        m_triggerValues = nullptr;
        m_minSliderValues = nullptr;
        m_maxSliderValues = nullptr;
        m_disableSliderDelegate = false;
        m_effectObjects = false;
        m_pageContainers = nullptr;
        m_page = 0;
        m_easingControlScale = 1.f;
        m_groupContainers = nullptr;
        m_customEasingTags = nullptr;
        m_customEasingLabels = nullptr;
        m_customEasingButtons = nullptr;
        m_customEasingScales = nullptr;
        m_disabledEasingButtons = nullptr;
        m_prevButton = nullptr;
        m_nextButton = nullptr;
        m_hideAll = false;
    }
    ~SetupTriggerPopup() = win 0x45b6e0, m1 0x1d5b60, imac 0x222a30, ios 0x1313a4;

    static SetupTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*, float, float, int);
    static SetupTriggerPopup* create(float, float);

    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x465a80, m1 0x1df150, imac 0x22e3e0, ios 0x13803c;
    virtual void keyBackClicked() = win 0x44f1d0, m1 0x1d8cf8, imac 0x227290, ios 0x133bfc;
    virtual void show() = win 0x8ba30, m1 0x1d8b74, imac 0x2270d0, ios 0x133b20;
    virtual void pageChanged() {}
    virtual void toggleGroup(int group, bool visible) = win 0x45c310, imac 0x223a40, m1 0x1d68d4, ios 0x131ef0;
    virtual void determineStartValues() = win 0x45d060, imac 0x224c20, m1 0x1d7950, ios 0x132c40;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x45d6a0, imac 0x227130, m1 0x1d8bc0, ios 0x133b6c;
    virtual void textInputClosed(CCTextInputNode*) = win 0x8b790, m1 0x1d7c58, imac 0x224fa0, ios 0x132e4c;
    virtual void textChanged(CCTextInputNode*) = win 0x45d4e0, imac 0x224fe0, m1 0x1d7c74, ios 0x132e68;
    virtual void textInputShouldOffset(CCTextInputNode*, float) = win 0x7b5c0, imac 0x2272d0, m1 0x1d8d1c, ios 0x133c20;
    virtual void textInputReturn(CCTextInputNode*) = win 0x7b620, imac 0x227390, m1 0x1d8dec, ios 0x133c8c;
    virtual void updateInputValue(int, float&) {}
    virtual void sliderBegan(Slider*) = win 0x45d7e0, imac 0x227440, m1 0x1d8ea4, ios 0x133cec;
    virtual void sliderEnded(Slider*) = win 0x45d8b0, imac 0x227520, m1 0x1d8f7c, ios 0x133db8;
    virtual void onPlusButton(cocos2d::CCObject* sender) {}
    virtual void onCustomButton(cocos2d::CCObject* sender) {}
    virtual void updateDefaultTriggerValues() = win 0x45f370, imac 0x229910, m1 0x1db330, ios 0x1358f4;
    virtual void updateInputNode(int, float) = win 0x45f860, imac 0x22c1e0, m1 0x1dcdb8, ios 0x1363bc;
    virtual void updateToggleItem(int, bool) = win 0x45fc00, imac 0x22c3d0, m1 0x1dcfe4, ios 0x136588;
    virtual void valueDidChange(int, float) {}
    virtual float getValue(int) = win 0x45fc70, imac 0x22c490, m1 0x1dd09c, ios 0x1365f8;
    virtual float triggerValueFromSliderValue(int, float) = win 0x463c60, imac 0x22c840, m1 0x1dd478, ios 0x1367f8;
    virtual float triggerSliderValueFromValue(int, float) = win 0x463cf0, imac 0x22c8c0, m1 0x1dd504, ios 0x136864;
    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) {}
    virtual void valuePopupClosed(ConfigureValuePopup*, float) = win 0x464c00, imac 0x22d4e0, m1 0x1de14c, ios 0x13733c;

    void addCloseButton(gd::string) = win 0x45c590, m1 0x1d6d74, imac 0x223f40, ios 0x13216c;
    void addHelpButton(gd::string, gd::string, float) = win 0x45c6a0, m1 0x1d6df4, imac 0x223fc0, ios 0x1321e8;
    void addInfoLabel(gd::string, float, cocos2d::CCPoint, int, int) = win 0x45ee90;
    void addObjectsToGroup(cocos2d::CCArray*, int);
    void addObjectsToPage(cocos2d::CCArray*, int);
    void addObjectToGroup(cocos2d::CCObject*, int);
    void addObjectToPage(cocos2d::CCObject*, int) = win 0x45c400, m1 0x1d6a04, imac 0x223b70, ios 0x131fd8;
    void addTitle(gd::string) = win 0x45c490, m1 0x1d6cac, imac 0x223e70, ios 0x1320a4;
    void closeInputNodes();
    void createCustomButton(int, gd::string, gd::string, cocos2d::CCPoint, float, float, bool, int, int) = win 0x45f110;
    void createCustomEasingControls(gd::string, cocos2d::CCPoint, float, int, int, int, int) = win 0x464cc0;
    void createCustomToggleValueControl(int, bool, bool, gd::string, cocos2d::CCPoint, bool, int, int) = win 0x45ec10;
    void createEasingControls(cocos2d::CCPoint, float, int, int) = win 0x463da0, imac 0x22c970, m1 0x1dd5b4, ios 0x1368fc;
    void createMultiTriggerItems(cocos2d::CCPoint touchPos, cocos2d::CCPoint spawnPos, cocos2d::CCPoint multiPos) = win 0x45cd50, imac 0x2243a0, m1 0x1d71b0;
    void createMultiTriggerItemsCorner() = win 0x45ca40;
    void createMultiTriggerItemsDefault() = win 0x45c930, imac 0x224290, m1 0x1d70d0;
    void createMultiTriggerItemsDefaultHorizontal() = win 0x45cc40;
    void createMultiTriggerItemsDefaultVertical() = win 0x45cb40;
    void createPageButtons(float, int) = win 0x45bc80;
    void createPlusButton(int, cocos2d::CCPoint, float, gd::string, int, int) = win 0x45ef70;
    CCMenuItemToggler* createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCPoint) = win 0x45c800;
    cocos2d::CCArray* createToggleValueControl(int property, gd::string label, cocos2d::CCPoint position, bool vertical, int page, int group, float scale) = win 0x45e900, imac 0x228c00, m1 0x1da5ec, ios 0x134e78;
    cocos2d::CCArray* createToggleValueControlAdvanced(int property, gd::string label, cocos2d::CCPoint position, bool vertical, int page, int group, float buttonScale, float labelScale, float labelWidth, cocos2d::CCPoint offset) = win inline, imac 0x228d30, m1 0x1da73c, ios 0x134fb8 {
        auto pageContainer = this->getPageContainer(page);
        auto groupContainer = this->getGroupContainer(group);
        auto nodes = cocos2d::CCArray::create();
        auto toggle = GameToolbox::createToggleButton(
            label, menu_selector(SetupTriggerPopup::onToggleTriggerValue), false, m_buttonMenu, position,
            this, m_mainLayer, buttonScale, labelScale, labelWidth, offset, "bigFont.fnt", vertical, 0, nodes
        );
        toggle->setTag(property);
        toggle->m_notClickable = true;
        m_valueToggles->setObject(toggle, property);
        pageContainer->addObjectsFromArray(nodes);
        if (group > 0) groupContainer->addObjectsFromArray(nodes);
        return nodes;
    }
    cocos2d::CCArray* createValueControl(int, gd::string, cocos2d::CCPoint, float, float, float) = win 0x45db40;
    cocos2d::CCArray* createValueControlAdvanced(int property, gd::string label, cocos2d::CCPoint position, float scale, bool noSlider, InputValueType valueType, int length, bool arrows, float sliderMin, float sliderMax, int page, int group, GJInputStyle inputStyle, int decimalPlaces, bool allowDisable) = win 0x45dc30, m1 0x1d9550, imac 0x227b30, ios 0x134204;
    cocos2d::CCArray* createValueControlWArrows(int, gd::string, cocos2d::CCPoint, float);
    cocos2d::CCArray* getGroupContainer(int group) = win 0x45c2a0, m1 0x1d6870, imac 0x2239e0, ios 0x131e94;
    float getMaxSliderValue(int);
    float getMinSliderValue(int);
    cocos2d::CCArray* getObjects();
    cocos2d::CCArray* getPageContainer(int page) = win inline, m1 0x1d66f0, imac 0x223830, ios 0x131d50 {
        for (int i = m_pageContainers->count(); i <= page; i++) {
            m_pageContainers->addObject(cocos2d::CCArray::create());
        }
        return static_cast<cocos2d::CCArray*>(m_pageContainers->objectAtIndex(page));
    }
    float getTriggerValue(int property, GameObject* object) = win 0x4620f0, imac 0x229d20, m1 0x1db6b4, ios 0x135bc8;
    float getTruncatedValue(float value, int decimals) = win 0x45f750, m1 0x1d7e10, imac 0x2251a0, ios inline {
        if (decimals < 1) return value;
        auto exponent = decimals > 1 ? powf(10.f, decimals) : 10.f;
        return roundf(value * exponent) / exponent;
    }
    float getTruncatedValueByTag(int tag, float value) = win inline, m1 0x1d9138, imac 0x227710, ios 0x133f28 {
        if (auto inputNode = static_cast<CCTextInputNode*>(m_inputNodes->objectForKey(tag))) {
            return this->getTruncatedValue(value, inputNode->m_decimalPlaces);
        }
        return value;
    }
    void goToPage(int, bool) = win 0x45c010, m1 0x1d6540, imac 0x223650, ios 0x131bac;
    void hideAll();
    bool init(EffectGameObject* trigger, cocos2d::CCArray* triggers, float width, float height, int background) = win 0x45b900, imac 0x222f20, m1 0x1d5eb4, ios 0x13154c;
    void onCustomEaseArrow(int, bool) = win 0x465590;
    void onCustomEaseArrowDown(cocos2d::CCObject* sender) = win 0x465560;
    void onCustomEaseArrowUp(cocos2d::CCObject* sender) = win 0x465530;
    void onCustomEaseRate(cocos2d::CCObject* sender) = win 0x465420;
    void onDisableValue(cocos2d::CCObject* sender) = win 0x45e7f0;
    void onEase(cocos2d::CCObject* sender) = win 0x464ac0;
    void onEaseRate(cocos2d::CCObject* sender) = win 0x464b30;
    void onMultiTrigger(cocos2d::CCObject* sender);
    void onPage(cocos2d::CCObject* sender) = win 0x45bf30, m1 0x1d6454, imac 0x223570, ios 0x131ac0;
    void onSpawnedByTrigger(cocos2d::CCObject* sender) = win 0x45d2d0;
    void onToggleTriggerValue(cocos2d::CCObject* sender) = win 0x45f6c0, m1 0x1da960, imac 0x228f60, ios 0x13516c;
    void onTouchTriggered(cocos2d::CCObject* sender) = win 0x45d1e0;
    void postSetup() = win inline, m1 0x1db304, imac 0x2298f0, ios 0x1358c8 {
        this->updateDefaultTriggerValues();
        m_disableTextDelegate = false;
    }
    void preSetup() = win inline, m1 0x1db2f0, imac 0x2298d0, ios 0x1358b4 {
        m_disableTextDelegate = true;
        this->determineStartValues();
    }
    void refreshGroupVisibility();
    void removeObjectFromGroup(cocos2d::CCObject*, int);
    void removeObjectFromPage(cocos2d::CCObject*, int);
    void resetDisabledValues();
    void setMaxSliderValue(float, int);
    void setMinSliderValue(float, int);
    bool shouldLimitValue(int);
    void toggleBG(bool);
    void toggleCustomEaseRateVisibility(int, int) = win 0x465910;
    void toggleDisableButtons(bool) = win 0x45e820;
    void toggleEaseRateVisibility();
    void toggleLimitValue(int, bool);
    void togglePageArrows(bool);
    void triggerArrowChanged(int property, bool isRight) = win 0x45daa0, ios 0x133fc8 {
        float change = isRight ? 1.f : -1.f;
        float newValue;

        if (auto triggerValue = static_cast<cocos2d::CCFloat*>(this->m_triggerValues->objectForKey(property)))
            newValue = triggerValue->getValue() + change;
        else
            newValue = change;

        bool delegateDisabled = this->m_disableTextDelegate;
        this->m_disableTextDelegate = true;
        this->updateValueControls(property, newValue);
        this->valueChanged(property, newValue);
        this->m_disableTextDelegate = delegateDisabled;
    }
    void triggerArrowLeft(cocos2d::CCObject*) = win 0x45da40, m1 0x1d91ac, imac 0x2277b0, ios 0x133f90;
    void triggerArrowRight(cocos2d::CCObject*) = win 0x45da70, m1 0x1d92d8, imac 0x2278c0, ios 0x13405c;
    void triggerSliderChanged(cocos2d::CCObject*) = win 0x45d980, m1 0x1d9054, imac 0x227610, ios 0x133e84;
    void updateCustomEaseLabel(int, int) = win 0x465630;
    void updateCustomEaseRateLabel(int, float) = win 0x465800, ios 0x1373fc, imac 0x22d590, m1 0x1de210;
    void updateCustomToggleTrigger(int, bool);
    void updateEaseLabel();
    void updateEaseRateLabel() = ios 0x1371dc, imac 0x22d2f0, m1 0x1ddf50, win 0x4647d0;
    void updateEditorLabel() = win 0x45d160, m1 0x1d7a48, imac 0x224d40, ios 0x132cf4;
    void updateInputNodeLabel(int, gd::string) = win 0x463be0;
    void updateLabel(int, gd::string);
    void updateMultiTriggerBtn() = win 0x45d3c0;
    void updateSlider(int property, float value) = win inline, m1 0x1d8b30, imac 0x227070, ios 0x133adc {
        if (auto slider = static_cast<Slider*>(m_valueControls->objectForKey(property))) slider->setValue(value);
    }
    void updateSlider(int);
    void updateSpawnedByTrigger() = win 0x45d320;
    void updateTouchTriggered() = win 0x45d230;
    void updateValue(int property, float value) = win 0x463b50, m1 0x1da380, imac 0x2289d0, ios 0x134ca8;
    void updateValueControls(int property, float value) = ios 0x134094, win 0x45f7c0, imac 0x227950, m1 0x1d9370;
    void valueChanged(int property, float value) = ios 0x132fa0, win 0x45fd90, imac 0x225210, m1 0x1d7e68;

    EffectGameObject* m_gameObject;
    cocos2d::CCArray* m_gameObjects;
    bool m_touchTriggered;
    bool m_spawnTriggered;
    CCMenuItemToggler* m_touchToggle;
    CCMenuItemToggler* m_spawnToggle;
    cocos2d::CCArray* m_multiTriggerContainer;
    bool m_multiTriggered;
    float m_width;
    float m_height;
    bool m_disableTextDelegate;
    cocos2d::CCDictionary* m_valueToggles;
    cocos2d::CCDictionary* m_inputNodes;
    cocos2d::CCDictionary* m_valueControls;
    cocos2d::CCDictionary* m_customValueToggles;
    cocos2d::CCDictionary* m_disableButtons;
    cocos2d::CCLabelBMFont* m_easingLabel;
    cocos2d::CCLabelBMFont* m_easingRateLabel;
    CCMenuItemSpriteExtra* m_easingRateButton;
    EasingType m_easingType;
    float m_easingRate;
    cocos2d::CCDictionary* m_inputLabels;
    cocos2d::CCDictionary* m_triggerValues;
    cocos2d::CCDictionary* m_minSliderValues;
    cocos2d::CCDictionary* m_maxSliderValues;
    gd::map<int, bool> m_shouldLimitValues;
    bool m_disableSliderDelegate;
    bool m_effectObjects;
    cocos2d::CCArray* m_pageContainers;
    int m_page;
    float m_easingControlScale;
    cocos2d::CCArray* m_groupContainers;
    cocos2d::CCDictionary* m_customEasingTags;
    cocos2d::CCDictionary* m_customEasingLabels;
    cocos2d::CCDictionary* m_customEasingButtons;
    cocos2d::CCDictionary* m_customEasingScales;
    cocos2d::CCDictionary* m_disabledEasingButtons;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
    bool m_hideAll;
}

[[link(android)]]
class SetupZoomTriggerPopup : SetupTriggerPopup {
    // virtual ~SetupZoomTriggerPopup();

    static SetupZoomTriggerPopup* create(EffectGameObject*, cocos2d::CCArray*) = win 0x465b70, imac 0x30cb90, m1 0x2a38bc, ios 0x1ba2f4;

    virtual void determineStartValues() = win 0x287910, imac 0x30d1e0, m1 0x2a3de4, ios 0x1ba6e0;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x287920, imac 0x30d1f0, m1 0x2a3de8, ios 0x1ba6e4;

    bool init(EffectGameObject*, cocos2d::CCArray*) = win 0x465c80, m1 0x2a3a44, imac 0x30cdc0, ios 0x1ba3cc;
}

[[link(android)]]
class SFXBrowser : FLAlertLayer, MusicDownloadDelegate, TableViewCellDelegate, SetTextPopupDelegate, SelectSFXSortDelegate {
    SFXBrowser() = ios 0x16e7fc {
        m_searchResult = nullptr;
        m_sfxObjects = nullptr;
        m_listLayer = nullptr;
        m_nameLabel = nullptr;
        m_pathLabel = nullptr;
        m_infoLabel = nullptr;
        m_pageLabel = nullptr;
        m_searchLabel = nullptr;
        m_prevButton = nullptr;
        m_refreshButton = nullptr;
        m_clearSearchButton = nullptr;
        m_circleSprite = nullptr;
        m_libraryVersion = 0;
        m_cellAmount = 0;
        m_gettingURL = false;
        m_selectedCell = false;
        m_snapToSelected = false;
        m_compactMode = false;
        m_sortType = AudioSortType::NameAscending;
        m_delegate = nullptr;
        m_autoUpdating = false;
    }
    ~SFXBrowser() = win inline, m1 0x3a5494, imac 0x42a350, ios 0x16bde4 {
        MusicDownloadManager::sharedState()->removeMusicDownloadDelegate(this);
        CC_SAFE_RELEASE(m_sfxObjects);
        CC_SAFE_RELEASE(m_searchResult);
    }

    static SFXBrowser* create(int id) = win inline, imac 0x42a4d0, m1 0x3a5570, ios 0x16bec0 {
        auto ret = new SFXBrowser();
        if (ret->init(id)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void registerWithTouchDispatcher() = win 0x425d0, imac 0x42cf30, m1 0x3a7c5c, ios 0x16df88;
    virtual void keyBackClicked() = win 0x4687f0, m1 0x3a7bac, imac 0x42ce90, ios 0x16df7c;
    virtual void musicActionFinished(GJMusicAction) = win 0x467360, m1 0x3a72fc, imac 0x42c4e0, ios 0x16d9b0;
    virtual void musicActionFailed(GJMusicAction) = win 0x467400, imac 0x42c5e0, m1 0x3a73cc, ios 0x16d9d4;
    virtual void sortSelectClosed(SelectSFXSortLayer*) = win 0x467f20, imac 0x42c9b0, m1 0x3a7740, ios 0x16dcc4;
    virtual void setTextPopupClosed(SetTextPopup*, gd::string) = win 0x468200, imac 0x42cc20, m1 0x3a7970, ios 0x16de50;
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) = win 0x4682a0, imac 0x42cce0, m1 0x3a7a2c, ios 0x16deb4;
    virtual int getSelectedCellIdx() = win 0x4683a0, m1 0x3a7b8c, imac 0x42ce50, ios 0x16df5c;
    virtual bool shouldSnapToSelected() = win 0x4683b0, m1 0x3a7b9c, imac 0x42ce70, ios 0x16df6c;

    bool init(int) = win 0x4661b0, imac 0x42a690, m1 0x3a56b4, ios 0x16bf34;
    void onClearSearch(cocos2d::CCObject* sender) = m1 0x3a68c8, imac 0x42b9a0;
    void onClose(cocos2d::CCObject* sender);
    void onCredits(cocos2d::CCObject* sender) = m1 0x3a6740, imac 0x42b840;
    void onExitFolder(cocos2d::CCObject* sender) = win 0x468660, imac 0x42b5b0, m1 0x3a64c4;
    void onPage(cocos2d::CCObject* sender) = win 0x4683c0, m1 0x3a656c, imac 0x42b670;
    void onSearch(cocos2d::CCObject* sender) = win 0x468090;
    void onSorting(cocos2d::CCObject* sender) = win 0x467de0, imac 0x42b780, m1 0x3a6694;
    void onToggleCompactMode(cocos2d::CCObject* sender) = win 0x467f80, imac 0x42b7d0, m1 0x3a66dc;
    void onUpdateLibrary(cocos2d::CCObject* sender) = m1 0x3a6630, imac 0x42b710;
    void setupList(SFXSearchResult*) = win 0x467540, imac 0x42bba0, m1 0x3a6ab4;
    void setupSFXBrowser() = m1 0x3a6990, imac 0x42ba70;
    void trySetupSFXBrowser() = m1 0x3a6928, imac 0x42ba00;
    void updatePageLabel() = win 0x468490, m1 0x3a74e0, imac 0x42c710;

    SFXSearchResult* m_searchResult;
    cocos2d::CCArray* m_sfxObjects;
    GJCommentListLayer* m_listLayer;
    cocos2d::CCLabelBMFont* m_nameLabel;
    cocos2d::CCLabelBMFont* m_pathLabel;
    cocos2d::CCLabelBMFont* m_infoLabel;
    cocos2d::CCLabelBMFont* m_pageLabel;
    cocos2d::CCLabelBMFont* m_searchLabel;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
    CCMenuItemSpriteExtra* m_backButton;
    CCMenuItemSpriteExtra* m_refreshButton;
    CCMenuItemSpriteExtra* m_clearSearchButton;
    LoadingCircleSprite* m_circleSprite;
    int m_sfxID;
    int m_libraryVersion;
    int m_cellAmount;
    bool m_gettingURL;
    bool m_selectedCell;
    bool m_snapToSelected;
    bool m_compactMode;
    AudioSortType m_sortType;
    SFXBrowserDelegate* m_delegate;
    bool m_autoUpdating;
}

[[link(android)]]
class SFXBrowserDelegate {
    virtual void sfxBrowserClosed(SFXBrowser*) {}
}

[[link(android)]]
class SFXFolderObject : SFXInfoObject {
    SFXFolderObject() {
        m_sfxObjects = nullptr;
    }
    ~SFXFolderObject() = win inline, m1 0x4d3a34, imac 0x581030, ios 0x15f994 {
        CC_SAFE_RELEASE(m_sfxObjects);
    }

    static SFXFolderObject* create(int p0, gd::string p1, int p2) = win inline {
        auto ret = new SFXFolderObject();
        if (ret->init(p0, p1, p2)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(int p0, gd::string p1, int p2) = win inline {
        if (!SFXInfoObject::init(p0, p1, p2, 0, 0)) return false;
        m_sfxObjects = cocos2d::CCArray::create();
        m_sfxObjects->retain();
        return true;
    }

    cocos2d::CCArray* m_sfxObjects;
}

[[link(android)]]
class SFXInfoObject : cocos2d::CCObject {
    // virtual ~SFXInfoObject();
    SFXInfoObject() {
        m_sfxID = 0;
        m_folderID = 0;
        m_size = 0;
        m_duration = 0;
        m_folder = false;
        m_unk049 = false;
    }

    static SFXInfoObject* create(int id, gd::string name, int folderID, int size, int duration) = win inline {
        auto ret = new SFXInfoObject();
        if (ret->init(id, name, folderID, size, duration)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    gd::string getLowerCaseName() = win inline {
        gd::string name = m_name;
        for (int i = 0; i < name.size(); i++) {
            name[i] = tolower(name[i]);
        }
        return name;
    }
    bool init(int id, gd::string name, int folderID, int size, int duration) = win inline, imac 0x580f10, m1 0x4d3920 {
        m_sfxID = id;
        m_name = name;
        m_folderID = folderID;
        m_size = size;
        m_duration = duration;
        m_folder = false;
        return true;
    }

    int m_sfxID;
    int m_folderID;
    int m_size;
    int m_duration;
    bool m_folder;
    bool m_unk049;
    gd::string m_name;
}

[[link(android)]]
class SFXSearchResult : MusicSearchResult {
    // virtual ~SFXSearchResult();

    static SFXSearchResult* create(int) = win 0x331fa0, imac 0x582900, m1 0x4d4f80;

    virtual void updateObjects(AudioSortType) = win 0x332020, imac 0x582a20, m1 0x4d507c, ios 0x1605b4;

    SFXFolderObject* getActiveFolder() = win inline {
        return m_folderObject;
    }
    int getSelectedPage(int, int) = win 0x332580;
    bool init(int folderID) = win inline, imac 0x582990, m1 0x4d5004 {
        if (!MusicSearchResult::init(GJSongType::Music)) return false;
        m_folderID = folderID;
        m_audioType = 1;
        return true;
    }
    void setActiveFolder(SFXFolderObject* folder) = win inline, imac 0x5829b0, m1 0x4d501c {
        if (folder != m_folderObject) {
            CC_SAFE_RELEASE(m_folderObject);
            CC_SAFE_RETAIN(folder);
            m_folderObject = folder;
        }
        else if (!folder) {
            CC_SAFE_RELEASE_NULL(m_folderObject);
        }
    }

    int m_folderID;
    SFXFolderObject* m_folderObject;
}

[[link(android)]]
class SFXTriggerGameObject : EffectGameObject {
    // virtual ~SFXTriggerGameObject();
    // SFXTriggerGameObject();

    static SFXTriggerGameObject* create(char const*);

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x49efd0, imac 0x1be340, m1 0x17c1dc, ios 0x385ed0;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x49da70, imac 0x1b8850, m1 0x177b40, ios 0x384d08;

    int getSFXRefID();
    int getUniqueSFXID();
    bool init(char const*);

    gd::string m_soundPath;
    // property 392
    int m_soundID;
    float m_pitch;
    // property 404
    int m_speed;
    // property 405
    int m_pitchIndex;
    // property 406
    float m_volume;
    // property 408
    int m_start;
    // property 409
    int m_fadeIn;
    // property 410
    int m_end;
    // property 411
    int m_fadeOut;
    // property 407
    bool m_reverb;
    // property 412
    bool m_fastFourierTransform;
    // property 413
    bool m_loop;
    // property 414
    bool m_stopLoop;
    // property 595
    bool m_dontReset;
    // property 415
    bool m_unique;
    // property 420
    bool m_override;
    // property 416
    int m_sfxUniqueID;
    // property 421
    float m_volumeNear;
    // property 422
    float m_volumeMedium;
    // property 423
    float m_volumeFar;
    // property 424
    int m_minDistNear;
    // property 425
    int m_minDistMedium;
    // property 426
    int m_minDistFar;
    // property 458
    int m_proximityMode;
    // property 428
    bool m_cameraDistance;
    // property 433
    bool m_preload;
    // property 489
    bool m_ignoreVolumeTest;
    // property 434
    float m_minInterval;
    // property 455
    int m_sfxGroup;
    // property 417
    bool m_stop;
    // property 418
    bool m_changeSpeed;
    // property 419
    bool m_changeVolume;
    // property 457
    int m_groupID;
    int m_unk788;
    // property 502
    FMODReverbPreset m_reverbPreset;
    // property 503
    bool m_reverbEnabled;
    // property 490
    float m_soundDuration;
    bool m_applyDisabled;
    // property 596
    int m_speedVariance;
    // property 597
    int m_pitchVariance;
    // property 598
    float m_volumeVariance;
    // property 599
    bool m_pitchSteps;
}

[[link(android)]]
class ShaderGameObject : EffectGameObject {
    // virtual ~ShaderGameObject();

    ShaderGameObject() {
        m_speed = 1.f;
        m_strength = 1.f;
        m_outer = 1.f;
        m_timeOff = 0.f;
        m_waveWidth = 1.f;
        m_targetX = 1.f;
        m_targetY = 1.f;
        m_fadeIn = 1.f;
        m_fadeOut = 1.f;
        m_screenOffsetX = 0.f;
        m_screenOffsetY = 0.f;
        m_invert = false;
        m_inner = 0.f;
        m_maxSize = 0.f;
        m_flip = false;
        m_rotate = false;
        m_dual = false;
        m_useX = false;
        m_useY = false;
        m_snapGrid = false;
        m_hardEdges = false;
        m_disableAll = false;
        m_zLayerMin = 0;
        m_zLayerMax = 0;
        m_animate = false;
        m_relative = false;
        m_editorDisabled = false;
    }

    static ShaderGameObject* create(char const*);

    virtual void customSetup() = win 0x481460, imac 0x18c9a0, m1 0x1537ec, ios 0x373f2c;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4826e0, imac 0x191760, m1 0x1573c4, ios 0x374f24;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4814c0, imac 0x18ca10, m1 0x153844, ios 0x373f7c;

    bool init(char const*);

    // property 175
    float m_speed;
    // property 176
    float m_strength;
    // property 191
    float m_outer;
    // property 177
    float m_timeOff;
    // property 179
    float m_waveWidth;
    // property 180
    float m_targetX;
    // property 189
    float m_targetY;
    // property 181
    float m_fadeIn;
    // property 182
    float m_fadeOut;
    // property 290
    float m_screenOffsetX;
    // property 291
    float m_screenOffsetY;
    // property 184
    bool m_invert;
    // property 183
    float m_inner;
    // property 512
    float m_maxSize;
    // property 185
    bool m_flip;
    // property 186
    bool m_rotate;
    // property 187
    bool m_dual;
    // property 188
    bool m_useX;
    // property 190
    bool m_useY;
    // property 194
    bool m_snapGrid;
    // property 515
    bool m_hardEdges;
    // property 192
    bool m_disableAll;
    // property 196
    int m_zLayerMin;
    // property 197
    int m_zLayerMax;
    // property 513
    bool m_animate;
    // property 514
    bool m_relative;
    // property 531
    bool m_editorDisabled;
}

[[link(android), depends(GJShaderState)]]
class ShaderLayer : cocos2d::CCLayer {
    ShaderLayer() = m1 0x3492f8, imac 0x3bf2d0, ios 0x272580 {
        m_timesyncShaderActions = false;
        m_shader = nullptr;
        m_renderTexture = nullptr;
        m_sprite = nullptr;
        m_antiAlias = false;
        m_configuredAntiAlias = false;
        m_gameLayer = nullptr;
        m_savedCameraRotation = 0.f;
        m_shockWaveTimeMult = 1.f;
        m_scaleFactor = 1.f;
    }
    ~ShaderLayer() = win inline, m1 0x342928, imac 0x3b76d0, ios 0x26cc0c {
        CC_SAFE_RELEASE(m_renderTexture);
    }

    static ShaderLayer* create() = win inline, m1 0x342a7c, imac 0x3b78d0, ios 0x26ccb4 {
        auto ret = new ShaderLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x4697b0, imac 0x3b7930, m1 0x342afc, ios 0x26cd28;
    virtual void update(float) = win 0x46a560, imac 0x3b91b0, m1 0x3442d4, ios 0x26e070;
    virtual void visit() = win 0x470580, imac 0x3bee90, m1 0x348f24, ios 0x272320;

    cocos2d::CCPoint objectPosToShaderPos(cocos2d::CCPoint position) = win 0x46a890, m1 0x344654, imac 0x3b9590, ios 0x26e2f8;
    void performCalculations() = ios 0x272244, win 0x46fbd0, imac 0x3beb80, m1 0x348c6c;
    void preBulgeShader() = win inline, m1 0x34813c, imac 0x3bdea0, ios 0x27171c {
        if (m_state.m_bulgeValue <= 0.f) {
            if (this->getActionByTag(21)) {
                m_state.m_usesShaders = true;
            }
            m_sprite->getShaderProgram()->setUniformLocationWith1f(m_bulgeValueUniform, 0.f);
        }
    }
    void preChromaticGlitchShader() = win 0x46d840, m1 0x346e7c, imac 0x3bc990, ios 0x27053c;
    void preChromaticShader() = win inline, m1 0x346bf4, imac 0x3bc6a0, ios 0x2702b8 {
        if (m_state.m_chromaticTargetX != 0.f || m_state.m_chromaticTargetY != 0.f || this->getActionByTag(1) || this->getActionByTag(2)) {
            m_state.m_usesShaders = true;
        }
        auto scale = m_state.m_chromaticRelative && m_gameLayer ? abs(m_gameLayer->m_objectLayer->getScale()) : 1.f;
        auto shaderProgram = m_sprite->getShaderProgram();
        shaderProgram->setUniformLocationWith1f(m_chromaticXOffUniform, (m_scaleFactor / 1.2018504f) * m_state.m_chromaticTargetX * m_state.m_textureScaleX * scale);
        shaderProgram->setUniformLocationWith1f(m_chromaticYOffUniform, (m_scaleFactor / 1.2018504f) * m_state.m_chromaticTargetY * m_state.m_textureScaleY * scale);
    }
    void preColorChangeShader() = win inline, m1 0x348888, imac 0x3be680, ios 0x271e64 {
        auto shaderProgram = m_sprite->getShaderProgram();
        if (m_state.m_colorChangeCR != 1.f || m_state.m_colorChangeCG != 1.f || m_state.m_colorChangeCB != 1.f ||
            m_state.m_colorChangeBR != 0.f || m_state.m_colorChangeBG != 0.f || m_state.m_colorChangeBB != 0.f) {
            m_state.m_usesShaders = true;
            shaderProgram->setUniformLocationWith3f(m_colorChangeCUniform, (std::max)(m_state.m_colorChangeCR, .001f), m_state.m_colorChangeCG, m_state.m_colorChangeCB);
            shaderProgram->setUniformLocationWith3f(m_colorChangeBUniform, m_state.m_colorChangeBR, m_state.m_colorChangeBG, m_state.m_colorChangeBB);
        }
        else {
            shaderProgram->setUniformLocationWith3f(m_colorChangeCUniform, 0.f, 0.f, 0.f);
            if (this->getActionByTag(42) || this->getActionByTag(43) || this->getActionByTag(44) || this->getActionByTag(39) || this->getActionByTag(40) || this->getActionByTag(41)) {
                m_state.m_usesShaders = true;
            }
        }
    }
    void preCommonShader() = win inline, m1 0x3444e0, imac 0x3b93c0, ios 0x26e184 {
        auto shaderProgram = m_sprite->getShaderProgram();
        shaderProgram->setUniformLocationWith3f(m_blurRefColorUniform, m_state.m_blurRefColor.r / 255.f, m_state.m_blurRefColor.g / 255.f, m_state.m_blurRefColor.b / 255.f);
        shaderProgram->setUniformLocationWith1f(m_blurUseRefUniform, m_state.m_minBlendingLayer > 1);
        shaderProgram->setUniformLocationWith1f(m_blurIntensityUniform, m_state.m_blurIntensity + 1.f);
        shaderProgram->setUniformLocationWith2f(m_textureScaleUniform, m_state.m_textureScaleX, m_state.m_textureScaleY);
        shaderProgram->setUniformLocationWith2f(m_textureScaleInvUniform, 1.f / m_state.m_textureScaleX, 1.f / m_state.m_textureScaleY);
        shaderProgram->setUniformLocationWith1f(m_blurOnlyEmptyUniform, m_state.m_minBlendingLayer > 1 && m_state.m_blurOnlyEmpty);
        shaderProgram->setUniformLocationWith1f(m_screenAspectINVUniform, m_screenSize.height / m_screenSize.width);
        shaderProgram->setUniformLocationWith1f(m_shaderPositionUniform, m_screenSize.width / m_screenSize.height);
    }
    void preGlitchShader() = win 0x46d0d0, m1 0x346724, imac 0x3bc0f0, ios 0x26feb8;
    void preGrayscaleShader() = win inline, m1 0x3483ec, imac 0x3be160, ios 0x2719cc {
        if (m_state.m_grayscaleValue > 0.f || this->getActionByTag(32)) {
            m_state.m_usesShaders = true;
        }
        auto shaderProgram = m_sprite->getShaderProgram();
        shaderProgram->setUniformLocationWith1f(m_grayscaleValueUniform, m_state.m_grayscaleValue);
        if (m_state.m_grayscaleValue > 0.f) {
            shaderProgram->setUniformLocationWith1f(m_grayscaleUseLumUniform, m_state.m_grayscaleUseLum);
            shaderProgram->setUniformLocationWith3f(m_grayscaleTintUniform, m_state.m_grayscaleTint.r / 255.f, m_state.m_grayscaleTint.g / 255.f, m_state.m_grayscaleTint.b / 255.f);
        }
    }
    void preHueShiftShader() = win inline, m1 0x3486dc, imac 0x3be4d0, ios 0x271cbc {
        if (m_state.m_hueShiftDegrees != 0.f || this->getActionByTag(38)) {
            m_state.m_usesShaders = true;
        }
        auto radians = m_state.m_hueShiftDegrees * (M_PI / 180.f);
        auto shaderProgram = m_sprite->getShaderProgram();
        shaderProgram->setUniformLocationWith1f(m_hueShiftCosAUniform, cosf(radians));
        shaderProgram->setUniformLocationWith1f(m_hueShiftSinAUniform, sinf(radians));
    }
    void preInvertColorShader() = win inline, m1 0x348610, imac 0x3be3e0, ios 0x271bf0 {
        if (m_state.m_invertColorEditRGB > 0.f || this->getActionByTag(34)) {
            m_state.m_usesShaders = true;
        }
        auto shaderProgram = m_sprite->getShaderProgram();
        auto edit = m_state.m_invertColorEditRGB;
        auto r = edit * m_state.m_invertColorR;
        auto g = edit * m_state.m_invertColorG;
        auto b = edit * m_state.m_invertColorB;
        if (m_state.m_invertColorClampRGB) {
            r = (std::min)(r, 1.f);
            g = (std::min)(g, 1.f);
            b = (std::min)(b, 1.f);
        }
        shaderProgram->setUniformLocationWith4f(m_invertColorValueUniform, r, g, b, edit);
    }
    void preLensCircleShader() = win 0x46e380, m1 0x347844, imac 0x3bd4a0, ios 0x270e78;
    void preMotionBlurShader() = win 0x46e850, m1 0x347d98, imac 0x3bda20, ios 0x271398;
    cocos2d::CCPoint prepareTargetContainer() = win 0x46dd70, m1 0x347418, imac 0x3bd030, ios 0x270a4c;
    void prePinchShader() = win inline, m1 0x34836c, imac 0x3be0d0, ios 0x27194c {
        if (m_state.m_pinchTargetX != 0.0 || m_state.m_pinchTargetY != 0.0 || this->getActionByTag(25) || this->getActionByTag(26)) {
            m_state.m_usesShaders = true;
        }
    }
    void prePixelateShader() = win 0x46dbc0, m1 0x347240, imac 0x3bcdd0, ios 0x2708e8;
    void preRadialBlurShader() = win inline, m1 0x347ae8, imac 0x3bd770, ios 0x27110c {
        if (m_state.m_radialBlurSize != 0.f || this->getActionByTag(16)) {
            m_state.m_usesShaders = true;
        }
        auto shaderProgram = m_sprite->getShaderProgram();
        shaderProgram->setUniformLocationWith1f(m_radialBlurValueUniform, m_state.m_radialBlurSize / 45.f); 
        if (m_state.m_radialBlurSize != 0.f) {
            shaderProgram->setUniformLocationWith1f(m_blurFadeUniform, std::clamp(m_state.m_radialBlurFade * .2f, .0f, .2f));
        }
    }
    void preSepiaShader() = win inline, m1 0x3484e4, imac 0x3be290, ios 0x271ac4 {
        if (m_state.m_sepiaValue > 0.f || this->getActionByTag(33)) {
            m_state.m_usesShaders = true;
        }
        m_sprite->getShaderProgram()->setUniformLocationWith1f(m_sepiaValueUniform, m_state.m_sepiaValue);
    }
    void preShockLineShader() = win 0x46cbc0, m1 0x346300, imac 0x3bbbd0, ios 0x26fac8;
    void preShockWaveShader() = win 0x46c070, m1 0x345d94, imac 0x3bb510, ios 0x26f58c;
    void preSplitScreenShader() = win 0x46f8b0, m1 0x348a18, imac 0x3be890, ios 0x271ff0;
    bool resetAllShaders() = win 0x4710f0, m1 0x349270, imac 0x3bf240, ios 0x272510;
    void resetTargetContainer() = win inline, m1 0x3476a0, imac 0x3bd310, ios 0x270cd4 {
        if (m_gameLayer) {
            auto parent = m_state.m_minBlendingLayer < 2 ? m_gameLayer->m_objectParent : m_gameLayer->m_inShaderParent;
            parent->setPosition(m_savedCameraPosition);
            parent->setScale(1.f);
            parent->setRotation(m_savedCameraRotation);
            this->setRotation(0.f);
        }
    }
    void setupBulgeShader() = win inline, m1 0x343da0, imac 0x3b8c80, ios 0x26dbbc {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_bulgeValueUniform = glGetUniformLocation(program, "_bulgeValue");
        m_bulgeValue2Uniform = glGetUniformLocation(program, "_bulgeValue2");
        m_bulgeOriginUniform = glGetUniformLocation(program, "_bulgeOrigin");
        m_bulgeRadiusUniform = glGetUniformLocation(program, "_bulgeRadius");
    }
    void setupChromaticGlitchUniforms() = win inline, m1 0x343b30, imac 0x3b8a10, ios 0x26d94c {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_cGRGBOffsetUniform = glGetUniformLocation(program, "_cGRGBOffset");
        m_cGYOffsetUniform = glGetUniformLocation(program, "_cGYOffset");
        m_cGTimeUniform = glGetUniformLocation(program, "_cGTime");
        m_cGStrengthUniform = glGetUniformLocation(program, "_cGStrength");
        m_cGHeightUniform = glGetUniformLocation(program, "_cGHeight");
        m_cGLineThickUniform = glGetUniformLocation(program, "_cGLineThick");
        m_cGLineStrengthUniform = glGetUniformLocation(program, "_cGLineStrength");
    }
    void setupChromaticUniforms() = win inline, m1 0x343acc, imac 0x3b89b0, ios 0x26d8e8 {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_chromaticXOffUniform = glGetUniformLocation(program, "_chromaticXOff");
        m_chromaticYOffUniform = glGetUniformLocation(program, "_chromaticYOff");
    }
    void setupColorChangeShader() = win inline, m1 0x3440ec, imac 0x3b8fc0, ios 0x26de88 {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_colorChangeCUniform = glGetUniformLocation(program, "_colorChangeC");
        m_colorChangeBUniform = glGetUniformLocation(program, "_colorChangeB");
    }
    void setupCommonUniforms() = win 0x46a6e0, m1 0x3434e0, imac 0x3b83b0, ios 0x26d2fc;
    void setupGlitchUniforms() = win inline, m1 0x3439fc, imac 0x3b88e0, ios 0x26d818 {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_glitchBotUniform = glGetUniformLocation(program, "_glitchBot");
        m_glitchTopUniform = glGetUniformLocation(program, "_glitchTop");
        m_glitchXOffsetUniform = glGetUniformLocation(program, "_glitchXOffset");
        m_glitchColOffsetUniform = glGetUniformLocation(program, "_glitchColOffset");
        m_glitchRndUniform = glGetUniformLocation(program, "_glitchRnd");
    }
    void setupGrayscaleShader() = win inline, m1 0x343f80, imac 0x3b8e60, ios 0x26dd9c {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_grayscaleValueUniform = glGetUniformLocation(program, "_grayscaleValue");
        m_grayscaleTintUniform = glGetUniformLocation(program, "_grayscaleTint");
        m_grayscaleUseLumUniform = glGetUniformLocation(program, "_grayscaleUseLum");
    }
    void setupHueShiftShader() = win inline, m1 0x344088, imac 0x3b8f60, ios 0x26de24 {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_hueShiftCosAUniform = glGetUniformLocation(program, "_hueShiftCosA");
        m_hueShiftSinAUniform = glGetUniformLocation(program, "_hueShiftSinA");
    }
    void setupInvertColorShader() = win inline, m1 0x344048, imac 0x3b8f20, ios inline {
        m_invertColorValueUniform = glGetUniformLocation(m_sprite->getShaderProgram()->getProgram(), "_invertColorValue");
    }
    void setupLensCircleShader() = win inline, m1 0x343c48, imac 0x3b8b30, ios 0x26da64 {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_lensCircleOriginUniform = glGetUniformLocation(program, "_lensCircleOrigin");
        m_lensCircleStartUniform = glGetUniformLocation(program, "_lensCircleStart");
        m_lensCircleEndUniform = glGetUniformLocation(program, "_lensCircleEnd");
        m_lensCircleStrengthUniform = glGetUniformLocation(program, "_lensCircleStrength");
        m_lensCircleTintUniform = glGetUniformLocation(program, "_lensCircleTint");
        m_lensCircleAdditiveUniform = glGetUniformLocation(program, "_lensCircleAdditive");
    }
    void setupMotionBlurShader() = win inline, m1 0x343ef8, imac 0x3b8de0, ios 0x26dd14 {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_motionBlurValueUniform = glGetUniformLocation(program, "_motionBlurValue");
        m_motionBlurMultUniform = glGetUniformLocation(program, "_motionBlurMult");
        m_motionBlurDualUniform = glGetUniformLocation(program, "_motionBlurDual");
    }
    void setupPinchShader() = win inline, m1 0x343e4c, imac 0x3b8d30, ios 0x26dc68 {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_pinchValueUniform = glGetUniformLocation(program, "_pinchValue");
        m_pinchCenterPosUniform = glGetUniformLocation(program, "_pinchCenterPos");
        m_pinchCalcUniform = glGetUniformLocation(program, "_pinchCalc1");
        m_pinchRadiusUniform = glGetUniformLocation(program, "_pinchRadius");
    }
    void setupRadialBlurShader() = win inline, m1 0x343d3c, imac 0x3b8c20, ios 0x26db58 {
        auto program = m_sprite->getShaderProgram()->getProgram();
        m_radialBlurCenterUniform = glGetUniformLocation(program, "_radialBlurCenter");
        m_radialBlurValueUniform = glGetUniformLocation(program, "_radialBlurValue");
    }
    void setupSepiaShader() = win inline, m1 0x344008, imac 0x3b8ee0, ios inline {
        m_sepiaValueUniform = glGetUniformLocation(m_sprite->getShaderProgram()->getProgram(), "_sepiaValue");
    }
    void setupShader(bool reset) = win 0x4698c0, m1 0x342bc0, imac 0x3b79f0, ios 0x26cdd0;
    void setupShockLineUniforms() = win 0x46c9c0, m1 0x343830, imac 0x3b8710, ios 0x26d64c;
    void setupShockWaveUniforms() = win 0x46be70, m1 0x343664, imac 0x3b8540, ios 0x26d480;
    void setupSplitScreenShader() = win 0x46f700, m1 0x344150, imac 0x3b9020, ios 0x26deec;
    void toggleAntiAlias(bool antiAlias) = win 0x46a4f0, m1 0x34347c, imac 0x3b8350, ios 0x26d298;
    void triggerBulge(float fadeTime, float bulge, float screenOffsetX, float screenOffsetY, float radius, int targetID, int easingType, float easingRate, bool relative) = win 0x46eb60, m1 0x348070, imac 0x3bddd0, ios 0x271650;
    void triggerChromaticGlitch(bool enable, float duration, float speed, float strength, float rgbOffset, float lineThickness, float lineStrength, float segmentHeight, int easingType, float easingRate, bool relative, bool relativePos) = win 0x46d520, m1 0x346cfc, imac 0x3bc7e0, ios 0x2703c0;
    void triggerChromaticX(float fadeTime, float targetX, int easingType, float easingRate, bool relative) = win inline, m1 0x346b7c, imac 0x3bc640, ios 0x270240 {
        this->tweenValueAuto(targetX, 1, fadeTime, easingType, easingRate);
        m_state.m_chromaticRelative = relative;
    }
    void triggerChromaticY(float fadeTime, float targetY, int easingType, float easingRate, bool relative) = win inline, m1 0x346bb8, imac 0x3bc670, ios 0x27027c {
        this->tweenValueAuto(targetY, 2, fadeTime, easingType, easingRate);
        m_state.m_chromaticRelative = relative;
    }
    void triggerColorChange(float fadeTime, float cr, float cg, float cb, float br, float bg, float bb, int easingType, float easingRate) = win 0x46f430, m1 0x34878c, imac 0x3be590, ios 0x271d68;
    void triggerGlitch(float fadeTime, float strength, float speed, float sliceHeight, float maxSliceXOff, float maxColXOff, float maxColYOff, bool relative) = win inline, m1 0x346694, imac 0x3bc050, ios 0x26fe2c {
        this->tweenValueAuto(strength, 49, fadeTime, 0, 0.f);
        m_state.m_glitchSpeed = speed;
        m_state.m_glitchSliceHeight = sliceHeight;
        m_state.m_glitchMaxSliceXOff = maxSliceXOff;
        m_state.m_glitchMaxColXOff = maxColXOff;
        m_state.m_glitchMaxColYOff = maxColYOff;
        m_state.m_glitchRelative = relative;
    }
    void triggerGrayscale(float fadeTime, float target, bool useLuminance, int tintChannel, int easingType, float easingRate) = win inline, m1 0x3483c8, imac 0x3be130, ios 0x2719a8 {
        if (tintChannel > -1) m_state.m_grayscaleTintChannel = tintChannel;
        m_state.m_grayscaleUseLum = useLuminance;
        this->tweenValueAuto(target, 32, fadeTime, easingType, easingRate);
    }
    void triggerHueShift(float fadeTime, float degrees, int easingType, float easingRate) = win inline, m1 0x3486c4, imac 0x3be4b0, ios 0x271ca4 {
        this->tweenValueAuto(degrees, 38, fadeTime, easingType, easingRate);
    }
    void triggerInvertColor(float fadeTime, float target, float r, float g, float b, bool editRGB, bool tweenRGB, bool clampRGB, int easingType, float easingRate) = win 0x46f1b0, m1 0x34853c, imac 0x3be2f0, ios 0x271b1c;
    void triggerLensCircle(float fadeTime, float size, float fade, float strength, int targetID, int tintChannel, float screenOffsetX, float screenOffsetY, int easingType, float easingRate, bool relative) = win 0x46e0e0, m1 0x347734, imac 0x3bd390, ios 0x270d68;
    void triggerMotionBlurX(float fadeTime, float targetX, float intensity, float fade, int targetID, float followEase, bool dualDir, int refChannel, int easingType, float easingRate, bool relative, bool emptyOnly) = win inline, m1 0x347bf0, imac 0x3bd880, ios 0x2711f0 {
        m_state.m_blurRefChannel = refChannel;
        this->tweenValueAuto(fade, 48, fadeTime, 0, 0.f);
        this->tweenValueAuto(intensity, 47, fadeTime, 0, 0.f);
        this->tweenValueAuto(targetX, 19, fadeTime, easingType, easingRate);
        m_state.m_blurOnlyEmpty = emptyOnly;
        m_state.m_motionBlurFollowEaseX = followEase;
        m_state.m_motionBlurTargetIDX = targetID;
        m_state.m_motionBlurDual = dualDir;
        m_state.m_motionBlurRelative = relative;
    }
    void triggerMotionBlurY(float fadeTime, float targetY, float intensity, float fade, int targetID, float followEase, bool dualDir, int refChannel, int easingType, float easingRate, bool relative, bool emptyOnly) = win inline, m1 0x347cc4, imac 0x3bd950, ios 0x2712c4 {
        m_state.m_blurRefChannel = refChannel;
        this->tweenValueAuto(fade, 48, fadeTime, 0, 0.f);
        this->tweenValueAuto(intensity, 47, fadeTime, 0, 0.f);
        this->tweenValueAuto(targetY, 20, fadeTime, easingType, easingRate);
        m_state.m_blurOnlyEmpty = emptyOnly;
        m_state.m_motionBlurFollowEaseY = followEase;
        m_state.m_motionBlurTargetIDY = targetID;
        m_state.m_motionBlurDual = dualDir;
        m_state.m_motionBlurRelative = relative;
    }
    void triggerPinchX(float fadeTime, float targetX, float screenOffsetX, float radius, float modifier, bool target, int targetID, int easingType, float easingRate, bool relative) = win 0x46ed70, m1 0x3481ac, imac 0x3bdf10, ios 0x27178c;
    void triggerPinchY(float fadeTime, float targetY, float screenOffsetY, float radius, float modifier, bool target, int targetID, int easingType, float easingRate, bool relative) = win 0x46ef90, m1 0x34828c, imac 0x3bdff0, ios 0x27186c;
    void triggerPixelateX(float fadeTime, float targetX, bool snapGrid, bool hardEdges, int easingType, float easingRate, bool relative) = win inline, m1 0x347168, imac 0x3bccf0, ios 0x270810 {
        m_state.m_pixelateSnapGrid = snapGrid;
        if (m_state.m_pixelateTargetX < 1.f) m_state.m_pixelateTargetX = 1.f;
        this->tweenValueAuto(targetX, 9, fadeTime, easingType, easingRate);
        m_state.m_pixelateRelative = relative;
        m_state.m_pixelateHardEdges = hardEdges;
    }
    void triggerPixelateY(float fadeTime, float targetY, bool snapGrid, bool hardEdges, int easingType, float easingRate, bool relative) = win inline, m1 0x3471d4, imac 0x3bcd60, ios 0x27087c {
        m_state.m_pixelateSnapGrid = snapGrid;
        if (m_state.m_pixelateTargetY < 1.f) m_state.m_pixelateTargetY = 1.f;
        this->tweenValueAuto(targetY, 10, fadeTime, easingType, easingRate);
        m_state.m_pixelateRelative = relative;
        m_state.m_pixelateHardEdges = hardEdges;
    }
    void triggerRadialBlur(float fadeTime, float size, float intensity, float fade, int refChannel, float screenOffsetX, float screenOffsetY, bool target, int targetID, int easingType, float easingRate, bool emptyOnly) = win 0x46e5b0, m1 0x3479e4, imac 0x3bd670, ios 0x271008;
    void triggerSepia(float fadeTime, float target, int easingType, float easingRate) = win inline, m1 0x3484cc, imac 0x3be270, ios 0x271aac {
        this->tweenValueAuto(target, 33, fadeTime, easingType, easingRate);
    }
    void triggerShockLine(float speed, float thickness, bool rotate, bool flip, bool dual, bool invert, float strength, float waveWidth, float fadeIn, float fadeOut, float timeOffset, float screenOffset, int targetID, bool target, bool follow, bool relative, float maxSize, bool animate, float fadeTime, int easingType, float easingRate) = win 0x46c510, m1 0x34610c, imac 0x3bb970, ios 0x26f8dc;
    void triggerShockWave(float speed, float thickness, float strength, float waveWidth, float fadeIn, float fadeOut, float timeOffset, bool invert, float inner, float screenOffsetX, float screenOffsetY, int targetID, bool target, bool follow, bool relative, float outer, float maxSize, bool animate, float fadeTime, int easingType, float easingRate) = win 0x46b8b0, m1 0x3457bc, imac 0x3bac70, ios 0x26f03c;
    void triggerSplitScreenCols(float fadeTime, float targetX, int easingType, float easingRate) = win inline, m1 0x348a00, imac 0x3be870, ios 0x271fd8 {
        this->tweenValueAuto(targetX, 46, fadeTime, easingType, easingRate);
    }
    void triggerSplitScreenRows(float fadeTime, float targetY, int easingType, float easingRate) = win inline, m1 0x3489e8, imac 0x3be850, ios 0x271fc0 {
        this->tweenValueAuto(targetY, 45, fadeTime, easingType, easingRate);
    }
    void tweenValue(float fromValue, float toValue, int action, float duration, int easingType, float easingRate) = win 0x470f60, m1 0x349184, imac 0x3bf130, ios inline {
        m_state.tweenValue(fromValue, toValue, action, duration, easingType, easingRate);
    }
    void tweenValueAuto(float value, int action, float duration, int easingType, float easingRate) = win 0x470860, m1 0x3459f0, imac 0x3baef0, ios 0x26f270;
    void updateEffectOffsets(cocos2d::CCPoint center) = win 0x46aa50, m1 0x344764, imac 0x3b96e0, ios 0x26e390;
    void updateMotionBlurSpeedX(float x, float dt) = win inline, m1 0x348008, imac 0x3bdd10, ios 0x2715e8 {
        auto divisor = m_state.m_motionBlurFollowEaseX;
        if (divisor > 1.f) {
            if (dt > 0.f) divisor /= dt;
            m_state.m_motionBlurSpeedX += (x - m_state.m_motionBlurSpeedX) / divisor;
        }
        else m_state.m_motionBlurSpeedX = x;
    }
    void updateMotionBlurSpeedY(float y, float dt) = win inline, m1 0x34803c, imac 0x3bdd70, ios 0x27161c {
        auto divisor = m_state.m_motionBlurFollowEaseY;
        if (divisor > 1.f) {
            if (dt > 0.f) divisor /= dt;
            m_state.m_motionBlurSpeedY += (y - m_state.m_motionBlurSpeedY) / divisor;
        }
        else m_state.m_motionBlurSpeedY = y;
    }
    void updateShockLineCenter(cocos2d::CCPoint center) = win inline, m1 0x3462d8, imac 0x3bbb90, ios 0x26faa8 {
        if (m_state.m_shockLineCenterDirty) {
            if (!m_state.m_shockLineCenterMoving) m_state.m_shockLineCenterDirty = false;
            m_state.m_shockLineCenter = center;
        }
    }
    void updateShockWaveCenter(cocos2d::CCPoint center) = win inline, m1 0x345d6c, imac 0x3bb4d0, ios 0x26f56c {
        if (m_state.m_shockWaveCenterDirty) {
            if (!m_state.m_shockWaveCenterMoving) m_state.m_shockWaveCenterDirty = false;
            m_state.m_shockWaveCenter = center;
        }
    }
    bool updateZLayer(int minLayer, int maxLayer, bool noParticles) = win 0x471070, m1 0x3433f0, imac 0x3b82d0, ios 0x26d224;

    GJShaderState m_state;
    bool m_timesyncShaderActions;
    cocos2d::CCGLProgram* m_shader;
    cocos2d::CCRenderTexture* m_renderTexture;
    cocos2d::CCSprite* m_sprite;
    bool m_antiAlias;
    bool m_configuredAntiAlias;
    void* m_unk3d4;
    GJBaseGameLayer* m_gameLayer;
    cocos2d::CCPoint m_savedCameraPosition;
    float m_savedCameraRotation;
    float m_shockWaveTimeMult;
    float m_scaleFactor;
    float m_aspectRatio;
    cocos2d::CCSize m_screenSize;
    cocos2d::CCSize m_textureContentSize;
    cocos2d::CCSize m_targetTextureSize;
    // how much bigger is the texture compared to visibleSize
    cocos2d::CCSize m_targetTextureSizeExtra;
    int m_textureScaleUniform;
    int m_textureScaleInvUniform;
    int m_screenAspectUniform;
    int m_screenAspectINVUniform;
    int m_shaderPositionUniform;
    int m_blurRefColorUniform;
    int m_blurUseRefUniform;
    int m_blurIntensityUniform;
    int m_blurOnlyEmptyUniform;
    int m_shockWaveTimeUniform;
    int m_shockWaveTime1Uniform;
    int m_shockWaveTime2Uniform;
    int m_shockWaveTime3Uniform;
    int m_shockWaveTime4Uniform;
    int m_shockWaveStrengthUniform;
    int m_shockWaveWavesUniform;
    int m_shockWaveCenterUniform;
    int m_shockWaveInvertUniform;
    int m_shockWaveMinSizeUniform;
    int m_shockWaveMaxSizeUniform;
    int m_shockWaveMaxDistValUniform;
    float m_shockWaveTime1;
    float m_shockWaveTime2;
    float m_shockWaveTime3;
    float m_shockWaveTime4;
    float m_shockWaveMaxDistVal;
    float m_shockWaveMinSize;
    float m_shockWaveMaxSize;
    bool m_shockWaveUnk46c;
    int m_shockLineTimeUniform;
    int m_shockLineTime1Uniform;
    int m_shockLineTime2Uniform;
    int m_shockLineTime3Uniform;
    int m_shockLineTime4Uniform;
    int m_shockLineAxisUniform;
    int m_shockLineDirectionUniform;
    int m_shockLineDualUniform;
    int m_shockLineWavesUniform;
    int m_shockLineStrengthUniform;
    int m_shockLineCenterUniform;
    int m_shockLineMaxDistValUniform;
    float m_shockLineTime1;
    float m_shockLineTime2;
    float m_shockLineTime3;
    float m_shockLineTime4;
    float m_shockLineMaxDistVal;
    int m_unk4b4;
    int m_unk4b8;
    int m_unk4bc;
    int m_glitchBotUniform;
    int m_glitchTopUniform;
    int m_glitchXOffsetUniform;
    int m_glitchColOffsetUniform;
    int m_glitchRndUniform;
    int m_chromaticXOffUniform;
    int m_chromaticYOffUniform;
    int m_cGRGBOffsetUniform;
    int m_cGYOffsetUniform;
    int m_cGTimeUniform;
    int m_cGStrengthUniform;
    int m_cGHeightUniform;
    int m_cGLineThickUniform;
    int m_cGLineStrengthUniform;
    int m_lensCircleOriginUniform;
    int m_lensCircleStartUniform;
    int m_lensCircleEndUniform;
    int m_lensCircleStrengthUniform;
    int m_lensCircleTintUniform;
    int m_lensCircleAdditiveUniform;
    int m_radialBlurCenterUniform;
    int m_radialBlurValueUniform;
    int m_blurFadeUniform;
    int m_motionBlurValueUniform;
    int m_motionBlurMultUniform;
    int m_motionBlurDualUniform;
    int m_bulgeValueUniform;
    int m_bulgeValue2Uniform;
    int m_bulgeOriginUniform;
    int m_bulgeRadiusUniform;
    int m_pinchValueUniform;
    int m_pinchCenterPosUniform;
    int m_pinchCalcUniform;
    int m_pinchRadiusUniform;
    int m_grayscaleValueUniform;
    int m_grayscaleTintUniform;
    int m_grayscaleUseLumUniform;
    int m_sepiaValueUniform;
    int m_invertColorValueUniform;
    int m_hueShiftCosAUniform;
    int m_hueShiftSinAUniform;
    int m_colorChangeCUniform;
    int m_colorChangeBUniform;
    int m_rowmodUniform;
    int m_colmodUniform;
    int m_rowmodCalcUniform;
    int m_colmodCalcUniform;
    int m_splitXStartUniform;
    int m_splitXRangeUniform;
    int m_splitXRangeMultUniform;
    int m_splitYStartUniform;
    int m_splitYRangeUniform;
    int m_splitYRangeMultUniform;
}

[[link(android)]]
class ShardsPage : FLAlertLayer {
    ShardsPage() {
        m_pages = nullptr;
        m_prevButton = nullptr;
        m_nextButton = nullptr;
        m_tierSprite = nullptr;
        m_page = -1;
    }
    ~ShardsPage() = win inline, m1 0x41aa34, imac 0x4b23b0, ios 0x39a884 {
        CC_SAFE_RELEASE(m_pages);
    }

    static ShardsPage* create() = win inline, m1 0x41ac58, imac 0x4b26e0 {
        auto ret = new ShardsPage();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x471620, imac 0x4b2820, m1 0x41ad58, ios 0x39a9e4;
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x41ca28, imac 0x4b47d0, ios 0x39c3c8;
    virtual void keyBackClicked() = win 0x84650, m1 0x41c9ac, imac 0x4b4760, ios 0x39c34c;
    virtual void show() = win 0x867a0, m1 0x41c824, imac 0x4b45d0, ios 0x39c1d8;

    void FLAlert_Clicked(FLAlertLayer*, bool);
    void goToPage(int page) = win inline, imac 0x4b4480, m1 0x41c6d8, ios 0x39c094 {
        if (page < 4 && page != m_page) {
            m_page = page;
            for (int i = 0; i < m_pages->count(); i++) {
                auto arr = static_cast<cocos2d::CCArray*>(m_pages->objectForKey(i));
                CCObject* obj;
                CCARRAY_FOREACH(arr, obj) {
                    static_cast<cocos2d::CCNode*>(obj)->setVisible(i == page);
                }
            }
            m_prevButton->setVisible(m_page > 0);
            m_nextButton->setVisible(m_page < 3);
            m_tierSprite->setDisplayFrame(cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(page > 1 ? "tier2Icon_001.png" : "tier1Icon_001.png"));
        }
    }
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onIconInfo(cocos2d::CCObject* sender) = win 0x474610, imac 0x4b4410, m1 0x41c660, ios 0x39c01c;
    void onSwitchPage(cocos2d::CCObject* sender) = win 0x474650, imac 0x4b4440, m1 0x41c698, ios 0x39c054;

    cocos2d::CCDictionary* m_pages;
    CCMenuItemSpriteExtra* m_prevButton;
    CCMenuItemSpriteExtra* m_nextButton;
    cocos2d::CCSprite* m_tierSprite;
    int m_page;
}

[[link(android)]]
class ShareCommentDelegate {
    virtual void shareCommentClosed(gd::string, ShareCommentLayer*) {}
}

[[link(android)]]
class ShareCommentLayer : FLAlertLayer, TextInputDelegate, UploadActionDelegate, UploadPopupDelegate {
    // virtual ~ShareCommentLayer();

    static ShareCommentLayer* create(gd::string title, int charLimit, CommentType type, int ID, gd::string desc) = win 0x474930, m1 0x4fc050, imac 0x5c7580, ios 0x1d52a0;

    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x4fd970, imac 0x5c9120, ios 0x1d673c;
    virtual void keyBackClicked() = win 0x476170, m1 0x4fd8c8, imac 0x5c9070, ios 0x1d6694;
    virtual void textInputOpened(CCTextInputNode* textInput) = m1 0x4fdb34, imac 0x5c92d0, ios 0x1d6848 {}
    virtual void textInputClosed(CCTextInputNode* textInput) = win 0x4761c0, imac 0x5c9160, m1 0x4fd9a8, ios 0x1d6774;
    virtual void textChanged(CCTextInputNode* textInput) = win 0x476300, imac 0x5c92f0, m1 0x4fdb3c, ios 0x1d6850;
    virtual void uploadActionFinished(int ID, int unk) = win 0x476550, imac 0x5c9560, m1 0x4fddcc, ios 0x1d6a10;
    virtual void uploadActionFailed(int ID, int unk) = win 0x4765e0, m1 0x4fdf04, imac 0x5c9660, ios 0x1d6aa0;
    virtual void onClosePopup(UploadActionPopup*) = win 0x476690, m1 0x4fe064, imac 0x5c9780, ios 0x1d6b24;

    bool init(gd::string title, int charLimit, CommentType type, int ID, gd::string desc) = win 0x474b40, imac 0x5c7820, m1 0x4fc27c, ios 0x1d53f0;
    void onClear(cocos2d::CCObject* sender) = win 0x475c20, imac 0x5c8b70, m1 0x4fd404, ios 0x1d61f0;
    void onClose(cocos2d::CCObject* sender) = win 0x476130, imac 0x5c8c10, m1 0x4fd4bc, ios 0x1d62ac;
    void onPercent(cocos2d::CCObject* sender) = win 0x475c90, imac 0x5c89e0, m1 0x4fd26c, ios 0x1d6124;
    void onShare(cocos2d::CCObject* sender) = win 0x475d90, imac 0x5c8c60, m1 0x4fd510, ios 0x1d6300;
    void updateCharCountLabel() = ios 0x1d690c, win inline, imac 0x5c9450, m1 0x4fdcb8 {
        if (m_charLimit * .9f <= m_descText.size()) {
            m_charCountLabel->setColor({ 255, 0, 0 });
            m_charCountLabel->setOpacity(255);
        } else if (m_charLimit * .7f <= m_descText.size()) {
            m_charCountLabel->setColor({ 0, 0, 0 });
            m_charCountLabel->setOpacity(255);
        } else {
            m_charCountLabel->setColor({ 0, 0, 0 });
            m_charCountLabel->setOpacity(125);
        }
        m_charCountLabel->setString(cocos2d::CCString::createWithFormat("%i", m_charLimit - m_descText.size())->getCString());
    }
    void updateDescText(gd::string desc) = win 0x476420, ios inline, imac 0x5c9040, m1 0x4fd8a0 {
        m_descText = desc;
        this->updateCharCountLabel();
    }
    void updatePercentLabel() = win 0x475cb0, imac 0x5c8ab0, m1 0x4fd33c;

    int m_charLimit;
    int m_itemID;
    CommentType m_commentType;
    CCTextInputNode* m_commentInput;
    gd::string m_descText;
    gd::string m_placeholderText;
    cocos2d::CCLabelBMFont* m_charCountLabel;
    cocos2d::CCLabelBMFont* m_percentLabel;
    UploadActionPopup* m_uploadPopup;
    bool m_uploadSuccess;
    bool m_percentEnabled;
    int m_percent;
    ShareCommentDelegate* m_delegate;
}

[[link(android)]]
class ShareLevelLayer : FLAlertLayer {
    ShareLevelLayer() {
        m_level = nullptr;
        m_starsRequested = 0;
        m_starButtons = nullptr;
    }
    ~ShareLevelLayer() = win inline, m1 0x219160, imac 0x26ddf0, ios 0x273fac {
        CC_SAFE_RELEASE(m_level);
        CC_SAFE_RELEASE(m_starButtons);
    }

    static ShareLevelLayer* create(GJGameLevel* level) = ios 0x27405c, win inline, m1 0x2193c8, imac 0x26e170 {
        auto ret = new ShareLevelLayer();
        if (ret->init(level)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x84650, m1 0x21ae64, imac 0x26fa70, ios 0x275560;

    CCMenuItemSpriteExtra* getStarsButton(int btnID, cocos2d::SEL_MenuHandler callback, cocos2d::CCMenu* menu, float scale) = win inline {
        auto btnSpr = ButtonSprite::create(cocos2d::CCString::createWithFormat("%i", btnID)->getCString(), 20, 0, .5f, true, "bigFont.fnt", "GJ_button_01.png", 30.f);
        auto btn = CCMenuItemSpriteExtra::create(btnSpr, this, callback);
        btn->setScale(scale);
        btn->m_baseScale = scale;
        if (menu) menu->addChild(btn);
        return btn;
    }
    bool init(GJGameLevel* level) = ios 0x274118, win 0x4769e0, m1 0x2194cc, imac 0x26e2c0;
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onSettings(cocos2d::CCObject* sender) = win 0x477c40;
    void onShare(cocos2d::CCObject* sender) = ios 0x274ff8, win 0x477d90, imac 0x26f3c0, m1 0x21a7ec;
    void selectRating(cocos2d::CCObject*) = win 0x477ab0, m1 0x21aae0, imac 0x26f680, ios 0x27526c;
    void setupStars() = win 0x4776a0, m1 0x21a0b8, imac 0x26f010;

    GJGameLevel* m_level;
    int m_starsRequested;
    cocos2d::CCArray* m_starButtons;
    cocos2d::CCSprite* m_difficultySprite;
}

[[link(android)]]
class ShareLevelSettingsLayer : FLAlertLayer, NumberInputDelegate {
    // virtual ~ShareLevelSettingsLayer();
    ShareLevelSettingsLayer() {}

    static ShareLevelSettingsLayer* create(GJGameLevel* level) = win inline, m1 0x21ac5c, imac 0x26f7e0, ios 0x2753e8 {
        auto ret = new ShareLevelSettingsLayer();
        if (ret->init(level)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x4799c0, m1 0x21c6d0, imac 0x271520, ios 0x276b68;

    bool init(GJGameLevel*) = win 0x478c00, imac 0x270760, m1 0x21b9b8, ios 0x27603c;
    void onClose(cocos2d::CCObject* sender) = win 0x479940;
    void onUnlisted(cocos2d::CCObject* sender) = win 0x479620, imac 0x271250, m1 0x21c440;
    void onUnlistedFriendsOnly(cocos2d::CCObject* sender);
    void updateSettingsState();

    cocos2d::CCLabelBMFont* m_passwordLabel;
    GJGameLevel* m_level;
    CCMenuItemToggler* m_friendsOnlyToggler;
    cocos2d::CCLabelBMFont* m_friendsOnlyLabel;
}

[[link(android)]]
class ShareListLayer : FLAlertLayer {
    ShareListLayer() {
        m_list = nullptr;
        m_friendsOnlyToggler = nullptr;
        m_friendsOnlyLabel = nullptr;
    }
    ~ShareListLayer() = win inline, m1 0x2e2b7c, imac 0x34e380, ios 0x246fbc {
        CC_SAFE_RELEASE(m_list);
    }

    static ShareListLayer* create(GJLevelList* list) = win inline, m1 0x2e16e4, imac 0x34cec0 {
        auto ret = new ShareListLayer();
        if (ret->init(list)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x84650, m1 0x2e43a4, imac 0x34fe60, ios 0x24836c;

    bool init(GJLevelList*) = win 0x2f50d0, m1 0x2e2da0, imac 0x34e6b0;
    void onClose(cocos2d::CCObject* sender);
    void onInfo(cocos2d::CCObject* sender) = win 0x2f6270, m1 0x2e4024, imac 0x34faa0;
    void onShare(cocos2d::CCObject* sender) = win 0x2f6530, m1 0x2e3f10, imac 0x34f9a0;
    void onUnlisted(cocos2d::CCObject* sender) = win 0x2f63e0, imac 0x34fb50, m1 0x2e40dc;
    void updateUnlistedF() = imac 0x34fc50, m1 0x2e41dc, win 0x2f6450;

    GJLevelList* m_list;
    CCMenuItemToggler* m_friendsOnlyToggler;
    cocos2d::CCLabelBMFont* m_friendsOnlyLabel;
}

[[link(android)]]
class SimpleObject : cocos2d::CCObject {
    // virtual ~SimpleObject();

    static SimpleObject* create();

    bool init();

    cocos2d::ccColor3B m_color;
}

[[link(android)]]
class SimplePlayer : cocos2d::CCSprite {
    // virtual ~SimplePlayer();

    inline SimplePlayer() {
        m_firstLayer = nullptr;
        m_secondLayer = nullptr;
        m_birdDome = nullptr;
        m_outlineSprite = nullptr;
        m_detailSprite = nullptr;
        m_robotSprite = nullptr;
        m_spiderSprite = nullptr;
        m_unknown = 0;
        m_hasGlowOutline = false;
        m_iconRequestID = 0;
        m_hasCustomGlowColor = false;
        m_iconLoaded = false;
    }

    static SimplePlayer* create(int) = ios 0x303450, win 0x271ac0, imac 0x357600, m1 0x2ead40;

    virtual void setOpacity(unsigned char) = win 0x272e70, m1 0x2f092c, imac 0x35d690, ios 0x307a98;
    virtual void setColor(cocos2d::ccColor3B const&) = win 0x272320, imac 0x35d330, m1 0x2f05c0, ios 0x307734;

    void asyncLoadIcon(int, IconType) = m1 0x2f0394, imac 0x35d120;
    void createRobotSprite(int frame) = win inline, imac 0x3576c0, m1 0x2eadfc, ios 0x303500 {
        if (m_robotSprite) return;
        auto robotSprite = GJRobotSprite::create(frame);
        m_robotSprite = robotSprite;
        addChild(robotSprite);
        m_robotSprite->setVisible(false);
    }
    void createSpiderSprite(int) = win 0x272290, imac 0x357720, m1 0x2eae5c, ios 0x303560;
    void disableCustomGlowColor() {
        m_hasCustomGlowColor = false;
    }

    inline void disableGlowOutline() {
        disableCustomGlowColor();
        m_hasGlowOutline = false;
        updateColors();
    }
    void enableCustomGlowColor(cocos2d::ccColor3B const& color) {
        m_hasCustomGlowColor = true;
        m_glowColor = color;
    }
    void hideAll() = win inline, ios inline, imac 0x35d230, m1 0x2f04ac {
        m_firstLayer->setVisible(false);
        m_secondLayer->setVisible(false);
        if (m_birdDome) m_birdDome->setVisible(false);
        if (m_outlineSprite) m_outlineSprite->setVisible(false);
        if (m_detailSprite) m_detailSprite->setVisible(false);
        if (m_robotSprite) m_robotSprite->setVisible(false);
        if (m_spiderSprite) m_spiderSprite->setVisible(false);
    }
    void hideSecondary() = win inline, imac 0x35d3c0, m1 0x2f0650 {
        m_secondLayer->setVisible(false);
        m_birdDome->setVisible(false);
        m_detailSprite->setVisible(false);
        m_outlineSprite->setVisible(false);
        if (m_robotSprite) {
            m_robotSprite->hideSecondary();
            m_robotSprite->m_glowSprite->setVisible(false);
        }
        if (m_spiderSprite) {
            m_spiderSprite->hideSecondary();
            m_spiderSprite->m_glowSprite->setVisible(false);
        }
    }
    void iconFinishedLoading(int, IconType) = m1 0x2f0570, imac 0x35d2e0;
    bool init(int) = ios 0x307278, win 0x271bb0, m1 0x2efd98, imac 0x35ca00;
    void setColors(cocos2d::ccColor3B const& color1, cocos2d::ccColor3B const& color2) = win inline, ios inline, imac 0x35b770, m1 0x2eec44 {
        m_firstLayer->setColor(color1);
        m_secondLayer->setColor(color2);
        updateColors();
    }
    void setFrames(char const*, char const*, char const*, char const*, char const*) = ios 0x307878, win 0x272c40, imac 0x35d470, m1 0x2f0704;

    inline void setGlowOutline(cocos2d::ccColor3B color) {
        enableCustomGlowColor(color);
        m_hasGlowOutline = true;
        updateColors();
    }
    void setSecondColor(cocos2d::ccColor3B const& color) {
        m_secondLayer->setColor(color);
        updateColors();
    }
    void updateColors() = ios 0x3062ec, win 0x272350, imac 0x35b230, m1 0x2ee780;
    void updatePlayerFrame(int, IconType) = ios 0x303714, win 0x272710, imac 0x3578d0, m1 0x2eb020;

    cocos2d::CCSprite* m_firstLayer;
    cocos2d::CCSprite* m_secondLayer;
    cocos2d::CCSprite* m_birdDome;
    cocos2d::CCSprite* m_outlineSprite;
    cocos2d::CCSprite* m_detailSprite;
    GJRobotSprite* m_robotSprite;
    GJSpiderSprite* m_spiderSprite;
    int m_unknown;
    bool m_hasGlowOutline;
    int m_iconRequestID;
    bool m_hasCustomGlowColor;
    cocos2d::ccColor3B m_glowColor;
    bool m_iconLoaded;
}

[[link(android)]]
class SlideInLayer : cocos2d::CCLayerColor {
    // virtual ~SlideInLayer();

    static SlideInLayer* create();

    virtual bool init() = imac 0x27c670, m1 0x2265e8;
    virtual void draw() = m1 0x226cac, imac 0x27cda0;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x226ce8, imac 0x27cdd0;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x226d08, imac 0x27ce30;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x226cf8, imac 0x27cdf0;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = m1 0x226d00, imac 0x27ce10;
    virtual void registerWithTouchDispatcher() = m1 0x2269cc, imac 0x27caa0;
    virtual void keyBackClicked() = m1 0x226a04, imac 0x27cae0;
    virtual void customSetup() = m1 0x226968, imac 0x27ca20;
    virtual void enterLayer() = m1 0x226994, imac 0x27ca70;
    virtual void exitLayer(cocos2d::CCObject*) = imac 0x27cb20, m1 0x226a28;
    virtual void showLayer(bool) = imac 0x27cb70, m1 0x226a8c;
    virtual void hideLayer(bool) = imac 0x27cc60, m1 0x226b7c;
    virtual void layerVisible() = m1 0x226c4c, imac 0x27cd40;
    virtual void layerHidden() = m1 0x226c5c, imac 0x27cd60;
    virtual void enterAnimFinished() = m1 0x226c48, imac 0x27cd30;
    virtual void disableUI() = m1 0x22696c, imac 0x27ca30;
    virtual void enableUI() = m1 0x226980, imac 0x27ca50;

    cocos2d::CCLayer* m_mainLayer;
    cocos2d::CCMenu* m_buttonMenu;
    cocos2d::CCSprite* m_exitSprite;
    CCMenuItemSpriteExtra* m_exitButton;
    cocos2d::CCPoint m_endPosition;
    cocos2d::CCPoint m_startPosition;
    void* m_delegate;
    bool m_closeOnHide;
}

[[link(android), depends(SliderTouchLogic)]]
class Slider : cocos2d::CCLayer {
    // virtual ~Slider();

    static Slider* create(cocos2d::CCNode* target, cocos2d::SEL_MenuHandler handler, char const* bar, char const* groove, char const* thumb, char const* thumbSel, float scale) = win 0x71720, imac 0x2f0420, m1 0x28a3b0, ios 0x2ef18c;
    static Slider* create(cocos2d::CCNode* target, cocos2d::SEL_MenuHandler handler) = win inline, imac 0x2f01e0, m1 0x28a198, ios 0x2ef140 {
        return Slider::create(target, handler, 1.f);
    }
    static Slider* create(cocos2d::CCNode* target, cocos2d::SEL_MenuHandler handler, float scale) = win inline, imac 0x2f0300, m1 0x28a29c, ios 0x2ef168 {
        return Slider::create(target, handler, "sliderBar.png", "slidergroove.png", "sliderthumb.png", "sliderthumbsel.png", scale);
    }

    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71d10, m1 0x28aa38, imac 0x2f0b80, ios 0x2ef61c;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71d50, m1 0x28aa78, imac 0x2f0c00, ios 0x2ef65c;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71d30, m1 0x28aa58, imac 0x2f0bc0, ios 0x2ef63c;

    void disableSlider() = win inline, m1 0x28a66c, imac 0x2f06f0, ios 0x2ef448 {
        if (!m_enabled) return;
        m_enabled = false;
        m_touchLogic->setTouchEnabled(false);
        m_sliderBar->setColor({ 150, 150, 150 });
        m_groove->setColor({ 150, 150, 150 });
        if (auto normalImage = static_cast<cocos2d::CCSprite*>(m_touchLogic->m_thumb->getNormalImage())) {
            normalImage->setColor({ 150, 150, 150 });
        }
    }
    void disableTouch();
    void enableSlider() = win inline, m1 0x28a8c0, imac 0x2f0990, ios 0x2ef530 {
        if (m_enabled) return;
        m_enabled = true;
        m_touchLogic->setTouchEnabled(true);
        m_sliderBar->setColor({ 255, 255, 255 });
        m_groove->setColor({ 255, 255, 255 });
        if (auto normalImage = static_cast<cocos2d::CCSprite*>(m_touchLogic->m_thumb->getNormalImage())) {
            normalImage->setColor({ 255, 255, 255 });
        }
    }
    bool getLiveDragging() {
        return m_touchLogic->m_activateThumb;
    }
    SliderThumb* getThumb() {
        return m_touchLogic->m_thumb;
    }
    float getValue() {
        return this->getThumb()->getValue();
    }
    void hideGroove(bool visibility) {
        m_groove->setVisible(!visibility);
    }
    bool init(cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, char const*, char const*, float) = ios 0x2ef29c, win 0x71850, imac 0x2f0540, m1 0x28a4c0;
    void setBarVisibility(bool visibility) {
        m_sliderBar->setVisible(visibility);
    }
    void setLiveDragging(bool activateThumb) {
        m_touchLogic->m_activateThumb = activateThumb;
    }
    void setMaxOffset(float offset) {
        m_touchLogic->setMaxOffset(offset);
    }
    void setRotated(bool rotated) {
        m_touchLogic->setRotated(rotated);
        m_groove->setRotation((rotated) ? -90 : 0);
    }
    void setValue(float val) = ios 0x2ef504, win 0x71c00, imac 0x2f0880, m1 0x28a7d8;
    TodoReturn sliderBegan();
    TodoReturn sliderEnded();
    void updateBar() {
        float local_8;
        auto thumb = this->getThumb();
        if (!thumb->m_vertical) {
            local_8 = thumb->getPositionX();
        } else {
            local_8 = thumb->getPositionY();
        }

        float local_c = thumb->getScale() * thumb->m_length * 0.5f + local_8;
        float fVar6 = m_width;
        local_c = local_c / (thumb->getScale() * thumb->m_length);
        if (fVar6 * local_c <= fVar6) {
            fVar6 = fVar6 * local_c;
        }

        this->m_sliderBar->setTextureRect(cocos2d::CCRect(0.0f, 0.0f, fVar6, m_height));
    }

    SliderTouchLogic* m_touchLogic;
    cocos2d::CCSprite* m_sliderBar;
    cocos2d::CCSprite* m_groove;
    float m_width;
    float m_height;
    SliderDelegate* m_delegate;
    bool m_enabled;
}

[[link(android)]]
class SliderDelegate {
    virtual void sliderBegan(Slider*) {}
    virtual void sliderEnded(Slider*) {}
}

[[link(android)]]
class SliderThumb : cocos2d::CCMenuItemImage {
    // virtual ~SliderThumb();
    SliderThumb() {
        m_length = 0.f;
        m_vertical = false;
    }

    static SliderThumb* create(cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*) = win inline, m1 0x2893f4, imac 0x2ef2e0, ios 0x2ee934 {
        auto ret = new SliderThumb();
        if (ret->init(p0, p1, p2, p3)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    float getValue() = ios 0x2eea84, win 0x712b0, imac 0x2ef4f0, m1 0x2895e4;
    bool init(cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*) = win inline, m1 0x2894ec, imac 0x2ef3d0, ios inline {
        m_length = 200.f;
        return cocos2d::CCMenuItemImage::initWithNormalImage(p2, p3, nullptr, p0, p1);
    }
    void setMaxOffset(float offset) {
        float value = getValue();
        m_length = offset;
        this->setPosition({0, 0});
        setValue(value);
    }
    void setRotated(bool rotated) {
        float value = getValue();
        m_vertical = rotated;
        this->setPosition({0, 0});
        setValue(value);
    }
    void setValue(float) = ios 0x2eeb08, win 0x71340, imac 0x2ef590, m1 0x289668;

    float m_length;
    bool m_vertical;
}

[[link(android), depends(SliderThumb)]]
class SliderTouchLogic : cocos2d::CCMenu {
    // virtual ~SliderTouchLogic();
    SliderTouchLogic() {}

    static SliderTouchLogic* create(cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, float) = win inline, m1 0x289840, imac 0x2ef7b0, ios 0x2eec80 {
        auto ret = new SliderTouchLogic();
        if (ret->init(p0, p1, p2, p3, p4)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x714b0, m1 0x289cc8, imac 0x2efc70, ios 0x2eeeb0;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x715a0, imac 0x2efea0, m1 0x289edc, ios 0x2eefa8;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71560, m1 0x289e2c, imac 0x2efde0, ios 0x2eef58;
    virtual void registerWithTouchDispatcher() = win 0x716d0, m1 0x28a160, imac 0x2f01a0, ios 0x2ef108;

    bool init(cocos2d::CCNode*, cocos2d::SEL_MenuHandler, char const*, char const*, float) = win inline, m1 0x28998c, imac 0x2ef8f0, ios 0x2eedc4 {
        if (!cocos2d::CCMenu::init()) return false;
        m_rotated = false;
        m_length = p4 * 200.f;
        this->setPosition({ 0.f, 0.f });
        m_thumb = SliderThumb::create(p0, p1, p2, p3);
        this->addChild(m_thumb);
        m_thumb->setScale(p4);
        m_activateThumb = false;
        return true;
    }
    void setMaxOffset(float offset) {
        float newOffset = m_thumb->getScale() * offset;
        m_length = newOffset;
        m_thumb->setMaxOffset(newOffset);
    }
    void setRotated(bool rotated) {
        m_rotated = rotated;
        m_thumb->setRotated(rotated);
    }

    float m_unknownUnused;
    float m_length;
    SliderThumb* m_thumb;
    Slider* m_slider;
    bool m_activateThumb;
    cocos2d::CCPoint m_position;
    bool m_rotated;
}

[[link(android)]]
class SmartGameObject : GameObject {
    // virtual ~SmartGameObject();
    SmartGameObject() {
        m_referenceOnly = false;
    }

    static SmartGameObject* create(char const* frame) = win inline {
        auto ret = new SmartGameObject();
        if (ret->init(frame)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4873d0, imac 0x1a0680, m1 0x1631f0, ios 0x379920;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x487260, m1 0x162cf4, imac 0x1a00c0, ios 0x37978c;

    bool init(char const* frame) = win inline {
        if (!GameObject::init(frame)) return false;
        m_baseFrame = frame;
        m_classType = GameObjectClassType::Smart;
        m_bUnkBool2 = false;
        return true;
    }
    void updateSmartFrame() = win 0x487070, m1 0x162ab4, imac 0x19fe80, ios 0x379684;

    // property 157
    bool m_referenceOnly;
    gd::string m_baseFrame;
    gd::string m_smartFrame;
}

[[link(android)]]
class SmartTemplateCell : TableViewCell {
    // virtual ~SmartTemplateCell();
    SmartTemplateCell(char const*, float, float);

    virtual bool init() = win 0x3c7f0, m1 0x1f57a0, imac 0x246ed0, ios 0x1158f0;
    virtual void draw() = win 0xad710, imac 0x246fa0, m1 0x1f585c, ios 0x1159a0;

    void loadFromObject(GJSmartTemplate*) = win 0xbd8c0, m1 0x1eb3d4, imac 0x23b400, ios 0x10de08;
    void onClick(cocos2d::CCObject* sender) = win 0xbdda0, m1 0x1f57ac, imac 0x246ef0, ios 0x1158fc;
    void updateBGColor(int) = win 0xbdcb0, m1 0x1eb6ec, imac 0x23b740, ios 0x10e11c;

    GJSmartTemplate* m_smartTemplate;
}

[[link(android)]]
class SongCell : TableViewCell {
    // virtual ~SongCell();
    SongCell(char const*, float, float);

    virtual bool init() = win 0x3c7f0, m1 0x1f13c8, imac 0x241b80, ios 0x112de8;
    virtual void draw() = win 0xad710, imac 0x241bc0, m1 0x1f13f8, ios 0x112e18;

    void loadFromObject(SongObject*) = ios 0x1081fc, win 0xb3990, imac 0x235330, m1 0x1e5430;
    void onClick(cocos2d::CCObject* sender) = win 0xb3da0, m1 0x1f13d4, imac 0x241ba0, ios 0x112df4;
    void updateBGColor(int index) = win inline, m1 0x1e5870, imac 0x235710, ios 0x10862c {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
        m_backgroundLayer->setOpacity(255);
    }

    SongObject* m_songObject;
}

[[link(android)]]
class SongInfoLayer : FLAlertLayer {
    // virtual ~SongInfoLayer();

    static SongInfoLayer* create(gd::string, gd::string, gd::string, gd::string, gd::string, gd::string, int, gd::string, int) = win 0x47a130, m1 0x51a5bc, imac 0x5e8d00, ios 0x3a033c;
    static SongInfoLayer* create(int) = win 0x479f20, m1 0x51a108, imac 0x5e8700, ios 0x39ff80;

    virtual void keyBackClicked() = win 0x84650, m1 0x51be3c, imac 0x5ea640, ios 0x3a1940;

    bool init(gd::string, gd::string, gd::string, gd::string, gd::string, gd::string, int, gd::string, int) = win 0x47a450, m1 0x51aa04, imac 0x5e9240;
    void onBPM(cocos2d::CCObject* sender);
    void onClose(cocos2d::CCObject* sender);
    void onDownload(cocos2d::CCObject* sender);
    void onFB(cocos2d::CCObject* sender);
    void onMenuMusic(cocos2d::CCObject* sender);
    void onNG(cocos2d::CCObject* sender);
    void onPracticeMusic(cocos2d::CCObject* sender);
    void onYT(cocos2d::CCObject* sender);
    void showCustomMusicUnlockInfo() = m1 0x51bbd4, imac 0x5ea430;

    gd::string m_downloadLink;
    gd::string m_newgroundsLink;
    gd::string m_youtubeLink;
    gd::string m_facebookLink;
    int m_songID;
    int m_musicCustomizerMessageIndex;
}

[[link(android)]]
class SongInfoObject : cocos2d::CCNode {
    // virtual ~SongInfoObject();

    static SongInfoObject* create(cocos2d::CCDictionary*) = win 0x32f0d0, m1 0x4c8ddc, imac 0x574cd0, ios 0x158280;
    static SongInfoObject* create(int songID, gd::string songName, gd::string artistName, int artistID, float filesize, gd::string youtubeVideo, gd::string youtubeChannel, gd::string url, int nongType, gd::string extraArtistIDs, bool isNew, int libraryOrder, int priority) = win 0x3300c0, m1 0x4cf4f4, imac 0x57c260, ios 0x15c574;
    static SongInfoObject* create(int) = win 0x32ef70, imac 0x57f2e0, m1 0x4d21ac, ios 0x15e750;

    virtual void encodeWithCoder(DS_Dictionary*) = win 0x3309a0, m1 0x4d2d3c, imac 0x5800d0, ios 0x15f0b0;
    virtual bool canEncode() = m1 0x4d2ed0, imac 0x580290, ios 0x15f244 { return true; }

    void addTags(gd::string);
    TodoReturn containsTag(int);
    static SongInfoObject* createWithCoder(DS_Dictionary*) = win 0x330690, m1 0x4d2740, imac 0x57f980, ios 0x15ebf0;
    TodoReturn getArtistNames(int);
    TodoReturn getTagsString(bool);
    bool init(int songID, gd::string songName, gd::string artistName, int artistID, float filesize, gd::string youtubeVideo, gd::string youtubeChannel, gd::string url, int nongType, gd::string extraArtistIDs, bool isNew, int libraryOrder, int priority) = win 0x3302f0, m1 0x4d2334, imac 0x57f4d0, ios 0x15e928;
    TodoReturn updateArtists(gd::string);

    int m_songID;
    gd::string m_songName;
    gd::string m_artistName;
    gd::string m_youtubeVideo;
    gd::string m_youtubeChannel;
    gd::string m_songUrl;
    int m_artistID;
    float m_fileSize;
    int m_nongType;
    gd::string m_extraArtists;
    bool m_isUnknownSong; //isUnloaded
    bool m_autoDownload; //isVerified
    bool m_isBlocked;
    int m_priority;
    int m_unkInt;
    int m_BPM;
    bool m_isNew;
    int m_libraryOrder;
    int m_songOrder;
    gd::string m_extraArtistNames;
    gd::unordered_set<int> m_artistIDs;
    gd::set<int> m_tags;
    gd::string m_longTagsString;
    gd::string m_shortTagsString;
}

[[link(android)]]
class SongObject : cocos2d::CCObject {
    // virtual ~SongObject();

    SongObject() = win inline {
        m_audioID = 0;
    }

    static SongObject* create(int audioID) = win inline, m1 0x1f12d0, imac 0x241a00, ios 0x112d44 {
        auto ret = new SongObject();
        if(ret->init(audioID)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(int audioID) = win inline {
        m_audioID = audioID;
        return true;
    }

    int m_audioID;
}

[[link(android)]]
class SongOptionsLayer : FLAlertLayer {
    // virtual ~SongOptionsLayer();
    SongOptionsLayer() {
        m_delegate = nullptr;
    }

    static SongOptionsLayer* create(CustomSongDelegate*) = win inline, m1 0x1b931c, imac 0x204140, ios 0x147f88 {
        auto ret = new SongOptionsLayer();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0xc4920, imac 0x205a20, m1 0x1baab4, ios 0x1491e0;

    bool init(CustomSongDelegate*) = win 0xc3880, m1 0x1b9c60, imac 0x204b20, ios 0x1484fc;
    void onClose(cocos2d::CCObject* sender) = win 0xc47b0, m1 0x1ba710, imac 0x2056b0, ios 0x148ed0;
    void onFadeIn(cocos2d::CCObject* sender) = win 0xc42a0, m1 0x1ba62c, imac 0x2055f0, ios 0x148dec;
    void onFadeOut(cocos2d::CCObject* sender) = win 0xc42f0, m1 0x1ba678, imac 0x205630, ios 0x148e38;
    void onInfo(cocos2d::CCObject* sender) = win 0xc4650, m1 0x1ba820, imac 0x2057b0, ios 0x148fe0;
    void onPlayback(cocos2d::CCObject* sender) = win 0xc4390, m1 0x1ba8fc, imac 0x205860, ios 0x149078;
    void onSongPersistent(cocos2d::CCObject* sender) = win 0xc4340, m1 0x1ba6c4, imac 0x205670, ios 0x148e84;
    void updatePlaybackBtn() = win inline, m1 0x1baa48, imac 0x2059b0, ios 0x149174 {
        auto playbackSprite = static_cast<cocos2d::CCSprite*>(m_playbackButton->getNormalImage());
        if (FMODAudioEngine::sharedEngine()->isMusicPlaying(0)) {
            playbackSprite->setDisplayFrame(cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("GJ_stopMusicBtn_001.png"));
        } else {
            playbackSprite->setDisplayFrame(cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("GJ_playMusicBtn_001.png"));
        }
    }

    CustomSongDelegate* m_delegate;
    CCTextInputNode* m_offsetInput;
    CCMenuItemSpriteExtra* m_playbackButton;
}

[[link(android)]]
class SongPlaybackDelegate {
    virtual void onPlayback(SongInfoObject*) {}
}

[[link(android)]]
class SongSelectNode : cocos2d::CCNode, FLAlertLayerProtocol, CustomSongLayerDelegate, CustomSongDelegate {
    // virtual ~SongSelectNode();

    static SongSelectNode* create(int, bool, LevelSettingsObject*, SongSelectType, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCMenu*, bool) = ios 0x14a4a8, win 0xc5f80, imac 0x206f60, m1 0x1bbf60;

    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0xc6fe0, imac 0x207db0, m1 0x1bcd40, ios 0x14b1a4;
    virtual void customSongLayerClosed() = win 0xc7070, imac 0x207e90, m1 0x1bce28, ios 0x14b220;
    virtual void songIDChanged(int) = win 0xc70a0, imac 0x207ef0, m1 0x1bce90, ios 0x14b288;
    virtual int getActiveSongID() = win 0xc70b0, m1 0x1bceb0, imac 0x207f20, ios 0x14b2a8;
    virtual gd::string getSongFileName() = win 0xc70c0, m1 0x1bcec0, imac 0x207f40, ios 0x14b2b8;
    virtual LevelSettingsObject* getLevelSettings() = win 0xc7180, m1 0x1bd008, imac 0x208090, ios 0x14b364;

    void audioNext(cocos2d::CCObject* sender) = ios 0x14aef4, win 0xc6ab0, imac 0x2079d0, m1 0x1bc9d4;
    void audioPrevious(cocos2d::CCObject* sender) = ios 0x14aec0, win 0xc6af0, imac 0x207990, m1 0x1bc9a0;
    bool init(int, bool, LevelSettingsObject*, SongSelectType, cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCMenu*, bool) = ios 0x14a5b8, win 0xc60b0, imac 0x207080, m1 0x1bc070;
    void onOpenCustomSong(cocos2d::CCObject* sender);
    void onSongMode(cocos2d::CCObject* sender) = win 0xc6b20, m1 0x1bca0c, imac 0x207a10, ios 0x14af2c;
    void onSongMode(int) = win 0xc6b50, imac 0x207ae0, m1 0x1bcabc, ios 0x14afbc;
    void selectSong(int id) = win inline, m1 0x1bca9c, imac 0x207ab0 {
        auto songID = id;
        if (songID > 21) songID = 21;
        m_songChanged = true;
        if (songID < 0) songID = 0;
        m_selectedSongID = songID;
        this->updateAudioLabel();
    }
    void showCustomSongSelect() = win 0xc6e80, imac 0x207d70, m1 0x1bcd0c;
    void updateAudioLabel() = ios 0x14adbc, win 0xc69c0, imac 0x2078a0, m1 0x1bc888;
    void updateWidgetVisibility() = win 0xc6d70, imac 0x207ce0, m1 0x1bcc84;

    int m_selectedSongID;
    bool m_isCustomSong;
    bool m_songChanged;
    cocos2d::CCLabelBMFont* m_audioLabel;
    cocos2d::CCArray* m_selectSongObjects;
    cocos2d::CCArray* m_normalSongObjects;
    cocos2d::CCArray* m_changeSongObjects;
    CCMenuItemSpriteExtra* m_normalButton;
    CCMenuItemSpriteExtra* m_customButton;
    CCMenuItemSpriteExtra* m_selectButton;
    CCMenuItemSpriteExtra* m_changeButton;
    CustomSongWidget* m_songWidget;
    LevelSettingsObject* m_settingsObject;
}

[[link(android)]]
class SongsLayer : GJDropDownLayer {
    // virtual ~SongsLayer();

    static SongsLayer* create() = win 0x47bf80, m1 0x45b7a8, imac 0x4fba10;

    virtual void customSetup() = win 0x47c050, m1 0x45b920, imac 0x4fbc40, ios 0x346974;
}

[[link(android)]]
class SongTriggerGameObject : SFXTriggerGameObject {
    // virtual ~SongTriggerGameObject();

    static SongTriggerGameObject* create(char const*);

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x49fc00, imac 0x1bfaf0, m1 0x17d9bc, ios 0x386bf0;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x49f9a0, imac 0x1bf1f0, m1 0x17d250, ios 0x3869a8;

    bool init(char const*);

    bool m_unk7a9;
    // property 399
    bool m_prep;
    // property 400
    bool m_loadPrep;
    // property 432
    int m_songChannel;
}

[[link(android)]]
class SpawnParticleGameObject : EffectGameObject {
    // virtual ~SpawnParticleGameObject();

    static SpawnParticleGameObject* create();

    virtual bool init() = win 0x4aa9e0, m1 0x1966f0, imac 0x1dde40, ios 0x390ee8;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4ab0b0, imac 0x1df8e0, m1 0x197cb4, ios 0x391524;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4aaa50, imac 0x1dde90, m1 0x196740, ios 0x390f38;

    // property 547, property 548
    cocos2d::CCPoint m_offset;
    // property 549, property 550
    cocos2d::CCPoint m_offsetVariance;
    // property 551
    bool m_matchRotation;
    // property 552
    float m_rotation;
    // property 553
    float m_rotationVariance;
    // property 554
    float m_scale;
    // property 555
    float m_scaleVariance;
}

[[link(android)]]
class SpawnTriggerAction {
    bool isFinished();
    TodoReturn step(float);

    bool m_finished;
    bool m_disabled;
    double m_duration;
    double m_deltaTime;
    int m_targetGroupID;
    int m_triggerUniqueID;
    int m_controlID;
    bool m_spawnOrdered;
    GameObject* m_gameObject;
    gd::vector<int> m_remapKeys;
}

[[link(android), depends(ChanceObject)]]
class SpawnTriggerGameObject : EffectGameObject {
    // virtual ~SpawnTriggerGameObject();

    static SpawnTriggerGameObject* create();

    virtual bool init() = win 0x4a0530, m1 0x17f0fc, imac 0x1c1560, ios 0x387770;
    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a06a0, imac 0x1c1900, m1 0x17f408, ios 0x3879b8;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a0a10, imac 0x1c1de0, m1 0x17f980, ios 0x387d78;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a0d50, imac 0x1c2240, m1 0x17fd34, ios 0x3880cc;

    void addRemap(int, int);
    void changeRemap(int, int, bool);
    void removeRemap(int, int);
    void updateRemapKeys(gd::vector<int> const&) = win 0x4a05a0;

    // property 442
    gd::vector<ChanceObject> m_remapObjects;
    int m_remapKey;
    gd::vector<int> m_remapKeys;
    double m_currentDelay;
    // property 63
    float m_spawnDelay;
    // property 556
    float m_delayRange;
    // property 581
    bool m_resetRemap;
}

[[link(android)]]
class SpecialAnimGameObject : EnhancedGameObject {
    // virtual ~SpecialAnimGameObject();

    static SpecialAnimGameObject* create(char const*);

    virtual void resetObject() = win 0x489380, m1 0x165528, imac 0x1a2cd0, ios 0x37b1ac;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x489390, m1 0x165534, imac 0x1a2cf0, ios 0x37b1b8;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x489400, m1 0x165594, imac 0x1a2d50, ios 0x37b218;
    virtual void updateMainColor(cocos2d::ccColor3B const&) = win 0x489340, m1 0x165508, imac 0x1a2c90, ios 0x37b18c;
    virtual void updateSecondaryColor(cocos2d::ccColor3B const&) = win 0x489360, imac 0x1a2cb0, m1 0x165518, ios 0x37b19c;
    virtual void updateSyncedAnimation(float, int) = win 0x1a69c0, imac 0x24b7d0, m1 0x1f8eac, ios 0x3487cc;

    bool init(char const*);

    bool m_skipMainColorUpdate;
    bool m_skipSecondaryColorUpdate;
}

[[link(android)]]
class SpriteAnimationManager : cocos2d::CCNode {
    SpriteAnimationManager() {
        m_sprite = nullptr;
        m_priorityDict = nullptr;
        m_typeDict = nullptr;
        m_soundDict = nullptr;
        m_frameDict = nullptr;
    }
    ~SpriteAnimationManager() = win inline, m1 0x62d2f4, imac 0x70e370, ios 0x3249bc {
        CC_SAFE_RELEASE(m_frameDict);
        CC_SAFE_RELEASE(m_priorityDict);
        CC_SAFE_RELEASE(m_typeDict);
        CC_SAFE_RELEASE(m_soundDict);
        CC_SAFE_RELEASE(m_animateDict);
    }

    void animationFinished() = win 0x745f0;
    void callAnimationFinished() = win 0x74640;
    static void createAnimations(gd::string) = win 0x72fa0, m1 0x62a3ac, imac 0x70af50;
    static SpriteAnimationManager* createWithOwner(CCAnimatedSprite*, gd::string) = win inline {
        auto ret = new SpriteAnimationManager();
        if (ret->initWithOwner(p0, p1)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    void doCleanup() = win inline, m1 0x62d2cc, imac 0x70e340, ios 0x324994 {
        m_frameDict->removeAllObjects();
        this->release();
    }
    void executeAnimation(gd::string) = win 0x73f30;
    void finishAnimation(gd::string);
    int getAnimType(gd::string) = win inline {
        return m_typeDict->valueForKey(p0)->intValue();
    }
    int getPrio(gd::string) = win 0x74720;
    bool initWithOwner(CCAnimatedSprite*, gd::string) = win 0x72360;
    void loadAnimations(gd::string) = win 0x725d0, m1 0x62b214, imac 0x70bf30;
    void offsetCurrentAnimation(float) = win inline, m1 0x62d020, imac 0x70e0d0 {
        if (auto action = static_cast<cocos2d::CCActionInterval*>(m_sprite->m_sprite->getActionByTag(1))) {
            //if (action->m_bFirstTick) action->step(0.f);
            action->step(p0);
        }
    }
    void overridePrio() = win 0x74420, m1 0x62cb2c, imac 0x70dbc0;
    void playSound(gd::string);
    void playSoundForAnimation(gd::string);
    void queueAnimation(gd::string) = win 0x74510;
    void resetAnimState() = win inline {
        m_queuedAnimation = "not_used";
        m_nextAnimation = "not_used";
    }
    void runAnimation(gd::string) = win 0x73dd0, m1 0x62c1e8, imac 0x70d190;
    void runQueuedAnimation();
    void stopAnimations() = win inline, m1 0x62cd30, imac 0x70ddb0 {
        this->overridePrio();
        if (m_sprite->m_paSprite) m_sprite->m_paSprite->stopAllActions();
        if (m_sprite->m_fbfSprite) m_sprite->m_fbfSprite->stopAllActions();
    }
    void storeAnimation(cocos2d::CCAnimate* action, cocos2d::CCAnimate* frames, gd::string name, int priority, spriteMode type, cocos2d::CCSpriteFrame* first) = win 0x73b60;
    void storeSoundForAnimation(cocos2d::CCString*, gd::string, float) = win inline {
        m_soundDict->setObject(p0, p1);
        m_soundDict->setObject(cocos2d::CCString::createWithFormat("%f", p2), p1);
    }
    void switchToFirstFrameOfAnimation(gd::string);
    void updateAnimationSpeed(float) = win inline, m1 0x62bfac, imac 0x70cf30 {
        cocos2d::CCDictElement* element;
        cocos2d::CCDictElement* temp;
        if (m_animateDict) HASH_ITER(hh, m_animateDict->m_pElements, element, temp) {
            if (element->getObject()->getObjType() == (cocos2d::CCObjectType)0) {
                static_cast<cocos2d::CCAnimate*>(element->getObject())->setSpeedMod(p0);
            }
        }
    }

    CCAnimatedSprite* m_sprite;
    cocos2d::CCDictionary* m_priorityDict;
    cocos2d::CCDictionary* m_typeDict;
    cocos2d::CCDictionary* m_soundDict;
    gd::string m_queuedAnimation;
    float m_speed;
    cocos2d::CCDictionary* m_animateDict;
    cocos2d::CCDictionary* m_frameDict;
    gd::string m_currentAnimation;
    gd::string m_nextAnimation;
}

[[link(android)]]
class SpriteDescription : cocos2d::CCObject {
    SpriteDescription() = ios 0x1b4d00 {
        m_rotation = 0;
        m_zValue = 0;
        m_tag = 0;
        m_usesCustomTag = false;
        m_texture = nullptr;
    }
    ~SpriteDescription() = win inline, m1 0x4ad3d0, imac 0x556790, ios 0x1b4cac {
        CC_SAFE_RELEASE(m_texture);
    }

    static SpriteDescription* createDescription(cocos2d::CCDictionary* dict) = win inline, m1 0x4ac3e8, imac 0x555800 {
        auto ret = new SpriteDescription();
        if (ret->initDescription(dict)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static SpriteDescription* createDescription(DS_Dictionary* dict) = win inline, m1 0x4acb54, imac 0x555f80 {
        auto ret = new SpriteDescription();
        if (ret->initDescription(dict)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    bool initDescription(cocos2d::CCDictionary* dict) = win inline, m1 0x4acfc4, imac 0x5563d0 {
        m_position = cocos2d::CCPointFromString(dict->valueForKey("position")->getCString());
        m_scale = cocos2d::CCPointFromString(dict->valueForKey("scale")->getCString());
        m_flipped = cocos2d::CCPointFromString(dict->valueForKey("flipped")->getCString());
        m_rotation = dict->valueForKey("rotation")->floatValue();
        m_zValue = dict->valueForKey("zValue")->intValue();
        m_tag = dict->valueForKey("tag")->intValue();
        m_usesCustomTag = dict->valueForKey("usesCustomTag")->boolValue();
        if (m_usesCustomTag) {
            auto frameName = dict->valueForKey("texture")->getCString();
            m_texture = cocos2d::CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(frameName);
            m_texture->retain();
            m_texture->setFrameName(frameName);
        }
        return true;
    }
    bool initDescription(DS_Dictionary* dict) = win 0x41cf0, m1 0x4acd18, imac 0x556150;

    cocos2d::CCPoint m_position;
    cocos2d::CCPoint m_scale;
    cocos2d::CCPoint m_flipped;
    float m_rotation;
    int m_zValue;
    int m_tag;
    bool m_usesCustomTag;
    cocos2d::CCSpriteFrame* m_texture;
}

[[link(android)]]
class SpritePartDelegate {
    virtual void displayFrameChanged(cocos2d::CCObject*, gd::string) {}
}

[[link(android)]]
class StarInfoPopup : FLAlertLayer {
    // virtual ~StarInfoPopup();

    static StarInfoPopup* create(int autos, int easies, int normals, int hards, int harders, int insanes, int dailies, int gauntlets, int maps, bool platformer) = win 0x3b0cb0, imac 0x7ac620, m1 0x6bdd58, ios 0x1a0c18;
    static StarInfoPopup* createFromString(gd::string str) = win 0x3b0720, m1 0x6baa6c, imac 0x7a9160, ios 0x19e8c8;
    static StarInfoPopup* createFromStringMoons(gd::string str) = win 0x3b0a00, m1 0x6bacd4, imac 0x7a93f0, ios 0x19ea78;

    virtual void keyBackClicked() = win 0x84650, m1 0x6be87c, imac 0x7ad0e0, ios 0x1a1584;

    bool init(int autos, int easies, int normals, int hards, int harders, int insanes, int dailies, int gauntlets, int maps, bool platformer) = ios 0x1a0d34, win 0x3b0df0, imac 0x7ac7b0, m1 0x6bdeb0;
    void onClose(cocos2d::CCObject* sender) = win 0x84620, m1 0x6be840, imac 0x7ad0b0, ios 0x1a1548;
}

[[link(android)]]
class StartPosObject : EffectGameObject {
    // virtual ~StartPosObject();

    static StartPosObject* create();

    virtual bool init() = win 0x499450, m1 0x16d800, imac 0x1ac6e0, ios 0x380370;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4995b0, imac 0x1ac830, m1 0x16d93c, ios 0x38046c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4995c0, imac 0x1ac840, m1 0x16d940, ios 0x380470;

    void loadSettingsFromString(gd::string objectString) = win 0x499510, imac 0x1ac7d0, m1 0x16d8dc, ios 0x380430;
    void setSettings(LevelSettingsObject* settings) = win inline {
        if (settings == m_startSettings) return;
        CC_SAFE_RETAIN(settings);
        CC_SAFE_RELEASE(m_startSettings);
        m_startSettings = settings;
    }

    LevelSettingsObject* m_startSettings;
}

[[link(android)]]
class StatsCell : TableViewCell {
    // virtual ~StatsCell();
    StatsCell(char const*, float, float);

    virtual bool init() = m1 0x1f05d8, imac 0x240e40, ios 0x112528 { return true; }
    virtual void draw() = win 0xad710, imac 0x241930, m1 0x1f1224, ios 0x112c98;

    char const* getTitleFromKey(char const*) = m1 0x1f05e0, imac 0x240e50, win 0xb2890;
    void loadFromObject(StatsObject*) = ios 0x107ea4, win 0xb2630, imac 0x235030, m1 0x1e50c0;
    void updateBGColor(int index) = win inline, m1 0x1e53c4, imac 0x2352e0, ios 0x10819c {
        m_backgroundLayer->setColor(index % 2 == 0 ? cocos2d::ccColor3B { 161, 88, 44 } : cocos2d::ccColor3B { 194, 114, 62 });
    }
}

[[link(android)]]
class StatsLayer : GJDropDownLayer {
    // virtual ~StatsLayer();
    StatsLayer() {}

    static StatsLayer* create() = win inline, m1 0x8e198, imac 0x9b220, ios 0x241ac4 {
        auto ret = new StatsLayer();
        if(ret->init("Stats", 220.f, false)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void customSetup() = win 0x4af100, m1 0x8e310, imac 0x9b450, ios 0x241bac;
}

[[link(android)]]
class StatsObject : cocos2d::CCObject {
    // virtual ~StatsObject();

    static StatsObject* create(char const*, int) = win 0xb24d0;

    bool init(char const*, int);

    const char* m_key;
    int m_value;
}

[[link(android)]]
class SupportLayer : GJDropDownLayer, FLAlertLayerProtocol, UploadActionDelegate, UploadPopupDelegate {
    SupportLayer() {
        m_uploadPopup = nullptr;
    }
    ~SupportLayer() = win inline, m1 0x315128, imac 0x3853b0, ios 0x194b5c {
        auto glm = GameLevelManager::sharedState();
        if (glm->m_uploadActionDelegate == this) glm->m_uploadActionDelegate = nullptr;
    }

    static SupportLayer* create() = win inline, m1 0x314fd0, imac 0x3851e0 {
        auto ret = new SupportLayer();
        if (ret->init("Support", 220.f, false)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void customSetup() = win 0x4afa10, imac 0x385810, m1 0x31546c, ios 0x194c28;
    virtual void uploadActionFinished(int, int) = win 0x4b0fb0, imac 0x3876b0, m1 0x317218, ios 0x1964b8;
    virtual void uploadActionFailed(int, int) = win 0x4b10f0, imac 0x387800, m1 0x31736c, ios 0x1965a0;
    virtual void onClosePopup(UploadActionPopup*) = win 0x4b0f70, m1 0x3171c8, imac 0x387660, ios 0x196468;
    virtual void FLAlert_Clicked(FLAlertLayer*, bool) = win 0x4b1d70, imac 0x387b20, m1 0x3176c4, ios 0x1967b4;

    CCMenuItemToggler* createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, cocos2d::CCArray*) = win 0x4b05d0;
    void exitLayer();
    void onCocos2d(cocos2d::CCObject* sender) = win 0x4b0d10, m1 0x31719c, imac 0x387630;
    void onEmail(cocos2d::CCObject* sender) = win 0x4b1410, m1 0x316600, imac 0x386af0;
    void onGetReward(cocos2d::CCObject* sender) = win 0x4b0e20;
    void onLinks(cocos2d::CCObject* sender) = win 0x4b1510, m1 0x315d64, imac 0x386110;
    void onLowDetail(cocos2d::CCObject* sender) = win 0x4b1180, m1 0x316f08, imac 0x3873b0;
    void onPrivacy(cocos2d::CCObject* sender) = win 0x296f80, m1 0x3166cc, imac 0x386bd0;
    void onRequestAccess(cocos2d::CCObject* sender) = win 0x4b0d30, m1 0x317014, imac 0x3874c0;
    void onRobTop(cocos2d::CCObject* sender) = win 0x3207c0, m1 0x317178, imac 0x387610;
    void onSFX(cocos2d::CCObject* sender) = win 0x4b0830, m1 0x316714, imac 0x386c10;
    void onTOS(cocos2d::CCObject* sender) = win 0x296fa0, m1 0x3166f0, imac 0x386bf0;
    void sendSupportMail() = m1 0x317494, imac 0x387900;

    UploadActionPopup* m_uploadPopup;
}

[[link(android), depends(CCIndexPath)]]
class TableView : CCScrollLayerExt, CCScrollLayerExtDelegate {
    // virtual ~TableView() = ios 0x30f51c;
    inline TableView(cocos2d::CCRect rect) : CCScrollLayerExt(rect) {
        m_touchStartPosition2 = cocos2d::CCPointMake(0.f, 0.f);
        m_lastCellPos = cocos2d::CCPointMake(0.f, 0.f);
        m_touchPosition2 = cocos2d::CCPointMake(0.f, 0.f);
        m_tableDelegate = nullptr;
        m_dataSource = nullptr;
        m_cellDelegate = nullptr;
        m_unused2 = false;
        this->setTouchEnabled(true);
        this->setMouseEnabled(true);
        m_vScrollbarVisible = false;
        m_hScrollbarVisible = false;
        m_disableHorizontal = false;
        m_unused3 = nullptr;
        m_delegate = this;
        m_touchOutOfBoundary = false;
        m_cellRemovedArray = cocos2d::CCArray::create();
        m_cellRemovedArray->retain();
        m_cellArray = cocos2d::CCArray::create();
        m_cellArray->retain();
        m_indexPathArray = cocos2d::CCArray::create();
        m_indexPathArray->retain();
        m_touchLastY = 0.f;
        m_cancellingTouches = false;
        m_idk2 = false;
    }

    static TableView* create(TableViewDelegate* tvd, TableViewDataSource* tvds, TableViewCellDelegate* tvcd, cocos2d::CCRect rect) = win inline, imac 0x609ab0, m1 0x536c94, ios 0x2fe96c {
        auto ret = new TableView(rect);
        ret->m_tableDelegate = tvd;
        ret->m_dataSource = tvds;
        ret->m_cellDelegate = tvcd;
        ret->setPosition({ 0.f, 0.f });
        ret->autorelease();
        return ret;
    }

    virtual void onEnter() = win inline, m1 0x537ea4, imac 0x60ae40, ios 0x2ff6c4 { cocos2d::CCLayer::onEnter(); }
    virtual void onExit() = win inline, m1 0x537ea8, imac 0x60ae50, ios 0x2ff6c8 { cocos2d::CCLayer::onExit(); }
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x75250, m1 0x538024, imac 0x60aff0, ios 0x2ff804;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x754e0, m1 0x538a88, imac 0x60bb20, ios 0x2fffbc;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x75400, m1 0x538840, imac 0x60b8e0, ios 0x2ffe48;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x75460, imac 0x60ba60, m1 0x5389ac, ios 0x2fff5c;
    virtual void registerWithTouchDispatcher() = win 0x3e5a0, m1 0x537eac, imac 0x60ae60, ios 0x2ff6cc;
    virtual void scrollWheel(float, float) = win 0x75a90, imac 0x60bc10, m1 0x538b7c, ios 0x300084;
    virtual void scrllViewWillBeginDecelerating(CCScrollLayerExt*) = m1 0x5396d8, imac 0x60c810, ios 0x30098c {}
    virtual void scrollViewDidEndDecelerating(CCScrollLayerExt*) = m1 0x5396e0, imac 0x60c830, ios 0x300994 {}
    virtual void scrollViewTouchMoving(CCScrollLayerExt*) = m1 0x5396e8, imac 0x60c850, ios 0x30099c {}
    virtual void scrollViewDidEndMoving(CCScrollLayerExt*) = m1 0x5396f0, imac 0x60c870, ios 0x3009a4 {}

    void cancelAndStoleTouch(cocos2d::CCTouch*, cocos2d::CCEvent*) = imac 0x60af10, m1 0x537f48;
    TodoReturn cellForRowAtIndexPath(CCIndexPath&);
    TodoReturn cellForTouch(cocos2d::CCTouch*);
    int checkBoundaryOfCell(cocos2d::CCPoint&, float) = win 0x75c90;
    int checkBoundaryOfCell(TableViewCell*) = win 0x75b70;
    void checkBoundaryOfContent(float) = win 0x75d90;
    void checkFirstCell(TableViewCell*) = win 0x76350;
    void checkLastCell(TableViewCell*) = win 0x76600;
    TodoReturn claimTouch(cocos2d::CCTouch*);
    void deleteTableViewCell(TableViewCell*) = imac 0x60a560, m1 0x537644, win 0x74a50;
    TodoReturn dequeueReusableCellWithIdentifier(char const*);
    void initTableViewCells() = m1 0x53716c, imac 0x60a040;
    bool isDuplicateIndexPath(CCIndexPath&) = win 0x749b0;
    bool isDuplicateInVisibleCellArray(CCIndexPath*) = win 0x74920;
    void reloadData() = ios 0x2ff228, win 0x74d00, imac 0x60a890, m1 0x53794c;
    TodoReturn removeIndexPathFromPathAddedArray(CCIndexPath&);
    TodoReturn scrollToIndexPath(CCIndexPath&);
    void touchFinish(cocos2d::CCTouch*) = win 0x757a0;

    bool m_touchOutOfBoundary; //isScheduled
    cocos2d::CCTouch* m_touchStart; //beginTouch
    cocos2d::CCPoint m_touchStartPosition2; //beginLocation
    cocos2d::CCPoint m_lastCellPos;
    cocos2d::CCPoint m_touchPosition2; //checkLocation
    TableViewCell* m_touchedCell; //touchCell
    bool m_touchMoved;
    bool m_isTouch;
    cocos2d::CCArray* m_cellArray; //cellVisibleArray
    cocos2d::CCArray* m_cellRemovedArray;
    cocos2d::CCArray* m_indexPathArray;
    TableViewDelegate* m_tableDelegate;
    TableViewDataSource* m_dataSource;
    TableViewCellDelegate* m_cellDelegate;
    bool m_unused2;
    void* m_unused3;
    int m_unused4;
    float m_touchLastY;
    bool m_cancellingTouches;
    bool m_idk2;
}

[[link(android), depends(CCIndexPath)]]
class TableViewCell : cocos2d::CCLayer {
    // virtual ~TableViewCell();
    TableViewCell(char const*, float, float) = ios 0x37ef0, win 0x76ad0, imac 0x610480, m1 0x53c9ec;

    void updateVisibility() = m1 0x53ce88, imac 0x610a20;

    void* m_unknown;
    TableView* m_tableView;
    CCIndexPath m_indexPath;
    void* m_unknown2;
    gd::string m_unknownString;
    float m_width;
    float m_height;
    cocos2d::CCLayerColor* m_backgroundLayer;
    cocos2d::CCLayer* m_mainLayer;
    BoomListType m_listType;
}

[[link(android)]]
class TableViewCellDelegate {
    virtual bool cellPerformedAction(TableViewCell*, int, CellAction, cocos2d::CCNode*) { return false; }
    virtual int getSelectedCellIdx() { return 0; }
    virtual bool shouldSnapToSelected() { return true; }
    virtual int getCellDelegateType() { return 0; }
}

[[link(android)]]
class TableViewDataSource {
    virtual int numberOfRowsInSection(unsigned int, TableView*) { return 0; }
    virtual unsigned int numberOfSectionsInTableView(TableView*) { return 0; }
    virtual void TableViewCommitCellEditingStyleForRowAtIndexPath(TableView*, TableViewCellEditingStyle, CCIndexPath&) {}
    virtual TableViewCell* cellForRowAtIndexPath(CCIndexPath&, TableView*) { return nullptr; }
}

[[link(android)]]
class TableViewDelegate {
    virtual void willTweenToIndexPath(CCIndexPath&, TableViewCell*, TableView*) {}
    virtual void didEndTweenToIndexPath(CCIndexPath&, TableView*) {}
    virtual void TableViewWillDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) {}
    virtual void TableViewDidDisplayCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) {}
    virtual void TableViewWillReloadCellForRowAtIndexPath(CCIndexPath&, TableViewCell*, TableView*) {}
    virtual float cellHeightForRowAtIndexPath(CCIndexPath&, TableView*) { return 0; }
    virtual void didSelectRowAtIndexPath(CCIndexPath&, TableView*) {}
}

[[link(android)]]
class TeleportPortalObject : RingObject {
    // virtual ~TeleportPortalObject();

    static TeleportPortalObject* create(char const*, bool) = win 0x499670, imac 0x1ac900, m1 0x16da24, ios 0x38052c;

    virtual void setPosition(cocos2d::CCPoint const&) = win 0x499850, imac 0x1acca0, m1 0x16dd84, ios 0x380764;
    virtual void setRotation(float) = win 0x4999d0, imac 0x1acd50, m1 0x16de2c, ios 0x38080c;
    virtual void setStartPos(cocos2d::CCPoint) = win 0x499790, imac 0x1acb00, m1 0x16dbec, ios 0x3805d8;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x49a500, imac 0x1af440, m1 0x16fd10, ios 0x381168;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x499bc0, imac 0x1acea0, m1 0x16df90, ios 0x380960;
    virtual int addToGroup(int) = win 0x499a80, imac 0x1acde0, m1 0x16dea8, ios 0x380888;
    virtual void removeFromGroup(int) = win 0x499b30, imac 0x1ace40, m1 0x16df2c, ios 0x3808fc;
    virtual void setRotation2(float) = win 0x38c9f0, m1 0x16de9c, imac 0x1acdb0, ios 0x38087c;
    virtual void addToGroup2(int) = win 0x499a60, m1 0x16dea0, imac 0x1acdc0, ios 0x380880;
    virtual void removeFromGroup2(int) = win 0x499a70, m1 0x16dea4, imac 0x1acdd0, ios 0x380884;

    float getTeleportXOff(cocos2d::CCNode*) = win 0x4998f0, m1 0x16dcb0, imac 0x1acbd0, ios 0x38069c;
    bool init(char const*, bool);
    void setPositionOverride(cocos2d::CCPoint);
    void setStartPosOverride(cocos2d::CCPoint);

    TeleportPortalObject* m_orangePortal;
    bool m_isYellowPortal;
    float m_teleportYOffset;
    // property 55
    bool m_teleportEase;
    // property 345
    bool m_staticForceEnabled;
    // property 346
    int m_staticForce;
    // property 347
    bool m_redirectForceEnabled;
    // property 350
    float m_redirectForceMod;
    // property 348
    float m_redirectForceMin;
    // property 349
    float m_redirectForceMax;
    // property 351
    bool m_saveOffset;
    // property 352
    bool m_ignoreX;
    // property 353
    bool m_ignoreY;
    // property 354
    int m_gravityMode;
    // property 443
    bool m_staticForceAdditive;
    // property 464
    bool m_instantCamera;
    // property 510
    bool m_snapGround;
    // property 591
    bool m_redirectDash;
    cocos2d::CCPoint m_teleportPosition;
}

[[link(android)]]
class TextAlertPopup : cocos2d::CCNode {
    // virtual ~TextAlertPopup();

    static TextAlertPopup* create(gd::string text, float delay, float scale, int opacity, gd::string font) = win 0x2964a0, m1 0x2437f0, imac 0x29bfb0, ios 0x2dfdec;

    bool init(gd::string text, float delay, float scale, int opacity, gd::string font) = win 0x2965d0, imac 0x29c130, m1 0x243988, ios 0x2dff58;
    void setAlertPosition(cocos2d::CCPoint windowOffset, cocos2d::CCPoint pointOffset) = win inline, imac 0x29c480, m1 0x243cc8, ios 0x2e0280 {
        if (!m_label) return;

        auto winSize = cocos2d::CCDirector::sharedDirector()->getWinSize();
        this->setPosition({
            windowOffset.x * winSize.width + m_width / 2 + pointOffset.x,
            windowOffset.y * winSize.height + m_height / 2 + pointOffset.y
        });
    }
    void setLabelColor(cocos2d::ccColor3B color) = win inline, imac 0x29c440, m1 0x243c8c, ios 0x2e0244 {
        if (m_label) m_label->setColor(color);
    }

    float m_width;
    float m_height;
    cocos2d::CCLabelBMFont* m_label;
}

[[link(android)]]
class TextArea : cocos2d::CCSprite {
    // virtual ~TextArea();
    // TextArea();

    static TextArea* create(gd::string str, char const* font, float scale, float width, cocos2d::CCPoint anchor, float lineHeight, bool disableColor) = win 0x76e50, m1 0x2a4014, imac 0x30d440, ios 0xf9894;

    virtual void update(float) = win 0x776b0, imac 0x30e100, m1 0x2a4c5c, ios 0xf9ff4;
    virtual void draw() = m1 0x2a4c58, imac 0x30e0f0, ios 0xf9ff0 {}
    virtual void setOpacity(unsigned char) = win 0x775c0, imac 0x30df50, m1 0x2a4ab4, ios 0xf9e54;

    void colorAllCharactersTo(cocos2d::ccColor3B) = win 0x77600, imac 0x30dfc0, m1 0x2a4b20, ios 0xf9ec0;
    void colorAllLabels(cocos2d::ccColor3B color) = win inline, imac 0x30e070, m1 0x2a4be4, ios 0xf9f7c {
        auto lines = m_label->m_lines;
        for (int i = 0; i < lines->count(); i++) {
            static_cast<cocos2d::CCLabelBMFont*>(lines->objectAtIndex(i))->setColor(color);
        }
    }
    void fadeIn(float, bool) = m1 0x2a47e4, imac 0x30dc90;
    float fadeInCharacters(float, float, bool, TextFadeInStyle) = win 0x77890, m1 0x2a4db0, imac 0x30e2a0, ios 0xfa140;
    void fadeOut(float) = m1 0x2a49b4, imac 0x30de50;
    void fadeOutAndRemove() = imac 0x30ddf0, m1 0x2a4944;
    void finishFade() = win 0x775a0, imac 0x30ddc0, m1 0x2a4920;
    void hideAll() = win inline, m1 0x2a4578, imac 0x30da20, ios inline {
        this->stopAllCharacterActions();
        this->setOpacity(0);
    }
    bool init(gd::string str, char const* font, float scale, float width, cocos2d::CCPoint anchor, float lineHeight, bool disableColor) = m1 0x2a41bc, imac 0x30d5f0;
    void setIgnoreColorCode(bool) = m1 0x2a4564, imac 0x30da00;
    void setString(gd::string) = win 0x77090, m1 0x2a42b4, imac 0x30d6f0, ios 0xf9ab8;
    void showAll() = win inline, m1 0x2a4708, imac 0x30dbb0, ios 0xf9df4 {
        this->stopAllCharacterActions();
        this->setOpacity(255);
        m_allShown = true;
    }
    void stopAllCharacterActions() = win 0x774e0, m1 0x2a4648, imac 0x30daf0, ios 0xf9d3c;

    bool m_disableColor;
    MultilineBitmapFont* m_label;
    float m_width;
    float m_unknown;
    gd::string m_fontFile;
    float m_height;
    bool m_unkBool;
    cocos2d::CCPoint m_anchorPoint;
    bool m_allShown;
    float m_scale;
    int m_rectHeight;
    int m_rectWidth;
    float m_maxWidth;
    cocos2d::CCPoint m_unkPoint;
    TextAreaDelegate* m_delegate;
    cocos2d::CCDictionary* m_shakeCharacters;
    float m_shakeElapsed;
}

[[link(android)]]
class TextAreaDelegate {
    virtual void fadeInTextFinished(TextArea*) {}
}

[[link(android)]]
class TextGameObject : GameObject {
    // virtual ~TextGameObject();

    static TextGameObject* create(cocos2d::CCTexture2D*) = win 0x1a4530;

    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x1a49c0, imac 0x5b92a0, m1 0x4ef584, ios 0x264288;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x1a4b80, imac 0x5b93d0, m1 0x4ef6f0, ios 0x2643c8;
    virtual void updateTextKerning(int) = win 0x1a4610, m1 0x4ef2d0, imac 0x5b9020, ios 0x263fd0;
    virtual int getTextKerning() = win 0x1886d0, m1 0x4efef4, imac 0x5b9d90, ios 0x264718;

    bool init(cocos2d::CCTexture2D*);
    void updateTextObject(gd::string, bool) = win 0x1a4620, m1 0x4ef2d8, imac 0x5b9030, ios 0x263fd8;

    // property 31
    gd::string m_text;
    // property 488
    int m_kerning;
}

[[link(android)]]
class TextInputDelegate {
    virtual void textChanged(CCTextInputNode*) {}
    virtual void textInputOpened(CCTextInputNode*) {}
    virtual void textInputClosed(CCTextInputNode*) {}
    virtual void textInputShouldOffset(CCTextInputNode*, float) {}
    virtual void textInputReturn(CCTextInputNode*) {}
    virtual bool allowTextInput(CCTextInputNode*) { return true; }
    virtual void enterPressed(CCTextInputNode*) {}
}

[[link(android)]]
class TextStyleSection : cocos2d::CCObject {
    // virtual ~TextStyleSection();

    static TextStyleSection* create(int, int, TextStyleType) = win 0x6d810, m1 0x3e4f90, imac 0x476620;

    static TextStyleSection* createColoredSection(cocos2d::ccColor3B p0, int p1, int p2) = win inline, imac 0x476290, m1 0x3e4c54 {
        auto ret = TextStyleSection::create(p1, p2, TextStyleType::Colored);
        ret->m_color = p0;
        return ret;
    }
    static TextStyleSection* createDelaySection(int p0, float p1) = win inline, imac 0x476420, m1 0x3e4de4 {
        auto ret = TextStyleSection::create(p0, -1, TextStyleType::Delayed);
        ret->m_delay = p1;
        return ret;
    }
    static TextStyleSection* createInstantSection(int p0, int p1, float p2) = win inline, imac 0x476310, m1 0x3e4cd8 {
        auto ret = TextStyleSection::create(p0, p1, TextStyleType::Instant);
        ret->m_instantTime = p2;
        return ret;
    }
    static TextStyleSection* createShakeSection(int p0, int p1, int p2, int p3) = win inline, imac 0x476390, m1 0x3e4d5c {
        auto ret = TextStyleSection::create(p0, p1, TextStyleType::Shake);
        ret->m_shakeIntensity = p2;
        ret->m_shakesPerSecond = p3;
        return ret;
    }
    bool init(int p0, int p1, TextStyleType p2) = win inline, imac 0x476690, m1 0x3e5004 {
        m_styleType = p2;
        m_startIndex = p0;
        m_endIndex = p1;
        return true;
    }

    TextStyleType m_styleType;
    int m_startIndex;
    int m_endIndex;
    cocos2d::ccColor3B m_color;
    float m_instantTime;
    float m_delay;
    int m_shakeIntensity;
    int m_shakesPerSecond;
}

[[link(android)]]
class TimerTriggerAction {
    bool m_disabled;
    float m_time;
    float m_targetTime;
    int m_targetGroupID;
    int m_triggerUniqueID;
    int m_controlID;
    int m_itemID;
    bool m_multiActivate;
    gd::vector<int> m_remapKeys;
}

[[link(android)]]
class TimerTriggerGameObject : EffectGameObject {
    // virtual ~TimerTriggerGameObject();

    static TimerTriggerGameObject* create(char const*);

    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a6690, imac 0x1d1230, m1 0x18bdc8, ios 0x38cf2c;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a6e70, imac 0x1d3110, m1 0x18d660, ios 0x38d63c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a67a0, imac 0x1d1340, m1 0x18bed0, ios 0x38cfdc;

    bool init(char const*);

    // property 467
    double m_startTime;
    // property 473
    double m_targetTime;
    // property 474
    bool m_stopTimeEnabled;
    // property 468
    bool m_dontOverride;
    // property 469
    bool m_ignoreTimeWarp;
    // property 470
    float m_timeMod;
    // property 471
    bool m_startPaused;
    // property 475
    bool m_multiActivate;
    // property 472
    int m_controlType;
}

[[link(android)]]
class ToggleTriggerAction {
    bool m_disabled;
    int m_targetGroupID;
    bool m_activateGroup;
    int m_triggerUniqueID;
    int m_controlID;
    gd::vector<int> m_remapKeys;
}

[[link(android)]]
class TopArtistsLayer : FLAlertLayer, OnlineListDelegate {
    TopArtistsLayer() {
        m_topArtists = nullptr;
        m_listLayer = nullptr;
        m_loadingCircle = nullptr;
        m_page = 0;
    }
    ~TopArtistsLayer() = win inline, m1 0x294794, imac 0x2fc320, ios 0x1a783c {
        auto glm = GameLevelManager::sharedState();
        if (glm->m_onlineListDelegate == this) glm->m_onlineListDelegate = nullptr;
    }

    static TopArtistsLayer* create() = win inline {
        auto ret = new TopArtistsLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x4b2030, m1 0x294b98, imac 0x2fc850, ios 0x1a79b8;
    virtual void registerWithTouchDispatcher() = win 0x425d0, m1 0x2954d8, imac 0x2fd200, ios 0x1a8200;
    virtual void keyBackClicked() = win 0x84650, m1 0x29545c, imac 0x2fd190, ios 0x1a8184;
    virtual void show() = win 0x867a0, m1 0x295fb0, imac 0x2fdd70, ios 0x1a8844;
    virtual void loadListFinished(cocos2d::CCArray*, char const*) = win 0x4b27d0, imac 0x2fd250, m1 0x295518, ios 0x1a8238;
    virtual void loadListFailed(char const*) = win 0x4b2830, m1 0x2955dc, imac 0x2fd310, ios 0x1a829c;
    virtual void setupPageInfo(gd::string, char const*) = win 0x4b2990, imac 0x2fd350, m1 0x295604, ios 0x1a82c4;

    bool isCorrect(char const*);
    void loadPage(int) = win 0x4b2b70, imac 0x2fd970, m1 0x295bc0;
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onNextPage(cocos2d::CCObject* sender) = win 0x4b2fe0;
    void onPrevPage(cocos2d::CCObject* sender) = win 0x4b2ff0;
    void setupLeaderboard(cocos2d::CCArray*) = win 0x4b2840, m1 0x295330, imac 0x2fd050, ios 0x1a8058;
    void updateLevelsLabel();

    cocos2d::CCArray* m_topArtists;
    GJCommentListLayer* m_listLayer;
    LoadingCircle* m_loadingCircle;
    CCMenuItemSpriteExtra* m_nextButton;
    CCMenuItemSpriteExtra* m_prevButton;
    void* m_unkPtr;
    cocos2d::CCLabelBMFont* m_pageInfoLabel;
    int m_itemCount;
    int m_pageStartIdx;
    int m_pageEndIdx;
    int m_unkSize4;
    int m_page;
}

[[link(android)]]
class TOSPopup : FLAlertLayer {
    // virtual ~TOSPopup();
    TOSPopup() {}

    static TOSPopup* create() = win inline {
        auto ret = new TOSPopup();
        if(ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x296930, m1 0x243ea8, imac 0x29c720, ios 0x2e0414;
    virtual void keyBackClicked() = m1 0x2444f4, imac 0x29cda0, ios 0x2e0a24 {}

    void onClose(cocos2d::CCObject* sender);
    void onPrivacy(cocos2d::CCObject* sender);
    void onTOS(cocos2d::CCObject* sender);
}

[[link(android)]]
class TouchToggleAction {
    bool m_disabled;
    int m_targetGroupID;
    bool m_holdMode;
    TouchTriggerType m_touchTriggerType;
    TouchTriggerControl m_touchTriggerControl;
    int m_triggerUniqueID;
    int m_controlID;
    bool m_dualMode;
    gd::vector<int> m_remapKeys;
}

[[link(android)]]
class TransformTriggerGameObject : EffectGameObject {
    // virtual ~TransformTriggerGameObject();

    static TransformTriggerGameObject* create(char const*);

    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4a3630, imac 0x1c7c90, m1 0x1847d4, ios 0x38a2c0;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a3650, imac 0x1c7cc0, m1 0x1847f8, ios 0x38a2e4;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a3950, imac 0x1c80a0, m1 0x184ac0, ios 0x38a574;

    bool init(char const*);

    // property 150
    float m_objectScaleX;
    // property 151
    float m_objectScaleY;
    // property 450
    float m_property450;
    // property 451
    float m_property451;
    // property 133
    bool m_onlyMove;
    // property 153
    bool m_divideX;
    // property 154
    bool m_divideY;
    // property 452
    bool m_relativeRotation;
    // property 577
    bool m_relativeScale;
}

[[link(android)]]
class TriggerControlGameObject : EffectGameObject {
    // virtual ~TriggerControlGameObject();

    static TriggerControlGameObject* create(char const*);

    virtual void triggerObject(GJBaseGameLayer*, int, gd::vector<int> const*) = win 0x4aa7d0, imac 0x1ddd40, m1 0x1965fc, ios 0x390e54;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4aa6e0, imac 0x1ddaf0, m1 0x1963a4, ios 0x390c9c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4aa480, imac 0x1dd1f0, m1 0x195c04, ios 0x390a54;

    bool init(char const*);
    void updateTriggerControlFrame() = win 0x4aa800, m1 0x196494, imac 0x1ddbe0, ios 0x390d78;

    gd::string m_triggerControlFrame;
    // property 580 (The type of a stop trigger for example)
    GJActionCommand m_customTriggerValue;
}

[[link(android)]]
class TriggerEffectDelegate {
    virtual void toggleGroupTriggered(int group, bool activate, gd::vector<int> const& remapKeys, int triggerID, int controlID) {}
    virtual void spawnGroup(int group, bool ordered, double delay, gd::vector<int> const& remapKeys, int triggerID, int controlID) {}
    virtual void spawnObject(GameObject* object, double delay, gd::vector<int> const& remapKeys) {}
}

[[link(android)]]
class TutorialLayer : FLAlertLayer {
    // virtual ~TutorialLayer();

    static TutorialLayer* create() = win 0x4b30b0, m1 0x42e884, imac 0x4c9130, ios 0x1bf0cc;

    virtual bool init() = imac 0x4c9280, m1 0x42e988, ios 0x1bf188, win 0x4b31c0;
    virtual void keyBackClicked() = win 0x4b3de0, m1 0x42f414, imac 0x4c9cc0, ios 0x1bfa70;

    void loadPage(int) = win 0x4b3730, m1 0x42ef60, imac 0x4c9800, ios 0x1bf678;
    void onClose(cocos2d::CCObject* sender) = win 0x4b3d60, m1 0x42ee10, imac 0x4c96e0, ios 0x1bf608;
    void onNext(cocos2d::CCObject* sender) = win 0x4b3710, m1 0x42eea4, imac 0x4c9760, ios 0x1bf660;
    void removeTutorialTexture() = win inline, m1 0x42f3bc, imac 0x4c9c70, ios 0x1bfa18 {
        if (m_page == 0) return;
        cocos2d::CCTextureCache::sharedTextureCache()->removeTextureForKey(cocos2d::CCString::createWithFormat("tutorial_%02d", m_page)->getCString());
    }

    cocos2d::CCLayer* m_tutorialLayer;
    int m_page;
    CCMenuItemSpriteExtra* m_nextButton;
    CCMenuItemSpriteExtra* m_exitButton;
}

[[link(android)]]
class TutorialPopup : FLAlertLayer {
    // virtual ~TutorialPopup();

    static TutorialPopup* create(gd::string);

    virtual void keyBackClicked() = m1 0x4f1a04, imac 0x5bbe00;
    virtual void show() = m1 0x4f1ad8, imac 0x5bbed0;

    void animateMenu();
    void closeTutorial(cocos2d::CCObject* sender);
    bool init(gd::string) = m1 0x4f17a0, imac 0x5bbba0;
    void registerForCallback(cocos2d::SEL_MenuHandler, cocos2d::CCNode*);

    gd::string m_currentSprite;
    bool m_callbackRegistered;
    cocos2d::SEL_MenuHandler m_callbackSelector;
    cocos2d::CCNode* m_targetNode;
    CCMenuItemSpriteExtra* m_closeButton;
}

[[link(android)]]
class UIButtonConfig {
    void reset() = win 0x1779e0;
    void resetOneBtn() = win 0x177a50;

    int m_width;
    int m_height;
    float m_deadzone;
    float m_scale;
    int m_opacity;
    float m_radius;
    bool m_modeB;
    bool m_snap;
    cocos2d::CCPoint m_position;
    bool m_oneButton;
    bool m_player2;
    bool m_split;
}

[[link(android)]]
class UILayer : cocos2d::CCLayerColor {
    UILayer() = ios 0x4ef74 {
        m_pUnknown1 = nullptr;
        m_checkpointMenu = nullptr;
        m_pauseBtn = nullptr;
        m_bUnknown2 = false;
        m_bUnknown3 = false;
        m_p1Jumping = false;
        m_p2Jumping = false;
        m_checkpointBtnDown = false;
        m_p1TouchId = -1;
        m_p2TouchId = -1;
        m_clkTimer = 0.f;
        m_inPlatformer = false;
        m_gameLayer = nullptr;
        m_initialized = false;
        m_uiNodes = nullptr;
        m_dualMode = false;
        m_dpadType = false;
        m_editorMode = false;
        m_controllerButtons = nullptr;
    }
    ~UILayer() = win inline, m1 0x41f2d8, imac 0x4b7300, ios 0x4e518 {
        CC_SAFE_RELEASE(m_uiNodes);
        CC_SAFE_RELEASE(m_controllerButtons);
    }

    static UILayer* create(GJBaseGameLayer*) = win inline, ios 0x4cb8c, imac 0x4b4870, m1 0x41cac4 {
        auto ret = new UILayer();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    static UILayer* get() {
        if (auto gjbgl = GJBaseGameLayer::get()) return gjbgl->m_uiLayer;
        return nullptr;
    }

    virtual void draw() = m1 0x41e594, imac 0x4b6710, ios 0x4dcc8 {}
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x4b55a0, m1 0x41e5e4, imac 0x4b6760, ios 0x4dd08;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x4b5730, imac 0x4b6940, m1 0x41e840, ios 0x4df14;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x4b5750, imac 0x4b6a40, m1 0x41e974, ios 0x4df48;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x41f284, imac 0x4b7280, ios 0x4e4c4;
    virtual void registerWithTouchDispatcher() = win 0x9b1a0, m1 0x41f2a0, imac 0x4b72c0, ios 0x4e4e0;
    virtual void keyBackClicked() = win 0x4b5300, m1 0x41e1a8, imac 0x4b62f0, ios 0x4db78;
    virtual void keyDown(cocos2d::enumKeyCodes) = win 0x4b52e0, imac 0x4b6250, m1 0x41e168, ios 0x4db38;
    virtual void keyUp(cocos2d::enumKeyCodes) = win 0x4b52f0, imac 0x4b62a0, m1 0x41e188, ios 0x4db58;

    void disableMenu() = win inline, ios 0x4d7f4, imac 0x4b5c30, m1 0x41dd58 {
        m_pauseBtn->setEnabled(false);
    }
    void doPause() = win inline, ios 0x4dbf8, imac 0x4b63b0, m1 0x41e268 {
        m_p1TouchId = -1;
        m_p2TouchId = -1;
        this->resetUINodeState();
        if (auto playLayer = GameManager::sharedState()->m_playLayer) {
            playLayer->pauseGame(false);
            playLayer->m_gameState.m_pauseCounter++;
        }
    }
    void editorPlaytest(bool visible) = win inline, ios 0x4d808, imac 0x4b5c50, m1 0x41dd6c {
        this->resetAllButtons();
        this->toggleMenuVisibility(visible);
        this->setVisible(visible);
    }
    void enableEditorMode();
    void enableMenu() = win inline, m1 0x41e370, imac 0x4b64c0, ios 0x4dc44 {
        m_pauseBtn->setEnabled(true);
    }
    void handleKeypress(cocos2d::enumKeyCodes, bool) = ios 0x4d858, win 0x4b4c40, imac 0x4b5d70, m1 0x41de7c;
    bool init(GJBaseGameLayer*) = ios 0x4cc00, win 0x4b3f20, m1 0x41cbc4, imac 0x4b49b0;
    bool isJumpButtonPressed(bool) = imac 0x4b6720, m1 0x41e598;
    void onCheck(cocos2d::CCObject* sender) = ios 0x4d1b0, win 0x4b54d0, imac 0x4b5230, m1 0x41d3e8;
    void onDeleteCheck(cocos2d::CCObject* sender) = win 0x4b5540;
    void onPause(cocos2d::CCObject* sender) = ios 0x4d164, win 0x4b53c0, m1 0x41d39c, imac 0x4b51e0;
    bool processUINodesTouch(GJUITouchEvent, cocos2d::CCTouch*) = win 0x4b5820, imac 0x4b6880, m1 0x41e6ec, ios 0x4de5c;
    bool processUINodeTouch(GJUITouchEvent, int, cocos2d::CCPoint, GJUINode*) = win 0x4b58d0, imac 0x4b6bb0, m1 0x41eb34, ios 0x4dfd0;
    void refreshDpad() = win inline, ios 0x4d47c, imac 0x4b55f0, m1 0x41d780 {}
    void resetAllButtons() = win inline, ios 0x4dcb4, m1 0x41e4b4, imac 0x4b6620 {
        m_p1Jumping = false;
        m_p2Jumping = false;
        m_checkpointBtnDown = false;
        m_p1TouchId = -1;
        m_p2TouchId = -1;
        this->resetUINodeState();
    }
    void resetUINodeState() = ios 0x4d6c4, win 0x4b4aa0, imac 0x4b5990, m1 0x41dac0;
    void toggleCheckpointsMenu(bool) = win 0x4b5340, m1 0x41d454, imac 0x4b52a0, ios 0x4d21c;
    void toggleMenuVisibility(bool visible) = win inline, ios 0x4dc58, m1 0x41e384, imac 0x4b64e0 {
        this->resetUINodeState();
        if (GameManager::sharedState()->getGameVariable("0024")) {
            static_cast<cocos2d::CCNodeRGBA*>(m_pauseBtn->getNormalImage())->setOpacity(visible ? 75 : 0);
            this->updateUINodeVisibility(visible && m_inPlatformer);
        }
    }
    void togglePlatformerMode(bool) = ios 0x4d3a0, imac 0x4b5470, win 0x4b4a30, m1 0x41d60c;
    void updateCheckState() = win 0x4b4840, m1 0x41d494, imac 0x4b52e0, ios 0x4d22c;
    void updateDualMode(bool) = win inline, m1 0x41d6fc, imac 0x4b5560, ios 0x4d438 {
        if (m_dualMode == p0) return;
        m_dualMode = p0;
        this->togglePlatformerMode(m_inPlatformer);
    }
    void updateUINodeVisibility(bool) = win 0x4b4bb0, m1 0x41d9f8, imac 0x4b58b0, ios 0x4d63c;

    // This member is here because rob managed to inhert CCKeyboardDelegate twice
    // in this class, which ended up breaking addresser when trying to hook it.
    // so instead, we removed the second CCKeyboardDelegate from the base class list
    // and put this member here to take the place of its vtable
    void* m_stupidDelegate;

    void* m_pUnknown1;
    cocos2d::CCMenu* m_checkpointMenu;
    CCMenuItemSpriteExtra* m_pauseBtn;
    bool m_bUnknown2;
    bool m_bUnknown3;
    bool m_p1Jumping;
    bool m_p2Jumping;
    bool m_checkpointBtnDown;
    int m_p1TouchId;
    int m_p2TouchId;
    float m_clkTimer;
    bool m_inPlatformer;
    GJBaseGameLayer* m_gameLayer;
    bool m_initialized;
    cocos2d::CCArray* m_uiNodes;
    bool m_dualMode;
    bool m_dpadType;
    bool m_editorMode;
    cocos2d::CCArray* m_controllerButtons;
}

[[link(android)]]
class UIObjectSettingsPopup : SetupTriggerPopup {
    // virtual ~UIObjectSettingsPopup();

    static UIObjectSettingsPopup* create(UISettingsGameObject*, cocos2d::CCArray*) = win 0x451310;

    virtual void onCustomToggleTriggerValue(cocos2d::CCObject* sender) = win 0x451f60, imac 0x566bc0, m1 0x4bc2fc, ios 0x403440;

    bool init(UISettingsGameObject*, cocos2d::CCArray*) = win 0x451420, m1 0x4bb8b4, imac 0x565f70;
}

[[link(android)]]
class UIOptionsLayer : SetupTriggerPopup {
    // virtual ~UIOptionsLayer();

    static UIOptionsLayer* create(bool) = win 0x2995e0, m1 0x245c94, imac 0x29e540, ios 0x2e1d1c;

    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x29c640, imac 0x2a17c0, m1 0x248680, ios 0x2e4038;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x29c790, imac 0x2a1990, m1 0x248840, ios 0x2e41cc;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x29c8c0, imac 0x2a1b30, m1 0x248a2c, ios 0x2e4314;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x248b64, imac 0x2a1c70, ios 0x2e43ac;
    virtual void registerWithTouchDispatcher() = win 0x9b1a0, m1 0x248b80, imac 0x2a1cb0, ios 0x2e43c8;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x29b720, m1 0x248060, imac 0x2a1040, ios 0x2e3ba4;
    virtual void valueDidChange(int, float) = win 0x29bb20, imac 0x2a11d0, m1 0x2481b0, ios 0x2e3cf4;
    virtual float getValue(int) = win 0x29c2a0, imac 0x2a14e0, m1 0x248414, ios 0x2e3ecc;

    GJUINode* getNode(int) = win inline {
        switch (p0) {
            case 0: return m_uiNode1;
            case 1: return m_uiNode2;
            case 2: return m_uiNode3;
            case 3: return m_uiNode4;
            default: return nullptr;
        }
    }
    bool init(bool) = win 0x299720, m1 0x24645c, imac 0x29ef50, ios 0x2e22a4;
    void onReset(cocos2d::CCObject* sender) = win 0x29ba10;
    void onSaveLoad(cocos2d::CCObject* sender) = win 0x29b5f0;
    void toggleUIGroup(int) = win 0x29b430, m1 0x247d74, imac 0x2a0ce0;

    bool m_dual;
    GJUINode* m_uiNode1;
    GJUINode* m_uiNode2;
    GJUINode* m_uiNode3;
    GJUINode* m_uiNode4;
    cocos2d::CCLabelBMFont* m_nameLabel;
    int m_activeUIGroup;
}

[[link(android)]]
class UIPOptionsLayer : SetupTriggerPopup {
    // virtual ~UIPOptionsLayer();
    UIPOptionsLayer() {
        m_touchID = -1;
        m_practiceNode = nullptr;
    }

    static UIPOptionsLayer* create() = win inline {
        auto ret = new UIPOptionsLayer();
        if (ret->init()) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual bool init() = win 0x29e170, m1 0x24aa70, imac 0x2a3c00, ios 0x2e58fc;
    virtual bool ccTouchBegan(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x29eae0, m1 0x24b160, imac 0x2a4350, ios 0x2e5fd0;
    virtual void ccTouchMoved(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x29ebf0, m1 0x24b27c, imac 0x2a4470, ios 0x2e6098;
    virtual void ccTouchEnded(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x29eca0, m1 0x24b3d8, imac 0x2a45e0, ios 0x2e614c;
    virtual void ccTouchCancelled(cocos2d::CCTouch*, cocos2d::CCEvent*) = win 0x71210, m1 0x24b410, imac 0x2a4620, ios 0x2e6184;
    virtual void registerWithTouchDispatcher() = win 0x9b1a0, m1 0x24b42c, imac 0x2a4660, ios 0x2e61a0;
    virtual void onClose(cocos2d::CCObject* sender) = win 0x29e780, m1 0x24afa8, imac 0x2a4170, ios 0x2e5e18;
    virtual void valueDidChange(int, float) = win 0x29e980, m1 0x24b018, imac 0x2a41f0, ios 0x2e5e88;
    virtual float getValue(int) = win 0x29ea80, m1 0x24b0cc, imac 0x2a42c0, ios 0x2e5f3c;

    cocos2d::CCRect getTouchRect() = win inline {
        return { m_practiceNode->getPosition() - cocos2d::CCPoint { 70.0f, 25.0f }, { 140.0f, 50.0f } };
    }
    void onReset(cocos2d::CCObject* sender) = win 0x29e860, m1 0x24af00, imac 0x2a40c0, ios 0x2e5d70;

    int m_touchID;
    cocos2d::CCNode* m_practiceNode;
    cocos2d::CCPoint m_touchPosition;
    cocos2d::CCPoint m_touchDelta;
}

[[link(android)]]
class UISaveLoadLayer : SetupTriggerPopup {
    // virtual ~UISaveLoadLayer();
    UISaveLoadLayer() {
        m_optionsLayer = nullptr;
    }

    static UISaveLoadLayer* create(UIOptionsLayer*) = win inline {
        auto ret = new UISaveLoadLayer();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    bool init(UIOptionsLayer*) = win 0x29c940, m1 0x248bb8, imac 0x2a1cf0;
    void onLoad(cocos2d::CCObject* sender) = win 0x29d120, m1 0x2494ec, imac 0x2a25d0;
    void onSave(cocos2d::CCObject* sender) = win 0x29ce90, m1 0x2492ac, imac 0x2a23a0;

    UIOptionsLayer* m_optionsLayer;
}

[[link(android)]]
class UISettingsGameObject : EffectGameObject {
    // virtual ~UISettingsGameObject();

    static UISettingsGameObject* create();

    virtual bool init() = win 0x4a4720, m1 0x1872d4, imac 0x1cb1b0, ios 0x38b2f0;
    virtual void customObjectSetup(gd::vector<gd::string>&, gd::vector<void*>&) = win 0x4a4b40, imac 0x1cc0f0, m1 0x187f74, ios 0x38b69c;
    virtual gd::string getSaveString(GJBaseGameLayer*) = win 0x4a4790, imac 0x1cb200, m1 0x187324, ios 0x38b340;

    // property 385
    int m_xRef;
    // property 386
    int m_yRef;
    // property 387
    bool m_xRelative;
    // property 388
    bool m_yRelative;
}

[[link(android), depends(GJTransformState)]]
class UndoObject : cocos2d::CCObject {
    UndoObject() = ios 0x368734 {
        m_objectCopy = nullptr;
        m_command = (UndoCommand)0;
        m_objects = nullptr;
        m_redo = false;
        m_undoTransform = false;
    }
    ~UndoObject() = win inline, m1 0xd9518, imac 0xf52d0, ios 0x36521c {
        CC_SAFE_RELEASE(m_objectCopy);
        CC_SAFE_RELEASE(m_objects);
    }

    static UndoObject* create(GameObject* object, UndoCommand command) = win inline, m1 0xc7594, imac 0xe0290, ios 0x359568 {
        auto ret = new UndoObject();
        if (ret->init(object, command)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static UndoObject* createWithArray(cocos2d::CCArray* array, UndoCommand command) = win inline, m1 0xca030, imac 0xe2fa0, ios 0x35b554 {
        auto ret = new UndoObject();
        if (ret->init(array, command)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }
    static UndoObject* createWithTransformObjects(cocos2d::CCArray*, UndoCommand);

    bool init(cocos2d::CCArray* array, UndoCommand command) = win inline {
        if (array) {
            m_objects = cocos2d::CCArray::create();
            m_objects->addObjectsFromArray(array);
            m_objects->retain();
        }
        m_command = command;
        return true;
    }
    bool init(GameObject* object, UndoCommand command) = win inline {
        if (object) {
            m_objectCopy = GameObjectCopy::create(object);
            m_objectCopy->retain();
        }
        m_command = command;
        return true;
    }
    bool initWithTransformObjects(cocos2d::CCArray*, UndoCommand);
    void setObjects(cocos2d::CCArray*);

    GameObjectCopy* m_objectCopy;
    UndoCommand m_command;
    cocos2d::CCArray* m_objects;
    bool m_redo;
    bool m_undoTransform;
    GJTransformState m_transformState;
}

[[link(android)]]
class UpdateAccountSettingsPopup : FLAlertLayer, GJAccountSettingsDelegate {
    UpdateAccountSettingsPopup() {
        m_updateSuccess = false;
        m_textArea = nullptr;
        m_loadingCircle = nullptr;
        m_closeButton = nullptr;
    }
    ~UpdateAccountSettingsPopup() = win inline, m1 0x2380a4, imac 0x28f9a0, ios 0x2d77a4 {
        auto gjam = GJAccountManager::sharedState();
        if (gjam->m_accountSettingsDelegate == this) gjam->m_accountSettingsDelegate = nullptr;
    }

    static UpdateAccountSettingsPopup* create(GJAccountSettingsLayer*, int, int, int, gd::string, gd::string, gd::string) = win inline, m1 0x237c78, imac 0x28f4f0, ios 0x2d7418 {
        auto ret = new UpdateAccountSettingsPopup();
        if (ret->init(p0, p1, p2, p3, p4, p5, p6)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = win 0x28db10, imac 0x2905c0, m1 0x238b68, ios 0x2d7f70;
    virtual void updateSettingsFinished() = win 0x28d790, imac 0x2903b0, m1 0x238964, ios 0x2d7dc0;
    virtual void updateSettingsFailed() = win 0x28d890, imac 0x2904d0, m1 0x238a7c, ios 0x2d7ea4;

    bool init(GJAccountSettingsLayer*, int, int, int, gd::string, gd::string, gd::string) = win 0x28d200, m1 0x2383a0, imac 0x28fd70, ios 0x2d7860;
    void onClose(cocos2d::CCObject* sender) = win 0x28d950;

    bool m_updateSuccess;
    GJAccountSettingsLayer* m_settingsLayer;
    TextArea* m_textArea;
    LoadingCircle* m_loadingCircle;
    CCMenuItemSpriteExtra* m_closeButton;
}

[[link(android)]]
class UploadActionDelegate {
    virtual void uploadActionFinished(int, int) {}
    virtual void uploadActionFailed(int, int) {}
}

[[link(android)]]
class UploadActionPopup : FLAlertLayer {
    // virtual ~UploadActionPopup();

    static UploadActionPopup* create(UploadPopupDelegate* delegate, gd::string str) = win 0x28db20, m1 0x238c74, imac 0x290720, ios 0x2d7fb4;

    virtual void keyBackClicked() = win 0x28e320, m1 0x239564, imac 0x291070, ios 0x2d86e0;

    void closePopup() = win inline, m1 0x239528, imac 0x291040, ios 0x2d86a4 {
        this->setKeypadEnabled(false);
        this->removeFromParentAndCleanup(true);
    }
    bool init(UploadPopupDelegate* delegate, gd::string str) = win 0x28dc60, imac 0x2908c0, m1 0x238df0, ios 0x2d80e0;
    void onClose(cocos2d::CCObject* sender) = win 0x28e2d0, m1 0x23920c, imac 0x290d20, ios 0x2d8478;
    void showFailMessage(gd::string message) = win 0x28e1d0, m1 0x2393d4, imac 0x290ee0, ios 0x2d85c8;
    void showSuccessMessage(gd::string message) = win 0x28e0c0, m1 0x23926c, imac 0x290d70, ios 0x2d84d8;

    UploadPopupDelegate* m_delegate;
    TextArea* m_textArea;
    LoadingCircle* m_loadingCircle;
    CCMenuItemSpriteExtra* m_closeButton;
    bool m_succeeded;
}

[[link(android)]]
class UploadListPopup : FLAlertLayer, ListUploadDelegate {
    UploadListPopup() {
        m_levelList = nullptr;
        m_textArea = nullptr;
        m_loadingCircle = nullptr;
        m_backButton = nullptr;
    }
    ~UploadListPopup() = win inline, m1 0x2e4420, imac 0x34fed0, ios 0x2483e8 {
        CC_SAFE_RELEASE(m_levelList);
        auto glm = GameLevelManager::sharedState();
        if (glm->m_listUploadDelegate == this) glm->m_listUploadDelegate = nullptr;
    }

    static UploadListPopup* create(GJLevelList*) = win inline {
        auto ret = new UploadListPopup();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = m1 0x2e50c0, imac 0x350cc0, ios 0x248e44 {}
    virtual void show() = win 0x2f7220, m1 0x2e5060, imac 0x350c50, ios 0x248de4;
    virtual void listUploadFinished(GJLevelList*) = win 0x2f6cc0, imac 0x350750, m1 0x2e4b64, ios 0x24893c;
    virtual void listUploadFailed(GJLevelList*, int) = win 0x2f6e90, imac 0x350970, m1 0x2e4d68, ios 0x248b30;

    bool init(GJLevelList*) = win 0x2f6780, m1 0x2e46b4, imac 0x350240;
    void onBack(cocos2d::CCObject* sender) = win 0x2f7280;
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onReturnToList(cocos2d::CCObject* sender) = win 0x2f71d0;

    GJLevelList* m_levelList;
    TextArea* m_textArea;
    LoadingCircle* m_loadingCircle;
    CCMenuItemSpriteExtra* m_backButton;
}

[[link(android)]]
class UploadMessageDelegate {
    virtual void uploadMessageFinished(int) {}
    virtual void uploadMessageFailed(int) {}
}

[[link(android)]]
class UploadPopup : FLAlertLayer, LevelUploadDelegate {
    UploadPopup() {
        m_level = nullptr;
        m_textArea = nullptr;
        m_loadingCircle = nullptr;
        m_backButton = nullptr;
    }
    ~UploadPopup() = win inline, m1 0x21aee0, imac 0x26fae0, ios 0x2755dc {
        CC_SAFE_RELEASE(m_level);
        auto glm = GameLevelManager::sharedState();
        if (glm->m_levelUploadDelegate == this) glm->m_levelUploadDelegate = nullptr;
    }

    static UploadPopup* create(GJGameLevel*) = win inline {
        auto ret = new UploadPopup();
        if (ret->init(p0)) {
            ret->autorelease();
            return ret;
        }
        delete ret;
        return nullptr;
    }

    virtual void keyBackClicked() = m1 0x21b974, imac 0x2706b0, ios 0x275ffc {}
    virtual void show() = win 0x2f7220, m1 0x21b914, imac 0x270640, ios 0x275f9c;
    virtual void levelUploadFinished(GJGameLevel*) = win 0x478710, imac 0x2701e0, m1 0x21b4e4, ios 0x275ba0;
    virtual void levelUploadFailed(GJGameLevel*) = win 0x4788e0, imac 0x270430, m1 0x21b71c, ios 0x275dc8;

    bool init(GJGameLevel*) = win 0x478140, m1 0x21afc4, imac 0x26fc40;
    void onBack(cocos2d::CCObject* sender) = win 0x478bb0;
    void onClose(cocos2d::CCObject* sender) = win 0x84620;
    void onReturnToLevel(cocos2d::CCObject* sender) = win 0x478ac0;

    GJGameLevel* m_level;
    TextArea* m_textArea;
    LoadingCircle* m_loadingCircle;
    CCMenuItemSpriteExtra* m_backButton;
}

[[link(android)]]
class UploadPopupDelegate {
    virtual void onClosePopup(UploadActionPopup*) {}
}

[[link(android)]]
class URLCell : TableViewCell {
    // virtual ~URLCell();
    URLCell(char const*, float, float);

    virtual bool init() = win 0x3c7f0, m1 0x1f5dc8, imac 0x2476e0, ios 0x115ca4;
    virtual void draw() = win 0xad710, imac 0x247750, m1 0x1f5e38, ios 0x115d00;

    void loadFromObject(CCURLObject*) = win 0xbf530, m1 0x1e5cbc, imac 0x235b20, ios 0x108a64;
    void onURL(cocos2d::CCObject* sender) = win 0xbf760;
    void updateBGColor(int);

    CCURLObject* m_urlObject;
}

[[link(android)]]
class URLViewLayer : GJDropDownLayer {
    // virtual ~URLViewLayer();

    static URLViewLayer* create(gd::string, cocos2d::CCArray*) = win 0x29d3b0;

    bool init(gd::string, cocos2d::CCArray*);

    cocos2d::CCArray* m_urlObjects;
}

[[link(android)]]
class UserInfoDelegate {
    virtual void getUserInfoFinished(GJUserScore*) {}
    virtual void getUserInfoFailed(int) {}
    virtual void userInfoChanged(GJUserScore*) {}
}

[[link(android)]]
class UserListDelegate {
    virtual void getUserListFinished(cocos2d::CCArray*, UserListType) {}
    virtual void getUserListFailed(UserListType, GJErrorCode) {}
    virtual void userListChanged(cocos2d::CCArray*, UserListType) {}
    virtual void forceReloadList(UserListType) {}
}

[[link(android)]]
class VideoOptionsLayer : FLAlertLayer {
    // virtual ~VideoOptionsLayer();

    static VideoOptionsLayer* create() = ios 0xf05cc, imac 0x7853c0, m1 0x699514, win 0x360cd0;

    virtual bool init() = win 0x360df0, imac 0x789140, m1 0x69d004, ios 0xf2d28;
    virtual void keyBackClicked() = win 0x362c60, m1 0x69eb08, imac 0x78adf0, ios 0xf4440;

    CCMenuItemToggler* createToggleButton(gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, cocos2d::CCPoint, float, float, bool, cocos2d::CCArray*) = win 0x362c70, m1 0x69de9c, imac 0x78a0d0, ios 0xf3ab8;
    void onAdvanced(cocos2d::CCObject* sender) = win 0x362130, m1 0x69e6f4, imac 0x78a980, ios 0xf4154;
    void onApply(cocos2d::CCObject* sender) = win 0x362720, m1 0x69e330, imac 0x78a590, ios 0xf3dcc;
    void onBorderless(cocos2d::CCObject* sender) = win 0x362280;
    void onBorderlessFix(cocos2d::CCObject* sender) = win 0x3622a0; //ios 0xf3d24
    void onClose(cocos2d::CCObject* sender) = win 0x362be0;
    void onFullscreen(cocos2d::CCObject* sender) = win 0x362260, m1 0x69e0f8, imac 0x78a300, ios 0xf3d14;
    void onInfo(cocos2d::CCObject* sender) = m1 0x69ea28, imac 0x78ad30;
    void onResolutionNext(cocos2d::CCObject* sender) = win 0x3623a0;
    void onResolutionPrev(cocos2d::CCObject* sender) = win 0x362390;
    void onTextureQualityNext(cocos2d::CCObject* sender) = win 0x3622d0;
    void onTextureQualityPrev(cocos2d::CCObject* sender) = win 0x3622c0;
    void reloadMenu();
    void toggleResolution() = win 0x3624c0, m1 0x69e81c, imac 0x78ab00, ios 0xf4234;
    void updateResolution(int) = win 0x3623b0, m1 0x69e634, imac 0x78a8b0, ios 0xf4094;
    void updateTextureQuality(int) = win 0x3622e0;

    CCMenuItemSpriteExtra* m_prevResolutionBtn;
    CCMenuItemSpriteExtra* m_nextResolutionBtn;
    cocos2d::CCLabelBMFont* m_windowedResolutionLabel;
    cocos2d::CCLabelBMFont* m_selectedResolutionLabel;
    cocos2d::CCLabelBMFont* m_qualityLabel;
    int m_textureQuality;
    cocos2d::CCArray* m_availableResolutions;
    CCMenuItemToggler* m_borderlessToggle;
    cocos2d::CCLabelBMFont* m_borderlessLabel;
    CCMenuItemToggler* m_fixToggle;
    cocos2d::CCLabelBMFont* m_fixLabel;
    bool m_windowed;
    bool m_borderless;
    bool m_fix;
    int m_currentResolution;
}

[[link(android)]]
class WorldLevelPage : FLAlertLayer {
    // virtual ~WorldLevelPage();

    static WorldLevelPage* create(GJGameLevel*, GJWorldNode*);

    virtual void keyBackClicked() = m1 0x33f3cc, imac 0x3b3c50;
    virtual void show() = imac 0x3b3b10, m1 0x33f284;

    bool init(GJGameLevel*, GJWorldNode*) = m1 0x33dfa0, imac 0x3b27f0;
    void onClose(cocos2d::CCObject* sender);
    void onInfo(cocos2d::CCObject* sender);
    void onPlay(cocos2d::CCObject* sender);
    void onSong(cocos2d::CCObject* sender);

    GJWorldNode* m_worldNode;
    GJGameLevel* m_level;
}

[[link(android)]]
class WorldSelectLayer : cocos2d::CCLayer, BoomScrollLayerDelegate {
    // virtual ~WorldSelectLayer();

    static WorldSelectLayer* create(int) = m1 0x33a7a4, imac 0x3aed30;
    static cocos2d::CCScene* scene(int) = m1 0x33a6c0, imac 0x3aec20;

    virtual void onExit() = imac 0x3b0b30, m1 0x33c594;
    virtual void keyBackClicked() = imac 0x3b0a50, m1 0x33c4b4;
    virtual void scrollLayerWillScrollToPage(BoomScrollLayer*, int) = imac 0x3b0960, m1 0x33c36c;
    virtual void scrollLayerScrolledToPage(BoomScrollLayer*, int) = imac 0x3b0870, m1 0x33c224;
    virtual void scrollLayerMoved(cocos2d::CCPoint) = imac 0x3b0b80, m1 0x33c5e4;

    void animateInActiveIsland();
    cocos2d::ccColor3B colorForPage(int);
    cocos2d::ccColor3B getColorValue(int, int, float);
    void goToPage(int, bool);
    bool init(int) = m1 0x33a868, imac 0x3aee20;
    void onBack(cocos2d::CCObject* sender);
    void onFreeLevels(cocos2d::CCObject* sender);
    void onGarage(cocos2d::CCObject* sender);
    void onNext(cocos2d::CCObject* sender);
    void onPrev(cocos2d::CCObject* sender);
    void setupWorlds() = imac 0x3af740, m1 0x33b13c;
    void showCompleteDialog() = m1 0x33b724, imac 0x3afd60;
    void tryShowAd();
    void unblockButtons();
    void updateArrows();

    cocos2d::CCSprite* m_background;
    BoomScrollLayer* m_scrollLayer;
    CCMenuItemSpriteExtra* m_arrowLeft;
    CCMenuItemSpriteExtra* m_arrowRight;
    bool m_cleanupSprites;
    bool m_enteringLevel;
    GJWorldNode* m_worldNode;
    bool m_buttonsLocked;
}

